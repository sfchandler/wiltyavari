<?php


use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\SMTP;
use PHPMailer\PHPMailer\Exception;


$gl_day_hours = 0;
$gl_holiday_hours = 0;
$gl_extra_hours = 0;
$gl_sat_extra_hours = 0;
$gl_sun_extra_hours = 0;
$gl_after_hours = 0;
$gl_double_time_hours = 0;
$gl_night_hours = 0;
$gl_early_morning_hours = 0;
$gl_afternoon_hours = 0;
$gl_saturday_hours = 0;
$gl_satAfter_hours = 0;
$gl_sunday_double_time_hours = 0;
$gl_sunday_hours = 0;
$gl_sunAfter_hours = 0;
$gl_total_hours = 0;
$gl_avg_normal_hours = 0;
$gl_period_overtime_hours = 0;
$gl_total_period_overtime_hours = 0;

define('MAIN_DOMAIN_URL', 'https://www.outapay.com.au');
define('DOMAIN_URL', 'https://www.wiltyavari.outapay.com.au');
define('DOMAIN_NAME', 'Wiltyavari');
define('COMPANY_AND_ABN', 'Wiltyavari ABN 11 111 111 111');
define('COMPANY_ADDRESS', '');
define('COMPANY_EMAIL_AND_PHONE', 'E info@outapay.com.au | W outapay.com.au');
define('OUTLOOK_SERVER_NAME','outlook.office365.com');
define('IMAP_SERVER_NAME','imap.gmail.com');

define('DEFAULT_EMAIL_USERNAME', openssl_decrypt('RxLGCxBtXp2wE0tEM0T1PpKky4E=', "AES-128-CTR", "Ou#0209TsndSaen^ndsHdfWy"));
define('DEFAULT_EMAIL_PASSWORD', openssl_decrypt('RBzfIjlLKb2mcmtKIQ/NQv3U29v7BHhscbunvCLe86MprcJjT4yK4x/jZIg=', "AES-128-CTR", "Ou#0209TsndSaen^ndsHdfWy"));
define('DEFAULT_EMAIL', openssl_decrypt('aDb9LzpIZY+MNHESBhbZJrWD4ZrIJQ==', "AES-128-CTR", "Ou#0209TsndSaen^ndsHdfWy"));
define('ADMIN_EMAIL', 'admin@wiltyavari.outapay.com.au');
define('ACCOUNTS_EMAIL', openssl_decrypt('', "AES-128-CTR", "Ou#0209TsndSaen^ndsHdfWy"));
define('SALES_EMAIL', openssl_decrypt(' ', "AES-128-CTR", "Ou#0209TsndSaen^ndsHdfWy"));
define('SALES_EMAIL_PASSWORD', openssl_decrypt(' ', "AES-128-CTR", "Ou#0209TsndSaen^ndsHdfWy"));
define('CELL_CAST_APP_KEY', openssl_decrypt('RRzDBgllT5vbdWZAExSXaeaItY2RaX46Kt+82lLCpqNSy/ApKJWZ6Q==', "AES-128-CTR", "Ou#0209TsndSaen^ndsHdfWy"));
//define('CELL_CAST_APP_KEY', openssl_decrypt('YyDFIihjf6asKE86Iw3pOZiFxcfgPhg7eq6U2yjMsJkzvtsgN8LYxlblSZXlIE2Mc18M2eSMoOv8tF7foRdZmTU7u37yX86WjOLzUYkX33L0sYXAUcxIRPqQJ5KXbdwf6cCqWbDAWTCSghUhDdCF4mRf3IZhomnS3sApqZgCV8GvtwYi68BjpHWON544lVTGsccCyN9K996jfy5bh8VaI+52cduYU4lZXBw4U51ycy2ljLhUxNI+U9b/moCesSVMDleLuwANT9ACDvPFjmM5hJRhLWYbm98AqJjxCCf0bjzjEd7nE2WpKQ==', "AES-128-CTR", "Ou#0209TsndSaen^ndsHdfWy"));
define('JOBBOARD_EMAIL_ADDRESS','jobboardapplications@wiltyavari.outapay.com.au');
define('JOBBOARD_EMAIL_PASSWORD', openssl_decrypt('', "AES-128-CTR", "Ou#0209TsndSaen^ndsHdfWy"));
define('INBOX_EMAIL_ADDRESS','resumewiltyavari@gmail.com');
define('INBOX_EMAIL_PASSWORD','');

define('SecondsPerDay', 86400);
define('SecondsPerHour', 3600);
define('SecondsPerMinute', 60);

define ('CLIENT_ID', 'luor5obmxsxunnn4m7ecylpaz4');
define ('CLIENT_SECRET', 'dkwvze2wrg6enhdepborcf55aeonep22p23avuna3dfivhgsbjba');
define ('CALLBACK_URL', 'https://wiltyavari.outapay.com.au/oauth2/index.php');
define('JA_AUTH_URL','https://api.jobadder.com/v2/');
define('JA_PLACEMENTS', 'placements');
define('JA_API_URL','https://api.jobadder.com/v2/');
define('JA_GET_PLACEMENTS','placements/');


function getLoggedInSessionId($mysqli, $username)
{
    $stmt = $mysqli->prepare("SELECT session_id FROM login_monitor WHERE username = ?") or die($mysqli->error);
    $stmt->bind_param("s", $username) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->session_id;
    } else {
        return null;
    }
}

function updateLoggedInTime($mysqli, $user_id, $user_name, $sessionId, $loggedInDate, $loginStatus)
{
    $remote_ip = $_SERVER['REMOTE_ADDR'];
    $sql = $mysqli->prepare("INSERT INTO login_monitor(user_id,username,session_id,remote_ip,actionTime,status) VALUES(?,?,?,?,?,?)") or die($mysqli->error);
    $sql->bind_param("isssss", $user_id, $user_name, $sessionId, $remote_ip, $loggedInDate, $loginStatus) or die($mysqli->error);
    $sql->execute();
    $nrows = $sql->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return false;
    }
}

function generate_hash($password)
{
    $salt = substr(str_replace('+', '.', base64_encode(md5(mt_rand(), true))), 0, 16);
    $rounds = 10000;
    $crypt = crypt($password, sprintf('$6$rounds=%d$%s$', $rounds, $salt));
    return $crypt;
}

function extract_hash($given_hash, $password)
{
    $parts = explode('$', $given_hash ?? '');
    $test_hash = crypt($password, sprintf('$%s$%s$%s$', $parts[1], $parts[2], $parts[3]));
    return $test_hash;
}


function updateSupervisorLoggedInTime($mysqli, $user_name, $candidateId, $loggedInDate, $loginStatus)
{
    $sql = $mysqli->prepare("INSERT INTO supervisor_login_monitor(username,candidateId,actionTime,status) VALUES(?,?,?,?)") or die($mysqli->error);
    $sql->bind_param("ssss", $user_name, $candidateId, $loggedInDate, $loginStatus) or die($mysqli->error);
    $sql->execute();
    $nrows = $sql->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return false;
    }
}

function updateCasualLoggedInTime($mysqli, $user_name, $candidateId, $loggedInDate, $loginStatus)
{
    $sql = $mysqli->prepare("INSERT INTO casual_login_monitor(username,candidateId,actionTime,status) VALUES(?,?,?,?)") or die($mysqli->error);
    $sql->bind_param("ssss", $user_name, $candidateId, $loggedInDate, $loginStatus) or die($mysqli->error);
    $sql->execute();
    $nrows = $sql->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return false;
    }
}

function getAvatarImage($mysqli, $userName)
{
    $stmt = $mysqli->prepare("SELECT avatar_path FROM ch_users WHERE username = ?") or die($mysqli->error);
    $stmt->bind_param("s", $userName) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->avatar_path;
    } else {
        return 'default.png';
    }
}

function characterConvertion($mysqli, $text)
{
    $charset = mysqli_character_set_name($mysqli);  //only works for mysqli DB connection
    printf("To check your character set but not necessary %s\n", $charset);

    $Text = str_replace('"', '&quot;', $text);  //double quotes for mailto: emails.
    $von = array("ä", "ö", "ü", "ß", "Ä", "Ö", "Ü", " ", "é");  //to correct double whitepaces as well
    $zu = array("&auml;", "&ouml;", "&uuml;", "&szlig;", "&Auml;", "&Ouml;", "&Uuml;", "&nbsp;", "&#233;");
    $Text = str_replace($von, $zu, $Text);
    return $Text . "<br>";
}

function matchExistingEmail($mysqli, $matchedEmail)
{
    $stmt = $mysqli->prepare("SELECT 
					  reg_candidate.firstName,
					  reg_candidate.lastName,
					  reg_candidate.homeAddress,
					  reg_candidate.postcode,
					  reg_candidate.mobile,
					  reg_candidate.email,
					  reg_candidate.messageId,
  					  reg_candidate.candidateId
					FROM
					  reg_candidate
					  INNER JOIN candidate ON (reg_candidate.candidateId = candidate.candidateId)
					WHERE
					  reg_candidate.email = ? OR 
					  candidate.email = ?") or die ($mysqli->error);
    $stmt->execute() or die($mysqli->error);

}

function extractEmailFromContent($contents)
{
    //$pattern="/(?:[a-z0-9!#$%&'*+=?^_{|}~-]+(?:\.[a-z0-9!#$%&'*+=?^_`{|}~-]+)*|\"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/";
    $pattern = '/[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b/i';
    preg_match_all($pattern, $contents, $matches);
    $matchedEmail;
    foreach ($matches[0] as $email) {
        $matchedEmail = $email;
    }
    return $matchedEmail;
}

function get_numerics($str)
{
    preg_match_all('/\d+/', $str, $matches);
    return $matches[0];
}

function getCandidateId($mysqli, $email)
{
    $stmt = $mysqli->prepare("SELECT candidateId FROM candidate WHERE email = ?") or die($mysqli->error);
    $stmt->bind_param("s", $email) or die($mysqli->error);
    $stmt->execute();
    $stmt->bind_result($candidateId);
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    if ($num_of_rows > 0) {
        return $candidateId;
    } else {
        return getNewCandidateId($mysqli);
    }
}

function getCandidateIdByEmailAndMobile($mysqli, $email, $mobile)
{
    $stmt = $mysqli->prepare("SELECT candidateId FROM candidate WHERE email = ? AND mobileNo = ?") or die($mysqli->error);
    $stmt->bind_param("ss", $email, $mobile) or die($mysqli->error);
    $stmt->execute();
    $stmt->bind_result($candidateId);
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    if ($num_of_rows > 0) {
        return $candidateId;
    } else {
        return getNewCandidateId($mysqli);
    }
}

function validateCandidateByEmail($mysqli, $email)
{
    $stmt = $mysqli->prepare("SELECT candidateId FROM candidate WHERE email = ?") or die($mysqli->error);
    $stmt->bind_param("s", $email) or die($mysqli->error);
    $stmt->execute();
    $stmt->bind_result($candidateId);
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function getCandidateIdByAxiomNo($mysqli, $axiomNo)
{
    $stmt = $mysqli->prepare("SELECT candidateId FROM candidate WHERE axiomno = ?") or die($mysqli->error);
    $stmt->bind_param("i", $axiomNo) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->candidateId;
    } else {
        return null;
    }
}

function getCandidateDOBById($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT dob FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->dob;
    } else {
        return null;
    }
}

function getCandidateFirstNameByAxiomNo($mysqli, $axiomNo)
{
    $stmt = $mysqli->prepare("SELECT firstName FROM candidate WHERE axiomno = ?") or die($mysqli->error);
    $stmt->bind_param("i", $axiomNo) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->firstName;
    } else {
        return null;
    }
}

function getCandidateLastNameByAxiomNo($mysqli, $axiomNo)
{
    $stmt = $mysqli->prepare("SELECT lastName FROM candidate WHERE axiomno = ?") or die($mysqli->error);
    $stmt->bind_param("i", $axiomNo) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->lastName;
    } else {
        return null;
    }
}

function getCandidateFirstNameByCandidateId($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT firstName FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->firstName;
    } else {
        return null;
    }
}

function getCandidateLastNameByCandidateId($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT lastName FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->lastName;
    } else {
        return null;
    }
}

function getCandidateFormatedFullName($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT firstName,lastName FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->bind_result($firstName, $lastName) or die($mysqli->error);
    $stmt->fetch();
    return $fullName = $lastName . ', ' . $firstName;
}

function getCandidateFullName($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT firstName,lastName FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->bind_result($firstName, $lastName) or die($mysqli->error);
    $stmt->fetch();
    return $fullName = $firstName . ' ' . $lastName;
}

function getNickNameById($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT nickname FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->nickname;
    } else {
        return null;
    }
}

function getPINNoById($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT clockPin FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->clockPin;
    } else {
        return null;
    }
}

function getGenderById($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT sex FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->sex;
    } else {
        return null;
    }
}

function getLamattinaId($mysqli, $canId)
{
    $stmt = $mysqli->prepare("SELECT lamattinaId FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $canId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->lamattinaId;
    } else {
        return null;
    }
}

function getCandidateAddressById($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT address FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->address;
    } else {
        return null;
    }
}

function getCandidateStreetNameById($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT street_name FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->street_name;
    } else {
        return null;
    }
}

function getCandidateStreetNumberById($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT street_number FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->street_number;
    } else {
        return null;
    }
}

function getCandidateSuburb($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT suburb FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->suburb;
    } else {
        return null;
    }
}

function getCandidateState($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT state FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->state;
    } else {
        return null;
    }
}

function getCandidatePostcode($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT postcode FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->postcode;
    } else {
        return null;
    }
}

function getCandidateStreetById($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT street_number FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->street_number;
    } else {
        return null;
    }
}

function retrieveCandidateEmailContent($mysqli, $messageid, $accountName)
{
    $tableAttachment = getTableAttachment($mysqli, $accountName);
    $stmt = $mysqli->prepare("SELECT contents FROM {$tableAttachment} WHERE messageid = ?") or die($mysqli->error);
    $stmt->bind_param("s", $messageid) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->contents;
    } else {
        return null;
    }
}

function retrieveResumeMobile($mysqli, $messageid, $accountName)
{
    $tableEmail = getTableEmail($mysqli, $accountName);
    $stmt = $mysqli->prepare("SELECT phone_number FROM {$tableEmail} WHERE messageid = ?") or die($mysqli->error);
    $stmt->bind_param("s", $messageid) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->phone_number;
    } else {
        return null;
    }
}

function retrieveCandidateMsgBody($mysqli, $messageid, $accountName)
{
    $tableEmail = getTableEmail($mysqli, $accountName);
    $stmt = $mysqli->prepare("SELECT msgbody FROM {$tableEmail} WHERE messageid = ?") or die($mysqli->error);
    $stmt->bind_param("s", $messageid) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->msgbody;
    } else {
        return null;
    }
}

function get_string_between($string, $start, $end)
{
    $string = ' ' . $string;
    $ini = strpos($string, $start);
    if ($ini == 0) return '';
    $ini += strlen($start);
    $len = strpos($string, $end, $ini) - $ini;
    return substr($string, $ini, $len);
}

function retrieveCandidateName($mysqli, $messageid, $accountName)
{
    $tableEmail = getTableEmail($mysqli, $accountName);
    $stmt = $mysqli->prepare("SELECT mailfrom FROM {$tableEmail} WHERE messageid = ?") or die($mysqli->error);
    $stmt->bind_param("s", $messageid) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->mailfrom;
    } else {
        return null;
    }
}

function getAttachmentList($mysqli, $messageid, $accountName)
{
    $tableAttachmentPath = getTableAttachmentPath($mysqli, $accountName);
    $mailatt = $mysqli->prepare("SELECT messageid,filepath FROM {$tableAttachmentPath} WHERE messageid = ?") or die($mysqli->error);
    $mailatt->bind_param("s", $messageid);
    $mailatt->execute();
    $mailatt->bind_result($messageid, $filepath) or die($mysqli->error);
    $attr = array();
    while ($mailatt->fetch()) {
        $fpath = explode('/', $filepath ?? '');
        $filename = $fpath[2];
        $path_parts = pathinfo($filename);
        if ($path_parts['extension'] == 'pdf') {
            $extension = 'pdf';
        } else if ($path_parts['extension'] == 'doc') {
            $extension = 'doc';
        } else if ($path_parts['extension'] == 'docx') {
            $extension = 'docx';
        } else if ($path_parts['extension'] == 'txt') {
            $extension = 'txt';
        }
        //$row = array('messageid' => $messageid, 'filepath' => $filepath, 'filename' => $filename, 'filetype' => $extension);
        $attr[] = array('messageid' => $messageid, 'filepath' => $filepath, 'filename' => $filename, 'filetype' => $extension);;
    }
    return $attr;
}

function getHealthResumePath($mysqli, $tableName, $messageId)
{
    $stmt = $mysqli->prepare("SELECT messageid,filepath FROM {$tableName} WHERE messageid = ?") or die($mysqli->error);
    $stmt->bind_param("s", $messageId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->filepath;
    } else {
        return null;
    }

}

function getRegisteredCasualsInformation($mysqli, $startDate, $endDate, $consultant_id)
{
    if ($consultant_id == 'All') {
        $stmt = $mysqli->prepare("SELECT 
                                  candidate.firstName,
                                  candidate.lastName,
                                  candidate.candidateId,
                                  candidate.mobileNo,
                                  candidate.email,
                                  candidate.consultantId,
                                  candidate.created_at,
                                  candidate.empStatus,
                                  candidate.auditStatus,
                                  candidate.screenDate,
                                  candidate.reg_pack_status,
                                  candidate.casual_status_update,
                                  candidate.casual_status,
                                  candidate.ref_code_applied,
                                  candidate.rec_status,
                                  candidate.autoId,
                                  candidate.jb_id,
                                  candidate.sex
                                FROM
                                  candidate
                                WHERE 
                                    created_at BETWEEN ? AND ?
                                ORDER BY created_at DESC");
        $stmt->bind_param("ss", $startDate, $endDate) or die($mysqli->error);
    } else {
        $stmt = $mysqli->prepare("SELECT 
                                  candidate.firstName,
                                  candidate.lastName,
                                  candidate.candidateId,
                                  candidate.mobileNo,
                                  candidate.email,
                                  candidate.consultantId,
                                  candidate.created_at,
                                  candidate.empStatus,
                                  candidate.auditStatus,
                                  candidate.screenDate,
                                  candidate.reg_pack_status,
                                  candidate.casual_status_update,
                                  candidate.casual_status,
                                  candidate.ref_code_applied,
                                  candidate.rec_status,
                                  candidate.autoId,
                                  candidate.jb_id,
                                  candidate.sex
                                FROM
                                  candidate
                                WHERE 
                                    created_at BETWEEN ? AND ?
                                AND
                                    candidate.consultantId = ?
                                ORDER BY created_at DESC");
        $stmt->bind_param("ssi", $startDate, $endDate, $consultant_id) or die($mysqli->error);
    }
    $stmt->execute();
    $stmt->bind_result($firstName, $lastName, $candidateId, $mobileNo, $email, $consultantId, $created_at, $empStatus, $auditStatus, $screenDate, $reg_pack_status, $casual_status_update, $casual_status, $ref_code_applied, $rec_status, $autoId, $jb_id, $sex);
    $stmt->store_result();
    $regsArray = array();
    while ($stmt->fetch()) {
        $regsArray[] = array('firstName' => $firstName, 'lastName' => $lastName, 'candidateId' => $candidateId, 'mobileNo' => $mobileNo, 'email' => $email, 'consultantId' => $consultantId, 'created_at' => $created_at, 'empStatus' => $empStatus, 'auditStatus' => $auditStatus, 'screenDate' => $screenDate, 'reg_pack_status' => $reg_pack_status, 'casual_status_update' => $casual_status_update, 'casual_status' => $casual_status, 'ref_code_applied' => $ref_code_applied, 'rec_status' => $rec_status, 'autoId' => $autoId, 'jb_id' => $jb_id, 'gender' => $sex);
    }
    $stmt->free_result();
    return $regsArray;
}

function getResumesShortListed($mysqli, $startDate, $endDate)
{
    if (!empty($startDate) && !empty($endDate)) {
        $stmt = $mysqli->prepare("SELECT 
                                  resume_short_list.id,
                                  resume_short_list.auto_id,
                                  resume_short_list.jb_id,
                                  resume_short_list.msg_id,
                                  resume_short_list.account_name,
                                  resume_short_list.state_id,
                                  resume_short_list.region,
                                  resume_short_list.gender,
                                  resume_short_list.applied_date,
                                  resume_short_list.ref_code,
                                  resume_short_list.consultant_id,
                                  resume_short_list.positions,
                                  resume_short_list.created_at,
                                  resume_short_list.updated_at,
                                  jb_resume.first_name,
                                  jb_resume.last_name,
                                  jb_resume.email,
                                  jb_resume.phone
                                FROM
                                  resume_short_list
                                LEFT OUTER JOIN jb_resume ON (resume_short_list.jb_id = jb_resume.id)  
                                WHERE
                                  resume_short_list.created_at BETWEEN ? AND ?  
                                ORDER BY created_at DESC");
        $stmt->bind_param("ss", $startDate, $endDate) or die($mysqli->error);
    } else {
        $stmt = $mysqli->prepare("SELECT 
                                  resume_short_list.id,
                                  resume_short_list.auto_id,
                                  resume_short_list.jb_id,
                                  resume_short_list.msg_id,
                                  resume_short_list.account_name,
                                  resume_short_list.state_id,
                                  resume_short_list.region,
                                  resume_short_list.gender,
                                  resume_short_list.applied_date,
                                  resume_short_list.ref_code,
                                  resume_short_list.consultant_id,
                                  resume_short_list.positions,
                                  resume_short_list.created_at,
                                  resume_short_list.updated_at,
                                  jb_resume.first_name,
                                  jb_resume.last_name,
                                  jb_resume.email,
                                  jb_resume.phone
                                FROM
                                  resume_short_list
                                LEFT OUTER JOIN jb_resume ON (resume_short_list.jb_id = jb_resume.id)
                                ORDER BY created_at DESC");
    }
    $stmt->execute();
    $stmt->bind_result($id, $auto_id, $jb_id, $msg_id, $account_name, $state_id, $region, $gender, $applied_date, $ref_code, $consultant_id, $positions, $created_at, $updated_at, $first_name,$last_name,$email,$phone);
    $stmt->store_result();
    $regsArray = array();
    while ($stmt->fetch()) {
        $regsArray[] = array('id' => $id, 'auto_id' => $auto_id, 'jb_id' => $jb_id, 'msg_id' => $msg_id, 'account_name' => $account_name, 'state_id' => $state_id, 'region' => $region, 'gender' => $gender, 'applied_date' => $applied_date, 'ref_code' => $ref_code, 'consultant_id' => $consultant_id, 'positions' => $positions, 'created_at' => $created_at, 'updated_at' => $updated_at, 'first_name'=>$first_name,'last_name'=>$last_name,'email'=>$email,'phone'=>$phone);
    }
    $stmt->free_result();
    return $regsArray;
}

function getResumeInformationByAutoId($mysqli, $auto_id, $tableEmail)
{
    $mailList = $mysqli->prepare("SELECT 
										autoid,
										messageid,
										mailfrom,
										mailto,
										subject,
										date
									  FROM
										{$tableEmail}
									  WHERE
									     autoid = ? 
									  ORDER BY date DESC") or die($mysqli->error);
    $mailList->bind_param('i', $auto_id) or die($mysqli->error);
    $mailList->execute();
    $mailList->bind_result($autoid, $messageid, $mailfrom, $mailto, $subject, $date) or die($mysqli->error);
    $mailList->store_result();
    $numRows = $mailList->num_rows;
    $row = '';
    while ($mailList->fetch()) {
        $row = $row . '<div class="mFrom">' . $mailfrom . '</div><div class="subject"><strong>Subj:</strong>&nbsp;' . substr($subject, 0, 60) . '...' . '</div><div class="mTo"><strong>To:</strong>&nbsp;' . $mailto . '</div>';
    }
    $mailList->free_result();
    return $row;
}

function getRegisteredCasualsInformationByConsultant($mysqli, $consId)
{
    $stmt = $mysqli->prepare("SELECT 
                                  candidate.firstName,
                                  candidate.lastName,
                                  candidate.candidateId,
                                  candidate.mobileNo,
                                  candidate.email,
                                  candidate.consultantId,
                                  candidate.created_at,
                                  candidate.empStatus,
                                  candidate.auditStatus,
                                  candidate.screenDate,
                                  candidate.reg_pack_status,
                                  candidate.casual_status_update,
                                  candidate.casual_status,
                                  candidate.ref_code_applied
                                FROM
                                  candidate
                                WHERE 
                                  casual_status_update <= DATE(NOW()) 
                                AND 
                                    casual_status_update <= DATE(NOW() - INTERVAL 5 DAY)
                                AND
                                    candidate.consultantId = ?
                                ORDER BY consultantId, created_at DESC");
    $stmt->bind_param("i", $consId) or die($mysqli->error);
    $stmt->execute();
    $stmt->bind_result($firstName, $lastName, $candidateId, $mobileNo, $email, $consultantId, $created_at, $empStatus, $auditStatus, $screenDate, $reg_pack_status, $casual_status_update, $casual_status, $ref_code_applied);
    $stmt->store_result();
    $regsArray = array();
    while ($stmt->fetch()) {
        $regsArray[] = array('firstName' => $firstName, 'lastName' => $lastName, 'candidateId' => $candidateId, 'mobileNo' => $mobileNo, 'email' => $email, 'consultantId' => $consultantId, 'created_at' => $created_at, 'empStatus' => $empStatus, 'auditStatus' => $auditStatus, 'screenDate' => $screenDate, 'reg_pack_status' => $reg_pack_status, 'casual_status_update' => $casual_status_update, 'casual_status' => $casual_status, 'ref_code_applied' => $ref_code_applied);
    }
    $stmt->free_result();
    return $regsArray;
}

function getDiaryNoteByCandidateId($mysqli, $canId)
{
    try {
        $stmt = $mysqli->prepare("SELECT 
                                  diarynote.subject,
                                  diarynote.consultantId,
                                  diarynote.todoDate,
                                  diarynote.todoNote,
                                  diarynote.createdDate,
                                  diarynote.modifiedDate
                                FROM
                                  diarynote
                                WHERE 
                                    diarynote.candidateId = ?
                                ORDER BY modifiedDate DESC");
        $stmt->bind_param("s", $canId) or die($mysqli->error);
        $stmt->execute();
        $stmt->bind_result($subject, $consultantId, $todoDate, $todoNote, $createdDate, $modifiedDate);
        $stmt->store_result();
        $dataArray = array();
        while ($stmt->fetch()) {
            $dataArray[] = array('subject' => $subject, 'consultantId' => $consultantId, 'todoDate' => $todoNote, 'createdDate' => $createdDate, 'modifiedDate' => $modifiedDate);
        }
        return $dataArray;
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function getRegisteredCasuals($mysqli)
{
    $stmt = $mysqli->prepare("SELECT 
                                  candidate.firstName,
                                  candidate.lastName,
                                  candidate.candidateId,
                                  candidate.mobileNo,
                                  candidate.email,
                                  candidate.consultantId,
                                  candidate.created_at,
                                  candidate.empStatus,
                                  candidate.auditStatus,
                                  candidate.reg_pack_status
                                FROM
                                  candidate
                                WHERE created_at IS NOT NULL  
                                ORDER BY created_at DESC");
    $stmt->execute();
    $stmt->bind_result($firstName, $lastName, $candidateId, $mobileNo, $email, $consultantId, $created_at, $empStatus, $auditStatus, $reg_pack_status);
    $regsArray = array();
    while ($stmt->fetch()) {
        $regsArray[] = array('firstName' => $firstName, 'lastName' => $lastName, 'candidateId' => $candidateId, 'mobileNo' => $mobileNo, 'email' => $email, 'consultantId' => $consultantId, 'created_at' => $created_at, 'empStatus' => $empStatus, 'auditStatus' => $auditStatus, 'reg_pack_status' => $reg_pack_status);
    }
    return $regsArray;
}

function getRegisteredCandidates($mysqli)
{
    $stmt = $mysqli->prepare("SELECT firstName,lastName,homeAddress,postcode,homePhone,mobile,dob,email FROM reg_candidate");
    $stmt->execute();
    $stmt->bind_result($firstName, $lastName, $homeAddress, $postcode, $homePhone, $mobile, $dob, $email);
    $regsArray = array();
    while ($stmt->fetch()) {
        $regsArray[] = array('firtName' => $firstName, 'lastName' => $lastName, 'homeAddress' => $homeAddress, 'postcode' => $postcode, 'homePhone' => $homePhone, 'mobile' => $mobile, 'dob' => $dob, 'email' => $email);
    }
    return $regsArray;
}

function getTableEmail($mysqli, $accountName)
{
    $stmt = $mysqli->prepare("SELECT tbl_email FROM emailaccount WHERE accountName = ?") or die($mysqli->error);
    $stmt->bind_param("s", $accountName) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->tbl_email;
    } else {
        return null;
    }
}

function getTableAttachment($mysqli, $accountName)
{
    $stmt = $mysqli->prepare("SELECT tbl_attachment FROM emailaccount WHERE accountName = ?") or die($mysqli->error);
    $stmt->bind_param("s", $accountName) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->tbl_attachment;
    } else {
        return null;
    }
}

function getTableAttachmentPath($mysqli, $accountName)
{
    $stmt = $mysqli->prepare("SELECT tbl_attachmentpath FROM emailaccount WHERE accountName = ?") or die($mysqli->error);
    $stmt->bind_param("s", $accountName) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->tbl_attachmentpath;
    } else {
        return null;
    }
}

function getEmailAccounts($mysqli)
{
    $status = 1;
    $accounts = $mysqli->prepare("SELECT 
	   email, accountName
	FROM
	  emailaccount
	WHERE status = ?  
	ORDER BY accountName ASC") or die($mysqli->error);
    $accounts->bind_param("i", $status) or die($mysqli->error);
    $accounts->execute();
    $accounts->bind_result($email, $accountName);
    $accountsArray = array();
    while ($accounts->fetch()) {
        $accountsArray[] = array('email' => $email, 'accountName' => $accountName);
    }
    return $accountsArray;
}

function getRegShiftAvailble($mysqli, $value)
{
    $stmt = $mysqli->prepare("SELECT shift FROM shiftavailable WHERE shiftAvailableId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $value) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->shift;
    } else {
        return null;
    }
}

function getCompanyName($mysqli)
{
    $stmt = $mysqli->prepare("SELECT companyName FROM company") or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->companyName;
    } else {
        return null;
    }
}

function getCompanyNameById($mysqli, $companyId)
{
    $stmt = $mysqli->prepare("SELECT companyName FROM company WHERE companyId = ?") or die($mysqli->error);
    $stmt->bind_param("i", $companyId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->companyName;
    } else {
        return null;
    }
}

function getCompanyLogoPath($mysqli)
{
    $stmt = $mysqli->prepare("SELECT companyLogoPath FROM company") or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->companyLogoPath;
    } else {
        return null;
    }
}

function getCompanyLogoById($mysqli, $companyId)
{
    $stmt = $mysqli->prepare("SELECT companyLogoPath FROM company WHERE companyId = ?") or die($mysqli->error);
    $stmt->bind_param("i", $companyId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->companyLogoPath;
    } else {
        return null;
    }
}

function updateCompanyLogo($mysqli, $filePath, $companyId)
{
    $sql = $mysqli->prepare("UPDATE company SET companyLogoPath = ? WHERE companyId = ?") or die($mysqli->error);
    $sql->bind_param("si", $filePath, $companyId) or die($mysqli->error);
    if ($sql->execute()) {
        //$up->free_result();
        $nrows = $sql->affected_rows;
        return 'Updated';
    } else {
        return $mysqli->error;
    }
}

function generateRegPackV2($mysqli, $candidateId,
                           $title,
                           $firstName,
                           $lastName,
                           $address,
                           $postcode,
                           $homePhone,
                           $mobile,
                           $dob,
                           $gender,
                           $nationality,
                           $email,
                           $emgFullName,
                           $relationship,
                           $emgAddress,
                           $emghomePhone,
                           $emgMobile,
                           $behalf,
                           $transportMethod,
                           $howFar,
                           $earlyCalls,
                           $visa,
                           $visaLimitation,
                           $qualification,
                           $shiftAvailable,
                           $notes,
                           $jobactive,
                           $newsletter,
                           $disabilities,
                           $disabilityDesc,
                           $compensation,
                           $compensationDesc,
                           $empName1,
                           $doi1,
                           $natureInjury1,
                           $durAbsense1,
                           $empName2,
                           $doi2,
                           $natureInjury2,
                           $durAbsense2,
                           $pension,
                           $pensionDesc,
                           $hearing,
                           $hearingDesc,
                           $smoker,
                           $eyetrouble,
                           $hearingImp,
                           $surgicalPro,
                           $asthma,
                           $hernia,
                           $duodenal,
                           $deafness,
                           $epilepsy,
                           $lungDisorder,
                           $fainting,
                           $backdisorder,
                           $nervedisorder,
                           $dizziness,
                           $arthritis,
                           $injury,
                           $injuryDesc,
                           $swollen,
                           $chronic,
                           $skin,
                           $diabetes,
                           $medicalAttention,
                           $medicalAttentionDesc,
                           $criminalHistory,
                           $criminalHistoryDesc,
                           $doo1,
                           $natureOffence1,
                           $doo2,
                           $natureOffence2,
                           $pcheck,
                           $consultantId)
{

    if (!file_exists('./documents/' . $candidateId)) {
        mkdir('./documents/' . $candidateId, 0777);
    }
    $regFile = 'RegPack-' . $candidateId . '-' . time() . '.docx';
    $regDoc = './documents/' . $candidateId . '/' . $regFile;
    copy('./regpack/Registration Pack v3.docx', $regDoc);

    $zip = new ZipArchive;
    $fileToModify = 'word/document.xml';
    //$wordDoc = "./regpack/Registration Pack v3.docx"; //preg_replace('/\bHello\b/', 'NEW', $text);

    if ($zip->open($regDoc) === TRUE) {
        //Read contents into memory
        $oldContents = $zip->getFromName($fileToModify);
        //Modify contents:
        $newContents1 = str_replace('P0', $title, $oldContents);
        //Delete the old...
        $zip->deleteName($fileToModify);
        //Write the new...
        $zip->addFromString($fileToModify, $newContents1);
        $newContents2 = str_replace('P1', $firstName . ' ' . $lastName, $newContents1);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents2);
        $newContents3 = str_replace('P2', $address, $newContents2);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents3);
        $newContents4 = str_replace('P3', $postcode, $newContents3);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents4);
        $newContents5 = str_replace('P4', $homePhone, $newContents4);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents5);
        $newContents6 = str_replace('P5', $mobile, $newContents5);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents6);
        $newContents7 = str_replace('P6', $dob, $newContents6);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents7);
        $newContents8 = str_replace('P7', $gender, $newContents7);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents8);
        $newContents9 = str_replace('P8', $nationality, $newContents8);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents9);
        $newContents10 = str_replace('P9', $email, $newContents9);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents10);
        $newContents11 = str_replace('E1', $emgFullName, $newContents10);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents11);
        $newContents12 = str_replace('E2', $relationship, $newContents11);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents12);
        $newContents13 = str_replace('E3', $emgAddress, $newContents12);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents13);
        $newContents14 = str_replace('E4', $emghomePhone, $newContents13);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents14);
        $newContents15 = str_replace('E5', $emgMobile, $newContents14);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents15);
        $newContents16 = str_replace('E6', $behalf, $newContents15);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents16);
        $newContents17 = str_replace('T1', $transportMethod, $newContents16);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents17);
        $newContents18 = str_replace('T2', $howFar, $newContents17);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents18);
        $newContents19 = str_replace('T3', $earlyCalls, $newContents18);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents19);
        if ($visa == 'Australian/New Zealand Citizen') {
            $visa0 = '<w:r><w:rPr><w:rFonts w:ascii="Arial" w:hAnsi="Arial" w:cs="Arial"/>
    <w:b/> <w:color w:val="000000"/></w:rPr> <w:t xml:space="preserve">Australian/New Zealand Citizen</w:t></w:r>';
            $visa1 = '<w:t>Permanent Resident</w:t>';
            $visa2 = '<w:t>International Student</w:t>';
            $visa3 = '<w:t>Working Visa</w:t>';
            $visa4 = '<w:t>Bridging Visa</w:t>';
        } else if ($visa == 'Permanent Resident') {
            $visa1 = '<w:r><w:rPr><w:rFonts w:ascii="Arial" w:hAnsi="Arial" w:cs="Arial"/>
    <w:b/> <w:color w:val="000000"/></w:rPr> <w:t xml:space="preserve">Permanent Resident</w:t></w:r>';
            $visa0 = '<w:t>Australian/New Zealand Citizen</w:t>';
            $visa2 = '<w:t>International Student</w:t>';
            $visa3 = '<w:t>Working Visa</w:t>';
            $visa4 = '<w:t>Bridging Visa</w:t>';
        } else if ($visa == 'International Student') {
            $visa2 = '<w:r><w:rPr><w:rFonts w:ascii="Arial" w:hAnsi="Arial" w:cs="Arial"/>
    <w:b/> <w:color w:val="000000"/></w:rPr> <w:t xml:space="preserve">International Student</w:t></w:r>';
            $visa0 = '<w:t>Australian/New Zealand Citizen</w:t>';
            $visa1 = '<w:t>Permanent Resident</w:t>';
            $visa3 = '<w:t>Working Visa</w:t>';
            $visa4 = '<w:t>Bridging Visa</w:t>';
        } else if ($visa == 'Working Visa') {
            $visa3 = '<w:r><w:rPr><w:rFonts w:ascii="Arial" w:hAnsi="Arial" w:cs="Arial"/>
    <w:b/> <w:color w:val="000000"/></w:rPr> <w:t xml:space="preserve">Working Visa</w:t></w:r>';
            $visa0 = '<w:t>Australian/New Zealand Citizen</w:t>';
            $visa1 = '<w:t>Permanent Resident</w:t>';
            $visa2 = '<w:t>International Student</w:t>';
            $visa4 = '<w:t>Bridging Visa</w:t>';
        } else if ($visa == 'Bridging Visa') {
            $visa4 = '<w:r><w:rPr><w:rFonts w:ascii="Arial" w:hAnsi="Arial" w:cs="Arial"/>
    <w:b/> <w:color w:val="000000"/></w:rPr> <w:t xml:space="preserve">Bridging Visa</w:t></w:r>';
            $visa0 = '<w:t>Australian/New Zealand Citizen</w:t>';
            $visa1 = '<w:t>Permanent Resident</w:t>';
            $visa2 = '<w:t>International Student</w:t>';
            $visa3 = '<w:t>Working Visa</w:t>';
        }
        $newContents20 = str_replace('<w:t>A0</w:t>', $visa0, $newContents19);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents20);
        $newContents21 = str_replace('<w:t>A1</w:t>', $visa1, $newContents20);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents21);
        $newContents22 = str_replace('<w:t>A2</w:t>', $visa2, $newContents21);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents22);
        $newContents23 = str_replace('<w:t>A3</w:t>', $visa3, $newContents22);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents23);
        $newContents24 = str_replace('<w:t>A4</w:t>', $visa4, $newContents23);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents24);
        $newContents25 = str_replace('<w:t>A5</w:t>', '<w:t>' . $visaLimitation . '</w:t>', $newContents24);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents25);
        $newContents26 = str_replace('B6', $qualification, $newContents25);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents26);
        $shifts;
        foreach ($shiftAvailable as $value) {
            $shifts .= ' ' . getRegShiftAvailble($mysqli, $value);
        }
        $newContents27 = str_replace('A7', $shifts, $newContents26);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents27);
        $newContents28 = str_replace('A8', $notes, $newContents27);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents28);
        if ($newsletter == '1') {
            $newContents29 = str_replace('A9', '&#9745;', $newContents28);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents29);
        } else {
            $newContents29 = str_replace('A9', ' ', $newContents28);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents29);
        }

        if ($disabilities == 'Yes') {
            $newContents30 = str_replace('M1', $disabilities, $newContents29);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents30);
            $newContents31 = str_replace('M2', ' ', $newContents30);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents31);
        } else {
            $newContents30 = str_replace('M1', ' ', $newContents29);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents30);
            $newContents31 = str_replace('M2', $disabilities, $newContents30);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents31);
        }
        $newContents32 = str_replace('M3', $disabilityDesc, $newContents31);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents32);
        if ($compensation == 'Yes') {
            $newContents33 = str_replace('M4', $compensation, $newContents32);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents33);
            $newContents34 = str_replace('M5', ' ', $newContents33);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents34);
        } else {
            $newContents33 = str_replace('M4', ' ', $newContents32);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents33);
            $newContents34 = str_replace('M5', $compensation, $newContents33);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents34);
        }
        $newContents35 = str_replace('M6', $compensationDesc, $newContents34);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents35);
        $newContents36 = str_replace('N1', $empName1, $newContents35);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents36);
        $newContents37 = str_replace('N2', $doi1, $newContents36);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents37);
        $newContents38 = str_replace('N3', $natureInjury1, $newContents37);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents38);
        $newContents39 = str_replace('N4', $durAbsense1, $newContents38);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents39);
        $newContents40 = str_replace('N5', $empName2, $newContents39);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents40);
        $newContents41 = str_replace('N6', $doi2, $newContents40);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents41);
        $newContents42 = str_replace('N7', $natureInjury2, $newContents41);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents42);
        $newContents43 = str_replace('N8', $durAbsense2, $newContents42);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents43);
        if ($pension == 'Yes') {
            $newContents44 = str_replace('C1', $pension, $newContents43);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents44);
            $newContents45 = str_replace('C2', ' ', $newContents44);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents45);
        } else {
            $newContents44 = str_replace('C1', ' ', $newContents43);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents44);
            $newContents45 = str_replace('C2', $pension, $newContents44);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents45);
        }
        $newContents46 = str_replace('C3', $pensionDesc, $newContents45);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents46);
        if ($hearing == 'Yes') {
            $newContents47 = str_replace('D1', $hearing, $newContents46);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents47);
            $newContents48 = str_replace('D2', ' ', $newContents47);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents48);
        } else {
            $newContents47 = str_replace('D1', ' ', $newContents46);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents47);
            $newContents48 = str_replace('D2', $hearing, $newContents47);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents48);
        }
        $newContents49 = str_replace('D3', $hearingDesc, $newContents48);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents49);
        if ($smoker == 'Yes') {
            $newContents50 = str_replace('S1', $smoker, $newContents49);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents50);
            $newContents51 = str_replace('S2', ' ', $newContents50);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents51);
        } else {
            $newContents50 = str_replace('S1', ' ', $newContents49);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents50);
            $newContents51 = str_replace('S2', $smoker, $newContents50);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents51);
        }
        if ($eyetrouble == 'Yes') {
            $newContents52 = str_replace('G1', $eyetrouble, $newContents51);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents52);
            $newContents53 = str_replace('G2', ' ', $newContents52);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents53);
        } else {
            $newContents52 = str_replace('G1', ' ', $newContents51);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents52);
            $newContents53 = str_replace('G2', $eyetrouble, $newContents52);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents53);
        }
        if ($asthma == 'Yes') {
            $newContents54 = str_replace('H1', $asthma, $newContents53);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents54);
            $newContents55 = str_replace('H2', ' ', $newContents54);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents55);
        } else {
            $newContents54 = str_replace('H1', ' ', $newContents53);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents54);
            $newContents55 = str_replace('H2', $asthma, $newContents54);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents55);
        }
        if ($deafness == 'Yes') {
            $newContents56 = str_replace('I1', $deafness, $newContents55);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents56);
            $newContents57 = str_replace('I2', ' ', $newContents56);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents57);
        } else {
            $newContents56 = str_replace('I1', ' ', $newContents55);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents56);
            $newContents57 = str_replace('I2', $deafness, $newContents56);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents57);
        }
        if ($fainting == 'Yes') {
            $newContents58 = str_replace('J1', $fainting, $newContents57);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents58);
            $newContents59 = str_replace('J2', ' ', $newContents58);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents59);
        } else {
            $newContents58 = str_replace('J1', ' ', $newContents57);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents58);
            $newContents59 = str_replace('J2', $fainting, $newContents58);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents59);
        }
        if ($dizziness == 'Yes') {
            $newContents60 = str_replace('K1', $dizziness, $newContents59);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents60);
            $newContents61 = str_replace('K2', ' ', $newContents60);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents61);
        } else {
            $newContents60 = str_replace('K1', ' ', $newContents59);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents60);
            $newContents61 = str_replace('K2', $dizziness, $newContents60);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents61);
        }
        if ($swollen == 'Yes') {
            $newContents62 = str_replace('L1', $swollen, $newContents61);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents62);
            $newContents63 = str_replace('L2', ' ', $newContents62);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents63);
        } else {
            $newContents62 = str_replace('L1', ' ', $newContents61);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents62);
            $newContents63 = str_replace('L2', $swollen, $newContents62);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents63);
        }
        if ($skin == 'Yes') {
            $newContents64 = str_replace('O1', $skin, $newContents63);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents64);
            $newContents65 = str_replace('O2', ' ', $newContents64);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents65);
        } else {
            $newContents64 = str_replace('O1', ' ', $newContents63);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents64);
            $newContents65 = str_replace('O2', $skin, $newContents64);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents65);
        }
        if ($hearingImp == 'Yes') {
            $newContents66 = str_replace('Q1', $hearingImp, $newContents65);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents66);
            $newContents67 = str_replace('Q2', ' ', $newContents66);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents67);
        } else {
            $newContents66 = str_replace('Q1', ' ', $newContents65);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents66);
            $newContents67 = str_replace('Q2', $hearingImp, $newContents66);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents67);
        }
        if ($hernia == 'Yes') {
            $newContents68 = str_replace('R1', $hernia, $newContents67);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents68);
            $newContents69 = str_replace('R2', ' ', $newContents68);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents69);
        } else {
            $newContents68 = str_replace('R1', ' ', $newContents67);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents68);
            $newContents69 = str_replace('R2', $hernia, $newContents68);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents69);
        }
        if ($epilepsy == 'Yes') {
            $newContents70 = str_replace('U1', $epilepsy, $newContents69);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents70);
            $newContents71 = str_replace('U2', ' ', $newContents70);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents71);
        } else {
            $newContents70 = str_replace('U1', ' ', $newContents69);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents70);
            $newContents71 = str_replace('U2', $epilepsy, $newContents70);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents71);
        }
        if ($backdisorder == 'Yes') {
            $newContents72 = str_replace('V1', $backdisorder, $newContents71);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents72);
            $newContents73 = str_replace('V2', ' ', $newContents72);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents73);
        } else {
            $newContents72 = str_replace('V1', ' ', $newContents71);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents72);
            $newContents73 = str_replace('V2', $backdisorder, $newContents72);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents73);
        }
        if ($arthritis == 'Yes') {
            $newContents74 = str_replace('X1', $arthritis, $newContents73);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents74);
            $newContents75 = str_replace('X2', ' ', $newContents74);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents75);
        } else {
            $newContents74 = str_replace('X1', ' ', $newContents73);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents74);
            $newContents75 = str_replace('X2', $arthritis, $newContents74);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents75);
        }
        if ($chronic == 'Yes') {
            $newContents76 = str_replace('Y1', $chronic, $newContents75);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents76);
            $newContents77 = str_replace('Y2', ' ', $newContents76);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents77);
        } else {
            $newContents76 = str_replace('Y1', ' ', $newContents75);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents76);
            $newContents77 = str_replace('Y2', $chronic, $newContents76);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents77);
        }
        if ($diabetes == 'Yes') {
            $newContents78 = str_replace('Y3', $diabetes, $newContents77);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents78);
            $newContents79 = str_replace('Y4', ' ', $newContents78);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents79);
        } else {
            $newContents78 = str_replace('Y3', ' ', $newContents77);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents78);
            $newContents79 = str_replace('Y4', $diabetes, $newContents78);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents79);
        }
        if ($surgicalPro == 'Yes') {
            $newContents80 = str_replace('Y5', $surgicalPro, $newContents79);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents80);
            $newContents81 = str_replace('Y6', ' ', $newContents80);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents81);
        } else {
            $newContents80 = str_replace('Y5', ' ', $newContents79);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents80);
            $newContents81 = str_replace('Y6', $surgicalPro, $newContents80);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents81);
        }
        if ($duodenal == 'Yes') {
            $newContents82 = str_replace('Y7', $duodenal, $newContents81);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents82);
            $newContents83 = str_replace('Y8', ' ', $newContents82);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents83);
        } else {
            $newContents82 = str_replace('Y7', ' ', $newContents81);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents82);
            $newContents83 = str_replace('Y8', $duodenal, $newContents82);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents83);
        }
        if ($lungDisorder == 'Yes') {
            $newContents84 = str_replace('Z0', $lungDisorder, $newContents83);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents84);
            $newContents85 = str_replace('Z1', ' ', $newContents84);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents85);
        } else {
            $newContents84 = str_replace('Z0', ' ', $newContents83);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents84);
            $newContents85 = str_replace('Z1', $lungDisorder, $newContents84);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents85);
        }
        if ($nervedisorder == 'Yes') {
            $newContents86 = str_replace('Z2', $nervedisorder, $newContents85);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents86);
            $newContents87 = str_replace('Z3', ' ', $newContents86);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents87);
        } else {
            $newContents86 = str_replace('Z2', ' ', $newContents85);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents86);
            $newContents87 = str_replace('Z3', $nervedisorder, $newContents86);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents87);
        }
        if ($injury == 'Yes') {
            $newContents88 = str_replace('Z4', $injury, $newContents87);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents88);
            $newContents89 = str_replace('Z5', ' ', $newContents88);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents89);
        } else {
            $newContents88 = str_replace('Z4', ' ', $newContents87);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents88);
            $newContents89 = str_replace('Z5', $injury, $newContents88);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents89);
        }
        $newContents90 = str_replace('Z6', $injuryDesc, $newContents89);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents90);
        if ($medicalAttention == 'Yes') {
            $newContents91 = str_replace('Z7', $medicalAttention, $newContents90);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents91);
            $newContents92 = str_replace('Z8', '', $newContents91);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents92);
        } else {
            $newContents91 = str_replace('Z7', ' ', $newContents90);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents91);
            $newContents92 = str_replace('Z8', $medicalAttention, $newContents91);
            $zip->deleteName($fileToModify);
            $zip->addFromString($fileToModify, $newContents92);
        }
        $newContents93 = str_replace('Z9', $medicalAttentionDesc, $newContents92);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents93);
        $newContents94 = str_replace('W1', $jobactive, $newContents93);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents94);
        //And write back to the filesystem.
        $return = $zip->close();
        if ($return == TRUE) {
            try {
                $docId = 23;
                $valFrom = NULL;
                $valTo = NULL;
                $revDate = NULL;
                $note = NULL;
                updateCandidateDocs($mysqli, $candidateId, $docId, $regFile, $regDoc, $valFrom, $valTo, $revDate, $note);
            } catch (Exception $e) {
                $e->getMessage();
            }

            $polChkFile = 'PoliceCheck-' . $candidateId . '-' . time() . '.docx';
            $policeDoc = './documents/' . $candidateId . '/' . $polChkFile;
            copy('./policechk/Police Check Authority Form v3.docx', $policeDoc);
            $pzip = new ZipArchive;
            $policefile = 'word/document.xml';
            if ($pzip->open($policeDoc) === TRUE) {
                $policeContents = $pzip->getFromName($policefile);
                if ($criminalHistory == 'Yes') {
                    $pContents1 = str_replace('P1', $criminalHistory, $policeContents);
                    $pzip->deleteName($policefile);
                    $pzip->addFromString($policefile, $pContents1);
                    $pContents2 = str_replace('P2', ' ', $pContents1);
                    $pzip->deleteName($policefile);
                    $pzip->addFromString($policefile, $pContents2);
                    $pContents3 = str_replace('P3', $criminalHistoryDesc, $pContents2);
                    $pzip->deleteName($policefile);
                    $pzip->addFromString($policefile, $pContents3);
                } else {
                    $pContents1 = str_replace('P1', ' ', $policeContents);
                    $pzip->deleteName($policefile);
                    $pzip->addFromString($policefile, $pContents1);
                    $pContents2 = str_replace('P2', $criminalHistory, $pContents1);
                    $pzip->deleteName($policefile);
                    $pzip->addFromString($policefile, $pContents2);
                    $pContents3 = str_replace('P3', ' ', $pContents2);
                    $pzip->deleteName($policefile);
                    $pzip->addFromString($policefile, $pContents3);
                }

                $pContents4 = str_replace('P4', $doo1, $pContents3);
                $pzip->deleteName($policefile);
                $pzip->addFromString($policefile, $pContents4);
                $pContents5 = str_replace('P5', $natureOffence1, $pContents4);
                $pzip->deleteName($policefile);
                $pzip->addFromString($policefile, $pContents5);
                $pContents6 = str_replace('P6', $doo2, $pContents5);
                $pzip->deleteName($policefile);
                $pzip->addFromString($policefile, $pContents6);
                $pContents7 = str_replace('P7', $natureOffence2, $pContents6);
                $pzip->deleteName($policefile);
                $pzip->addFromString($policefile, $pContents7);
                if ($pcheck == '1') {
                    $pContents8 = str_replace('T1', $pcheck, $pContents7);
                    $pzip->deleteName($policefile);
                    $pzip->addFromString($policefile, $pContents8);
                    $pContents9 = str_replace('T2', ' ', $pContents8);
                    $pzip->deleteName($policefile);
                    $pzip->addFromString($policefile, $pContents9);
                } else if ($pcheck == '2') {
                    $pContents8 = str_replace('T2', $pcheck, $pContents7);
                    $pzip->deleteName($policefile);
                    $pzip->addFromString($policefile, $pContents8);
                    $pContents9 = str_replace('T1', ' ', $pContents8);
                    $pzip->deleteName($policefile);
                    $pzip->addFromString($policefile, $pContents9);
                }
                $pContents10 = str_replace('N1', $firstName . ' ' . $lastName, $pContents9);
                $pzip->deleteName($policefile);
                $pzip->addFromString($policefile, $pContents10);
                $returnChk = $pzip->close();
                if ($returnChk == TRUE) {
                    try {
                        $docTypeId = 18;
                        $validFrom = NULL;
                        $validTo = NULL;
                        $reviewDate = NULL;
                        $notes = NULL;
                        updateCandidateDocs($mysqli, $candidateId, $docTypeId, $polChkFile, $policeDoc, $validFrom, $validTo, $reviewDate, $notes);
                    } catch (Exception $e) {
                        $e->getMessage();
                    }
                    /* generate reg pack email */
                    if (generateRegistrationEmail($mysqli, $firstName, $lastName, $candidateId, $email, $consultantId, $regFile, $polChkFile) == 'SUCCESS') {
                        return true;
                    } else {
                        return false;
                    }
                }
            } else {
                return false;
            }
        }
    } else {
        return false;
    }

}

function generateRegistrationEmail($mysqli, $firstName, $lastName, $candidateId, $email, $consultantId, $regFile, $polChkFile)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . 'Candidate Registration';
    $mail->AddAddress(getConsultantEmail($mysqli, $consultantId));
    $mail->Subject = $subject;
    $file = 'documents/' . $candidateId . '/' . $regFile;
    $pcheckFile = 'documents/' . $candidateId . '/' . $polChkFile;
    $mail->AddAttachment($file);
    $mail->AddAttachment($pcheckFile);
    $mail->IsHTML(true);
    $body = '<br/>Candidate ' . $firstName . ' ' . $lastName . ', has registered with ' . DOMAIN_NAME . ' Online<br/>
			  <br/>
			  Interviewer: ' . getConsultantName($mysqli, $consultantId) . ' (Consultant)<br/>
			  <br/>
			  
			  <br/>
			 ';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function generateInterviewNotes($mysqli, $candidateid, $intro, $formsCompleted, $fit2work, $policeHistory, $wrkhistory, $forklift, $rf, $powertools, $containers, $yleaving, $ohsrules, $perftask, $strengths, $teamwork, $eyetest, $readtest, $rating, $consultantId)
{
    if (!file_exists('./documents/' . $candidateId)) {
        mkdir('./documents/' . $candidateId, 0777);
    }
    $consultantName = getConsultantName($mysqli, $consultantId);
    $newFile = 'InterviewProcedure-' . $candidateid . '.docx';
    $newDoc = './documents/' . $candidateId . '/' . $newFile;
    copy('./intvw/Interview Procedure v2.docx', $newDoc);

    $zip = new ZipArchive;
    //This is the main document in a .docx file.
    $fileToModify = 'word/document.xml';
    $wordDoc = "./intvw/Interview Procedure v2.docx"; //preg_replace('/\bHello\b/', 'NEW', $text);
    if ($zip->open($newDoc) === TRUE) {
        //Read contents into memory
        $oldContents = $zip->getFromName($fileToModify);
        //Modify contents:
        $newContents1 = str_replace('P0', $intro, $oldContents);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents1);
        $newContents2 = str_replace('P1', $formsCompleted, $newContents1);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents2);
        $newContents3 = str_replace('P2', $fit2work, $newContents2);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents3);
        $newContents4 = str_replace('P3', $policeHistory, $newContents3);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents4);
        $newContents5 = str_replace('P4', $wrkhistory, $newContents4);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents5);
        $newContents6 = str_replace('P5', $forklift, $newContents5);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents6);
        $newContents7 = str_replace('P6', $rf, $newContents6);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents7);
        $newContents8 = str_replace('P7', $powertools, $newContents7);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents8);
        $newContents9 = str_replace('P8', $containers, $newContents8);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents9);
        $newContents10 = str_replace('P9', $yleaving, $newContents9);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents10);
        $newContents11 = str_replace('Q1', $ohsrules, $newContents10);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents11);
        $newContents12 = str_replace('Q2', $perftask, $newContents11);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents12);
        $newContents13 = str_replace('Q3', $strengths, $newContents12);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents13);
        $newContents14 = str_replace('Q4', $teamwork, $newContents13);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents14);
        $newContents15 = str_replace('T1', $eyetest, $newContents14);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents15);
        $newContents16 = str_replace('T2', $readtest, $newContents15);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents16);
        $newContents17 = str_replace('R1', $rating, $newContents16);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents17);
        $newContents18 = str_replace('C1', $consultantName, $newContents17);
        $zip->deleteName($fileToModify);
        $zip->addFromString($fileToModify, $newContents18);
        //And write back to the filesystem.
        $return = $zip->close();
        if ($return == TRUE) {
            return true;
        }
    } else {
        return false;
    }
}

function updateRegShifts($mysqli, $candidateId, $value)
{
    $stmt = $mysqli->prepare('INSERT INTO reg_shiftavailable(candidateId,shiftAvailableId) VALUES(?,?)') or die($mysqli->error);
    $stmt->bind_param('si', $candidateId, $value) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return false;
    }
}

function checkCandidateId($mysqli, $candidateId, $status)
{
    $stmt = $mysqli->prepare("SELECT candidateId FROM candidate WHERE candidateId = ? AND status = ?") or die($mysqli - error);
    $stmt->bind_param("ss", $candidateId, $status) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function checkRegCandidateId($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT candidateId FROM reg_candidate WHERE candidateId = ?") or die($mysqli - error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function getConsultantEmail($mysqli, $consultantId)
{
    $stmt = $mysqli->prepare("SELECT email FROM consultant WHERE consultantId = ?") or die($mysqli - error);
    $stmt->bind_param("s", $consultantId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->email;
    } else {
        return null;
    }
}

function getConsultantName($mysqli, $consultantId)
{
    $stmt = $mysqli->prepare("SELECT name FROM consultant WHERE consultantId = ?") or die($mysqli->error);
    $stmt->bind_param("i", $consultantId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->name;
    } else {
        return null;
    }
}

function getConsultantId($mysqli, $consultantName)
{
    $stmt = $mysqli->prepare("SELECT consultantId FROM consultant WHERE username = ?") or die($mysqli->error);
    $stmt->bind_param("s", $consultantName) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->consultantId;
    } else {
        return null;
    }
}

function getMediaData($mysqli)
{
    $sql = $mysqli->prepare("SELECT url,path,cid,filename FROM mediadata") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($url, $path, $cid, $filename) or die($mysqli->error);
    $mediaArray = array();
    while ($sql->fetch()) {
        $mediaArray[] = array('url' => $url, 'path' => $path, 'cid' => $cid, 'name' => $filename);
    }
    return $mediaArray;
}

function getInterviewEmailContent($mysqli)
{
    $status = 1;
    $sql = $mysqli->prepare("SELECT accountName,mailContent FROM emailaccount WHERE status = ?") or die($mysqli->error);
    $sql->bind_param("i", $status) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($accountName, $mailContent) or die($mysqli->error);
    $mailArray = array();
    while ($sql->fetch()) {
        $mailArray[] = array('accountName' => $accountName, 'mailContent' => $mailContent);
    }
    return $mailArray;
}

function getEmailContentByAccount($mysqli, $accountName)
{
    $stmt = $mysqli->prepare("SELECT mailContent FROM emailaccount WHERE accountName = ?") or die($mysqli->error);
    $stmt->bind_param("s", $accountName) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->mailContent;
    } else {
        return null;
    }
}

function saveInterviewContent($mysqli, $account, $content)
{
    $up = $mysqli->prepare("UPDATE emailaccount SET mailContent = ? WHERE accountName = ?") or die($mysqli->error);
    $up->bind_param("ss", $content, $account) or die($mysqli->error);
    $up->execute();
    $nrow = $up->affected_rows;
    if ($nrow > 0) {
        return 'Updated';
    } else {
        return $mysqli->error;
    }
}

function generateMail($userName, $password, $host, $fromAddress, $fromName, $subject, $toAddress, $ccAddress, $emdImg, $firstName, $lastName, $intvwTime, $mailBody)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';
    $mailBody = str_replace('FIRSTNAME', $firstName, $mailBody);
    $mailBody = str_replace('LASTNAME', $lastName, $mailBody);
    $mailBody = str_replace('INTERVIEWTIME', date('d-m-Y H:i a', strtotime($intvwTime)), $mailBody);
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = $userName;
    $mail->Password = $password;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = $host;
    $mail->LE = "\r\n";
    $mail->setFrom($fromAddress, $fromName);
    foreach ($toAddress as $toMail) {
        $mail->AddAddress($toMail);
    }
    foreach ($ccAddress as $ccMail) {
        $mail->AddCC($ccMail);
    }
    foreach ($emdImg as $emd) {
        $mail->AddEmbeddedImage($emd['path'], $emd['cid'], $emd['name']);
    }
    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = $mailBody;
    $body = $body . '<p><center>';
    $medialLinks = '';
    foreach ($emdImg as $emd) {
        if ($emd['cid'] == '') {
        } elseif ($emd['cid'] == '') {
        } else {
            $medialLinks = $medialLinks . '<a href="' . $emd['url'] . '" target="_blank" style="border:none"><img src="cid:' . $emd['cid'] . '" width="62" height="62" alt="' . $emd['cid'] . '"/></a>';
        }
    }
    $body = $body . $medialLinks;
    $body = $body . '</center></p>';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function generateMelbourneInterviewEmail($mysqli, $candidateId, $messageid, $firstName, $lastName, $candidateEmail, $intvwTime, $consultantId)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . 'Interview Information';
    $mail->AddAddress($candidateEmail);
    $mail->AddCC(getConsultantEmail($mysqli, $consultantId));

    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = '<span style="font-family:Arial, Verdana, Geneva, sans-serif; font-size:10pt;"><br/>Hi &nbsp;' . $firstName . ' ' . $lastName . ',<br/><br/>
  
  <p>It was great to talk to you. I look forward to meeting you &nbsp;' . date('d-m-Y H:i a', strtotime($intvwTime)) . '. Please come to <b> </b>,  .</p>
  
  <p>If you are catching public transport, please get off at Flinders St Station, we are a few blocks from there. There is also street parking available but may be limited.</p>
  <b>Please bring the following with you:</b>
  <br/>
  <ul>
  <li>Passport, Australian Birth Certificate, or Australian Citizenship Certificate</li>
  <li>Any licenses/certificates you may have (ie. drivers, forklift, truck, white/red cards, first aid)</li>
  <li>Bank details</li>
  <li>Tax file number</li>
  <li>Super Fund details - <b><i>must include</i></b> Fund Name, Membership No., Fund ABN, and Superannuation Product Identification Number (SPIN) <b>*you will be able to call your Fund for this information*</b> - if you wish to use our company Super, we will supply details upon interview</li>
  <li>At least 1 Australian work reference (personal references will not be considered) - You do not need to do this if you have already supplied this reference on your resume.</li> 
  <li><b>If you have a current Police Check, please bring this with you. Alternately ' . DOMAIN_NAME . ' will provide you with an Application Form to complete your Police Check upon interview.</b></li>
  </ul>
  
  <p><span style="color:red"><b>Please find BELOW</b></span>, the instructions for doing your OH&S test. <span style="color:red"><b>PLEASE COMPLETE THIS TEST BEFORE YOUR INTERVIEW.</b></span></p>
  <p><b><u>Please go to the ' . DOMAIN_NAME . ' Training home page at</u></b> - <a href="http://moodle..com.au/" target="_blank">http://moodle..com.au/</a></p>
  <ul>
  <li>CLICK the above link and it will take you to ' . DOMAIN_NAME . ' Training webpage</li>
  <li>You need to create an account and to do that, CLICK \'Log in\' at the top right corner</li>
  <li>In the next page, there should be an option "Is this your first time here?"</li>
  <li>If you click on that option it will ask you to provide your details, password and email address for self-registration</li>
  <li>Put in your personal e-mail account details when you set it up</li>
  <li>An e-mail will be sent to your personal e-mail with the link to complete the course. please click on the link and it will take you back to ' . DOMAIN_NAME . ' Training page</li>
  <li>Please also check your SPAM/JUNK inbox in case it is sent there</li>
  <li>Now CLICK ‘Site Home’ from top left corner</li>
  <li>Then CLICK \'Safe Work Practices\' and then \'Enrol me\'</li>
  <li>You now must complete all the below 4 modules (Marked BLUE) - Each module has an assessment that you must pass to finish and you must pass all four assessments to finish the course.</li>
  	<ul>
    	<li>Introduction to safety at work</li>
        <li>Diversity at work</li>
        <li>Manual handling at work</li>
        <li>Emergencies at work</li>
    </ul>
  <li>Once completed the four modules, you must press "download certificate of completion"</li>  
</ul>
  <p>
The successful pass mark for this test is 100%. If you do not achieve this result first time, you can go back and correct your answers. If you have attempted the module twice and not received a passing grade, you must contact your consultant immediately. Once completed the module you must download the completion certificate
  </p>
  <p><center><b>Want to stay ahead of the pack?</b></center></p>
  <br>
  <p><center>Keep up to date with NEW Job Opportunities,</center></p>
  <p><center>Discover job hunting tips and tricks and</center></p>
  <p><center>Stay informed about ' . DOMAIN_NAME . ' News, by following us on Social Media!</center></p>
  </span>';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function generateSydneyInterviewEmail($mysqli, $candidateId, $messageid, $firstName, $lastName, $candidateEmail, $intvwTime, $consultantId)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . 'Interview Information';
    $mail->AddAddress($candidateEmail);
    $mail->AddCC(getConsultantEmail($mysqli, $consultantId));
    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = '<span style="font-family:Arial, Verdana, Geneva, sans-serif; font-size:10pt;"><br/>Hi ' . $firstName . ' ' . $lastName . ',<br/><br/>
			 <p>It was great to talk to you. I look forward to meeting you on ' . $intvwTime . '. Please come to Suite  ,  </p>
			  <br/>
			  <br/>
              <p style="font-family:Arial, Verdana, Geneva, sans-serif; font-size:11pt;"><b>Please bring the following with you:</b></p>
              <br/>
              <ul>
              <li>Passport, Australian Birth Certificate, or Australian Citizenship Certificate</li>
              <li>Any licenses/certificates you may have (ie. drivers, forklift, truck, white/red cards, first aid)</li>
              <li>Bank details</li>
              <li>Tax file number</li>
              <li>Super Fund details - <b><i>must include</i></b> Fund Name, Membership No., Fund ABN, and Superannuation Product Identification Number (SPIN) *<b>you will be able to call your Fund for this information</b>* - if you wish to use our company Super, we will supply details upon interview</li>
              <li>At least 1 Australian work reference (personal references will not be considered)  You do not need to do this if you have already supplied this reference on your resume.</li>
              <li><b>If you have a current Police Check, please bring this with you. Alternately ' . DOMAIN_NAME . ' will provide you with an Application Form to complete your Police Check upon interview.</b></li>
              </ul>
              <p><span style="color:red"><b>Please find BELOW</b></span>, the instructions for doing your OH&amp;S test. <span style="color:red"><b>PLEASE COMPLETE THIS TEST BEFORE YOUR INTERVIEW.</b></span></p>
              <p><b><u>Please go to the ' . DOMAIN_NAME . ' Training home page at</u></b> - <a href="http://moodle..com.au/" target="_blank">http://moodle..com.au/</a></p>
  <ul>
  <li>CLICK the above link and it will take you to ' . DOMAIN_NAME . ' Training webpage</li>
  <li>You need to create an account and to do that, CLICK \'Log in\' at the top right corner</li>
  <li>In the next page, there should be an option "Is this your first time here?"</li>
  <li>If you click on that option it will ask you to provide your details, password and email address for self-registration</li>
  <li>Put in your personal e-mail account details when you set it up</li>
  <li>An e-mail will be sent to your personal e-mail with the link to complete the course. please click on the link and it will take you back to ' . DOMAIN_NAME . ' Training page</li>
  <li>Please also check your SPAM/JUNK inbox in case it is sent there</li>
  <li>Now CLICK ‘Site Home’ from top left corner</li>
  <li>Then CLICK \'Safe Work Practices\' and then \'Enrol me\'</li>
  <li>You now must complete all the below 4 modules (Marked BLUE) - Each module has an assessment that you must pass to finish and you must pass all four assessments to finish the course.</li>
  	<ul>
    	<li>Introduction to safety at work</li>
        <li>Diversity at work</li>
        <li>Manual handling at work</li>
        <li>Emergencies at work</li>
    </ul>
  <li>Once completed the four modules, you must press "download certificate of completion"</li>  
</ul>
  <p>
The successful pass mark for this test is 100%. If you do not achieve this result first time, you can go back and correct your answers. If you have attempted the module twice and not received a passing grade, you must contact your consultant immediately. Once completed the module you must download the completion certificate
  </p>
<p>If you have any questions in the meantime, please call ' . DOMAIN_NAME . ' Services.</p>

<p>Phone :   &nbsp; Hotline:  </p>
<p>Address :  </p>
</span>';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}


function getNewCandidateId($mysqli)
{
    $stmt = $mysqli->prepare("SELECT MAX(candidate_no) AS max_candidateId FROM candidate") or die(mysqli_error());
    $stmt->execute();
    $stmt->bind_result($max_candidateId);
    $stmt->store_result();
    $stmt->fetch();
    if ($stmt->num_rows == 0) {
        $max_candidateId = 1;
    } else {
        $max_candidateId = $max_candidateId + 1;
    }
    $candidateId = substr(trim(strtoupper(DOMAIN_NAME)), 0, 4) . $max_candidateId;
    return $candidateId;
}

function generateOnePIN($mysqli, $candidate_no)
{
    rePin:
    $pin = generatePIN();
    if (!checkUserPIN($mysqli, $pin)) {
        return $pin;
        //echo 'CLOCK PIN UPDATED' . $pin;
    } else {
        //echo 'CLOCK PIN ALREADY EXISTS ' . $pin;
        goto rePin;
    }
}

function candidateCheck($mysqli, $firstName, $lastName, $candidateEmail)
{
    $chk = $mysqli->prepare("SELECT * FROM candidate WHERE firstName = ? AND lastName = ? AND email = ?") or die($mysqli->error);
    $chk->bind_param("sss", $firstName, $lastName, $candidateEmail) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function insertCandidateByDiaryNote($mysqli, $candidateId, $firstName, $lastName, $candidateMobile, $candidateEmail, $consultantId)
{
    $stmt = $mysqli->prepare("INSERT INTO candidate(candidateId, firstName, lastName, mobileNo, email, consultantId,username) VALUES(?,?,?,?,?,?,?)") or die($mysqli->error);
    $stmt->bind_param("sssssis", $candidateId, $firstName, $lastName, $candidateMobile, $candidateEmail, $consultantId, $candidateId) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return false;
    }
}

function addDiaryNote($mysqli, $noteType, $fName, $lName, $candidateId, $activityId, $priorityId, $consultantId, $subject, $todoDate, $todoTime, $todoDuration, $todoNote, $actionDate, $actionTime, $actionDuration, $actionNote, $loginAccount)
{
    $stmt = $mysqli->prepare("INSERT INTO
									  diarynote(
									  noteType,
									  firstName,
									  lastName,
									  candidateId,
									  activityId,
									  priorityId,
									  consultantId,
									  subject,
									  todoDate,
									  todoTime,
									  todoDuration,
									  todoNote,
									  actionDate,
									  actionTime,
									  actionDuration,
									  actionNote,
									  createdDate,
									  modifiedDate,
									  createdBy,
									  lastmodBy,
									  loginAccount)
									VALUES(
									  ?,
									  ?,
									  ?,
									  ?,
									  ?,
									  ?,
									  ?,
									  ?,
									  ?,
									  ?,
									  ?,
									  ?,
									  ?,
									  ?,
									  ?,
									  ?,
									  NOW(),
									  NOW(),
									  ?,
									  ?,
									  ?)") or die ($mysqli->error);
    $stmt->bind_param("ssssiiisssssssssiis", $noteType, $fName, $lName, $candidateId, $activityId, $priorityId, $consultantId, $subject, $todoDate, $todoTime, $todoDuration, $todoNote, $actionDate, $actionTime, $actionDuration, $actionNote, $consultantId, $consultantId, $loginAccount) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    if ($nrows == '1') {
        return 'DIARYNOTEADDED';
    } else {
        return $mysqli->error;
    }
}

function updateCandidateDocs($mysqli, $candidateId, $docTypeId, $fileName, $filePath, $validFrom, $validTo, $reviewDate, $notes)
{
    $chk = $mysqli->prepare("SELECT * FROM candidate_document WHERE candidateId = ? AND fileName = ?") or die($mysqli->error);
    $chk->bind_param("ss", $candidateId, $fileName) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        $up = $mysqli->prepare("UPDATE candidate_document SET filePath = ?, docTypeId = ?, createdDate = NOW(), validfrom = ?, validto = ?, reviewdate = ?, notes = ? WHERE candidateId = ? AND fileName = ?") or die($mysqli->error);
        $up->bind_param("sissssss", $filePath, $docTypeId, $validFrom, $validTo, $reviewDate, $notes, $candidateId, $fileName) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'Updated';
        } else {
            return $mysqli->error;
        }
    } else {
        $stmt = $mysqli->prepare("INSERT INTO candidate_document(docTypeId,candidateId,fileName,filePath,createdDate,validfrom,validto,reviewdate,notes) VALUES(?,?,?,?,NOW(),?,?,?,?)") or die($mysqli->error);
        $stmt->bind_param("isssssss", $docTypeId, $candidateId, $fileName, $filePath, $validFrom, $validTo, $reviewDate, $notes) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'Added';
        } else {
            return $mysqli->error;
        }
    }
}

function uploadJotDocuments($candid, $filePath, $passportFile, $birthFile, $citizenFile, $drivingFile, $medicareFile, $studentFile, $policeFile)
{

    if (!file_exists('documents/' . $candid)) {
        mkdir('documents/' . $candid, 0777);
    }
    $fileName = $_FILES['file']['name'];
    $filePath = $output_dir . $_FILES['file']['name'];
    $update = updateCandidateDocs($mysqli, $candid, $docTypeId, $fileName, $filePath, $validFrom, $validTo, $reviewDate, $notes);
    if (($update == 'Added') || ($update == 'Updated')) {
        try {
            if (move_uploaded_file($_FILES['file']['tmp_name'], $output_dir . $_FILES['file']['name'])) {
                echo getCandidateDocuments($mysqli, $candid);
            } else {
                throw new Exception('Could not move file');
            }
        } catch (Exception $e) {
            echo $e->getMessage();
        }
    } else {
        echo 'Error Uploading' . $update;
    }
}

function getDocumentTypeForAccounts($mysqli)
{
    $acc_check = 1;
    $sql = $mysqli->prepare("SELECT typeCode,typeDescription FROM document_type WHERE acc_check = ? ORDER BY typeCode ASC") or die($mysqli->error);
    $sql->bind_param("i", $acc_check) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($typeCode, $typeDescription) or die($mysqli->error);
    $docTypeArray = array();
    while ($sql->fetch()) {
        $docTypeArray[] = array('typeCode' => $typeCode, 'typeDescription' => $typeDescription);
    }
    return $docTypeArray;
}

function getAccountCheckList($mysqli)
{
    $sql = $mysqli->prepare("SELECT id,doc_type_id,description FROM audit_check_list ORDER BY sort ASC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($id, $doc_type_id, $description) or die($mysqli->error);
    $docTypeArray = array();
    while ($sql->fetch()) {
        $docTypeArray[] = array('id' => $id, 'doc_type_id' => $doc_type_id, 'description' => $description);
    }
    return $docTypeArray;
}

function getFinanceCheckList($mysqli)
{
    $sql = $mysqli->prepare("SELECT id,description FROM finance_check_list ORDER BY sort ASC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($id, $description) or die($mysqli->error);
    $docTypeArray = array();
    while ($sql->fetch()) {
        $docTypeArray[] = array('id' => $id, 'description' => $description);
    }
    return $docTypeArray;
}

function getClientAccountCheckList($mysqli)
{
    $sql = $mysqli->prepare("SELECT id,description FROM client_audit_check_list ORDER BY sort ASC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($id, $description) or die($mysqli->error);
    $docTypeArray = array();
    while ($sql->fetch()) {
        $docTypeArray[] = array('id' => $id, 'description' => $description);
    }
    return $docTypeArray;
}

function getDocumentVerifier($mysqli, $typeCode, $canId)
{
    $stmt = $mysqli->prepare("SELECT verifiedBy FROM accounts_check WHERE docType = ? AND empId = ?") or die($mysqli->error);
    $stmt->bind_param("ss", $typeCode, $canId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->verifiedBy;
    } else {
        return null;
    }
}

function validateAuditCheck($mysqli, $canId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM audit_check_data WHERE candidateId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("si", $canId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return 'TRUE';
    } else {
        return $num_of_rows . 'FALSE';
    }
}

function validateFinanceCheck($mysqli, $canId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM finance_check_data WHERE candidateId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("si", $canId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return 'TRUE';
    } else {
        return $num_of_rows . 'FALSE';
    }
}

function validateClientAuditCheck($mysqli, $clientId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT clientId FROM client_audit_check_data WHERE clientId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("ii", $clientId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return 'TRUE';
    } else {
        return $num_of_rows . 'FALSE';
    }
}

function validateAuditCheckEntry($mysqli, $canId)
{
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM audit_check_data WHERE candidateId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $canId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return 'TRUE';
    } else {
        return $num_of_rows . 'FALSE';
    }
}

function validateClientAuditCheckEntry($mysqli, $clientId)
{
    $sqlchk = $mysqli->prepare("SELECT clientId FROM client_audit_check_data WHERE clientId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $clientId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return 'TRUE';
    } else {
        return $num_of_rows . 'FALSE';
    }
}

function validateAuditCheckType($mysqli, $canId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT status FROM audit_check_data WHERE candidateId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("si", $canId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->status;
    } else {
        return null;
    }
}

function validateFinanceCheckType($mysqli, $canId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT status FROM finance_check_data WHERE candidateId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("si", $canId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->status;
    } else {
        return null;
    }
}

function validateClientAuditCheckType($mysqli, $clientId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT status FROM client_audit_check_data WHERE clientId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("ii", $clientId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->status;
    } else {
        return null;
    }
}

function validatePayrollAuditCheckType($mysqli, $canId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT payroll_status FROM audit_check_data WHERE candidateId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("si", $canId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->payroll_status;
    } else {
        return null;
    }
}

function validateClientPayrollAuditCheckType($mysqli, $clientId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT payroll_status FROM client_audit_check_data WHERE clientId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("ii", $clientId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->payroll_status;
    } else {
        return null;
    }
}

function getAuditCheckConsultant($mysqli, $canId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT consultant FROM audit_check_data WHERE candidateId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("si", $canId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->consultant;
    } else {
        return null;
    }
}

function getFinanceCheckUser($mysqli, $canId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT accounts_user FROM finance_check_data WHERE candidateId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("si", $canId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->accounts_user;
    } else {
        return null;
    }
}

function getFinanceCheckTypeById($mysqli, $chkType)
{
    $sqlchk = $mysqli->prepare("SELECT description FROM finance_check_list WHERE id = ?") or die ($mysqli->error);
    $sqlchk->bind_param("i", $chkType) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->description;
    } else {
        return null;
    }
}

function getFinanceCheckByCandidate($mysqli, $canId)
{
    $sqlchk = $mysqli->prepare("SELECT status,chkType FROM finance_check_data WHERE candidateId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $canId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->bind_result($status, $chkType) or die($mysqli->error);
    $sqlchk->store_result();
    $statusCheck = '';
    $statusCheckYes = '';
    while ($sqlchk->fetch()) {
        if ($chkType == '1') {
            if ($status == 'Yes') {
                $statusCheckYes = 'Yes' . '-' . getFinanceCheckTypeById($mysqli, $chkType);
            } else {
                $statusCheck = 'No';
            }
        } elseif ($chkType == '2') {
            if ($status == 'Yes') {
                $statusCheckYes = 'Yes' . '-' . getFinanceCheckTypeById($mysqli, $chkType);
            } else {
                $statusCheck = 'No';
            }
        } elseif ($chkType == '3') {
            if ($status == 'Yes') {
                $statusCheckYes = 'Yes' . '-' . getFinanceCheckTypeById($mysqli, $chkType);
            } else {
                $statusCheck = 'No';
            }
        }
    }
    if (strpos($statusCheckYes, 'Yes') !== false) {
        return $statusCheckYes;
    } else {
        return $statusCheck;
    }
}

function getClientAuditCheckConsultant($mysqli, $clientId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT consultant FROM client_audit_check_data WHERE clientId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("ii", $clientId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->consultant;
    } else {
        return null;
    }
}

function getAuditCheckTime($mysqli, $canId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT checked_time FROM audit_check_data WHERE candidateId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("si", $canId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->checked_time;
    } else {
        return null;
    }
}

function getFinanceCheckTime($mysqli, $canId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT checked_time FROM finance_check_data WHERE candidateId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("si", $canId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->checked_time;
    } else {
        return null;
    }
}

function getClientAuditCheckTime($mysqli, $clientId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT checked_time FROM client_audit_check_data WHERE clientId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("ii", $clientId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->checked_time;
    } else {
        return null;
    }
}

function getPayrollAuditCheckTime($mysqli, $canId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT verified_time FROM audit_check_data WHERE candidateId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("si", $canId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->verified_time;
    } else {
        return null;
    }
}

function getClientPayrollAuditCheckTime($mysqli, $clientId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT verified_time FROM client_audit_check_data WHERE clientId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("ii", $clientId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $verified_time = $sqlchk->get_result()->fetch_object()->verified_time;
    return $verified_time;
}

function getAuditCheckPayrollOfficer($mysqli, $canId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT payroll_officer FROM audit_check_data WHERE candidateId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("si", $canId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->payroll_officer;
    } else {
        return null;
    }
}

function getClientAuditCheckPayrollOfficer($mysqli, $clientId, $chkTypeName)
{
    $sqlchk = $mysqli->prepare("SELECT payroll_officer FROM client_audit_check_data WHERE clientId = ? AND chkType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("ii", $clientId, $chkTypeName) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->payroll_officer;
    } else {
        return null;
    }
}

function updateAuditCheckPayroll($mysqli, $canId, $user, $chkTypeName, $chkTypeSelection, $clientid, $positionid)
{
    if (validateAuditCheck($mysqli, $canId, $chkTypeName) == 'TRUE') {
        $up = $mysqli->prepare("UPDATE audit_check_data SET 
                                                        clientId = ?,
                                                        positionId = ?,
                                                        payroll_status = ?,
                                                        payroll_officer = ?,
                                                        verified_time = NOW()
                                                WHERE candidateId = ? AND chkType = ? ") or die($mysqli->error);
        $up->bind_param("iisssi", $clientid, $positionid, $chkTypeSelection, $user, $canId, $chkTypeName) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'updated';
        } else {
            return 'error updating ' . $mysqli->error;
        }
    } elseif ($chkTypeName == 19) {
        return saveAuditByPayroll($mysqli, $canId, $user, $chkTypeName, $chkTypeSelection);
    }
}

function updateClientAuditCheckPayroll($mysqli, $clientId, $user, $chkTypeName, $chkTypeSelection)
{
    if (validateClientAuditCheck($mysqli, $clientId, $chkTypeName) == 'TRUE') {
        $up = $mysqli->prepare("UPDATE client_audit_check_data SET 
                                                        payroll_status = ?,
                                                        payroll_officer = ?,
                                                        verified_time = NOW()
                                                WHERE clientId = ? AND chkType = ? ") or die($mysqli->error);
        $up->bind_param("ssii", $chkTypeSelection, $user, $clientId, $chkTypeName) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'updated';
        } else {
            return 'error updating ' . $mysqli->error;
        }
    } else {
        return saveAuditByPayroll($mysqli, $clientId, $user, $chkTypeName, $chkTypeSelection);
    }
}

function getClientAllocatedOnAudit($mysqli, $canId)
{
    $sqlchk = $mysqli->prepare("SELECT DISTINCT clientId FROM audit_check_data WHERE candidateId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $canId) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->clientId;
    } else {
        return null;
    }
}

function getPositionAllocatedOnAudit($mysqli, $canId)
{
    $sqlchk = $mysqli->prepare("SELECT DISTINCT positionId FROM audit_check_data WHERE candidateId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $canId) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->positionId;
    } else {
        return null;
    }
}

function updateAuditMailByConsultant($mysqli, $canId, $clientid, $positionid, $jobOrderNotify)
{
    if (validateAuditCheckEntry($mysqli, $canId) == 'TRUE') {
        $up = $mysqli->prepare("UPDATE audit_check_data SET clientId = ?,
                                                        positionId = ?,
                                                        jobOrderNotify = ?
                                                WHERE candidateId = ?") or die($mysqli->error);
        $up->bind_param("iiis", $clientid, $positionid, $jobOrderNotify, $canId) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'updated';
        } else {
            return 'error updating ' . $mysqli->error;
        }
    }
}

function updateClientAuditMailByConsultant($mysqli, $clientId, $jobOrderNotify)
{
    if (validateClientAuditCheckEntry($mysqli, $clientId) == 'TRUE') {
        $up = $mysqli->prepare("UPDATE client_audit_check_data SET 
                                                        jobOrderNotify = ?
                                                WHERE clientId = ?") or die($mysqli->error);
        $up->bind_param("is", $jobOrderNotify, $clientId) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'updated';
        } else {
            return 'error updating ' . $mysqli->error;
        }
    }
}

function removeAccountsDocumentType($mysqli, $canId, $dcType)
{
    $delete = $mysqli->prepare("DELETE FROM accounts_check WHERE empId = ? AND docType = ?") or die($mysqli->error);
    $delete->bind_param("ss", $canId, $dcType) or die($mysqli->error);
    $delete->execute();
    $nr = $delete->affected_rows;
    if ($nr > 0) {
        return 'deleted';
    } else {
        return 'error deleting ' . $mysqli->error;
    }
}

function validateQuestionnaire($mysqli, $canId)
{
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM questionnaire WHERE candidateId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $canId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateSignature($mysqli, $canId)
{
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM employee_signature WHERE candidateId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $canId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function addQuestionnaire($mysqli, $candidateId)
{
    if (!validateQuestionnaire($mysqli, $candidateId)) {
        $stmt = $mysqli->prepare("INSERT INTO questionnaire(candidateId,created_at) VALUES(?,NOW())") or die($mysqli->error);
        $stmt->bind_param("s", $candidateId) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows > 0) {
            return 'added';
        } else {
            return $mysqli->error;
        }
    } else {
        return 'exists';
    }
}

function addSignature($mysqli, $candidateId)
{
    if (!validateSignature($mysqli, $candidateId)) {
        $stmt = $mysqli->prepare("INSERT INTO employee_signature(candidateId,created_at) VALUES(?,NOW())") or die($mysqli->error);
        $stmt->bind_param("s", $candidateId) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows > 0) {
            return 'added';
        } else {
            return $mysqli->error;
        }
    } else {
        return 'exists';
    }
}

function saveAuditByPayroll($mysqli, $canId, $user, $chkTypeName, $chkTypeSelection)
{
    $status = '';
    $stmt = $mysqli->prepare("INSERT INTO audit_check_data(candidateId,chkType,status,consultant,payroll_status,checked_time,verified_time) VALUES(?,?,?,?,?,NOW(),NOW())") or die($mysqli->error);
    $stmt->bind_param("sisss", $canId, $chkTypeName, $status, $user, $chkTypeSelection) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    if ($nrows == '1') {
        return 'added';
    } else {
        return 'error inserting' . $mysqli->error;
    }
}

function saveClientAuditByPayroll($mysqli, $clientId, $user, $chkTypeName, $chkTypeSelection)
{
    $status = '';
    $stmt = $mysqli->prepare("INSERT INTO client_audit_check_data(clientId,chkType,status,consultant,payroll_status,checked_time,verified_time) VALUES(?,?,?,?,?,NOW(),NOW())") or die($mysqli->error);
    $stmt->bind_param("iisss", $clientId, $chkTypeName, $status, $user, $chkTypeSelection) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    if ($nrows == '1') {
        return 'added';
    } else {
        return 'error inserting' . $mysqli->error;
    }
}

function updateAuditCheckList($mysqli, $canId, $user, $chkTypeName, $chkTypeSelection)
{
    if (validateAuditCheck($mysqli, $canId, $chkTypeName) == 'TRUE') {
        $up = $mysqli->prepare("UPDATE audit_check_data SET 
                                                        status = ?,
                                                        consultant = ?,
                                                        checked_time = NOW()
                                                WHERE candidateId = ? AND chkType = ? ") or die($mysqli->error);
        $up->bind_param("sssi", $chkTypeSelection, $user, $canId, $chkTypeName) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'updated';
        } else {
            return 'error updating ' . $mysqli->error;
        }
    } else {
        $stmt = $mysqli->prepare("INSERT INTO audit_check_data(candidateId,chkType,status,consultant,checked_time) VALUES(?,?,?,?,NOW())") or die($mysqli->error);
        $stmt->bind_param("siss", $canId, $chkTypeName, $chkTypeSelection, $user) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'added';
        } else {
            return 'error inserting' . $mysqli->error;
        }
    }
}

function updateFinanceCheckList($mysqli, $canId, $user, $chkTypeName, $chkTypeSelection)
{
    if (validateFinanceCheck($mysqli, $canId, $chkTypeName) == 'TRUE') {
        $up = $mysqli->prepare("UPDATE finance_check_data SET 
                                                        status = ?,
                                                        accounts_user = ?,
                                                        checked_time = NOW()
                                                WHERE candidateId = ? AND chkType = ? ") or die($mysqli->error);
        $up->bind_param("sssi", $chkTypeSelection, $user, $canId, $chkTypeName) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'updated';
        } else {
            return 'error updating ' . $mysqli->error;
        }
    } else {
        $stmt = $mysqli->prepare("INSERT INTO finance_check_data(candidateId,chkType,status,accounts_user,checked_time) VALUES(?,?,?,?,NOW())") or die($mysqli->error);
        $stmt->bind_param("siss", $canId, $chkTypeName, $chkTypeSelection, $user) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'added';
        } else {
            return 'error inserting' . $mysqli->error;
        }
    }
}

function updateClientAuditCheckList($mysqli, $clientId, $user, $chkTypeName, $chkTypeSelection)
{
    if (validateClientAuditCheck($mysqli, $clientId, $chkTypeName) == 'TRUE') {
        $up = $mysqli->prepare("UPDATE client_audit_check_data SET 
                                                        status = ?,
                                                        consultant = ?,
                                                        checked_time = NOW()
                                                WHERE clientId = ? AND chkType = ? ") or die($mysqli->error);
        $up->bind_param("sssi", $chkTypeSelection, $user, $clientId, $chkTypeName) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'updated';
        } else {
            return 'error updating ' . $mysqli->error;
        }
    } else {
        $stmt = $mysqli->prepare("INSERT INTO client_audit_check_data(clientId,chkType,status,consultant,checked_time) VALUES(?,?,?,?,NOW())") or die($mysqli->error);
        $stmt->bind_param("iiss", $clientId, $chkTypeName, $chkTypeSelection, $user) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'added';
        } else {
            return 'error inserting' . $mysqli->error;
        }
    }
}

function updateCandidateAddress($mysqli, $canId, $address, $unit_no,$street_number_1, $street_name, $suburb, $state, $postcode)
{
    try {
        $up = $mysqli->prepare("UPDATE candidate SET 
                                                        address = ?,
                                                        unit_no = ?,
                                                        street_number = ?, 
                                                        street_name = ?,
                                                        suburb = ?, 
                                                        state = ?, 
                                                        postcode = ? 
                                                WHERE candidateId = ?") or die($mysqli->error);
        $up->bind_param("ssssssis", $address, $unit_no, $street_number_1, $street_name, $suburb, $state, $postcode, $canId) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'updated';
        } else {
            return 'error updating ' . $mysqli->error;
        }
    } catch (Exception $e) {
        return 'exception ' . $e->getMessage();
    }
}

function getEmployeeCondition($mysqli, $canId)
{
    $sqlchk = $mysqli->prepare("SELECT empCondition FROM candidate WHERE candidateId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $canId) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->empCondition;
    } else {
        return null;
    }
}

function getEmployeePromotionStatus($mysqli, $canId)
{
    $sqlchk = $mysqli->prepare("SELECT promotion FROM candidate WHERE candidateId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $canId) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->promotion;
    } else {
        return null;
    }
}

function getRegPackStatus($mysqli, $canId)
{
    $sqlchk = $mysqli->prepare("SELECT reg_pack_status FROM candidate WHERE candidateId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $canId) or die($mysqli->error);
    $sqlchk->execute();
    $obj = $sqlchk->get_result()->fetch_object();
    if ($obj) {
        return $obj->reg_pack_status;
    } else {
        return null;
    }
}

function updateCandidateInfo($mysqli, $candidateId, $messageid, $firstName, $lastName, $candidatePhone, $candidateMobile, $candidateEmail, $candidateSex, $screenDate, $suburb, $currentWrk, $howfar, $genLabourPay, $criminalConviction, $convictionDescription, $hasCar, $residentStatus, $medicalCondition, $medicalConditionDesc, $workType, $overtime, $bookInterview, $intvwTime, $dob, $consultantId, $empStatus, $empCondition, $regPackStatus, $superMemberNo, $tfn)
{
    $fullName = $firstName . ' ' . $lastName;
    if (empty($empStatus)) {
        $empStatus = 'INACTIVE';
    }
    $chk = $mysqli->prepare("SELECT email FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $chk->bind_param("s", $candidateId) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        try {
            $up = $mysqli->prepare("UPDATE candidate SET firstName = ?, lastName = ?,fullName = ?, homePhoneNo = ?, mobileNo = ?, sex = ?, suburb = ?, currentWrk = ?, howfar = ?, genLabourPay = ?, criminalConviction = ?, convictionDescription = ?, hasCar = ?, residentStatus = ?, medicalCondition = ?, medicalConditionDesc = ?, workType = ?, overtime = ?, bookInterview = ?, intvwTime = ?, consultantId = ?, username = ?, empStatus = ?,dob = ?,empCondition = ?,superMemberNo = ?,tfn = ?, reg_pack_status = ? WHERE email = ? AND candidateId = ?") or die($mysqli->error);
            $up->bind_param("ssssssssssssssssssssssssisiiss", $firstName, $lastName, $fullName, $candidatePhone, $candidateMobile, $candidateSex, $suburb, $currentWrk, $howfar, $genLabourPay, $criminalConviction, $convictionDescription, $hasCar, $residentStatus, $medicalCondition, $medicalConditionDesc, $workType, $overtime, $bookInterview, $intvwTime, $consultantId, $candidateId, $empStatus, $dob, $empCondition, $superMemberNo, $tfn, $regPackStatus, $candidateEmail, $candidateId) or die($mysqli->error);
            if ($up->execute()) {
                $nrow = $up->affected_rows;
                if ($nrow > 0) {
                    return 'existingUpdated';
                } else {
                    return 'error updating chk email' . $mysqli->error . $candidateId;
                }
            } else {
                return $mysqli->error;
            }
        } catch (Exception $e1) {
            return $e1->getMessage();
        }
    } else {
        $pin = null;
        try {
            $pin = generateOnePIN($mysqli, getCandidateNoById($mysqli, $candidateId));
        } catch (Exception $e) {
            echo 'PIN generation Error ' . $e->getMessage();
        }

        $stmt = $mysqli->prepare("INSERT INTO candidate(clockPin,candidateId, messageid, firstName, lastName,fullName, homePhoneNo, mobileNo, email, sex, suburb, currentWrk, howfar, genLabourPay, criminalConviction, convictionDescription, hasCar, residentStatus, medicalCondition, medicalConditionDesc, workType, overtime, bookInterview, intvwTime, consultantId,dob,username,empStatus,empCondition,superMemberNo,tfn,reg_pack_status) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
        $stmt->bind_param("isssssssssssssssssssssssisssisii", $pin, $candidateId, htmlentities($mysqli->real_escape_string($messageid)), $firstName, $lastName, $fullName, $candidatePhone, $candidateMobile, $candidateEmail, $candidateSex, $suburb, $currentWrk, $howfar, $genLabourPay, $criminalConviction, $convictionDescription, $hasCar, $residentStatus, $medicalCondition, $medicalConditionDesc, $workType, $overtime, $bookInterview, $intvwTime, $consultantId, $dob, $candidateId, $empStatus, $empCondition, $superMemberNo, $tfn, $regPackStatus) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            addUID($mysqli, $candidateId);
            addQuestionnaire($mysqli, $candidateId);
            addSignature($mysqli, $candidateId);
            return 'added';
        } else {
            return 'error inserting' . $mysqli->error;
        }
        /*}else{
            goto regenPin;
        }*/
    }
}

function updateCandidateScreening($mysqli, $candidateId, $messageid, $firstName, $lastName, $candidatePhone, $candidateMobile, $candidateEmail, $candidateSex, $screenDate, $suburb, $currentWrk, $howfar, $criminalConviction, $convictionDescription, $hasCar, $residentStatus, $medicalCondition, $medicalConditionDesc, $workType, $overtime, $bookInterview, $intvwTime, $dob, $consultantId, $empStatus)
{
    if (empty($empStatus)) {
        $empStatus = 'ACTIVE';
    }
    $chk = $mysqli->prepare("SELECT email FROM candidate WHERE email = ?") or die($mysqli->error);
    $chk->bind_param("s", $candidateEmail) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        $up = $mysqli->prepare("UPDATE candidate SET firstName = ?, lastName = ?, homePhoneNo = ?, mobileNo = ?, sex = ?, screenDate = ?, suburb = ?, currentWrk = ?, howfar = ?, criminalConviction = ?, convictionDescription = ?, hasCar = ?, residentStatus = ?, medicalCondition = ?, medicalConditionDesc = ?, workType = ?, overtime = ?, bookInterview = ?, intvwTime = ?, consultantId = ?, empStatus = ?,dob = ? WHERE email = ?") or die($mysqli->error);
        $up->bind_param("sssssssssssssssssssisss", $firstName, $lastName, $candidatePhone, $candidateMobile, $candidateSex, $screenDate, $suburb, $currentWrk, $howfar, $criminalConviction, $convictionDescription, $hasCar, $residentStatus, $medicalCondition, $medicalConditionDesc, $workType, $overtime, $bookInterview, $intvwTime, $consultantId, $empStatus, $dob, $candidateEmail) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'existingUpdated';
        } else {
            return $mysqli->error;
        }
    }
    /*else {
        $pin = null;
        try {
            $pin = generateOnePIN($mysqli, getCandidateNoById($mysqli, $candidateId));
        }catch (Exception $e){
            echo 'PIN generation Error '.$e->getMessage();
        }
        $stmt = $mysqli->prepare("INSERT INTO candidate(clockPin,candidateId, messageid, firstName, lastName, homePhoneNo, mobileNo, email, sex, screenDate, suburb, currentWrk, howfar, criminalConviction, convictionDescription, hasCar, residentStatus, medicalCondition, medicalConditionDesc, workType, overtime, bookInterview, intvwTime, consultantId,dob,username,empStatus) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
        $stmt->bind_param("issssssssssssssssssssssisss",$pin, $candidateId, htmlentities($mysqli->real_escape_string($messageid)), $firstName, $lastName, $candidatePhone, $candidateMobile, $candidateEmail, $candidateSex, $screenDate, $suburb, $currentWrk, $howfar, $criminalConviction, $convictionDescription, $hasCar, $residentStatus, $medicalCondition, $medicalConditionDesc, $workType, $overtime, $bookInterview, $intvwTime, $consultantId,$dob,$candidateId,$empStatus) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            addUID($mysqli,$candidateId);
            return 'added';
        } else {
            return $mysqli->error;
        }
    }*/
}

function addUID($mysqli, $candidateId)
{
    //$up = $mysqli->prepare("UPDATE uid_container SET candidateId = ? WH")
    $ins = $mysqli->prepare("INSERT INTO uid_container(candidateId) VALUES(?)") or die($mysqli->error);
    $ins->bind_param("s", $candidateId) or die($mysqli->error);
    $ins->execute();
    if ($ins) {
        return 'CandidateId Updated' . $candidateId;
    } else {
        return $mysqli->error;
    }
}

function insertResumeDocuments($mysqli, $candidateId, $messageid, $accountName)
{
    try {
        $tableAttachmentPath = getTableAttachmentPath($mysqli, $accountName);
        $mailatt = $mysqli->prepare("SELECT filepath,filename FROM {$tableAttachmentPath} WHERE messageid = ? ") or die($mysqli->error);
        $mailatt->bind_param("s", htmlentities($mysqli->real_escape_string($messageid))) or die($mysqli->error);
        $mailatt->execute();
        $mailatt->store_result();
        $num_of_rows = $mailatt->num_rows;
        $mailatt->bind_result($filepath, $filename) or die($mysqli->error);
        if ($num_of_rows > 0) {
            $documentArray = array();
            if (!file_exists('./documents/' . $candidateId)) {
                mkdir('./documents/' . $candidateId, 0777);
            }
            while ($mailatt->fetch()) {
                $newFile = './documents/' . $candidateId . '/' . $filename;
                if (!copy($filepath, $newFile)) {
                    $error = 'error copying';
                }
                if (strpos(strtolower($filename), strtolower('resume')) !== false) {
                    $doc_type_id = 24;
                } elseif (strpos(strtolower($filename), strtolower('coverletter')) !== false) {
                    $doc_type_id = 5;
                } else {
                    $doc_type_id = 24;
                }
                $documentArray[] = array('messageid' => $messageid, 'filepath' => './documents/' . $candidateId . '/' . $filename, 'filename' => $filename, 'doc_type_id' => $doc_type_id);
            }
            $mailatt->free_result();
            $mailatt->close();
            $insert = $mysqli->prepare("INSERT INTO candidate_document(messageid,candidateId,docTypeId,fileName,filePath) VALUES(?,?,?,?,?)") or die($mysqli->error);
            foreach ($documentArray as $doc) {
                $insert->bind_param("sssss", htmlentities($mysqli->real_escape_string($messageid)), $candidateId, $doc['doc_type_id'], $doc['filename'], $doc['filepath']) or die($mysqli->error);
                $insert->execute() or die($mysqli->error);
                $insert->fetch();
                $nrows = $insert->affected_rows;
            }
            $insert->close();
            return true;
        } else {
            return false;
        }
    } catch (Exception $e1) {
        return false;
    }
}

function getDocumentTypes($mysqli)
{
    $docTypes = $mysqli->prepare("SELECT 
	   typeId,	
	   typeCode,
	   typeLabel,
	   typeDescription 
	FROM
	  document_type
	ORDER BY typeLabel ASC") or die($mysqli->error);
    $docTypes->execute();
    $docTypes->bind_result($typeId, $typeCode, $typeLabel, $typeDescription);
    $docTypeArray = array();
    while ($docTypes->fetch()) {
        $docTypeArray[] = array('typeId' => $typeId, 'typeLabel' => $typeLabel);
    }
    return $docTypeArray;
}

function updateResumeDocuments($mysqli, $candidateId, $messageid, $accountName)
{
    try {
        $tableAttachmentPath = getTableAttachmentPath($mysqli, $accountName);
        $mailatt = $mysqli->prepare("SELECT filepath,filename FROM {$tableAttachmentPath} WHERE messageid = ? ") or die($mysqli->error);
        $mailatt->bind_param("s", htmlentities($mysqli->real_escape_string($messageid))) or die($mysqli->error);
        $mailatt->execute();
        $mailatt->store_result();
        $num_of_rows = $mailatt->num_rows;
        $mailatt->bind_result($filepath, $filename) or die($mysqli->error);
        if ($num_of_rows > 0) {
            $documentArray = array();
            if (!file_exists('./documents/' . $candidateId)) {
                mkdir('./documents/' . $candidateId, 0777);
            }
            while ($mailatt->fetch()) {
                $newFile = './documents/' . $candidateId . '/' . $filename;
                if (!copy($filepath, $newFile)) {
                    $error = 'error copying';
                }
                $documentArray[] = array('messageid' => $messageid, 'filepath' => './documents/' . $candidateId . '/' . $filename, 'filename' => $filename);
            }
            $mailatt->free_result();
            $mailatt->close();
            $up = $mysqli->prepare("UPDATE candidate_document SET messageid = ?,docTypeId = ?, fileName = ?,filePath = ? WHERE candidateId = ?") or die($mysqli->error);
            $docTypeId = 0;
            foreach ($documentArray as $doc) {
                if (strpos(strtolower($doc['filename']), 'resume') !== false) {
                    $docTypeId = 24;
                } elseif (strpos(strtolower($doc['filename']), 'cover letter') !== false) {
                    $docTypeId = 5;
                }
                $up->bind_param("sisss", htmlentities($mysqli->real_escape_string($messageid)), $docTypeId, $candidateId, $doc['filename'], $doc['filepath']) or die($mysqli->error);
                $up->execute() or die($mysqli->error);
                $up->fetch();
                $nrows = $up->affected_rows;
            }
            $up->close();
            return true;
        } else {
            return false;
        }
    } catch (Exception $e1) {
        return false;
    }
}

function updateCandidateOtherLicence($mysqli, $candidateId, $value)
{
    $chk = $mysqli->prepare("SELECT candidateId FROM candidate_otherlicence WHERE candidateId = ?  AND otherLicenceId = ?") or die($mysqli->error);
    $chk->bind_param("si", $candidateId, $value) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        return false;
    } else {
        $stmt = $mysqli->prepare("INSERT INTO candidate_otherlicence(candidateId, otherLicenceId) VALUES(?,?)") or die($mysqli->error);
        $stmt->bind_param("si", $candidateId, $value) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return true;
        } else {
            return false;
        }
    }
}

function updateSearchCandidateOtherLicence($mysqli, $sessionId, $value)
{
    $chk = $mysqli->prepare("SELECT sessionId FROM search_otherlicence WHERE sessionId = ?  AND otherLicenceId = ?") or die($mysqli->error);
    $chk->bind_param("si", $sessionId, $value) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        return false;
    } else {
        $stmt = $mysqli->prepare("INSERT INTO search_otherlicence(sessionId, otherLicenceId) VALUES(?,?)") or die($mysqli->error);
        $stmt->bind_param("si", $sessionId, $value) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return true;
        } else {
            return false;
        }
    }
}

function getCandidateAge($mysqli, $canId)
{
    $birthDate = getCandidateDOBById($mysqli, $canId);
    if (!empty($birthDate)) {
        $birthDate = explode("/", $birthDate ?? '');
        $age = (date("md", date("U", mktime(0, 0, 0, $birthDate[0], $birthDate[1], $birthDate[2]))) > date("md")
            ? ((date("Y") - $birthDate[2]))// - 1
            : (date("Y") - $birthDate[2]));
        return $age;
    }
}

function removeDocument($mysqli, $candidateId, $filePath, $userType)
{
    $delete = $mysqli->prepare("DELETE FROM candidate_document WHERE candidateId = ? AND filePath = ?") or die($mysqli->error);
    $delete->bind_param("ss", $candidateId, $filePath) or die($mysqli->error);
    $delete->execute();
    $nr = $delete->affected_rows;
    if ($nr > 0) {
        unlink(str_replace('./', '/var/www/html/', $filePath));
        return getCandidateDocuments($mysqli, $candidateId, $userType);
    } else {
        return getCandidateDocuments($mysqli, $candidateId, $userType);
    }
}

function removeClientDocument($mysqli, $clientId, $filePath)
{
    $delete = $mysqli->prepare("DELETE FROM client_document WHERE clientId = ? AND filePath = ?") or die($mysqli->error);
    $delete->bind_param("is", $clientId, $filePath) or die($mysqli->error);
    $delete->execute();
    $nr = $delete->affected_rows;
    if ($nr > 0) {
        unlink($filePath);
        return getClientDocuments($mysqli, $clientId);
    } else {
        return getClientDocuments($mysqli, $clientId);
    }
}

function removeCandidateOtherLicence($mysqli, $candidateId, $otherLicenceId)
{
    $delete = $mysqli->prepare("DELETE FROM candidate_otherlicence WHERE candidateId = ? AND otherLicenceId = ?") or die($mysqli->error);
    $delete->bind_param("si", $candidateId, $otherLicenceId) or die($mysqli->error);
    $delete->execute();
    $nr = $delete->affected_rows;
    if ($nr > 0) {
        return getOtherLicenceTypesByCandidate($mysqli, $candidateId);
    } else {
        return getOtherLicenceTypesByCandidate($mysqli, $candidateId);
    }
}

function removeSearchCandidateOtherLicence($mysqli, $sessionId, $limitStart, $otherLicenceId)
{
    $delete = $mysqli->prepare("DELETE FROM search_otherlicence WHERE sessionId = ? AND otherLicenceId = ?") or die($mysqli->error);
    $delete->bind_param("si", $sessionId, $otherLicenceId) or die($mysqli->error);
    $delete->execute();
    $nr = $delete->affected_rows;
    if ($nr > 0) {
        return getSearchOtherLicenceTypesByCandidate($mysqli, $limitStart, $sessionId);
    } else {
        return getSearchOtherLicenceTypesByCandidate($mysqli, $limitStart, $sessionId);
    }
}

function updateCandidateSafetyGear($mysqli, $candidateId, $value)
{
    $chk = $mysqli->prepare("SELECT candidateId FROM candidate_safetygear WHERE candidateId = ?  AND safetyGearId = ?") or die($mysqli->error);
    $chk->bind_param("si", $candidateId, $value) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        return false;
    } else {
        $stmt = $mysqli->prepare("INSERT INTO candidate_safetygear(candidateId, safetyGearId) VALUES(?,?)") or die($mysqli->error);
        $stmt->bind_param("si", $candidateId, $value) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return true;
        } else {
            return false;
        }
    }
}

function updateCandidateExpOperating($mysqli, $candidateId, $value)
{
    $stmt = $mysqli->prepare("INSERT INTO candidate_expoperating(candidateId, expOperatingId) VALUES(?,?)") or die($mysqli->error);
    $stmt->bind_param("si", $candidateId, $value) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return false;
    }
}

function updateCandidateShiftAvailable($mysqli, $candidateId, $value)
{
    $stmt = $mysqli->prepare("INSERT INTO candidate_shiftavailable(candidateId, shiftAvailableId) VALUES(?,?)") or die($mysqli->error);
    $stmt->bind_param("si", $candidateId, $value) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return false;
    }
}

function getOtherLicenceTypesByCandidate($mysqli, $candidateId)
{
    $licenceTypes = $mysqli->prepare("SELECT 
										candidate_otherlicence.candidateId,
  										candidate_otherlicence.otherLicenceId,
  										otherlicence.otherLicenceType,
										otherlicence.code
									  FROM
										otherlicence
									  INNER JOIN candidate_otherlicence ON (otherlicence.otherLicenceId = candidate_otherlicence.otherLicenceId)
									  WHERE
										candidate_otherlicence.candidateId = ?
									  ORDER BY
										otherlicence.otherLicenceType ASC") or die($mysqli->error);
    $licenceTypes->bind_param("s", $candidateId) or die($mysqli->error);
    $licenceTypes->execute();
    $licenceTypes->bind_result($candidateId, $otherLicenceId, $otherLicenceType, $code);
    $row = '';
    while ($licenceTypes->fetch()) {
        $row = $row . '<tr><td class="cid" data-cid="' . $candidateId . '">' . $code . '</td><td class="oid" data-oid="' . $otherLicenceId . '">' . $otherLicenceType . '</td><td><a href="#" class="attrRemove"><i class="fa fa-fw fa-lg fa-trash"></i>Remove</a></td></tr>';
    }
    return $row;
}

function getSearchOtherLicenceTypesByCandidate($mysqli, $limitStart, $sessionId)
{
    $limitCount = 5;
    $licenceTypes = $mysqli->prepare("SELECT 
										search_otherlicence.sessionId,
  										search_otherlicence.otherLicenceId,
  										otherlicence.otherLicenceType,
										otherlicence.code
									  FROM
										otherlicence
									  INNER JOIN search_otherlicence ON (otherlicence.otherLicenceId = search_otherlicence.otherLicenceId)
									  WHERE
										search_otherlicence.sessionId = ?
									  ORDER BY
										otherlicence.otherLicenceType ASC
								 	  LIMIT $limitStart, $limitCount") or die($mysqli->error);
    $licenceTypes->bind_param("s", $sessionId) or die($mysqli->error);
    $licenceTypes->execute();
    $licenceTypes->bind_result($sessionId, $otherLicenceId, $otherLicenceType, $code);
    $row = '';
    while ($licenceTypes->fetch()) {
        $row = $row . '<tr><td class="sid" data-sid="' . $sessionId . '">' . $code . '</td><td class="oid" data-oid="' . $otherLicenceId . '">' . $otherLicenceType . '</td><td><a href="#" class="attrRemove"><i class="fa fa-fw fa-lg fa-trash"></i>Remove</a></td></tr>';
    }
    return $row;
}

function vaccinationIndicator($mysqli, $candidateId)
{
    $docs = $mysqli->prepare("SELECT 
								  candidate_document.docTypeId,
								  document_type.typeCode
								FROM
								  candidate_document
								INNER JOIN document_type ON (candidate_document.docTypeId = document_type.typeId)
								WHERE
								  candidate_document.candidateId = ?
								ORDER BY
								  candidate_document.docTypeId") or die($mysqli->error);
    $docs->bind_param("s", $candidateId) or die($mysqli->error);
    $docs->execute();
    $docs->bind_result($docTypeId, $typeCode) or die($mysqli->error);
    $vaccinated = '';
    $documentType = 0;
    while ($docs->fetch()) {
        if ($docTypeId == 57) {
            $vaccinated = $vaccinated . ' 1st dose';
        }
        if ($docTypeId == 58) {
            $vaccinated = $vaccinated . ', 2nd dose';
        }
        if ($docTypeId == 59) {
            $vaccinated = $vaccinated . ', 3rd dose';
            $documentType = $docTypeId;
        }

    }
    if ($documentType == 59) {
        return 'Fully vaccinated';
    } else {
        return $vaccinated;
    }
}

function getCandidateDocumentTypeIndicator($mysqli, $candidateId)
{
    /*$itemIds = array(38, 39, 40, 41);
    $docTypes = join("','", $itemIds);*/
    $docs = $mysqli->prepare("SELECT 
								  candidate_document.docTypeId,
								  document_type.typeCode
								FROM
								  candidate_document
								INNER JOIN document_type ON (candidate_document.docTypeId = document_type.typeId)
								WHERE
								  candidate_document.candidateId = ?
								ORDER BY
								  candidate_document.fileName") or die($mysqli->error);
    $docs->bind_param("s", $candidateId) or die($mysqli->error);
    $docs->execute();
    $docs->bind_result($docTypeId, $typeCode) or die($mysqli->error);

    $row38 = '';
    $row39 = '';
    $row40 = '';
    $row41 = '';
    $rowblank = '';
    $doctypes = array();
    while ($docs->fetch()) {
        array_push($doctypes, $docTypeId);
        /*if ($docTypeId == 38) {
            $row38 = '<td bgcolor="#adff2f" style="color: black">' . $typeCode . '</td><td>&nbsp;</td>';
        }elseif ($docTypeId == 39) {
            $row39 = '<td bgcolor="#adff2f" style="color: black">' . $typeCode . '</td><td>&nbsp;</td>';
        }elseif ($docTypeId == 40) {
            $row40 = '<td bgcolor="#adff2f" style="color: black">' . $typeCode . '</td><td>&nbsp;</td>';
        }elseif ($docTypeId == 41) {
            $row41 = '<td bgcolor="#adff2f" style="color: black">' . $typeCode . '</td><td>&nbsp;</td>';
        }*/
    }
    if (empty($row38) && empty($row39) && empty($row40) && empty($row41)) {
        if (!in_array(38, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="red" style="min-width: 20px;color: white;">' . getDocumentTypeCode($mysqli, 38) . '</td><td>&nbsp;</td>';
        } elseif (in_array(38, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="#adff2f" style="min-width: 20px;color: black;">' . getDocumentTypeCode($mysqli, 38) . '</td><td>&nbsp;</td>';
        }
        if (!in_array(39, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="red" style="min-width: 20px;color: white;">' . getDocumentTypeCode($mysqli, 39) . '</td><td>&nbsp;</td>';
        } elseif (in_array(39, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="#adff2f" style="min-width: 20px;color: black;">' . getDocumentTypeCode($mysqli, 39) . '</td><td>&nbsp;</td>';
        }
        if (!in_array(40, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="red" style="min-width: 20px;color: white;">' . getDocumentTypeCode($mysqli, 40) . '</td><td>&nbsp;</td>';
        } elseif (in_array(40, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="#adff2f" style="min-width: 20px;color: black;">' . getDocumentTypeCode($mysqli, 40) . '</td><td>&nbsp;</td>';
        }
        if (!in_array(41, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="red" style="min-width: 20px;color: white;">' . getDocumentTypeCode($mysqli, 41) . '</td><td>&nbsp;</td>';
        } elseif (in_array(41, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="#adff2f" style="min-width: 20px;color: black;">' . getDocumentTypeCode($mysqli, 41) . '</td><td>&nbsp;</td>';
        }
        if (!in_array(18, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="red" style="min-width: 20px;color: white;">' . getDocumentTypeCode($mysqli, 18) . '</td><td>&nbsp;</td>';
        } elseif (in_array(18, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="#adff2f" style="min-width: 20px;color: black;">' . getDocumentTypeCode($mysqli, 18) . '</td><td>&nbsp;</td>';
        }
        if (!in_array(43, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="red" style="min-width: 20px;color: white;">' . getDocumentTypeCode($mysqli, 43) . '</td><td>&nbsp;</td>';
        } elseif (in_array(43, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="#adff2f" style="min-width: 20px;color: black;">' . getDocumentTypeCode($mysqli, 43) . '</td><td>&nbsp;</td>';
        }
        if (!in_array(57, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="red" style="min-width: 20px;color: white;">' . getDocumentTypeCode($mysqli, 57) . '</td><td>&nbsp;</td>';
        } elseif (in_array(57, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="#adff2f" style="min-width: 20px;color: black;">' . getDocumentTypeCode($mysqli, 57) . '</td><td>&nbsp;</td>';
        }
        if (!in_array(58, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="red" style="min-width: 20px;color: white;">' . getDocumentTypeCode($mysqli, 58) . '</td><td>&nbsp;</td>';
        } elseif (in_array(58, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="#adff2f" style="min-width: 20px;color: black;">' . getDocumentTypeCode($mysqli, 58) . '</td><td>&nbsp;</td>';
        }
        if (!in_array(59, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="red" style="min-width: 20px;color: white;">' . getDocumentTypeCode($mysqli, 59) . '</td><td>&nbsp;</td>';
        } elseif (in_array(59, $doctypes, true)) {
            $rowblank = $rowblank . '<td bgcolor="#adff2f" style="min-width: 20px;color: black;">' . getDocumentTypeCode($mysqli, 59) . '</td><td>&nbsp;</td>';
        }
    }
    return $rowblank;
}

function getCandidateDocuments($mysqli, $candidateId, $user)
{
    $docs = $mysqli->prepare("SELECT 
								  candidate_document.docId,
								  candidate_document.docTypeId,
								  candidate_document.messageid,
								  candidate_document.candidateId,
								  candidate_document.fileName,
								  candidate_document.filePath,
								  candidate_document.validFrom,
								  candidate_document.validTo,
								  candidate_document.reviewDate,
								  candidate_document.notes
								FROM
								  candidate_document
								INNER JOIN 
								  candidate_document_order ON (candidate_document.docTypeId = candidate_document_order.docTypeId)
								WHERE
								  candidate_document.candidateId = ?
								ORDER BY
								  candidate_document_order.id ASC") or die($mysqli->error);
    $docs->bind_param("s", $candidateId) or die($mysqli->error);
    $docs->execute();
    $docs->store_result();
    $docs->bind_result($docId, $docTypeId, $messageid, $candidateId, $fileName, $filePath, $validFrom, $validTo, $reviewDate, $notes) or die($mysqli->error);
    $row = '';
    while ($docs->fetch()) {
        if ($docTypeId == 51) {
            $row = $row . '<tr><td class="canid" data-canid="' . $candidateId . '"><a href="' . $filePath . '" target="_blank"><i class="fa fa-fw fa-lg fa-file"></i>' . $fileName . '</a></td><td>' . getDocumentTypeCode($mysqli, $docTypeId) . '</td><td class="fpath" data-fpath="' . $filePath . '">';
            if (in_array($user, array('Viran', 'Indika', 'Denisa', 'Swarnajith'))) {
                $row = $row . '<a href="#" class="docRemove"><i class="fa fa-fw fa-lg fa-trash"></i></a>';
            } else {
                $row = $row . '<i class="fa fa-fw fa-lg fa-info-circle"></i>';
            }
            $row = $row . '</td><td class="emailpath" data-emailpath="' . $filePath . '"><a href="#" class="workpermit"><i class="fa fa-fw fa-lg fa-envelope"></i></a></td></tr>';
        } else {
            $row = $row . '<tr><td class="canid" data-canid="' . $candidateId . '"><a href="' . $filePath . '" target="_blank"><i class="fa fa-fw fa-lg fa-file"></i>' . $fileName . '</a></td><td>' . getDocumentTypeCode($mysqli, $docTypeId) . '</td><td class="fpath" data-fpath="' . $filePath . '">';
            if (in_array($user, array('Viran', 'Indika', 'Denisa', 'Swarnajith'))) {
                $row = $row . '<a href="#" class="docRemove"><i class="fa fa-fw fa-lg fa-trash"></i></a>';
            } else {
                $row = $row . '<i class="fa fa-fw fa-lg fa-info-circle"></i>';
            }
            $row = $row . '</td><td>&nbsp;</td></tr>';
        }
    }
    return $row;
}

function getCandidateMedicalCertificateInfo($mysqli, $canId)
{
    $doc_type_id = 72;
    $docs = $mysqli->prepare("SELECT 
								  candidate_document.docId,
								  candidate_document.docTypeId,
								  candidate_document.fileName,
								  candidate_document.filePath,
								  candidate_document.notes,
								  candidate_document.createdDate
								FROM
								  candidate_document
								WHERE
								  candidate_document.candidateId = ?
								AND
								  candidate_document.docTypeId = ?
								ORDER BY
								  candidate_document.createdDate DESC") or die($mysqli->error);
    $docs->bind_param("si", $canId, $doc_type_id) or die($mysqli->error);
    $docs->execute();
    $docs->store_result();
    $docs->bind_result($docId, $docTypeId, $fileName, $filePath, $notes, $createdDate) or die($mysqli->error);
    $row = '';
    while ($docs->fetch()) {
        $row = $row . '<tr><td><a href="' . $filePath . '" target="_blank"><i class="fa fa-fw fa-lg fa-file"></i>' . $fileName . '</a></td><td>' . getDocumentTypeCode($mysqli, $docTypeId) . '</td><td>' . $notes . '</td><td>' . $createdDate . '</td></tr>';
    }
    return $row;
}

function getConsultants($mysqli)
{
    $status = 1;
    $consultants = $mysqli->prepare("SELECT 
	   consultantId,
	   name 
	FROM
	  consultant
	WHERE status = ? 
	ORDER BY name ASC") or die($mysqli->error);
    $consultants->bind_param("i", $status);
    $consultants->execute();
    $consultants->bind_result($consultantId, $name);
    $consultantsArray = array();
    while ($consultants->fetch()) {
        $consultantsArray[] = array('consultantId' => $consultantId, 'name' => $name);
    }
    return $consultantsArray;
}

function getConsultantsForSelectMenu($mysqli)
{
    $status = 1;
    $consultants = $mysqli->prepare("SELECT 
	   consultantId,
	   name 
	FROM
	  consultant
	WHERE status = ? 
	ORDER BY name ASC") or die($mysqli->error);
    $consultants->bind_param("i", $status);
    $consultants->execute();
    $consultants->bind_result($consultantId, $name);
    $row = '<option value="All" selected>All</option>';
    while ($consultants->fetch()) {
        $row = $row . '<option value="' . $consultantId . '">' . $name . '</option>';
    }
    return $row;
}

function getDistinctConsultants($mysqli)
{
    $status = 1;
    $consultants = $mysqli->prepare("SELECT DISTINCT
	   consultantId,
	   name 
	FROM
	  consultant
	WHERE status = ? 
	ORDER BY consultantId ASC") or die($mysqli->error);
    $consultants->bind_param("i", $status);
    $consultants->execute();
    $consultants->bind_result($consultantId, $name);
    $consultantsArray = array();
    while ($consultants->fetch()) {
        $consultantsArray[] = array('consultantId' => $consultantId, 'name' => $name);
    }
    return $consultantsArray;
}

function getOtherLicenceTypes($mysqli)
{
    $licenceTypes = $mysqli->prepare("SELECT 
	   otherLicenceId,
	   otherLicenceType 
	FROM
	  otherlicence
	ORDER BY otherLicenceType ASC") or die($mysqli->error);
    $licenceTypes->execute();
    $licenceTypes->bind_result($otherLicenceId, $otherLicenceType);
    $licenceArray = array();
    while ($licenceTypes->fetch()) {
        $licenceArray[] = array('otherLicenceId' => $otherLicenceId, 'otherLicenceType' => $otherLicenceType);
    }
    return $licenceArray;
}

function getSafetyGearTypes($mysqli)
{
    $safetyGearTypes = $mysqli->prepare("SELECT 
	   safetyGearId ,
	   safetyGear 
	FROM
	  safetygear
	ORDER BY safetyGear ASC") or die($mysqli->error);
    $safetyGearTypes->execute();
    $safetyGearTypes->bind_result($safetyGearId, $safetyGear);
    $safetyArray = array();
    while ($safetyGearTypes->fetch()) {
        $safetyArray[] = array('safetyGearId' => $safetyGearId, 'safetyGear' => $safetyGear);
    }
    return $safetyArray;
}

function getExpOperating($mysqli)
{
    $expOperatingTypes = $mysqli->prepare("SELECT 
	   expOperatingId ,
	   expOperating 
	FROM
	  expoperating
	ORDER BY expOperating ASC") or die($mysqli->error);
    $expOperatingTypes->execute();
    $expOperatingTypes->bind_result($expOperatingId, $expOperating);
    $expArray = array();
    while ($expOperatingTypes->fetch()) {
        $expArray[] = array('expOperatingId' => $expOperatingId, 'expOperating' => $expOperating);
    }
    return $expArray;
}

function getShiftAvailable($mysqli)
{
    $shifts = $mysqli->prepare("SELECT 
	   shiftAvailableId,
	   shift
	FROM
	  shiftavailable
	ORDER BY shift ASC") or die($mysqli->error);
    $shifts->execute();
    $shifts->bind_result($shiftAvailableId, $shift);
    $shiftArray = array();
    while ($shifts->fetch()) {
        $shiftArray[] = array('shiftAvailableId' => $shiftAvailableId, 'shift' => $shift);
    }
    return $shiftArray;
}

/* Health resume updates */
function updateHealthResumeMails($mysqli, $message_id, $uid, $msg, $from, $to, $subj, $msgbody, $timestamp)
{
    $chk = $mysqli->prepare("SELECT * FROM resumeshealth WHERE messageid = ?") or die($mysqli->error);
    $chk->bind_param("s", $mysqli->real_escape_string($message_id)) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        /* Update Health Resume Mails */
        /*$up = $mysqli->prepare("UPDATE resumeshealth SET subject = ?, msgbody = ? WHERE messageid = ?") or die($mysqli->error);
        $up->bind_param("sss", $subj, $msgbody, $mysqli->real_escape_string($message_id)) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            return 'updated';
        } else {
            return $mysqli->error;
        }*/
    } else {
        $stmt = $mysqli->prepare("INSERT INTO resumeshealth(messageid,uid,msgno,mailfrom,mailto,subject,msgbody,date) VALUES(?,?,?,?,?,?,?,?)") or die($mysqli->error);
        $stmt->bind_param("ssssssss", $mysqli->real_escape_string($message_id), $uid, $msg, $from, $to, $subj, $mysqli->real_escape_string($msgbody), $timestamp) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'inserted';
        } else {
            return $mysqli->error;
        }
    }
}

function validateHealthExistingMail($mysqli, $message_id)
{
    $stmt = $mysqli->prepare("SELECT * FROM resumeshealth WHERE messageid = ?") or die($mysqli->error);
    $stmt->bind_param("s", $mysqli->real_escape_string($message_id)) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    return $num_of_rows;
}

function updateHealthAttachmentPath($mysqli, $msgid, $filePath, $filename)
{
    $st = $mysqli->prepare("SELECT * FROM healthattachmentpath WHERE messageid = ? AND filename = ?") or die($mysqli->error);
    $st->bind_param("ss", $mysqli->real_escape_string($msgid), $filename) or die($mysqli->error);
    $st->execute();
    $st->store_result();
    $st->fetch();
    $num_of_rows = $st->num_rows;
    $st->free_result();
    if ($num_of_rows > 0) {
        return false;
    } else {
        $stmt = $mysqli->prepare("INSERT INTO healthattachmentpath(messageid,filepath,filename) VALUES (?,?,?)") or die($mysqli->error);
        $stmt->bind_param("sss", $mysqli->real_escape_string($msgid), $filePath, $filename) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return true;
        } else {
            return false;
        }
    }
}

function validateHealthExistingFileName($mysqli, $msgid, $filePath)
{
    $stmt = $mysqli->prepare("SELECT * FROM healthattachmentpath WHERE messageid = ? AND filepath = ?") or die($mysqli->error);
    $stmt->bind_param("ss", $mysqli->real_escape_string($msgid), $filePath) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    return $num_of_rows;
}

function updateHealthResumeContents($mysqli, $msgid, $filename)
{
    if (validateExistingHealthResumeContent($mysqli, $msgid) > 0) {
        return 'exists';
    } else {
        $stmt = $mysqli->prepare("INSERT INTO healthattachment(messageid,filepath) VALUES(?,?)") or die($mysqli->error);
        $messageID = $mysqli->real_escape_string($msgid);
        $stmt->bind_param("ss", $messageID, $filename) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'inserted';
        } else {
            return $mysqli->error;
        }
    }
}

function validateExistingHealthResumeContent($mysqli, $msgid)
{
    $stmt = $mysqli->prepare("SELECT * FROM healthattachment WHERE messageid = ?") or die($mysqli->error);
    $messageID = $mysqli->real_escape_string($msgid);
    $stmt->bind_param("s", $messageID) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    return $num_of_rows;
}

/* Sydney email updates   */
function updateSydneyResumeMails($mysqli, $message_id, $uid, $msg, $from, $to, $subj, $msgbody, $timestamp)
{
    $chk = $mysqli->prepare("SELECT * FROM applicationsnsw WHERE messageid = ?") or die($mysqli->error);
    $chk->bind_param("s", $mysqli->real_escape_string($message_id)) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        /*$up = $mysqli->prepare("UPDATE applicationsnsw SET subject = ?, msgbody = ? WHERE messageid = ?") or die($mysqli->error);
        $up->bind_param("sss", $subj, $msgbody, $mysqli->real_escape_string($message_id)) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            return 'updated';
        } else {
            return $mysqli->error;
        }*/
    } else {
        $stmt = $mysqli->prepare("INSERT INTO applicationsnsw(messageid,uid,msgno,mailfrom,mailto,subject,msgbody,date) VALUES(?,?,?,?,?,?,?,?)") or die($mysqli->error);
        $stmt->bind_param("ssssssss", $mysqli->real_escape_string($message_id), $uid, $msg, $from, $to, $subj, $mysqli->real_escape_string($msgbody), $timestamp) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'added';
        } else {
            return $mysqli->error;
        }
    }
}

function updateNSWAttachmentPath($mysqli, $msgid, $filePath, $filename)
{
    $st = $mysqli->prepare("SELECT * FROM nswattachmentpath WHERE messageid = ? AND filename = ?") or die($mysqli->error);
    $st->bind_param("ss", $mysqli->real_escape_string($msgid), $filename) or die($mysqli->error);
    $st->execute();
    $st->store_result();
    $st->fetch();
    $num_of_rows = $st->num_rows;
    $st->free_result();
    if ($num_of_rows > 0) {
        /*$up = $mysqli->prepare("UPDATE attachmentpath SET filepath = ? WHERE messageid = ?") or die($mysqli->error);
		$up->bind_param("ss",$filename,$mysqli->real_escape_string($msgid)) or die($mysqli->error);
		$up->execute();
		$nrows = $up->affected_rows;
		if($nrows > 0){
			return 'updated';
		}else{
			return $mysqli->error;
		}*/
        return false;
    } else {
        $extension = pathinfo($filename, PATHINFO_EXTENSION);
        if ($extension == 'pdf' || $extension == 'doc' || $extension == 'docx' || $extension == 'rtf') {
            $stmt = $mysqli->prepare("INSERT INTO nswattachmentpath(messageid,filepath,filename) VALUES (?,?,?)") or die($mysqli->error);
            $stmt->bind_param("sss", $mysqli->real_escape_string($msgid), $filePath, $filename) or die($mysqli - error);
            $stmt->execute();
            $nrows = $stmt->affected_rows;
            if ($nrows == '1') {
                return true;
            } else {
                return false;
            }
        }
    }
}

function validateExistingNSWResumeContent($mysqli, $msgid)
{
    $stmt = $mysqli->prepare("SELECT * FROM nswattachment WHERE messageid = ?") or die($mysqli->error);
    $messageID = $mysqli->real_escape_string($msgid);
    $stmt->bind_param("s", $messageID) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    return $num_of_rows;
}

function updateNSWResumeContents($mysqli, $msgid, $filename)
{
    if (validateExistingNSWResumeContent($mysqli, $msgid)) {
        /*$up = $mysqli->prepare("UPDATE nswattachment SET filepath = ? WHERE messageid = ?") or die($mysqli->error);
        $up->bind_param("ss", $filename, $messageID) or die($mysqli->error);
        $up->execute();
        $nrows1 = $up->affected_rows;
        if ($nrows1 > 0) {
            return 'updated';
        } else {
            return $mysqli->error;
        }*/
        return false;
    } else {
        $stmt = $mysqli->prepare("INSERT INTO nswattachment(messageid,filepath) VALUES(?,?)") or die($mysqli->error);
        $stmt->bind_param("ss", $messageID, $filename) or die($mysqli->error);
        $stmt->execute();
        $nrows2 = $stmt->affected_rows;
        if ($nrows2 == '1') {
            return 'inserted';
        } else {
            return $mysqli->error;
        }
    }
}

/* ----------------------  */
/* Queensland email updates */
function updateQLDResumeMails($mysqli, $message_id, $uid, $msg, $from, $to, $subj, $msgbody, $timestamp)
{
    $chk = $mysqli->prepare("SELECT autoid FROM applicationsqld WHERE messageid = ?") or die($mysqli->error);
    $chk->bind_param("s", $mysqli->real_escape_string($message_id)) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {

    } else {
        $stmt = $mysqli->prepare("INSERT INTO applicationsqld(messageid,uid,msgno,mailfrom,mailto,subject,msgbody,date) VALUES(?,?,?,?,?,?,?,?)") or die($mysqli->error);
        $stmt->bind_param("ssssssss", $mysqli->real_escape_string($message_id), $uid, $msg, $from, $to, $subj, $mysqli->real_escape_string($msgbody), $timestamp) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'added';
        } else {
            return $mysqli->error;
        }
    }
}

function validateQLDExistingMail($mysqli, $message_id)
{
    $stmt = $mysqli->prepare("SELECT * FROM applicationsqld WHERE messageid = ?") or die($mysqli->error);
    $stmt->bind_param("s", $mysqli->real_escape_string($message_id)) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    return $num_of_rows;
}

function updateQLDAttachmentPath($mysqli, $msgid, $filePath, $filename)
{
    $st = $mysqli->prepare("SELECT * FROM qldattachmentpath WHERE messageid = ? AND filename = ?") or die($mysqli->error);
    $st->bind_param("ss", $mysqli->real_escape_string($msgid), $filename) or die($mysqli->error);
    $st->execute();
    $st->store_result();
    $st->fetch();
    $num_of_rows = $st->num_rows;
    $st->free_result();
    if ($num_of_rows > 0) {
        return false;
    } else {
        $extension = pathinfo($filename, PATHINFO_EXTENSION);
        if ($extension == 'pdf' || $extension == 'doc' || $extension == 'docx' || $extension == 'rtf') {
            $stmt = $mysqli->prepare("INSERT INTO qldattachmentpath(messageid,filepath,filename) VALUES (?,?,?)") or die($mysqli->error);
            $stmt->bind_param("sss", $mysqli->real_escape_string($msgid), $filePath, $filename) or die($mysqli->error);
            $stmt->execute();
            $nrows = $stmt->affected_rows;
            if ($nrows == '1') {
                return true;
            } else {
                return false;
            }
        }
    }
}

function validateQLDExistingFileName($mysqli, $msgid, $filePath)
{
    $stmt = $mysqli->prepare("SELECT * FROM qldattachmentpath WHERE messageid = ? AND filepath = ?") or die($mysqli->error);
    $stmt->bind_param("ss", $mysqli->real_escape_string($msgid), $filePath) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    return $num_of_rows;
}

function updateQLDResumeContents($mysqli, $msgid, $filename)
{
    if (validateExistingQLDResumeContent($mysqli, $msgid) > 0) {
        return 'exists';
    } else {
        $stmt = $mysqli->prepare("INSERT INTO qldattachment(messageid,filepath) VALUES(?,?)") or die($mysqli->error);
        $messageID = $mysqli->real_escape_string($msgid);
        $stmt->bind_param("ss", $messageID, $filename) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'inserted';
        } else {
            return $mysqli->error;
        }
    }
}

function validateExistingQLDResumeContent($mysqli, $msgid)
{
    $stmt = $mysqli->prepare("SELECT * FROM qldattachment WHERE messageid = ?") or die($mysqli->error);
    $messageID = $mysqli->real_escape_string($msgid);
    $stmt->bind_param("s", $messageID) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    return $num_of_rows;
}

/* ---------------------------------------------------------*/
/* Melbourne email updates   */
function updateResume($mysqli, $message_id, $uid, $msg, $from, $to, $subj, $msgbody, $timestamp, $reference)
{
    $chk = $mysqli->prepare("SELECT * FROM resume WHERE messageid = ?") or die($mysqli->error);
    $chk->bind_param("s", $mysqli->real_escape_string($message_id)) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        $up = $mysqli->prepare("UPDATE resume SET subject = ?, msgbody = ?, reference = ? WHERE messageid = ?") or die($mysqli->error);
        $up->bind_param("ssss", $subj, $msgbody, $reference, $mysqli->real_escape_string($message_id)) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            return 'updated';
        } else {
            return $mysqli->error;
        }
    } else {
        $stmt = $mysqli->prepare("INSERT INTO resume(messageid,uid,msgno,mailfrom,mailto,subject,msgbody,date,reference) VALUES(?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
        $stmt->bind_param("sssssssss", $mysqli->real_escape_string($message_id), $uid, $msg, $from, $to, $subj, $mysqli->real_escape_string($msgbody), $timestamp, $reference) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'added';
        } else {
            return $mysqli->error;
        }
    }
}

function updateResumeMails($mysqli, $message_id, $uid, $msg, $from, $to, $subj, $msgbody, $timestamp, $reference, $status)
{
    $chk = $mysqli->prepare("SELECT * FROM resume WHERE messageid = ?") or die($mysqli->error);
    $chk->bind_param("s", $mysqli->real_escape_string($message_id)) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        $up = $mysqli->prepare("UPDATE resume SET subject = ?, msgbody = ?, reference = ?, status = ? WHERE messageid = ?") or die($mysqli->error);
        $up->bind_param("sssis", $subj, $msgbody, $reference, $status, $mysqli->real_escape_string($message_id)) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            return 'updated';
        } else {
            return $mysqli->error;
        }
    } else {
        $stmt = $mysqli->prepare("INSERT INTO resume(messageid,uid,msgno,mailfrom,mailto,subject,msgbody,date,reference,status) VALUES(?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
        $stmt->bind_param("sssssssssi", $mysqli->real_escape_string($message_id), $uid, $msg, $from, $to, $subj, $mysqli->real_escape_string($msgbody), $timestamp, $reference, $status) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'added';
        } else {
            return $mysqli->error;
        }
    }
}

function updateIndeedResumeMails($mysqli, $message_id, $uid, $msg, $from, $to, $subj, $msgbody, $timestamp, $reference, $status)
{
    $chk = $mysqli->prepare("SELECT * FROM indeedResume WHERE messageid = ?") or die($mysqli->error);
    $chk->bind_param("s", $mysqli->real_escape_string($message_id)) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        $up = $mysqli->prepare("UPDATE indeedResume SET subject = ?, msgbody = ?, reference = ?, status = ? WHERE messageid = ?") or die($mysqli->error);
        $up->bind_param("sssis", $subj, $msgbody, $reference, $status, $mysqli->real_escape_string($message_id)) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            return 'updated';
        } else {
            return $mysqli->error;
        }
    } else {
        $stmt = $mysqli->prepare("INSERT INTO indeedResume(messageid,uid,msgno,mailfrom,mailto,subject,msgbody,date,reference,status) VALUES(?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
        $stmt->bind_param("sssssssssi", $mysqli->real_escape_string($message_id), $uid, $msg, $from, $to, $subj, $mysqli->real_escape_string($msgbody), $timestamp, $reference, $status) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'added';
        } else {
            return $mysqli->error;
        }
    }
}

function updateJobBoardMails($mysqli, $message_id, $uid, $msg, $from, $to, $subj, $msgbody, $timestamp, $reference, $status)
{
    $chk = $mysqli->prepare("SELECT * FROM jobboard_resume WHERE messageid = ?") or die($mysqli->error);
    $chk->bind_param("s", $mysqli->real_escape_string($message_id)) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        $up = $mysqli->prepare("UPDATE jobboard_resume SET subject = ?, msgbody = ?, reference = ? WHERE messageid = ?") or die($mysqli->error);
        $up->bind_param("ssss", $subj, $msgbody, $reference, $mysqli->real_escape_string($message_id)) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            return 'updated';
        } else {
            return $mysqli->error;
        }
    } else {
        $stmt = $mysqli->prepare("INSERT INTO jobboard_resume(messageid,uid,msgno,mailfrom,mailto,subject,msgbody,date,reference,status) VALUES(?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
        $stmt->bind_param("sssssssssi", $mysqli->real_escape_string($message_id), $uid, $msg, $from, $to, $subj, $mysqli->real_escape_string($msgbody), $timestamp, $reference, $status) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'added';
        } else {
            return $mysqli->error;
        }
    }
}

function updateTalentRequestMails($mysqli, $message_id, $uid, $msg, $from, $to, $subj, $msgbody, $timestamp, $reference)
{
    $chk = $mysqli->prepare("SELECT * FROM talent_resume WHERE messageid = ?") or die($mysqli->error);
    $chk->bind_param("s", $mysqli->real_escape_string($message_id)) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        $up = $mysqli->prepare("UPDATE talent_resume SET subject = ?, msgbody = ?, reference = ? WHERE messageid = ?") or die($mysqli->error);
        $up->bind_param("ssss", $subj, $msgbody, $reference, $mysqli->real_escape_string($message_id)) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            return 'updated';
        } else {
            return $mysqli->error;
        }
    } else {
        $stmt = $mysqli->prepare("INSERT INTO talent_resume(messageid,uid,msgno,mailfrom,mailto,subject,msgbody,date,reference) VALUES(?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
        $stmt->bind_param("sssssssss", $mysqli->real_escape_string($message_id), $uid, $msg, $from, $to, $subj, $mysqli->real_escape_string($msgbody), $timestamp, $reference) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'added';
        } else {
            return $mysqli->error;
        }
    }
}

function updateResumeEmailAndMobile($mysqli, $message_id, $email, $mobileNo)
{
    $chk = $mysqli->prepare("SELECT * FROM resume WHERE messageid = ?") or die($mysqli->error);
    $chk->bind_param("s", $mysqli->real_escape_string($message_id)) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        $up = $mysqli->prepare("UPDATE resume SET email = ?, phone_number = ? WHERE messageid = ?") or die($mysqli->error);
        $up->bind_param("sss", $email, $mobileNo, $mysqli->real_escape_string($message_id)) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            return 'updated';
        } else {
            return $mysqli->error;
        }
    }
}

function validateExistingCandidate($mysqli, $message_id, $email)
{
    $stmt = $mysqli->prepare("SELECT * FROM candidate WHERE messageid = ? AND email = ?") or die($mysqli->error);
    $stmt->bind_param("ss", $mysqli->real_escape_string($message_id), $email) or die($mysqli->error);
    $stmt->execute();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    $stmt->close();
    return $num_of_rows;
}

function validateExistingFileName($mysqli, $msgid, $filePath)
{
    $stmt = $mysqli->prepare("SELECT * FROM attachmentpath WHERE messageid = ? AND filepath = ?") or die($mysqli->error);
    $stmt->bind_param("ss", $mysqli->real_escape_string($msgid), $filePath) or die($mysqli->error);
    $stmt->execute();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    return $num_of_rows;
}

function updateAttachmentPath($mysqli, $msgid, $filePath, $filename)
{
    $st = $mysqli->prepare("SELECT * FROM attachmentpath WHERE messageid = ? AND filename = ?") or die($mysqli->error);
    $st->bind_param("ss", $mysqli->real_escape_string($msgid), $filename) or die($mysqli->error);
    $st->execute();
    $st->store_result();
    $st->fetch();
    $num_of_rows = $st->num_rows;
    $st->free_result();
    if ($num_of_rows > 0) {
        return false;
    } else {
        $extension = pathinfo($filename, PATHINFO_EXTENSION);
        if ($extension == 'pdf' || $extension == 'doc' || $extension == 'docx' || $extension == 'rtf') {
            $stmt = $mysqli->prepare("INSERT INTO attachmentpath(messageid,filepath,filename) VALUES (?,?,?)") or die($mysqli->error);
            $stmt->bind_param("sss", $mysqli->real_escape_string($msgid), $filePath, $filename) or die($mysqli->error);
            $stmt->execute();
            $nrows = $stmt->affected_rows;
            if ($nrows == '1') {
                return true;
            } else {
                return false;
            }
        }
    }
}

function updateIndeedAttachmentPath($mysqli, $msgid, $filePath, $filename)
{
    $st = $mysqli->prepare("SELECT * FROM indattachmentpath WHERE messageid = ? AND filename = ?") or die($mysqli->error);
    $st->bind_param("ss", $mysqli->real_escape_string($msgid), $filename) or die($mysqli->error);
    $st->execute();
    $st->store_result();
    $st->fetch();
    $num_of_rows = $st->num_rows;
    $st->free_result();
    if ($num_of_rows > 0) {

        return false;
    } else {
        $extension = pathinfo($filename, PATHINFO_EXTENSION);
        if ($extension == 'pdf' || $extension == 'doc' || $extension == 'docx' || $extension == 'rtf') {
            $stmt = $mysqli->prepare("INSERT INTO indattachmentpath(messageid,filepath,filename) VALUES (?,?,?)") or die($mysqli->error);
            $stmt->bind_param("sss", $mysqli->real_escape_string($msgid), $filePath, $filename) or die($mysqli->error);
            $stmt->execute();
            $nrows = $stmt->affected_rows;
            if ($nrows == '1') {
                return true;
            } else {
                return false;
            }
        }
    }
}

function updateJobBoardAttachmentPath($mysqli, $msgid, $filePath, $filename)
{
    $st = $mysqli->prepare("SELECT * FROM jbattachmentpath WHERE messageid = ? AND filename = ?") or die($mysqli->error);
    $st->bind_param("ss", $mysqli->real_escape_string($msgid), $filename) or die($mysqli->error);
    $st->execute();
    $st->store_result();
    $st->fetch();
    $num_of_rows = $st->num_rows;
    $st->free_result();
    if ($num_of_rows > 0) {
        /*$up = $mysqli->prepare("UPDATE jbattachmentpath SET filepath = ? WHERE messageid = ?") or die($mysqli->error);
		$up->bind_param("ss",$filePath,$mysqli->real_escape_string($msgid)) or die($mysqli->error);
		$up->execute();
		$nrows = $up->affected_rows;
		if($nrows > 0){
			return 'updated';
		}else{
			return $mysqli->error;
		}*/
        return false;
    } else {
        $extension = pathinfo($filename, PATHINFO_EXTENSION);
        if ($extension == 'pdf' || $extension == 'doc' || $extension == 'docx' || $extension == 'rtf') {
            $stmt = $mysqli->prepare("INSERT INTO jbattachmentpath(messageid,filepath,filename) VALUES (?,?,?)") or die($mysqli->error);
            $stmt->bind_param("sss", $mysqli->real_escape_string($msgid), $filePath, $filename) or die($mysqli->error);
            $stmt->execute();
            $nrows = $stmt->affected_rows;
            if ($nrows == '1') {
                return true;
            } else {
                return false;
            }
        }
    }
}

function updateTalentRequestAttachmentPath($mysqli, $msgid, $filePath, $filename)
{
    $st = $mysqli->prepare("SELECT * FROM tlattachmentpath WHERE messageid = ? AND filename = ?") or die($mysqli->error);
    $st->bind_param("ss", $mysqli->real_escape_string($msgid), $filename) or die($mysqli->error);
    $st->execute();
    $st->store_result();
    $st->fetch();
    $num_of_rows = $st->num_rows;
    $st->free_result();
    if ($num_of_rows > 0) {
        /*$up = $mysqli->prepare("UPDATE tlattachmentpath SET filepath = ? WHERE messageid = ?") or die($mysqli->error);
		$up->bind_param("ss",$filePath,$mysqli->real_escape_string($msgid)) or die($mysqli->error);
		$up->execute();
		$nrows = $up->affected_rows;
		if($nrows > 0){
			return 'updated';
		}else{
			return $mysqli->error;
		}*/
        return false;
    } else {
        $extension = pathinfo($filename, PATHINFO_EXTENSION);
        if ($extension == 'pdf' || $extension == 'doc' || $extension == 'docx' || $extension == 'rtf') {
            $stmt = $mysqli->prepare("INSERT INTO tlattachmentpath(messageid,filepath,filename) VALUES (?,?,?)") or die($mysqli->error);
            $stmt->bind_param("sss", $mysqli->real_escape_string($msgid), $filePath, $filename) or die($mysqli->error);
            $stmt->execute();
            $nrows = $stmt->affected_rows;
            if ($nrows == '1') {
                return true;
            } else {
                return false;
            }
        }
    }
}

function validateExistingResumeContent($mysqli, $msgid)
{
    $stmt = $mysqli->prepare("SELECT * FROM attachment WHERE messageid = ?") or die($mysqli->error);
    $messageID = $mysqli->real_escape_string($msgid);
    $stmt->bind_param("s", $messageID) or die($mysqli->error);
    $stmt->execute();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    $stmt->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateIndeedExistingResumeContent($mysqli, $msgid)
{
    $stmt = $mysqli->prepare("SELECT * FROM indattachment WHERE messageid = ?") or die($mysqli->error);
    $messageID = $mysqli->real_escape_string($msgid);
    $stmt->bind_param("s", $messageID) or die($mysqli->error);
    $stmt->execute();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    $stmt->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateExistingJBResumeContent($mysqli, $msgid)
{
    $stmt = $mysqli->prepare("SELECT * FROM jbattachment WHERE messageid = ?") or die($mysqli->error);
    $messageID = $mysqli->real_escape_string($msgid);
    $stmt->bind_param("s", $messageID) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    $stmt->free_result();
    return $num_of_rows;
}

function validateExistingTLResumeContent($mysqli, $msgid)
{
    $stmt = $mysqli->prepare("SELECT * FROM tlattachment WHERE messageid = ?") or die($mysqli->error);
    $messageID = $mysqli->real_escape_string($msgid);
    $stmt->bind_param("s", $messageID) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    $stmt->free_result();
    return $num_of_rows;
}

function updateResumeContents($mysqli, $msgid, $filename)
{
    $messageID = $mysqli->real_escape_string($msgid);
    if (validateExistingResumeContent($mysqli, $msgid)) {
        $up = $mysqli->prepare("UPDATE attachment SET filepath = ? WHERE messageid = ?") or die($mysqli->error);
        $up->bind_param("ss", $filename, $mysqli->real_escape_string($msgid)) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            return 'updated';
        } else {
            return $mysqli->error;
        }
        return false;
    } else {
        $stmt = $mysqli->prepare("INSERT INTO attachment(messageid,filepath) VALUES(?,?)") or die($mysqli->error);
        $stmt->bind_param("ss", $messageID, $filename) or die($mysqli->error);
        $stmt->execute();
        $numrows2 = $stmt->affected_rows;
        if ($numrows2 == '1') {
            return 'inserted';
        } else {
            return $mysqli->error;
        }
    }
}

function updateIndeedResumeContents($mysqli, $msgid, $filename)
{
    $messageID = $mysqli->real_escape_string($msgid);
    if (validateIndeedExistingResumeContent($mysqli, $msgid)) {
        $up = $mysqli->prepare("UPDATE indattachment SET filepath = ? WHERE messageid = ?") or die($mysqli->error);
        $up->bind_param("ss", $filename, $mysqli->real_escape_string($msgid)) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            return 'updated';
        } else {
            return $mysqli->error;
        }
        return false;
    } else {
        $stmt = $mysqli->prepare("INSERT INTO indattachment(messageid,filepath) VALUES(?,?)") or die($mysqli->error);
        $stmt->bind_param("ss", $messageID, $filename) or die($mysqli->error);
        $stmt->execute();
        $numrows2 = $stmt->affected_rows;
        if ($numrows2 == '1') {
            return 'inserted';
        } else {
            return $mysqli->error;
        }
    }
}

function updateJobBoardContents($mysqli, $msgid, $filename)
{
    $messageID = $mysqli->real_escape_string($msgid);
    if (validateExistingJBResumeContent($mysqli, $msgid)) {
        $up = $mysqli->prepare("UPDATE jbattachment SET filepath = ? WHERE messageid = ?") or die($mysqli->error);
        $up->bind_param("ss", $filename, $mysqli->real_escape_string($msgid)) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            return 'updated';
        } else {
            return $mysqli->error;
        }
        return false;
    } else {
        $stmt = $mysqli->prepare("INSERT INTO jbattachment(messageid,filepath) VALUES(?,?)") or die($mysqli->error);
        $stmt->bind_param("ss", $messageID, $filename) or die($mysqli->error);
        $stmt->execute();
        $numrows2 = $stmt->affected_rows;
        if ($numrows2 == '1') {
            return 'inserted';
        } else {
            return $mysqli->error;
        }
    }
}

function updateTalentRequestContents($mysqli, $msgid, $filename)
{
    $messageID = $mysqli->real_escape_string($msgid);
    if (validateExistingTLResumeContent($mysqli, $msgid)) {
        $up = $mysqli->prepare("UPDATE tlattachment SET filepath = ? WHERE messageid = ?") or die($mysqli->error);
        $up->bind_param("ss", $filename, $mysqli->real_escape_string($msgid)) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            return 'updated';
        } else {
            return $mysqli->error;
        }
        return false;
    } else {
        $stmt = $mysqli->prepare("INSERT INTO tlattachment(messageid,filepath) VALUES(?,?)") or die($mysqli->error);
        $stmt->bind_param("ss", $messageID, $filename) or die($mysqli->error);
        $stmt->execute();
        $numrows2 = $stmt->affected_rows;
        if ($numrows2 == '1') {
            return 'inserted';
        } else {
            return $mysqli->error;
        }
    }
}

function validateExistingMail($mysqli, $message_id)
{
    $stmt = $mysqli->prepare("SELECT * FROM resume WHERE messageid = ?") or die($mysqli->error);
    $stmt->bind_param("s", $mysqli->real_escape_string($message_id)) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    return $num_of_rows;
}

function bodyRetrieval($inbox, $msgno)
{
    // GET TEXT BODY
    $dataTxt = get_part($inbox, $msgno, "TEXT/PLAIN");

    // GET HTML BODY
    $dataHtml = get_part($inbox, $msgno, "TEXT/HTML");

    if ($dataHtml != "") {
        $msgBody = $dataHtml;
        $mailformat = "html";
    } else {
        $msgBody = str_replace("\n", "<br>", $dataTxt);
        $mailformat = "text";
    }
    // To out put the message body to the user simply print $msgBody like this.

    if ($mailformat == "text") {
        return $msgBody;
    } else {
        return $msgBody; // It contains all HTML HEADER tags so we don't have to make them.
    }
}

function attachementRetrieval($mbox, $msgno)
{
    $struct = imap_fetchstructure($mbox, $msgno);
    $contentParts = count($struct->parts);

    if ($contentParts >= 2) {
        for ($i = 2; $i <= $contentParts; $i++) {
            $att[$i - 2] = imap_bodystruct($mbox, $msgno, $i);
        }
        for ($k = 0; $k < sizeof($att); $k++) {
            if ($att[$k]->parameters[0]->value == "us-ascii" || $att[$k]->parameters[0]->value == "US-ASCII") {
                if ($att[$k]->parameters[1]->value != "") {
                    $selectBoxDisplay[$k] = $att[$k]->parameters[1]->value;
                }
            } elseif ($att[$k]->parameters[0]->value != "iso-8859-1" && $att[$k]->parameters[0]->value != "ISO-8859-1") {
                $selectBoxDisplay[$k] = $att[$k]->parameters[0]->value;
            }
        }
    }
    $link = '';
    if (sizeof($selectBoxDisplay) > 0) {
        for ($j = 0; $j < sizeof($selectBoxDisplay); $j++) {
            $link = '<a class="handleFile" id="' . $selectBoxDisplay[$j] . '" name="' . $msgno . '" href="#">' . $selectBoxDisplay[$j] . '</a>';
        }
    }
    return $link;
}

function get_mime_type(&$structure)
{
    $primary_mime_type = array("TEXT", "MULTIPART", "MESSAGE", "APPLICATION", "AUDIO", "IMAGE", "VIDEO", "OTHER");

    if ($structure->subtype) {
        return $primary_mime_type[(int)$structure->type] . '/' . $structure->subtype;
    }
    return "TEXT/PLAIN";
}

function get_part($stream, $msg_number, $mime_type, $structure = false, $part_number = false)
{
    if (!$structure) {
        $structure = imap_fetchstructure($stream, $msg_number);
    }
    if ($structure) {
        if ($mime_type == get_mime_type($structure)) {
            if (!$part_number) {
                $part_number = "1";
            }
            $text = imap_fetchbody($stream, $msg_number, $part_number);
            if ($structure->encoding == 3) {
                return imap_base64($text);
            } else if ($structure->encoding == 4) {
                return imap_qprint($text);
            } else {
                return $text;
            }
        }
        if ($structure->type == 1) /* multipart */ {
            while (list($index, $sub_structure) = each($structure->parts)) {
                if ($part_number) {
                    $prefix = $part_number . '.';
                }
                $data = get_part($stream, $msg_number, $mime_type, $sub_structure, $prefix . ($index + 1));
                if ($data) {
                    return $data;
                }
            }
        }
    }
    return false;
}

function getDiaryNoteId($mysqli)
{
    $stmt = $mysqli->prepare("SELECT MAX(diaryNoteId) AS max_diaryNoteId FROM diarynote") or die(mysqli_error());
    $stmt->execute();
    $stmt->bind_result($max_diaryNoteId);
    $stmt->store_result();
    $stmt->fetch();
    if ($stmt->num_rows == 0) {
        $max_diaryNoteId = 1;
    } else {
        $max_diaryNoteId = $max_diaryNoteId + 1;
    }
    $diaryNoteId = $max_diaryNoteId;
    return $diaryNoteId;
}

function getActivityList($mysqli)
{
    $activities = $mysqli->prepare("SELECT activityId,activityType FROM activity ORDER BY activityType ASC") or die($mysqli->error);
    $activities->execute();
    $activities->bind_result($activityId, $activityType);
    $activityArray = array();
    while ($activities->fetch()) {
        $activityArray[] = array('activityId' => $activityId, 'activityType' => $activityType);
    }
    return $activityArray;
}

function getActivityCount($mysqli)
{
    $activities = $mysqli->prepare("SELECT activityId,activityType FROM activity ORDER BY activityType ASC") or die($mysqli->error);
    $activities->execute();
    $activities->bind_result($activityId, $activityType);
    $activityArray = array();
    while ($activities->fetch()) {
        $activityArray[$activityId] = array('activityType' => $activityType, 'actCount' => '');
    }
    return $activityArray;
}

function getConsultantList($mysqli)
{
    $status = 1;
    $consultants = $mysqli->prepare("SELECT 
	   consultantId,
	   name 
	FROM
	  consultant
	WHERE status = ?  
	ORDER BY name ASC") or die($mysqli->error);
    $consultants->bind_param("i", $status) or die($mysqli->error);
    $consultants->execute();
    $consultants->bind_result($consultantId, $name);
    $consultantsArray = array();
    while ($consultants->fetch()) {
        $consultantsArray[] = array('consultantId' => $consultantId, 'name' => $name);
    }
    return $consultantsArray;
}

function getConsultantListDropdown($mysqli)
{
    $status = 1;
    $consultants = $mysqli->prepare("SELECT 
	   consultantId,
	   name 
	FROM
	  consultant
	WHERE status = ?  
	ORDER BY name ASC") or die($mysqli->error);
    $consultants->bind_param("i", $status) or die($mysqli->error);
    $consultants->execute();
    $consultants->bind_result($consultantId, $name);
    $opt = '';
    while ($consultants->fetch()) {
        $opt = $opt . '<option value="' . $consultantId . '">' . $name . '</option>';
    }
    return $opt;
}

function getPriorityList($mysqli)
{
    $priorityTypes = $mysqli->prepare("SELECT 
	   priorityId,
	   priorityLevel 
	FROM
	  priority
	ORDER BY priorityId DESC") or die($mysqli->error);
    $priorityTypes->execute();
    $priorityTypes->bind_result($priorityId, $priorityLevel);
    $priorityArray = array();
    while ($priorityTypes->fetch()) {
        $priorityArray[] = array('priorityId' => $priorityId, 'priorityLevel' => $priorityLevel);
    }
    return $priorityArray;
}

function getPriorityLevel($mysqli, $priorityId)
{
    $stmt = $mysqli->prepare("SELECT priorityLevel FROM priority WHERE priorityId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $priorityId) or die($mysqli->error);
    $stmt->execute();
    return $priorityLevel = $stmt->get_result()->fetch_object()->priorityLevel;
}

function getActivityLevel($mysqli, $activityId)
{
    $stmt = $mysqli->prepare("SELECT activityType FROM activity WHERE activityId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $activityId) or die($mysqli->error);
    $stmt->execute();
    return $activityType = $stmt->get_result()->fetch_object()->activityType;
}

function getMailColorCategories($mysqli, $autoId, $table)
{
    if ($table == 'mail_color_category') {
        $stmt = $mysqli->prepare("SELECT 
								  mail_color_category.catid,
								  mail_color_category.autoid,
								  color_category.catcolor,
								  color_category.category
								FROM
								  mail_color_category
								  INNER JOIN color_category ON (mail_color_category.catid = color_category.catid)
								  WHERE mail_color_category.autoid = ?") or die($mysqli->error);
    } elseif ($table == 'health_mail_color_category') {
        $stmt = $mysqli->prepare("SELECT 
								  health_mail_color_category.catid,
								  health_mail_color_category.autoid,
								  color_category.catcolor,
								  color_category.category
								FROM
								  health_mail_color_category
								  INNER JOIN color_category ON (health_mail_color_category.catid = color_category.catid)
								  WHERE health_mail_color_category.autoid = ?") or die($mysqli->error);
    } elseif ($table == 'sydney_mail_color_category') {
        $stmt = $mysqli->prepare("SELECT 
								  sydney_mail_color_category.catid,
								  sydney_mail_color_category.autoid,
								  color_category.catcolor,
								  color_category.category
								FROM
								  sydney_mail_color_category
								  INNER JOIN color_category ON (sydney_mail_color_category.catid = color_category.catid)
								  WHERE sydney_mail_color_category.autoid = ?") or die($mysqli->error);
    } elseif ($table == 'queensland_mail_color_category') {
        $stmt = $mysqli->prepare("SELECT 
								  queensland_mail_color_category.catid,
								  queensland_mail_color_category.autoid,
								  color_category.catcolor,
								  color_category.category
								FROM
								  queensland_mail_color_category
								  INNER JOIN color_category ON (queensland_mail_color_category.catid = color_category.catid)
								  WHERE queensland_mail_color_category.autoid = ?") or die($mysqli->error);
    } elseif ($table == 'jobboard_mail_color_category') {
        $stmt = $mysqli->prepare("SELECT 
								  jobboard_mail_color_category.catid,
								  jobboard_mail_color_category.autoid,
								  color_category.catcolor,
								  color_category.category
								FROM
								  jobboard_mail_color_category
								  INNER JOIN color_category ON (jobboard_mail_color_category.catid = color_category.catid)
								  WHERE jobboard_mail_color_category.autoid = ?") or die($mysqli->error);
    }

    $stmt->bind_param("i", $autoId) or die($mysqli->error);
    $stmt->execute();
    $stmt->bind_result($catid, $autoid, $catcolor, $category);
    $stmt->store_result();
    $cats = '';
    while ($stmt->fetch()) {
        $cats = $cats . '<div title="' . getMailColorCategoryById($mysqli, $catid) . '" style="float:left;display:block; width:10px;height:20px;cursor:pointer;background-color:' . $catcolor . ';" class="color"></div>';
    }
    return $cats;
}

function getColorCategoryTableName($accountName)
{
    if ($accountName == strtolower(DOMAIN_NAME)) {
        $color_table = 'mail_color_category';
    } else if ($accountName == 'jobboard') {
        $color_table = 'jobboard_mail_color_category';
    }
    return $color_table;
}

function getDocumentTypeId($mysqli, $typeCode)
{
    $stmt = $mysqli->prepare("SELECT typeId FROM document_type WHERE typeCode = ?") or die($mysqli->error);
    $stmt->bind_param("s", $typeCode) or die($mysqli->error);
    $stmt->execute();
    return $typeId = $stmt->get_result()->fetch_object()->typeId;
}

function getDocumentTypeCode($mysqli, $typeId)
{
    $stmt = $mysqli->prepare("SELECT typeCode FROM document_type WHERE typeId = ?") or die($mysqli->error);
    $stmt->bind_param("i", $typeId) or die($mysqli->error);
    $stmt->execute();
    return $typeCode = $stmt->get_result()->fetch_object()->typeCode;
}

function overDueCheck($date)
{
    if (strtotime($date) < strtotime(new DateTime())) {
        return "Past";
    } elseif (strtotime($date) == strtotime(new DateTime())) {
        return "Today";
    } else {
        return "Future";
    }
}

function getInboxMessageCount($mysqli, $accountName)
{
    $tableEmail = getTableEmail($mysqli, $accountName);
    $mailList = $mysqli->prepare("SELECT 
										date
									  FROM
										{$tableEmail}
									  WHERE {$tableEmail}.date >= (DATE(NOW()) - INTERVAL 6 MONTH) ORDER BY date DESC") or die($mysqli->error);
    $mailList->execute();
    $mailList->store_result();
    return $numRows = $mailList->num_rows;
}

function getActivityIdByActivityType($mysqli, $activityType)
{
    $stmt = $mysqli->prepare("SELECT activityId FROM activity WHERE activityTypeCode = ?") or die($mysqli->error);
    $stmt->bind_param("s", $activityType) or die($mysqli->error);
    $stmt->execute();
    return $activityId = $stmt->get_result()->fetch_object()->activityId;
}

function getActivityTypeByActivityId($mysqli, $activityId)
{
    $stmt = $mysqli->prepare("SELECT activityType FROM activity WHERE activityId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $activityId) or die($mysqli->error);
    $stmt->execute();
    return $activityType = $stmt->get_result()->fetch_object()->activityType;
}

function getOtherLicenceId($mysqli, $attributeCode)
{
    $stmt = $mysqli->prepare("SELECT otherLicenceId FROM otherlicence WHERE code = ?") or die($mysqli->error);
    $stmt->bind_param("s", $attributeCode) or die($mysqli->error);
    $stmt->execute();
    return $otherLicenceId = $stmt->get_result()->fetch_object()->otherLicenceId;
}

function getTmpSMSList($mysqli, $sessId)
{
    $tmpList = $mysqli->prepare("SELECT sessionid,candidateId,firstName,lastName,mobileNo FROM tmpsmslist WHERE sessionid = ?");
    $tmpList->bind_param("s", $sessId) or die($mysqli->error);
    $tmpList->execute();
    $tmpList->store_result();
    $tmpList->bind_result($sessionid, $candidateId, $firstName, $lastName, $mobileNo) or die($mysqli->error);
    $num_of_rows = $tmpList->num_rows;
    $row = '';
    if ($num_of_rows > 0) {
        while ($tmpList->fetch()) {
            $row = $row . '<tr><td class="sessid" data-sessid="' . $sessionid . '"><input type="hidden" id="sessid" value="' . $sessionid . '"/>' . $lastName . ', ' . $firstName . '(' . $candidateId . ')</td><td>' . $mobileNo . '</td><td class="cand" data-cand="' . $candidateId . '"><input type="hidden" id="recipientCount" value="' . $num_of_rows . '"><a href="#" class="recipientRemove"><i class="fa fa-fw fa-lg fa-trash"></i>Remove</a></td></tr>';
        }
    } else {
        $row = $row . '<tr><td colspan="3"><input type="hidden" id="recipientCount" value="' . $num_of_rows . '">No Reciepients Added</td></tr>';
    }
    return $row;
}

function getSmsBodyTextList($mysqli)
{
    $tmpList = $mysqli->prepare("SELECT body_desc FROM sms_body") or die($mysqli->error);
    $tmpList->execute();
    $tmpList->bind_result($body_desc) or die($mysqli->error);
    $opt = '';
    while ($tmpList->fetch()) {
        $opt = $opt . '<option value="' . $body_desc . '">' . $body_desc . '</option>';
    }
    return $opt;
}

function deleteAllTmpSMSList($mysqli, $sid)
{
    $del = $mysqli->prepare("DELETE FROM tmpsmslist WHERE sessionid = ?");
    $del->bind_param("s", $sid) or die($mysqli->error);
    $del->execute();
    return true;
}

function getCandidateIdByMobileNo($mysqli, $mobileNo)
{
    $stmt = $mysqli->prepare("SELECT candidateId FROM candidate WHERE mobileNo = ?") or die($mysqli->error);
    $stmt->bind_param("s", $mobileNo) or die($mysqli->error);
    $stmt->execute();
    $candidateId = $stmt->get_result()->fetch_object()->candidateId;
    return $candidateId;
}

function getEmployeeEmail($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT email FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->email;
    } else {
        return null;
    }
}

function getCandidateMobileNoByCandidateId($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT mobileNo FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $mobileNo = $stmt->get_result()->fetch_object()->mobileNo;
    return $mobileNo;
}

function sendSMS($host, $headers, $content)
{
    $process = curl_init($host);
    curl_setopt($process, CURLOPT_POST, true);
    curl_setopt($process, CURLOPT_POSTFIELDS, $content);
    curl_setopt($process, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($process, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($process, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
    $response = curl_exec($process);
    $err = curl_error($process);
    curl_close($process);
    if ($err) {
        return "cURL Error #:" . $err;
    } else {
        return $response;
    }
}

function sendCellCastSMS($text, $phone_number, $from)
{
    try {
        $url = 'https://cellcast.com.au/api/v3/send-sms'; //API URL
        $fields = array(
            'sms_text' => $text, //here goes your SMS text
            'numbers' => $phone_number, // Your numbers array goes here
            'from' => $from
        );
        $headers = array(
            'APPKEY: '.CELL_CAST_APP_KEY,
            'Accept: application/json',
            'Content-Type: application/json',
        );

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, count($fields));
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        if (!$result = curl_exec($ch)) {
            $response_error = json_decode(curl_error($ch));
            return json_encode(array("status" => 400, "msg" => "Something went to wrong, please try again", "result" => $response_error));
        }
        curl_close($ch);
        return json_encode(array("status" => 200, "msg" => "SMS sent successfully", "result" => json_decode($result)));
    } catch (\Exception $e) {
        return json_encode(array("status" => 400, "msg" => "Something went to wrong, please try again.", "result" => array()));
    }
}

function sendMMS($subject, $mms_text, $mms_file, $phone_number)
{
    try {
        $url = 'https://cellcast.com.au/api/v3/send-mms'; //API URL
        $fields = array(
            'subject' => $subject,
            'mms_text' => $mms_text, //here goes your MMS text
            'mms_file' => $mms_file,
            'numbers' => $phone_number // Your numbers array goes here
        );
        $headers = array(
            'APPKEY: '.CELL_CAST_APP_KEY,
            'Accept: application/json',
            'Content-Type: application/json',
        );

        $ch = curl_init(); //open connection
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, count($fields));
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        if (!$result = curl_exec($ch)) {
            $response_error = json_decode(curl_error($ch));
            return json_encode(array("status" => 400, "msg" => "Something went to wrong, please try again", "result" => $response_error));
        }
        curl_close($ch);
        return json_encode(array("status" => 200, "msg" => "MMS sent successfully", "result" => json_decode($result)));
    } catch (\Exception $e) {
        return json_encode(array("status" => 400, "msg" => "Something went to wrong, please try again.", "result" => array()));
    }
}

function getConsultantIdByMessageId($mysqli, $message_id)
{
    $stmt = $mysqli->prepare("SELECT consultantId FROM smslog WHERE message_id = ?") or die($mysqli->error);
    $stmt->bind_param("s", $message_id) or die($mysqli->error);
    $stmt->execute();
    $consultantId = $stmt->get_result()->fetch_object()->consultantId;
    return $consultantId;
}

function getConsultantIdByEmail($mysqli, $conEmail)
{
    $stmt = $mysqli->prepare("SELECT consultantId FROM consultant WHERE email = ?") or die($mysqli->error);
    $stmt->bind_param("s", $conEmail) or die($mysqli->error);
    $stmt->execute();
    $consultantId = $stmt->get_result()->fetch_object()->consultantId;
    return $consultantId;
}

function getRecipientNameByMessageId($mysqli, $message_id)
{
    $stmt = $mysqli->prepare("SELECT recipientName FROM smslog WHERE message_id = ?") or die($mysqli->error);
    $stmt->bind_param("s", $message_id) or die($mysqli->error);
    $stmt->execute();
    $recipientName = $stmt->get_result()->fetch_object()->recipientName;
    return $recipientName;
}

function getSMSLogByCandidateId($mysqli, $canId, $smsStatus, $limitStart, $limitCount)
{
    if ($smsStatus !== 'All') {
        $sms = $mysqli->prepare("SELECT 
                              smslog.smsId,
							  smslog.sentTimeStamp,
							  smslog.consultantId,
							  smslog.message_id,
							  smslog.recipientName,
							  smslog.recipientNumber,
							  smslog.candidateId,
							  smslog.smsMessage,
							  smslog.smsReturnData,
							  smslog.alertMe,
							  smslog.smsActivity,
							  smslog.smsSender,
							  smslog.direction,
							  smslog.smsaccount
							FROM
							  smslog
							WHERE
							  smslog.candidateId = ?
							AND
							  smslog.direction = ?	   
							ORDER BY smsid DESC LIMIT $limitStart, $limitCount") or die($mysqli->error);
        $sms->bind_param("ss", $canId, $smsStatus) or die($mysqli->error);
    } else {
        $sms = $mysqli->prepare("SELECT 
                              smslog.smsId,                        
							  smslog.sentTimeStamp,
							  smslog.consultantId,
							  smslog.message_id,
							  smslog.recipientName,
							  smslog.recipientNumber,
							  smslog.candidateId,
							  smslog.smsMessage,
							  smslog.smsReturnData,
							  smslog.alertMe,
							  smslog.smsActivity,
							  smslog.smsSender,
							  smslog.direction,
							  smslog.smsaccount
							FROM
							  smslog
							WHERE
							  smslog.candidateId = ?
							ORDER BY smsid DESC LIMIT $limitStart, $limitCount") or die($mysqli->error);
        $sms->bind_param("s", $canId) or die($mysqli->error);
    }
    $sms->execute();
    $sms->store_result();
    $sms->bind_result($smsId, $sentTimeStamp, $consultantId, $message_id, $recipientName, $recipientNumber, $candidateId, $smsMessage, $smsReturnData, $alertMe, $smsActivity, $smsSender, $direction, $smsaccount) or die($mysqli->error);
    $row = '';
    while ($sms->fetch()) {
        $row = $row . '<tr id="' . $smsId . '"><td>' . $sentTimeStamp . '</td><td>' . getConsultantName($mysqli, $consultantId) . '</td><td>' . $direction . '</td><td>' . $smsReturnData . '</td><td>' . $recipientName . ' (' . $candidateId . ')' . '</td><td>' . $smsMessage . '</td><td>' . $recipientNumber . '</td><td>' . $alertMe . '</td><td>' . $smsActivity . '</td><td>' . $smsSender . '</td><td>' . $message_id . '</td><td>' . $smsaccount . '</td></tr>';
    }
    return $row;
}

function getSMSLogByCandidateIdAll($mysqli, $canId, $smsStatus)
{
    if ($smsStatus !== 'All') {
        $sms = $mysqli->prepare("SELECT 
                              smslog.smsId,
							  smslog.sentTimeStamp,
							  smslog.consultantId,
							  smslog.message_id,
							  smslog.recipientName,
							  smslog.recipientNumber,
							  smslog.candidateId,
							  smslog.smsMessage,
							  smslog.smsReturnData,
							  smslog.sent,
							  smslog.alertMe,
							  smslog.smsActivity,
							  smslog.smsSender,
							  smslog.direction,
							  smslog.smsAccount,
							  smslog.errorDescription
							FROM
							  smslog
							WHERE
							  smslog.candidateId = ?
							AND
							  smslog.direction = ?	   
							ORDER BY smsid DESC") or die($mysqli->error);
        $sms->bind_param("ss", $canId, $smsStatus) or die($mysqli->error);
    } else {
        $sms = $mysqli->prepare("SELECT 
                              smslog.smsId,
							  smslog.sentTimeStamp,
							  smslog.consultantId,
							  smslog.message_id,
							  smslog.recipientName,
							  smslog.recipientNumber,
							  smslog.candidateId,
							  smslog.smsMessage,
							  smslog.smsReturnData,
							  smslog.sent,
							  smslog.alertMe,
							  smslog.smsActivity,
							  smslog.smsSender,
							  smslog.direction,
							  smslog.smsAccount,
							  smslog.errorDescription
							FROM
							  smslog
							WHERE
							  smslog.candidateId = ?
							ORDER BY smsid DESC") or die($mysqli->error);
        $sms->bind_param("s", $canId) or die($mysqli->error);
    }
    $sms->execute();
    $sms->store_result();
    $sms->bind_result($smsId, $sentTimeStamp, $consultantId, $message_id, $recipientName, $recipientNumber, $candidateId, $smsMessage, $smsReturnData, $sent, $alertMe, $smsActivity, $smsSender, $direction, $smsAccount, $errorDescription) or die($mysqli->error);
    $row = '';
    while ($sms->fetch()) {
        $row = $row . '<tr id="' . $smsId . '"><td>' . date('d-m-Y H:i:s', strtotime($sentTimeStamp)) . '</td><td>' . getConsultantName($mysqli, $consultantId) . '</td><td>' . $direction . '</td><td>' . $smsReturnData . '(' . $errorDescription . ')' . '</td><td>' . $sent . '</td><td>' . $recipientName . ' (' . $candidateId . ')' . '</td><td>' . $smsMessage . '</td><td>' . $recipientNumber . '</td><td>' . $alertMe . '</td><td>' . $smsActivity . '</td><td>' . $smsSender . '</td><td>' . $message_id . '</td><td>' . getSMSAccountName($mysqli, $smsAccount) . '</td></tr>';
    }
    return $row;
}

function getSMSLogByCandidateIdUpdate($mysqli, $firstRow, $canId, $smsStatus)
{
    if ($smsStatus !== 'All') {
        $sms = $mysqli->prepare("SELECT 
                              smslog.smsId,
							  smslog.sentTimeStamp,
							  smslog.consultantId,
							  smslog.message_id,
							  smslog.recipientName,
							  smslog.recipientNumber,
							  smslog.candidateId,
							  smslog.smsMessage,
							  smslog.smsReturnData,
							  smslog.sent,
							  smslog.alertMe,
							  smslog.smsActivity,
							  smslog.smsSender,
							  smslog.direction,
							  smslog.smsAccount,
							  smslog.errorDescription
							FROM
							  smslog
							WHERE
							  smslog.candidateId = ?
							AND
							  smslog.direction = ?
							AND
							  smslog.smsId > ?  
							ORDER BY smsid DESC") or die($mysqli->error);
        $sms->bind_param("ssi", $canId, $smsStatus, $firstRow) or die($mysqli->error);
    } else {
        $sms = $mysqli->prepare("SELECT 
                              smslog.smsId,
							  smslog.sentTimeStamp,
							  smslog.consultantId,
							  smslog.message_id,
							  smslog.recipientName,
							  smslog.recipientNumber,
							  smslog.candidateId,
							  smslog.smsMessage,
							  smslog.smsReturnData,
							  smslog.sent,
							  smslog.alertMe,
							  smslog.smsActivity,
							  smslog.smsSender,
							  smslog.direction,
							  smslog.smsAccount,
							  smslog.errorDescription
							FROM
							  smslog
							WHERE
							  smslog.candidateId = ?
							AND
							  smslog.smsId > ?
							ORDER BY smsid DESC") or die($mysqli->error);
        $sms->bind_param("si", $canId, $firstRow) or die($mysqli->error);
    }
    $sms->execute();
    $sms->bind_result($smsId, $sentTimeStamp, $consultantId, $message_id, $recipientName, $recipientNumber, $candidateId, $smsMessage, $smsReturnData, $sent, $alertMe, $smsActivity, $smsSender, $direction, $smsAccount, $errorDescription) or die($mysqli->error);
    $sms->store_result();
    /*$sms->fetch();
    return $numRows = $sms->num_rows;*/
    $row = '';
    while ($sms->fetch()) {
        $row = $row . '<tr id="' . $smsId . '"><td>' . date('d-m-Y H:i:s', strtotime($sentTimeStamp)) . '</td><td>' . getConsultantName($mysqli, $consultantId) . '</td><td>' . $direction . '</td><td>' . $smsReturnData . '(' . $errorDescription . ')' . '</td><td>' . $sent . '</td><td>' . $recipientName . ' (' . $candidateId . ')' . '</td><td>' . $smsMessage . '</td><td>' . $recipientNumber . '</td><td>' . $alertMe . '</td><td>' . $smsActivity . '</td><td>' . $smsSender . '</td><td>' . $message_id . '</td><td>' . getSMSAccountName($mysqli, $smsAccount) . '</td></tr>';
    }
    return $row;
}

function getSMSAccountName($mysqli, $smsAccount)
{
    $stmt = $mysqli->prepare("SELECT accountDescription FROM smsaccount WHERE accountId = ?") or die($mysqli->error);
    $stmt->bind_param("i", $smsAccount) or die($mysqli->error);
    $stmt->execute();
    $stmt->bind_result($accountDescription) or die($mysqli->error);
    $acDesc = '';
    if ($stmt->num_rows > 0) {
        while ($stmt->fetch()) {
            $acDesc = $accountDescription;
        }
        /*$smsAccountName = $stmt->get_result()->fetch_object()->accountDescription;
        return $smsAccountName;*/
    }
    return $acDesc;
}

function getSMSAccounts($mysqli)
{
    $isActive = 1;
    $sql = $mysqli->prepare("SELECT accountId,accountDescription FROM smsaccount WHERE isActive = ? ORDER BY accountId DESC") or die($mysqli->error);
    $sql->bind_param("i", $isActive) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($accountId, $accountDescription) or die($mysqli->error);
    $option = '';
    while ($sql->fetch()) {
        $option = $option . '<option value="' . $accountId . '">' . $accountDescription . '</option>';
    }
    return $option;
}

function validateSMSList($mysqli, $canId, $sessionId)
{
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM tmpsmslist WHERE candidateId = ? AND sessionId = ? ") or die ($mysqli->error);
    $sqlchk->bind_param("ss", $canId, $sessionId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function getSMSAccountSupportInfo($mysqli, $smsAccountId)
{
    $stmt = $mysqli->prepare("SELECT accountDescription,username, phoneNumber,email FROM smsaccount WHERE accountId = ?") or die($mysqli->error);
    $stmt->bind_param("i", $smsAccountId) or die($mysqli->error);
    $stmt->execute();
    $stmt->bind_result($accountDescription, $username, $phoneNumber, $email) or die($mysqli->error);
    $string = '';
    while ($stmt->fetch()) {
        $string = 'AccName:' . $accountDescription . ' <br>Usrname:' . $username . ' <br> SupportPhone: ' . $phoneNumber . ' <br> Email: ' . $email;
    }
    return $string;
}

function validateExistingClient($mysqli, $client)
{
    $sqlchk = $mysqli->prepare("SELECT client FROM client WHERE client = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $client) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function testNotification($status)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, ' Notification');
    $subject = 'TEST !!!!';
    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = '<h2>TEST</h2>' . $status;
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

// function to geocode address
function geocode($address)
{
    // url encode the address
    $address = urlencode($address);
    // google map geocode api url
    $url = "http://maps.google.com/maps/api/geocode/json?address={$address}";
    // get the json response
    $resp_json = file_get_contents($url);
    // decode the json
    $resp = json_decode($resp_json, true);
    // response status will be 'OK', if able to geocode given address
    if ($resp['status'] == 'OK') {
        // get the important data
        $lati = $resp['results'][0]['geometry']['location']['lat'];
        $longi = $resp['results'][0]['geometry']['location']['lng'];
        $formatted_address = $resp['results'][0]['formatted_address'];
        // verify if data is complete
        if ($lati && $longi && $formatted_address) {
            // put the data in the array
            $data_arr = array();
            array_push(
                $data_arr,
                $lati,
                $longi,
                $formatted_address
            );
            return $data_arr;
        } else {
            return false;
        }
    } else {
        return false;
    }
}

function getAddress($latitude, $longitude)
{
    if (!empty($latitude) && !empty($longitude)) {
        //Send request and receive json data by address
        $geocodeFromLatLong = file_get_contents('http://maps.googleapis.com/maps/api/geocode/json?latlng=' . trim($latitude) . ',' . trim($longitude) . '&sensor=false');
        $output = json_decode($geocodeFromLatLong);
        $status = $output->status;
        //Get address from json data
        $address = ($status == "OK") ? $output->results[1]->formatted_address : '';
        //Return address of the given latitude and longitude
        if (!empty($address)) {
            return $address;
        } else {
            return false;
        }
    } else {
        return false;
    }
}

function getLatLong($address)
{
    if (!empty($address)) {
        //Formatted address
        $formattedAddr = str_replace(' ', '+', $address);
        //Send request and receive json data by address
        $geocodeFromAddr = file_get_contents('http://maps.googleapis.com/maps/api/geocode/json?address=' . $formattedAddr . '&sensor=false');
        $output = json_decode($geocodeFromAddr);
        //Get latitude and longitute from json data
        $data['latitude'] = $output->results[0]->geometry->location->lat;
        $data['longitude'] = $output->results[0]->geometry->location->lng;
        $data['formatted_address'] = $output->results[0]->formatted_address;
        $data['street'] = $output->results[0]->address_components[1]->long_name;
        $data['suburb'] = $output->results[0]->address_components[2]->long_name;
        $data['city'] = $output->results[0]->address_components[3]->short_name;
        $data['state'] = $output->results[0]->address_components[4]->long_name;
        $data['country'] = $output->results[0]->address_components[5]->long_name;
        $data['postalCode'] = $output->results[0]->address_components[6]->long_name;

        //Return latitude and longitude of the given address
        if (!empty($data)) {
            return $data;
        } else {
            return false;
        }
    } else {
        return false;
    }
}

function getClientLatitude($mysqli, $clientId)
{
    $stmt = $mysqli->prepare("SELECT latitude FROM shift_address WHERE clientId = ?") or die($mysqli->error);
    $stmt->bind_param("i", $clientId) or die($mysqli->error);
    $stmt->execute();
    return $latitude = $stmt->get_result()->fetch_object()->latitude;
}

function getClientLongitude($mysqli, $clientId)
{
    $stmt = $mysqli->prepare("SELECT longitude FROM shift_address WHERE clientId = ?") or die($mysqli->error);
    $stmt->bind_param("i", $clientId) or die($mysqli->error);
    $stmt->execute();
    return $longitude = $stmt->get_result()->fetch_object()->longitude;
}

function getClientShiftAddress($mysqli, $addressId)
{
    $stmt = $mysqli->prepare("SELECT address FROM shift_address WHERE id = ?") or die($mysqli->error);
    $stmt->bind_param("i", $addressId) or die($mysqli->error);
    $stmt->execute();
    $address = $stmt->get_result()->fetch_object()->address;
    return $address;
}

function updateGeoCodes($mysqli, $id, $formatted_address, $street, $city, $state, $sub, $country, $postCode, $latitude, $longitude)
{
    $sqlUp = $mysqli->prepare("UPDATE shift_address SET address = ?, street= ?, city = ?,state = ?, sub = ?, country = ?, postalCode = ?, latitude = ?,longitude = ? WHERE id = ?") or die($mysqli->error);
    $sqlUp->bind_param("sssssssssi", $formatted_address, $street, $city, $state, $sub, $country, $postCode, $latitude, $longitude, $id) or die($mysqli->error);
    $sqlUp->execute();
    $nrows = $sqlUp->affected_rows;
    if ($nrows == '1') {
        return true;
    }
}

function getCandidateNoById($mysqli, $canId)
{
    $stmt = $mysqli->prepare("SELECT candidate_no FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $canId) or die($mysqli->error);
    $stmt->execute();
    return $candidate_no = $stmt->get_result()->fetch_object()->candidate_no;
}

function getCandidateIdByNo($mysqli, $canNo)
{
    $stmt = $mysqli->prepare("SELECT candidateId FROM candidate WHERE candidate_no = ?") or die($mysqli->error);
    $stmt->bind_param("s", $canNo) or die($mysqli->error);
    $stmt->execute();
    return $candidateId = $stmt->get_result()->fetch_object()->candidateId;
}

function assignSupervisor($mysqli, $srchCanId, $supervisor, $chUser)
{
    $canNo = getCandidateNoById($mysqli, $supervisor);
    try {
        $sql = $mysqli->prepare("UPDATE candidate SET supervicerId = ? WHERE candidateId = ?") or die($mysqli->error);
        $sql->bind_param("is", $canNo, $srchCanId) or die($mysqli->error);
        if ($sql->execute()) {
            try {
                $nrows = $sql->affected_rows;
            } catch (Exception $e1) {
                return $e1->getMessage();
            }
            if ($nrows == '1') {
                return generateMailNotification('Supervisor Assigning', DEFAULT_EMAIL, 'Supervisor ' . getSupervisorNameById($mysqli, $canNo) . ' is assigned for candidate ' . getCandidateFullName($mysqli, $srchCanId) . ', by ' . $chUser . ' at ' . date('Y-m-d H:i:s'));
            } else {
                return 'error .. ' . $mysqli->error;
            }
        } else {
            return 'updateErr' . $mysqli->error;
        }
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function makeSupervisor($mysqli, $canId, $supervisorClient)
{
    $type = 1;
    $sql = $mysqli->prepare("UPDATE candidate SET type = ?,supervisorClient = ? WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("iis", $type, $supervisorClient, $canId) or die($mysqli->error);
    $sql->execute();
    $nrows = $sql->affected_rows;
    if ($nrows == '1') {
        return true;
    }
}

function addAddressForMobileApp($mysqli, $clientAddress)
{
    $ins = $mysqli->prepare("INSERT INTO shift_address(address,latitude,longitude) VALUES(?,?,?)") or die($mysqli->error);
    $ins->bind_param("sssssss", $clientCode, $latitude, $longitude, $client, $clientAddress, $clientReference, $clientNote) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
}

function addClient($mysqli, $clientCode, $industryId, $industrySector, $client, $clientAddress, $street_number_1, $street_name, $suburb, $state, $postcode, $clientReference, $clientNote, $phone, $abn, $classification, $terms, $invoiceType, $paymentMethod, $gstPayable, $termsOfBusinessSigned, $payrollTaxSigned, $payrolltax, $workcover,$super_percentage,$mhws,$wic,$loggedInUser)
{
    $ins = $mysqli->prepare("INSERT INTO client(clientCode,industryId,industrySector,client,clientAddress,street_number,street_name,suburb,state,postcode,clientReference,clientNote,phone,abn,classification,terms,invoiceType,paymentMethod,gstPayable,termsOfBusinessSigned,payrollTaxSigned,payrolltax,workcover,super_percentage,mhws,wic) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
    $ins->bind_param("sisssssssisssssissssssssss", $clientCode, $industryId, $industrySector, $client, $clientAddress, $street_number_1, $street_name, $suburb, $state, $postcode, $clientReference, $clientNote, $phone, $abn, $classification, $terms, $invoiceType, $paymentMethod, $gstPayable, $termsOfBusinessSigned, $payrollTaxSigned, $payrolltax, $workcover,$super_percentage,$mhws,$wic) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows == '1') {
        $ins->free_result();
        return retrieveClients($mysqli,$loggedInUser);
    } else {
        return '<tr><td colspan="3">' . $mysqli->error . '</td></tr>';
    }
}

function updateClient($mysqli, $clientCode, $industryId, $industrySector, $clientid, $client, $clientaddress, $street_number_1, $street_name, $suburb, $state, $postcode, $clientReference, $clientNote, $phone, $abn, $classification, $terms, $invoiceType, $paymentMethod, $gstPayable, $termsOfBusinessSigned, $payrollTaxSigned, $payrolltax, $workcover,$super_percentage,$mhws,$wic)
{
    $up = $mysqli->prepare("UPDATE client SET clientCode = ?,industryId = ?,industrySector = ?, client=?, clientAddress = ?,street_number = ?,street_name = ?,suburb = ?,state = ?,postcode = ?, clientReference = ?, clientNote = ?, phone = ?,abn = ?,classification = ?,terms = ?,invoiceType = ?,paymentMethod = ?,gstPayable = ?,termsOfBusinessSigned = ?,payrollTaxSigned = ?, payrolltax = ?, workcover = ?, super_percentage = ?, mhws = ?, wic = ? WHERE clientId = ?") or die($mysqli->error);
    $up->bind_param("sisssssssssssssissssssssssi", $clientCode, $industryId, $industrySector, $client, $clientaddress, $street_number_1, $street_name, $suburb, $state, $postcode, $clientReference, $clientNote, $phone, $abn, $classification, $terms, $invoiceType, $paymentMethod, $gstPayable, $termsOfBusinessSigned, $payrollTaxSigned, $payrolltax, $workcover, $super_percentage, $mhws, $wic, $clientid) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return $mysqli->error;
    }
}

function updateClientDocs($mysqli, $clientId, $docDesc, $fileName, $filePath, $notes)
{
    $chk = $mysqli->prepare("SELECT * FROM client_document WHERE clientId = ? AND fileName = ?") or die($mysqli->error);
    $chk->bind_param("is", $clientId, $fileName) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        $up = $mysqli->prepare("UPDATE client_document SET filePath = ?, docDesc = ?, createdDate = NOW(), clientDocNote = ? WHERE clientId = ? AND fileName = ?") or die($mysqli->error);
        $up->bind_param("sssis", $filePath, $docDesc, $notes, $clientId, $fileName) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'Updated';
        } else {
            return $mysqli->error;
        }
    } else {
        $stmt = $mysqli->prepare("INSERT INTO client_document(clientId,docDesc,fileName,filePath,clientDocNote,createdDate) VALUES(?,?,?,?,?,NOW())") or die($mysqli->error);
        $stmt->bind_param("issss", $clientId, $docDesc, $fileName, $filePath, $notes) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'Added';
        } else {
            return $mysqli->error;
        }
    }
}

function clientDocumentsDisplay($mysqli, $clientId)
{
    $docs = $mysqli->prepare("SELECT 
								  client_document.docId,
								  client_document.clientId,
								  client_document.docDesc,
								  client_document.fileName,
								  client_document.filePath,
								  client_document.clientDocNote
								FROM
								  client_document
								WHERE
								  client_document.clientId = ?
								ORDER BY
								  client_document.fileName, client_document.createdDate DESC") or die($mysqli->error);
    $docs->bind_param("i", $clientId) or die($mysqli->error);
    $docs->execute();
    $docs->bind_result($docId, $clientId, $docDesc, $fileName, $filePath, $clientDocNote) or die($mysqli->error);
    $row = '';
    while ($docs->fetch()) {
        $row = $row . '<div><a href="' . $filePath . '" target="_blank"><i class="fa fa-fw fa-lg fa-file"></i>' . substr($fileName, 0, 10) . '...' . '</a></div>';
    }
    return $row;
}

function getClientDocuments($mysqli, $clientId)
{
    $docs = $mysqli->prepare("SELECT 
								  client_document.docId,
								  client_document.clientId,
								  client_document.docDesc,
								  client_document.fileName,
								  client_document.filePath,
								  client_document.clientDocNote
								FROM
								  client_document
								WHERE
								  client_document.clientId = ?
								ORDER BY
								  client_document.fileName, client_document.createdDate DESC") or die($mysqli->error);
    $docs->bind_param("i", $clientId) or die($mysqli->error);
    $docs->execute();
    $docs->bind_result($docId, $clientId, $docDesc, $fileName, $filePath, $clientDocNote) or die($mysqli->error);
    $row = '';
    while ($docs->fetch()) {
        $row = $row . '<tr><td class="clientid" data-clientid="' . $clientId . '"><a href="' . $filePath . '" target="_blank"><i class="fa fa-fw fa-lg fa-file"></i>' . $fileName . '</a></td><td>' . $docDesc . '</td><td class="fpath" data-fpath="' . $filePath . '"><a href="#" class="docRemove"><i class="fa fa-fw fa-lg fa-trash"></i>Remove</a></td></tr>';
    }
    return $row;
}

function removeClient($mysqli, $clientId)
{
    $sql = $mysqli->prepare("DELETE FROM client WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $sql->free_result();
    $sqld = $mysqli->prepare("DELETE FROM department WHERE clientId = ?") or die($mysqli->error);
    $sqld->bind_param("i", $clientId) or die($mysqli->error);
    $sqld->execute();
    $sqld->free_result();
    $sqle = $mysqli->prepare("DELETE FROM employee_allocation WHERE clientId = ?") or die($mysqli->error);
    $sqle->bind_param("i", $clientId) or die($mysqli->error);
    $sqle->execute();
    $sqle->free_result();
    return true;
}

function retrieveClients($mysqli, $loggedInUser)
{
    $sql = $mysqli->prepare("SELECT clientCode,client,clientId,industryId,industrySector,clientAddress,street_number,street_name,suburb,state,postcode,clientReference,clientNote,latitude,longitude,phone,altPhone,fax,abn,classification,rating,accountManager,noOfCasuals,terms,salesman,invoiceType,paymentMethod,paymentThreshold,gstPayable,termsOfBusinessSigned,payrollTaxSigned,payrolltax,workcover,super_percentage,mhws,wic,clientStatus FROM client ORDER BY client ASC") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($clientCode, $client, $clientId, $industryId, $industrySector, $clientAddress, $street_number, $street_name, $suburb, $state, $postcode, $clientReference, $clientNote, $latitude, $longitude, $phone, $altPhone, $fax, $abn, $classification, $rating, $accountManager, $noOfCasuals, $terms, $salesman, $invoiceType, $paymentMethod, $paymentThreshold, $gstPayable, $termsOfBusinessSigned, $payrollTaxSigned, $payrolltax, $workcover, $super_percentage, $mhws, $wic, $clientStatus) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td style="color:black; font-weight:bold">' . $clientId . '</td><td class="clid" data-clcode="' . $clientCode . '" data-clid="' . $clientId . '" data-industryid="' . $industryId . '" data-client="' . $client . '" data-claddress="' . $clientAddress . '" data-street_number="' . $street_number . '" data-street_name="' . $street_name . '" data-suburb="' . $suburb . '" data-state="' . $state . '" data-postcode="' . $postcode . '" data-clreference="' . $clientReference . '" data-note="' . $clientNote . '" data-latitude="' . $latitude . '" data-longitude="' . $longitude . '" data-phone="' . $phone . '" data-altphone="' . $altPhone . '" data-fax="' . $fax . '" data-abn="' . $abn . '" data-classification="' . $classification . '" data-rating="' . $rating . '" data-accountmanager="' . $accountManager . '" data-noofcasuals="' . $noOfCasuals . '" data-terms="' . $terms . '" data-salesman="' . $salesman . '" data-invoicetype="' . $invoiceType . '" data-paymentmethod="' . $paymentMethod . '" data-paymentthreshold="' . $paymentThreshold . '" data-gstpayable="' . $gstPayable . '" data-termsofbusinesssigned="' . $termsOfBusinessSigned . '" data-payrolltaxsigned="' . $payrollTaxSigned . '" data-payrolltax="' . $payrolltax . '" data-workcover="' . $workcover . '" data-super_percentage="' . $super_percentage . '" data-mhws="' . $mhws . '" data-wic="' . $wic . '" data-industrysector="' . $industrySector . '"><span style="color:#0A246A; font-weight:bold">' . $clientCode . '</span>';
        if ($loggedInUser == 'ACCOUNTS') {
            if ($clientStatus == 'ACTIVE') {
                $row = $row . '<br><span style="color:green; font-weight:bold">' . $clientStatus . '</span>';
            } else {
                $row = $row . '<br><span style="color:red; font-weight:bold">' . $clientStatus . '</span>';
            }
            //'<button name="activateBtn-'.$clientId.'" id="activateBtn-'.$clientId.'" type="button" class="activateBtn btn-sm btn-info" value="'.$clientStatus.'">'.$clientStatus.'</button>'
        }
        $row = $row . '</td><td>' . $client . ' <br><div id="em' . $clientId . '">' . displayClientEmailAddresses($mysqli, $clientId) . '</div><input type="text" name="clientEmail' . $clientId . '" id="clientEmail' . $clientId . '" class="form-control-sm"><button id="addEmailBtn" class="btn-info"><i class="glyphicon glyphicon-plus"></i> EMAIL</button>  </td><td>' . $clientAddress . '</td><td>' . $clientReference . '</td><td>' . $clientNote . '</td><td>' . clientDocumentsDisplay($mysqli, $clientId) . '</td><td><button type="button" name="updateClientBtn" id="updateClientBtn" value="edit" class="updateClientBtn btn-default">&nbsp;<i class="glyphicon glyphicon-pencil"></i>&nbsp;</button><br><br><button type="button" name="removeClientBtn" id="removeClientBtn" value="remove" class="removeClientBtn btn-danger">&nbsp;<i class="glyphicon glyphicon-trash"></i>&nbsp;</button></td></tr>';
    }
    return $row;
}

function retrieveClientEmails($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT id,email FROM client_email WHERE clientId = ? ORDER BY email ASC") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($id, $email) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<div class="email' . $clientId . '">' . $email . '</div> <button class="removeEmail btn btn-danger" data-clemid="' . $id . '"><i class="fa fa-trash"></i></button><br>';
    }
    return $row;
}

function validateClientEmail($mysqli, $clientId, $email)
{
    $sqlchk = $mysqli->prepare("SELECT email FROM client_email WHERE clientId = ? AND email = ?") or die ($mysqli->error);
    $sqlchk->bind_param("is", $clientId, $email) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->bind_result($email);
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function addClientEmail($mysqli, $clientId, $email)
{
    if (!validateClientEmail($mysqli, $clientId, $email)) {
        $ins = $mysqli->prepare("INSERT INTO client_email(clientId,email) VALUES(?,?)") or die($mysqli->error);
        $ins->bind_param("is", $clientId, $email) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
    }
    return retrieveClientEmails($mysqli, $clientId);
}

function removeClientEmail($mysqli, $clEmId, $clientId)
{
    $del = $mysqli->prepare("DELETE FROM client_email WHERE id = ?") or die($mysqli->error);
    $del->bind_param("i", $clEmId) or die($mysqli->error);
    $del->execute();
    return retrieveClientEmails($mysqli, $clientId);
}

function getClientsForScheduling($mysqli)
{
    $clientStatus = 'ACTIVE';
    $sql = $mysqli->prepare("SELECT clientId,client FROM client WHERE clientStatus = ? ORDER BY client ASC") or die($mysqli->error);
    $sql->bind_param("s", $clientStatus) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clientId, $client) or die($mysqli->error);
    $option = '';
    while ($sql->fetch()) {
        $option = $option . '<option value="' . $clientId . '">' . $client . '</option>';
    }
    return $option;
}

function getClientsForDocumentUpload($mysqli)
{
    $sql = $mysqli->prepare("SELECT clientId,client FROM client ORDER BY client ASC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clientId, $client) or die($mysqli->error);
    $option = '';
    while ($sql->fetch()) {
        $option = $option . '<option value="' . $clientId . '">' . $client . '</option>';
    }
    return $option;
}

function getClientsForDropdown($mysqli)
{
    $clientStatus = 'ACTIVE';
    $sql = $mysqli->prepare("SELECT clientId,client FROM client WHERE clientStatus = ? ORDER BY client ASC") or die($mysqli->error);
    $sql->bind_param("s", $clientStatus) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clientId, $client) or die($mysqli->error);
    $option = '<option value="All">All</option>';
    while ($sql->fetch()) {
        $option = $option . '<option value="' . $clientId . '">' . $client . '</option>';
    }
    return $option;
}

function getClientsDropdownSingleSelect($mysqli)
{
    $clientStatus = 'ACTIVE';
    $sql = $mysqli->prepare("SELECT clientId,client FROM client WHERE clientStatus = ? ORDER BY client ASC") or die($mysqli->error);
    $sql->bind_param("s", $clientStatus) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clientId, $client) or die($mysqli->error);
    $option = '';
    while ($sql->fetch()) {
        $option = $option . '<option value="' . $clientId . '">' . $client . '</option>';
    }
    return $option;
}

function getClientsForDropdownTimeSheet($mysqli)
{
    $clientStatus = 'ACTIVE';
    $sql = $mysqli->prepare("SELECT DISTINCT clientId,client FROM client WHERE clientStatus = ? ORDER BY client ASC") or die($mysqli->error);
    $sql->bind_param("s", $clientStatus) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clientId, $client) or die($mysqli->error);
    $option = '<option disabled="disabled" selected="selected" value="0">Select Client</option>';
    while ($sql->fetch()) {
        $option = $option . '<option value="' . $clientId . '">' . $client . '</option>';
    }
    return $option;
}

function getClientsForReportDropdown($mysqli)
{
    $sql = $mysqli->prepare("SELECT clientId,client FROM client ORDER BY client ASC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clientId, $client) or die($mysqli->error);
    $option = '<option disabled="disabled" selected="selected" value="0">Select Client</option><option value="All">All</option>';
    while ($sql->fetch()) {
        $option = $option . '<option value="' . $clientId . '">' . $client . '</option>';
    }
    return $option;
}

function getClientTerms($mysqli)
{
    $sql = $mysqli->prepare("SELECT termId,days,description FROM client_terms") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($termId, $days, $description) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr class="termRow" data-termId="' . $termId . '" data-days="' . $days . '" data-description="' . $description . '"><td>' . $days . '</td><td>' . $description . '</td><td><button name="removeTermBtn" id="removeTermBtn" class="removeTermBtn btn btn-danger"><i class="glyphicon glyphicon-trash"></i>Remove</button></td></tr>';
    }
    return $row;
}

function getClientTermsForDropdwon($mysqli)
{
    $sql = $mysqli->prepare("SELECT termId,days,description FROM client_terms") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($termId, $days, $description) or die($mysqli->error);
    while ($sql->fetch()) {
        $opt = $opt . '<option value="' . $termId . '">' . $description . '</option>';
    }
    return $opt;
}

function validateClientTerm($mysqli, $description)
{
    $sqlchk = $mysqli->prepare("SELECT description FROM client_terms WHERE description = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $description) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateCandidateEmail($mysqli, $em)
{
    $sqlchk = $mysqli->prepare("SELECT email FROM candidate WHERE email = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $em) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->bind_result($email);
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateEmailAndSetId($mysqli, $email)
{
    if (validateCandidateEmail($mysqli, $email)) {
        $stmt = $mysqli->prepare("SELECT candidateId FROM candidate WHERE email = ?") or die($mysqli->error);
        $stmt->bind_param("s", $email) or die($mysqli->error);
        $stmt->execute();
        return $stmt->get_result()->fetch_object()->candidateId;
    } else {
        return false;
    }
}

function validateCandidateId($mysqli, $canId)
{
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM candidate WHERE candidateId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $canId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->bind_result($candidateId);
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function addClientTerm($mysqli, $days, $description)
{
    if (!validateClientTerm($mysqli, $description)) {
        $ins = $mysqli->prepare("INSERT INTO client_terms(
                                  days,
                                  description)
                                VALUES(
                                  ?,
                                  ?)") or die($mysqli->error);
        $ins->bind_param("ss", $days, $description) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            $ins->free_result();
            return getClientTerms($mysqli);
        } else {
            return '<tr><td colspan="3">' . $mysqli->error . '</td></tr>';
        }
    }
}

function deleteClientTerm($mysqli, $termId)
{
    $sqle = $mysqli->prepare("DELETE FROM client_terms WHERE termId = ?") or die($mysqli->error);
    $sqle->bind_param("i", $termId) or die($mysqli->error);
    $sqle->execute();
    $sqle->free_result();
    return true;
}

function getRegionsForDropdown($mysqli, $autoid)
{
    $sql = $mysqli->prepare("SELECT regionId FROM regions ORDER BY region ASC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($regionId) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    $option = '';
    if ($numRows <> 0) {
        while ($sql->fetch()) {
            $option = $option . '<option value="' . $regionId . '"';
            if (getRegionByResumeShortListAutoId($mysqli, $autoid) == $regionId) {
                $option = $option . ' selected';
            }
            $option = $option . '>' . getRegionById($mysqli, $regionId) . '</option>';
        }
    }
    return $option;
}

function getRegionsJBForDropdown($mysqli, $id)
{
    $sql = $mysqli->prepare("SELECT regionId FROM regions ORDER BY region ASC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($regionId) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    $option = '';
    if ($numRows <> 0) {
        while ($sql->fetch()) {
            $option = $option . '<option value="' . $regionId . '"';
            if (getJBRegionByResumeShortListId($mysqli, $id) == $regionId) {
                $option = $option . ' selected';
            }
            $option = $option . '>' . getRegionById($mysqli, $regionId) . '</option>';
        }
    }
    return $option;
}

function getJBRegionByResumeShortListId($mysqli, $id)
{
    $sql = $mysqli->prepare("SELECT region FROM resume_short_list WHERE jb_id = ?") or die($mysqli->error);
    $sql->bind_param("i", $id) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->region;
    } else {
        return null;
    }
}

function getRegionByResumeShortListAutoId($mysqli, $autoid)
{
    $sql = $mysqli->prepare("SELECT region FROM resume_short_list WHERE auto_id = ?") or die($mysqli->error);
    $sql->bind_param("i", $autoid) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->region;
    } else {
        return null;
    }
}

function getResumeSelectedGenderForCandidate($mysqli, $autoid)
{
    $sql = $mysqli->prepare("SELECT gender FROM resume_short_list WHERE auto_id = ?") or die($mysqli->error);
    $sql->bind_param("i", $autoid) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->gender;
    } else {
        return null;
    }
}

function getJBResumeSelectedGenderForCandidate($mysqli, $id)
{
    $sql = $mysqli->prepare("SELECT gender FROM resume_short_list WHERE jb_id = ?") or die($mysqli->error);
    $sql->bind_param("i", $id) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->gender;
    } else {
        return null;
    }
}

function getResumeShortListPositions($mysqli, $autoid)
{
    $sql = $mysqli->prepare("SELECT position FROM resume_short_list_positions ORDER BY position ASC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($position) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    $option = '';
    if ($numRows <> 0) {
        $i = 0;
        while ($sql->fetch()) {
            $option = $option . '<label for=""><input type="checkbox" name="positionChk" class="form-check-inline" value="' . $position . '"';
            $positionValues = explode(',', getPositionsByResumeShortListAutoId($mysqli, $autoid) ?? '');
            if (in_array($position, $positionValues)) {
                $option = $option . ' checked';
            }
            if ($i == $numRows - 1) {
                $option = $option . '/>' . $position . '</label>';
            } else {
                $option = $option . '/>' . $position . '</label><br>';
            }
            $i++;
        }
    }
    return $option;
}

function getResumeJBShortListPositions($mysqli, $id)
{
    $sql = $mysqli->prepare("SELECT position FROM resume_short_list_positions ORDER BY position ASC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($position) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    $option = '';
    if ($numRows <> 0) {
        $i = 0;
        while ($sql->fetch()) {
            $option = $option . '<label for=""><input type="checkbox" name="positionChk" class="form-check-inline" value="' . $position . '"';
            $positionValues = explode(',', getPositionsByJBResumeShortListId($mysqli, $autoid) ?? '');
            if (in_array($position, $positionValues)) {
                $option = $option . ' checked';
            }
            if ($i == $numRows - 1) {
                $option = $option . '/>' . $position . '</label>';
            } else {
                $option = $option . '/>' . $position . '</label><br>';
            }
            $i++;
        }
    }
    return $option;
}

function getPositionsByJBResumeShortListId($mysqli, $id)
{
    $sql = $mysqli->prepare("SELECT positions FROM resume_short_list WHERE jb_id = ?") or die($mysqli->error);
    $sql->bind_param("i", $id) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->positions;
    } else {
        return null;
    }
}

function getPositionsByResumeShortListAutoId($mysqli, $autoid)
{
    $sql = $mysqli->prepare("SELECT positions FROM resume_short_list WHERE auto_id = ?") or die($mysqli->error);
    $sql->bind_param("i", $autoid) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->positions;
    } else {
        return null;
    }
}

function getStatesForDropdown($mysqli)
{
    $sql = $mysqli->prepare("SELECT stateId FROM states ORDER BY state ASC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($stateId) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    $option = '';
    if ($numRows <> 0) {
        while ($sql->fetch()) {
            $option = $option . '<option value="' . $stateId . '">' . getStateById($mysqli, $stateId) . '</option>';
        }
    }
    return $option;
}

function getStatesForResumeShortListDropdown($mysqli, $autoid)
{
    $sql = $mysqli->prepare("SELECT stateId FROM states ORDER BY state ASC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($stateId) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    $option = '';
    if ($numRows <> 0) {
        while ($sql->fetch()) {
            $option = $option . '<option value="' . $stateId . '"';
            if (getStateIdByResumeShortListAutoId($mysqli, $autoid) == $stateId) {
                $option = $option . ' selected';
            } elseif ($stateId == 2) {
                $option = $option . ' selected';
            }
            $option = $option . '>' . getStateCodeById($mysqli, $stateId) . '</option>';
        }
    }
    return $option;
}

function getStatesForJBResumeShortListDropdown($mysqli, $id)
{
    $sql = $mysqli->prepare("SELECT stateId FROM states ORDER BY state ASC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($stateId) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    $option = '';
    if ($numRows <> 0) {
        while ($sql->fetch()) {
            $option = $option . '<option value="' . $stateId . '"';
            if (getStateIdByJBResumeShortListId($mysqli, $id) == $stateId) {
                $option = $option . ' selected';
            } elseif ($stateId == 2) {
                $option = $option . ' selected';
            }
            $option = $option . '>' . getStateCodeById($mysqli, $stateId) . '</option>';
        }
    }
    return $option;
}

function getStateIdByResumeShortListAutoId($mysqli, $autoid)
{
    $sql = $mysqli->prepare("SELECT state_id FROM resume_short_list WHERE auto_id = ?") or die($mysqli->error);
    $sql->bind_param("i", $autoid) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->state_id;
    } else {
        return null;
    }
}

function getStateIdByJBResumeShortListId($mysqli, $id)
{
    $sql = $mysqli->prepare("SELECT state_id FROM resume_short_list WHERE jb_id = ?") or die($mysqli->error);
    $sql->bind_param("i", $id) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->state_id;
    } else {
        return null;
    }
}

function getStatesDropdown($mysqli)
{
    /*if(!empty($clientId)){
        $sql = $mysqli->prepare("SELECT DISTINCT stateId FROM department WHERE clientId = ?") or die($mysqli->error);
        $sql->bind_param("i", $clientId) or die($mysqli->error);
    }else {*/
    $sql = $mysqli->prepare("SELECT stateId FROM states ORDER BY state ASC") or die($mysqli->error);
    /*}*/
    $sql->execute();
    $sql->bind_result($stateId) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    $option = $option . '<option value="All">All</option>';
    if ($numRows <> 0) {
        while ($sql->fetch()) {
            $option = $option . '<option value="' . $stateId . '">' . getStateById($mysqli, $stateId) . '</option>';
        }
    }/* else {
        $option = $option . '<option value="0">None</option>';
    }*/
    return $option;
}

function getStateNamesDropdown($mysqli)
{
    /*if(!empty($clientId)){
        $sql = $mysqli->prepare("SELECT DISTINCT stateId FROM department WHERE clientId = ?") or die($mysqli->error);
        $sql->bind_param("i", $clientId) or die($mysqli->error);
    }else {*/
    $sql = $mysqli->prepare("SELECT stateId FROM states ORDER BY state ASC") or die($mysqli->error);
    /*}*/
    $sql->execute();
    $sql->bind_result($stateId) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    $option = $option . '<option value="All">All</option>';
    if ($numRows <> 0) {
        while ($sql->fetch()) {
            $option = $option . '<option value="' . getStateById($mysqli, $stateId) . '">' . getStateById($mysqli, $stateId) . '</option>';
        }
    }/* else {
        $option = $option . '<option value="0">None</option>';
    }*/
    return $option;
}

function getDepartmentByClientIdStateId($mysqli, $clientId, $stateId)
{
    $sql = $mysqli->prepare("SELECT deptId,department FROM department WHERE clientId = ? AND stateId = ? ORDER BY department") or die($mysqli->error);
    $sql->bind_param("ii", $clientId, $stateId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($deptId, $department) or die($mysqli->error);
    $sql->store_result();
    $option = '';
    while ($sql->fetch()) {
        $option = $option . '<option value="' . $deptId . '">' . $department . '</option>';
    }
    return $option;
}

function getDepartmentJobDescription($mysqli, $clientId, $stateId, $departmentId, $posId)
{
    $sql = $mysqli->prepare("SELECT job_description FROM client_position WHERE clientId = ? AND stateId = ? AND deptId = ? AND posId = ?") or die($mysqli->error);
    $sql->bind_param("iiii", $clientId, $stateId, $departmentId, $posId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->job_description;
    } else {
        return null;
    }
}

function getPositionsBySupervisorClient($mysqli, $clientId, $deptId)
{
    $sql = $mysqli->prepare("SELECT posId FROM client_position WHERE clientId = ? AND deptId = ?") or die($mysqli->error);
    $sql->bind_param("ii", $clientId, $deptId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($posId) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    if ($numRows <> 0) {
        while ($sql->fetch()) {
            $option = $option . '<option value="' . $posId . '">' . getPositionByPositionId($mysqli, $posId) . '</option>';
        }
    }
    return $option;
}

function getPositionsBySupervisorClientWithPositionId($mysqli, $clientId, $deptId, $pos_id)
{
    if ($deptId == 0) {
        $sql = $mysqli->prepare("SELECT posId FROM client_position WHERE clientId = ?") or die($mysqli->error);
        $sql->bind_param("i", $clientId) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT posId FROM client_position WHERE clientId = ? AND deptId = ?") or die($mysqli->error);
        $sql->bind_param("ii", $clientId, $deptId) or die($mysqli->error);
    }
    $sql->execute();
    $sql->bind_result($posId) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    if ($numRows <> 0) {
        while ($sql->fetch()) {
            $option = $option . '<option value="' . $posId . '"';
            if ($pos_id == $posId) {
                $option = $option . ' selected';
            }
            $option = $option . '>' . getPositionByPositionId($mysqli, $posId) . '</option>';
        }
    }
    return $option;
}

function getDepartmentsBySupervisorClient($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT deptId,department FROM department WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($deptId, $department) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    if ($numRows <> 0) {
        $option = $option . '<option value="0">All</option>';
        while ($sql->fetch()) {
            $option = $option . '<option value="' . $deptId . '">' . $department . '</option>';
        }
    } else {
        $option = $option . '<option value="0">All</option>';
    }
    return $option;
}

function getDepartmentsByClientId($mysqli, $clientId, $stateId)
{
    $sql = $mysqli->prepare("SELECT deptId,department FROM department WHERE clientId = ? AND stateId = ?") or die($mysqli->error);
    $sql->bind_param("ii", $clientId, $stateId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($deptId, $department) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    if ($numRows <> 0) {
        $option = $option . '<option value="0">None</option>';
        while ($sql->fetch()) {
            $option = $option . '<option value="' . $deptId . '">' . $department . '</option>';
        }
    } else {
        $option = $option . '<option value="0">None</option>';
    }
    return $option;
}

function getStateByClient($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT DISTINCT stateId FROM department WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($stateId) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    if ($numRows <> 0) {
        while ($sql->fetch()) {
            $option = $option . '<option value="' . $stateId . '">' . getStateById($mysqli, $stateId) . '</option>';
        }
    } else {
        $option = $option . '<option value="0">None</option>';
    }
    return $option;
}

function getDepartmentIdByClientState($mysqli, $clientId, $stateId)
{
    $sql = $mysqli->prepare("SELECT deptId FROM department WHERE clientId = ? AND stateId = ?") or die($mysqli->error);
    $sql->bind_param("ii", $clientId, $stateId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->deptId;
    } else {
        return null;
    }
}

function getDepartmentIdByShiftId($mysqli, $shiftId)
{
    $sql = $mysqli->prepare("SELECT 
                                  shift.departmentId
                                FROM
                                  shift
                                  INNER JOIN department ON (shift.departmentId = department.deptId)
                                WHERE
                                  shift.shiftId = ?
                                ORDER BY
                                  department.department") or die($mysqli->error);
    $sql->bind_param("i", $shiftId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        $departmentId = $obj->departmentId;
    } else {
        $departmentId = null;
    }
    if (empty($departmentId)) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.deptId
                                FROM
                                  timesheet
                                  INNER JOIN department ON (timesheet.deptId = department.deptId)
                                WHERE
                                  timesheet.shiftId = ?
                                ORDER BY
                                  department.department") or die($mysqli->error);
        $sql->bind_param("i", $shiftId) or die($mysqli->error);
        $sql->execute();
        $obj = $sql->get_result()->fetch_object();
        if ($obj) {
            return $obj->deptId;
        } else {
            return null;
        }
    } else {
        return $departmentId;
    }
}

function assignEmployeeToClient($mysqli, $candidateId, $clientId, $stateId, $deptId, $priorityId)
{
    $chk = $mysqli->prepare("SELECT candidateId FROM employee_allocation WHERE candidateId = ? AND clientId = ? AND stateId = ? AND deptId = ?") or die($mysqli->error);
    $chk->bind_param("siii", $candidateId, $clientId, $stateId, $deptId) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        return listAllocation($mysqli, $candidateId);
    } else {
        $stmt = $mysqli->prepare("INSERT INTO employee_allocation(candidateId,clientId,stateId,deptId,priorityId) VALUES(?,?,?,?,?)") or die($mysqli->error);
        $stmt->bind_param("siiii", $candidateId, $clientId, $stateId, $deptId, $priorityId) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            $stmt->free_result();
            return listAllocation($mysqli, $candidateId);
        } else {
            $stmt->free_result();
            return listAllocation($mysqli, $candidateId);
        }
    }
}

function updateRiteqId($mysqli, $riteqId, $candidateId)
{
    $up = $mysqli->prepare("UPDATE candidate SET riteq_id = ? WHERE candidateId = ?") or die($mysqli->error);
    $up->bind_param("ss", $riteqId, $candidateId) or die($mysqli->error);
    if ($up->execute()) {
        return true;
    } else {
        return false;
    }
}

function updateChronusId($mysqli, $chronusId, $candidateId)
{
    $up = $mysqli->prepare("UPDATE candidate SET chronus_id = ? WHERE candidateId = ?") or die($mysqli->error);
    $up->bind_param("ss", trim($chronusId), $candidateId) or die($mysqli->error);
    if ($up->execute()) {
        return true;
    } else {
        return false;
    }
}

function getRiteqIdByCandidateId($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT riteq_id FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->riteq_id;
    } else {
        return null;
    }
}

function getChronusIdByCandidateId($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT chronus_id FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->chronus_id;
    } else {
        return null;
    }
}

function listAllocation($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT allocationId,candidateId,clientId,stateId,deptId,priorityId,status,ohs_sent_time,ohsCheckStatus,ohsCheckedBy,ohsCheckedTime FROM employee_allocation WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($allocationId, $candidateId, $clientId, $stateId, $deptId, $priorityId, $status, $ohs_sent_time, $ohsCheckStatus, $ohsCheckedBy, $ohsCheckedTime) or die($mysqli->error);
    $sql->store_result();
    $priority = '';
    $row = '';
    while ($sql->fetch()) {
        if ($priorityId == '1') {
            $priority = 'Prioritised';
        } else {
            $priority = 'N/A';
        }
        if ($status) {
            $status = 'Active';
            $style = 'rowGreen';
            $statusBtn = '<button type="button" name="excludeAllocationBtn" id="excludeAllocationBtn" value="exclude" class="excludeAllocationBtn btn btn-default btn-sm"><i class="glyphicon glyphicon-disable"></i>&nbsp;Exclude</button>';
        } else {
            $status = 'Excluded';
            $style = 'rowGrey';
            $statusBtn = '<button type="button" name="includeAllocationBtn" id="includeAllocationBtn" value="include" class="includeAllocationBtn btn btn-primary btn-sm"><i class="glyphicon glyphicon-disable"></i>&nbsp;Include</button>';
        }
        $row = $row . '<tr class="' . $style . '">';
        $row = $row . '<td class="candid" data-candid="' . $candidateId . '">' . getClientNameByClientId($mysqli, $clientId) . '</td>';
        $row = $row . '<td class="stid" data-stid="' . $stateId . '">' . getStateById($mysqli, $stateId) . '</td>';
        $row = $row . '<td class="did" data-did="' . $deptId . '">' . getDepartmentById($mysqli, $deptId) . '</td>';
        $row = $row . '<td>' . $priority . '</td>';
        $row = $row . '<td>' . $ohs_sent_time . '</td>';

        $row = $row . '<td class="clid" data-clid="' . $clientId . '"><button name="ohsViewBtn' . $clientId . $stateId . $deptId . '" id="ohsViewBtn' . $clientId . $stateId . $deptId . '" type="button" class="ohsViewBtn btn-sm btn-info" value="' . $ohsCheckStatus . '">' . $ohsCheckStatus . '</button>';
        if (!empty($ohsCheckedBy)) {
            $row = $row . $ohsCheckedBy . ' at ' . $ohsCheckedTime;
        }
        $row = $row . '</td><td>' . $status . '</td>';
        $row = $row . '<td class="allid" data-allid="' . $allocationId . '">' . $statusBtn;
        $row = $row . '<button type="button" name="removeAllocationBtn" id="removeAllocationBtn" value="remove" class="removeAllocationBtn btn btn-danger btn-sm"><i class="glyphicon glyphicon-trash"></i>&nbsp;Remove</button></td></tr>';
    }
    return $row;
}

function getAllocatedDepartmentIds($mysqli, $candidateId)
{
    $stmt = $mysqli->prepare("SELECT deptId FROM employee_allocation WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $candidateId) or die($mysqli->error);
    $stmt->execute();
    $stmt->bind_result($deptId) or die($mysqli->error);
    $stmt->store_result();
    while ($stmt->fetch()) {
        $deptArr[] = $deptId;
    }
    return $deptArr;
}

function removeAllocation($mysqli, $allid, $candidateId)
{
    $del = $mysqli->prepare("DELETE FROM employee_allocation WHERE allocationId = ?") or die($mysqli->error);
    $del->bind_param("i", $allid) or die($mysqli->error);
    $del->execute();
    $nr = $del->affected_rows;
    if ($nr > 0) {
        return listAllocation($mysqli, $candidateId);
    } else {
        return listAllocation($mysqli, $candidateId);
    }
}

function updateAllocation($mysqli, $status, $allid, $candidateId)
{
    $up = $mysqli->prepare("UPDATE employee_allocation SET status = ? WHERE allocationId = ?") or die($mysqli->error);
    $up->bind_param("ii", $status, $allid) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    if ($nrows > 0) {
        return listAllocation($mysqli, $candidateId);
    } else {
        return listAllocation($mysqli, $candidateId);
    }
}

function updateEmployeeAllocationOHS($mysqli, $canId, $clientId, $stateId, $deptId)
{
    $up = $mysqli->prepare("UPDATE employee_allocation SET ohs_sent_time = NOW() WHERE candidateId = ? AND clientId = ? AND stateId = ? AND deptId = ?") or die($mysqli->error);
    $up->bind_param("siii", $canId, $clientId, $stateId, $deptId) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    if ($nrows > 0) {
        return true;
    } else {
        return false;
    }
}

function getDepartmentById($mysqli, $deptId)
{
    $sql = $mysqli->prepare("SELECT department FROM department WHERE deptId = ?") or die($mysqli->error);
    $sql->bind_param("i", $deptId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->department;
    } else {
        return null;
    }
}

function validateExistingDepartment($mysqli, $clientId, $stateId, $department)
{
    $sqlchk = $mysqli->prepare("SELECT clientId FROM department WHERE clientId = ? AND stateId = ? AND department = ?") or die ($mysqli->error);
    $sqlchk->bind_param("iis", $clientId, $stateId, $department) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function addDepartment($mysqli, $clientId, $stateId, $department, $phone, $note)
{
    $ins = $mysqli->prepare("INSERT INTO department(clientId,stateId,department,phone,note) VALUES(?,?,?,?,?)") or die($mysqli->error);
    $ins->bind_param("iisss", $clientId, $stateId, $department, $phone, $note) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows == '1') {
        $ins->free_result();
        return listDepartments($mysqli, '');//listAreasOfWork($mysqli,$clientId,$stateId);
    } else {
        return '<tr><td colspan="4">' . $mysqli->error . '</td></tr>';
    }
}

function removeClientDepartment($mysqli, $id, $clientId, $stateId)
{
    $sql = $mysqli->prepare("DELETE FROM department WHERE deptId = ?") or die($mysqli->error);
    $sql->bind_param("i", $id) or die($mysqli->error);
    $sql->execute();
    $sql->free_result();
    $sqld = $mysqli->prepare("DELETE FROM employee_allocation WHERE clientId = ? AND deptId = ?") or die($mysqli->error);
    $sqld->bind_param("ii", $clientId, $id) or die($mysqli->error);
    $sqld->execute();
    $sqld = $mysqli->prepare("DELETE FROM client_position WHERE clientId = ? AND deptId = ?") or die($mysqli->error);
    $sqld->bind_param("ii", $clientId, $id) or die($mysqli->error);
    $sqld->execute();
    return true;
}

function updateClientDepartment($mysqli, $departmentId, $department, $phone, $note)
{
    $up = $mysqli->prepare("UPDATE department SET department = ?, phone = ?, note = ? WHERE deptId = ?") or die($mysqli->error);
    $up->bind_param("sssi", $department, $phone, $note, $departmentId) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    if ($nrows > 0) {
        return true;//listDepartments($mysqli,'');
    } else {
        return false; //listDepartments($mysqli,'');
    }
}

function getClientPositions($mysqli, $clientId, $stateId, $deptId)
{
    $sql = $mysqli->prepare("SELECT posId FROM client_position WHERE clientId = ? AND stateId = ? AND deptId = ?") or die($mysqli->error);
    $sql->bind_param("iii", $clientId, $stateId, $deptId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($posId) or die($mysqli->error);
    $sql->store_result();
    while ($sql->fetch()) {
        $jobDescription = getClientJobDescription($mysqli, $clientId, $stateId, $deptId, $posId);
        $list = $list . '<div data-posid="' . $posId . '" data-clid="' . $clientId . '" data-stid="' . $stateId . '" data-depid="' . $deptId . '">' . getPositionByPositionId($mysqli, $posId) . ' &nbsp;<br>JBDESC:<b>' . $jobDescription . '</b><button class="posDelete" style="cursor:pointer"><i class="glyphicon glyphicon-trash"></i>&nbsp;</button></div><br>';
    }
    return $list;
}

function getClientPositionsList($mysqli, $clientId)
{
    if ($clientId == 'All') {
        $select = $mysqli->prepare("SELECT DISTINCT posId FROM client_position ORDER BY posId ASC ") or die($mysqli->error);
    } else {
        $select = $mysqli->prepare("SELECT DISTINCT posId FROM client_position WHERE clientId = ? ORDER BY posId ASC ") or die($mysqli->error);
        $select->bind_param("i", $clientId) or die($mysqli->error);
    }
    $select->execute();
    $select->bind_result($posId) or die($mysqli->error);
    $select->store_result();
    $opt = '<option value="All">All</option>';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $posId . '">' . getPositionByPositionId($mysqli, $posId) . '</option>';
    }
    return $opt;
}

function getClientPositionsListForTimesheetCheck($mysqli, $clientId, $positionId)
{
    $select = $mysqli->prepare("SELECT DISTINCT posId FROM client_position WHERE clientId = ? ORDER BY posId ASC ") or die($mysqli->error);
    $select->bind_param("i", $clientId) or die($mysqli->error);
    $select->execute();
    $select->bind_result($posId) or die($mysqli->error);
    $select->store_result();
    $opt = '';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $posId . '"';
        if ($positionId == $posId) {
            $opt = $opt . 'selected="selected"';
        }
        $opt = $opt . '>' . getPositionByPositionId($mysqli, $posId) . '</option>';
    }
    return $opt;
}

function getClientPositionsDropdown($mysqli, $clientId)
{
    $select = $mysqli->prepare("SELECT DISTINCT posId FROM client_position WHERE clientId = ? ORDER BY posId ASC ") or die($mysqli->error);
    $select->bind_param("i", $clientId) or die($mysqli->error);
    $select->execute();
    $select->bind_result($posId) or die($mysqli->error);
    $select->store_result();
    $opt = '';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $posId . '">' . getPositionByPositionId($mysqli, $posId) . '</option>';
    }
    return $opt;
}

function getClientPositionsForScheduling($mysqli, $clientId)
{
    $select = $mysqli->prepare("SELECT DISTINCT client_position.posId,candidate_position.positionName FROM client_position INNER JOIN candidate_position ON (client_position.posId = candidate_position.positionid) WHERE client_position.clientId = ? ORDER BY candidate_position.positionName") or die($mysqli->error);
    $select->bind_param("i", $clientId) or die($mysqli->error);
    $select->execute();
    $select->bind_result($posId, $positionName) or die($mysqli->error);
    $select->store_result();
    $opt = '';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $posId . '">' . getPositionByPositionId($mysqli, $posId) . '</option>';
    }
    return $opt;
}

function listDepartments($mysqli, $clientSearch, $loggedInUser)
{
    if (!empty($clientSearch)) {
        $param = "%" . $clientSearch . "%";
        $sql = $mysqli->prepare("SELECT department.clientId,department.stateId, department.department, department.deptId,department.phone,department.note,client.client FROM department INNER JOIN client ON (department.clientId = client.clientId) WHERE client.client LIKE ? ORDER BY client.client ASC") or die($mysqli->error);
        $sql->bind_param("s", $param) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT department.clientId,department.stateId, department.department, department.deptId,department.phone,department.note,client.client FROM department INNER JOIN client ON (department.clientId = client.clientId) ORDER BY client.client ASC") or die($mysqli->error);
    }
    $sql->execute();
    $sql->bind_result($clientId, $stateId, $department, $deptId, $phone, $note, $client) or die($mysqli->error);
    $sql->store_result();
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td class="clid" data-clid="' . $clientId . '">' . $client . '</td><td class="stid" data-stid="' . $stateId . '">' . getStateById($mysqli, $stateId) . '</td><td class="id" data-id="' . $deptId . '" data-department="' . $department . '">' . $department . '</td>';
        $row = $row . '<td style="white-space:nowrap">' . getClientPositions($mysqli, $clientId, $stateId, $deptId) . '</td>';
        $row = $row . '<td class="phone" data-phone="' . $phone . '">' . $phone . '</td><td class="notes" data-note="' . $note . '">' . $note . '</td><td><button type="button" name="editDeptBtn" id="editDeptBtn" value="edit" class="editDeptBtn btn btn-default btn-sm"><i class="glyphicon glyphicon-pencil"></i>&nbsp;</button>';
        if ($loggedInUser == 'ACCOUNTS') {
            $row = $row . '<button type="button" name="removeDeptBtn" id="removeDeptBtn" value="remove" class="removeDeptBtn btn btn-danger btn-sm"><i class="glyphicon glyphicon-trash"></i>&nbsp;</button>';
        }
        $row = $row . '</td></tr>';
    }
    return $row;
}

function addClientPosition($mysqli, $clientId, $stateId, $deptId, $positionId)
{
    $sqlCheck = $mysqli->prepare("SELECT posId FROM client_position WHERE clientId = ? AND stateId = ? AND deptId = ? AND posId = ?") or die($mysqli->error);
    $sqlCheck->bind_param("iiii", $clientId, $stateId, $deptId, $positionId) or die($mysqli->error);
    $sqlCheck->execute();
    $sqlCheck->store_result();
    $sqlCheck->fetch();
    $num_of_rows = $sqlCheck->num_rows;
    if ($num_of_rows > 0) {
        return 'exists';
    } else {
        $ins = $mysqli->prepare("INSERT INTO client_position (clientId,stateId,deptId,posId) VALUES (?,?,?,?)") or die($mysqli->error);
        $ins->bind_param("iiii", $clientId, $stateId, $deptId, $positionId) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            return 'added';
        } else {
            return $mysqli->error;
        }
    }
}

function deleteClientPosition($mysqli, $posid, $clid, $stid, $depid)
{
    $del = $mysqli->prepare("DELETE FROM client_position WHERE clientId =? AND stateId = ? AND deptId = ? AND posId = ?") or die($mysqli->error);
    $del->bind_param("iiii", $clid, $stid, $depid, $posid) or die($mysqli->error);
    $del->execute();
    $rows_deleted = $del->affected_rows;
    if ($rows_deleted > 0) {
        return 'deleted';
    } else {
        return 'error';
    }
}

function getClientJobDescription($mysqli, $clientId, $stateId, $deptId, $posId)
{
    $sql = $mysqli->prepare("SELECT job_description FROM client_position WHERE clientId = ? AND stateId = ? AND deptId = ? AND posId = ?") or die($mysqli->error);
    $sql->bind_param("iiii", $clientId, $stateId, $deptId, $posId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->job_description;
    } else {
        return null;
    }
}

function getStateById($mysqli, $stateId)
{
    $sql = $mysqli->prepare("SELECT state FROM states WHERE stateId = ? ORDER BY state ASC") or die($mysqli->error);
    $sql->bind_param("i", $stateId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return strtoupper($obj->state);
    } else {
        return null;
    }
}

function getRegionById($mysqli, $regionId)
{
    $sql = $mysqli->prepare("SELECT region FROM regions WHERE regionId = ? ORDER BY region ASC") or die($mysqli->error);
    $sql->bind_param("i", $regionId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->region;
    } else {
        return null;
    }
}

function getStateCodeById($mysqli, $stateId)
{
    $sql = $mysqli->prepare("SELECT stateCode FROM states WHERE stateId = ? ORDER BY state ASC") or die($mysqli->error);
    $sql->bind_param("i", $stateId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->stateCode;
    } else {
        return null;
    }
}

function getClientNameByClientId($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT client FROM client WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->client;
    } else {
        return null;
    }
}

function getSalesmanByClient($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT salesman FROM client WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->salesman;
    } else {
        return null;
    }
}

function getIndustrySectorByClient($mysqli, $clientId)
{
    $stmt = $mysqli->prepare("SELECT industrySector FROM client WHERE clientId = ?") or die($mysqli->error);
    $stmt->bind_param("i", $clientId) or die($mysqli->error);
    $stmt->execute();
    return $industrySector = $stmt->get_result()->fetch_object()->industrySector;
}

function checkfileInfo($mysqli, $candidateId, $DOCNAME)
{
    $sql = $mysqli->prepare("SELECT fileName FROM candidate_document WHERE candidateId = ? AND fileName = ?") or die($mysqli->error);
    $sql->bind_param("ss", $candidateId, $DOCNAME) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->fileName;
    } else {
        return null;
    }
    /*$sql->store_result();
	$sql->fetch();
	$num_of_rows = $sql->num_rows;
	if($num_of_rows > 0){
		return true;
	}else{
		return false;
	}*/

}

function getStates($mysqli)
{
    $stat = $mysqli->prepare("SELECT 
	   stateId, state
	FROM
	  states
	ORDER BY state ASC") or die($mysqli->error);
    $stat->execute();
    $stat->bind_result($stateId, $state);
    $stateArray = array();
    while ($stat->fetch()) {
        $stateArray[] = array('stateId' => $stateId, 'state' => $state);
    }
    return $stateArray;
}

function getClientDepartments($mysqli)
{
    $select = $mysqli->prepare("SELECT DISTINCT
								  department.clientId,
								  client.client
								FROM
								  department
								  INNER JOIN client ON (department.clientId = client.clientId)
								ORDER BY client ASC") or die($mysqli->error);
    $select->execute();
    $select->bind_result($clientId, $client) or die($mysqli->error);
    $select->store_result();
    $opt = '<option disabled="disabled" selected="selected" value="None">Select department</option>';
    while ($select->fetch()) {
        $opt = $opt . '<optgroup label="' . $client . '">';
        $opt = $opt . generateStatesDropdown($mysqli, $clientId);
        $opt = $opt . '</optgroup>';
    }
    return $opt;
}

function getClientDepartmentsManualTimesheet($mysqli, $clientId, $positionId, $jobCode, $empId, $weekendingDate, $dateRange)
{
    $select = $mysqli->prepare("SELECT deptId,stateId,department FROM department WHERE clientId = ? ORDER BY department ASC ") or die($mysqli->error);
    $select->bind_param("i", $clientId) or die($mysqli->error);
    $select->execute();
    $select->store_result();
    $select->bind_result($deptId, $stateId, $department) or die($mysqli->error);
    $opt = '';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $deptId . '">' . getStateById($mysqli, $stateId) . ' ' . $department . '</option>';
    }
    return $opt;
}

function getTimesheetDepartments($mysqli, $startDate, $endDate, $clientId, $positionId, $jobCode, $empId, $weekendingDate)
{
    $select = $mysqli->prepare("SELECT workDate,deptId FROM timesheet_department WHERE workDate BETWEEN ? AND ? AND clientId = ? AND positionId = ? AND jobCode = ? AND empId = ? AND weekendingDate = ? ORDER BY workDate ASC ") or die($mysqli->error);
    $select->bind_param("ssiisss", $startDate, $endDate, $clientId, $positionId, $jobCode, $empId, $weekendingDate) or die($mysqli->error);
    $select->execute();
    $select->store_result();
    $select->bind_result($workDate, $deptId) or die($mysqli->error);
    $row = '';
    while ($select->fetch()) {
        $row = $row . '<tr><td>' . $workDate . '</td><td>' . getDepartmentById($mysqli, $deptId) . '</td></tr>';
    }
    return $row;
}

function getClientDepartmentsList($mysqli, $clientId)
{
    $select = $mysqli->prepare("SELECT deptId,stateId,department FROM department WHERE clientId = ? ORDER BY department ASC ") or die($mysqli->error);
    $select->bind_param("i", $clientId) or die($mysqli->error);
    $select->execute();
    $select->store_result();
    $select->bind_result($deptId, $stateId, $department) or die($mysqli->error);
    $opt = '<option value="All">All</option>';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $deptId . '">' . getStateById($mysqli, $stateId) . ' ' . $department . '</option>';
    }
    return $opt;
}

function getClientDeptsForJobCode($mysqli, $clientId)
{
    $select = $mysqli->prepare("SELECT deptId,stateId,department FROM department WHERE clientId = ? ORDER BY department ASC ") or die($mysqli->error);
    $select->bind_param("i", $clientId) or die($mysqli->error);
    $select->execute();
    $select->store_result();
    $select->bind_result($deptId, $stateId, $department) or die($mysqli->error);
    $opt = '';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $deptId . '">' . $department . '</option>';
    }
    return $opt;
}

function getClientDepartmentsListDropdown($mysqli, $clientId, $deptid)
{
    $select = $mysqli->prepare("SELECT deptId,stateId,department FROM department WHERE clientId = ? ORDER BY department ASC ") or die($mysqli->error);
    $select->bind_param("i", $clientId) or die($mysqli->error);
    $select->execute();
    $select->store_result();
    $select->bind_result($deptId, $stateId, $department) or die($mysqli->error);
    while ($select->fetch()) {
        /*$opt = $opt . '<option value="'.$deptId.'">'.getStateById($mysqli,$stateId).' '.$department.'</option>';*/
        $opt = $opt . '<option value="' . $deptId . '"';
        if ($deptId == $deptid) {
            $opt = $opt . 'selected="selected"';
        }
        $opt = $opt . '>' . getStateById($mysqli, $stateId) . ' ' . $department . '</option>';
    }
    return $opt;
}

function getClientDepartmentsDropdown($mysqli, $clientId, $deptid)
{
    $select = $mysqli->prepare("SELECT deptId,stateId,department FROM department WHERE clientId = ? ORDER BY department ASC ") or die($mysqli->error);
    $select->bind_param("i", $clientId) or die($mysqli->error);
    $select->execute();
    $select->store_result();
    $select->bind_result($deptId, $stateId, $department) or die($mysqli->error);
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $deptId . '"';
        /*if($deptId == $deptid){
            $opt = $opt . 'selected="selected"';
        }*/
        $opt = $opt . '>' . getStateById($mysqli, $stateId) . ' ' . $department . '</option>';

    }
    return $opt;
}

function generateStatesDropdown($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT DISTINCT
								  department.clientId,
								  department.stateId
								FROM
								  department
								WHERE
								  department.clientId = ?
								ORDER BY stateId ASC") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clientId, $stateId) or die($mysqli->error);
    $sql->store_result();
    while ($sql->fetch()) {
        /*$opt = $opt . '<optgroup label="' . getStateById($mysqli, $stateId) .'">';*/
        $opt = $opt . generateDepartmentsDropdown($mysqli, $clientId, $stateId);
        /*$opt = $opt . '</optgroup>';*/
    }
    return $opt;
}

function generateStatesForShiftAddress($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT DISTINCT
								  department.clientId,
								  department.stateId
								FROM
								  department
								WHERE
								  department.clientId = ?
								ORDER BY stateId ASC") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clientId, $stateId) or die($mysqli->error);
    $sql->store_result();
    while ($sql->fetch()) {
        $opt = $opt . '<option value="' . getStateById($mysqli, $stateId) . '">';
        $opt = $opt . getStateById($mysqli, $stateId);
        $opt = $opt . '</option>';
    }
    return $opt;
}

function addClientShiftLocation($mysqli, $clientId, $stateName, $shiftAddress, $street, $city, $suburb, $country, $postalCode, $latitude, $longitude, $location_check)
{
    $ins = $mysqli->prepare("INSERT INTO shift_address(clientId,state,address,street,city,sub,country,postalCode,latitude,longitude,location_check)VALUES(?,?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
    $ins->bind_param("issssssssss", $clientId, $stateName, $shiftAddress, $street, $city, $suburb, $country, $postalCode, $latitude, $longitude, $location_check) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows == '1') {
        return 'Added';
    } else {
        return $mysqli->error;
    }
}

function updateClientShiftLocation($mysqli, $id, $clientId, $stateName, $shiftAddress, $street, $city, $suburb, $country, $postalCode, $latitude, $longitude, $location_check)
{
    $up = $mysqli->prepare("UPDATE shift_address SET clientId = ?,state = ?,address = ?,street = ?,city = ?,sub = ?,country = ?,postalCode = ?,latitude = ?,longitude = ?,location_check = ? WHERE id = ?") or die($mysqli->error);
    $up->bind_param("issssssssssi", $clientId, $stateName, $shiftAddress, $street, $city, $suburb, $country, $postalCode, $latitude, $longitude, $location_check, $id) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    if ($nrows == '1') {
        return 'Updated';
    } else {
        return $mysqli->error;
    }
}

function getClientShiftLocations($mysqli)
{
    $sql = $mysqli->prepare("SELECT id,clientId,state,address,street,city,sub,country,postalCode,latitude,longitude,location_check FROM shift_address") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($id, $clientId, $state, $address, $street, $city, $sub, $country, $postalCode, $latitude, $longitude, $location_check) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr id="' . $id . '"><td class="cl" data-id="' . $id . '" data-clid="' . $clientId . '" data-state="' . $state . '" data-address="' . $address . '" data-street="' . $street . '" data-city="' . $city . '" data-sub="' . $sub . '" data-country="' . $country . '">
        <button name="editClient" id="editClient" class="editClient btn btn-default">Edit</button></td>
        <td>' . getClientNameByClientId($mysqli, $clientId) . '</td>
        <td>' . $address . '</td>
        <td>' . $street . '</td>
        <td>' . $state . '</td>
        <td>' . $city . '</td>
        <td>' . $sub . '</td>
        <td>' . $country . '</td>
        <td>' . $postalCode . '</td>
        <td>' . $latitude . '</td>
        <td>' . $longitude . '</td>
        <td>' . $location_check . '</td></tr>';
    }
    return $row;
}

function getShiftLocation($mysqli, $id)
{
    $sql = $mysqli->prepare("SELECT id,clientId,state,address,street,city,sub,country,postalCode,latitude,longitude,location_check FROM shift_address WHERE id = ?") or die($mysqli->error);
    $sql->bind_param("i", $id) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($id, $clientId, $state, $address, $street, $city, $sub, $country, $postalCode, $latitude, $longitude, $location_check) or die($mysqli->error);
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('id' => $id, 'clientId' => $clientId, 'state' => strtoupper($state), 'address' => $address, 'street' => $street, 'city' => $city, 'sub' => $sub, 'country' => $country, 'postalCode' => $postalCode, 'latitude' => $latitude, 'longitude' => $longitude, 'location_check' => $location_check);
    }
    return json_encode($dataArray);
}

function getShiftLocationsDropDown($mysqli, $clientId, $eAddressId)
{
    if (!empty($eAddressId)) {
        $sql = $mysqli->prepare("SELECT id,address FROM shift_address WHERE clientId = ?") or die($mysqli->error);
        $sql->bind_param("i", $clientId) or die($mysqli->error);
        $sql->execute();
        $sql->store_result();
        $sql->bind_result($id, $address) or die($mysqli->error);
        $nrows = $sql->num_rows;
        if ($nrows > 0) {
            while ($sql->fetch()) {
                $opt = $opt . '<option value="' . $id . '"';
                if ($id == $eAddressId) {
                    $opt = $opt . 'selected';
                }
                $opt = $opt . '>' . $address . '</option>';
            }
        } else {
            $opt = $opt . '<option value="0" selected>None</option>';
        }
        return $opt;
    } else {
        $sql = $mysqli->prepare("SELECT id,address FROM shift_address WHERE clientId = ?") or die($mysqli->error);
        $sql->bind_param("i", $clientId) or die($mysqli->error);
        $sql->execute();
        $sql->store_result();
        $sql->bind_result($id, $address) or die($mysqli->error);
        $nrows = $sql->num_rows;
        if ($nrows > 0) {
            while ($sql->fetch()) {
                $opt = $opt . '<option value="' . $id . '">' . $address . '</option>';
            }
        } else {
            $opt = $opt . '<option value="0" selected>None</option>';
        }
        return $opt;
    }
}

function generateDepartmentsDropdown($mysqli, $clientId, $stateId)
{
    $sql = $mysqli->prepare("SELECT DISTINCT
								  department.deptId,
								  department.clientId,
								  department.stateId,
								  department.department
								FROM
								  department
								WHERE
								  department.clientId = ?
								AND
								  department.stateId = ?	    
								ORDER BY department ASC") or die($mysqli->error);
    $sql->bind_param("ii", $clientId, $stateId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($deptId, $clientId, $stateId, $department) or die($mysqli->error);
    $sql->store_result();
    while ($sql->fetch()) {
        $opt = $opt . '<option value="' . $clientId . '-' . $stateId . '-' . $deptId . '">' . $department . '(' . getStateById($mysqli, $stateId) . ')</option>';
    }
    return $opt;
}

function validateRosterOrder($mysqli, $rosterStartDate, $rosterEndDate, $positionid, $deptId)
{
    $sqlchk = $mysqli->prepare("SELECT startDate FROM rosterorder WHERE startDate = ? AND endDate = ? AND positionId = ? AND deptId = ?") or die($mysqli->error);
    $sqlchk->bind_param("ssii", $rosterStartDate, $rosterEndDate, $positionid, $deptId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }

}

function getRosterOrder($mysqli, $rosterStartDate, $rosterEndDate, $positionid, $deptId)
{
    $sql = $mysqli->prepare("SELECT orderQty FROM rosterorder WHERE startDate = ? AND endDate = ? AND positionId = ? AND deptId = ?") or die($mysqli->error);
    $sql->bind_param("ssii", $rosterStartDate, $rosterEndDate, $positionid, $deptId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->orderQty;
    } else {
        return null;
    }
}

function updateRosterOrder($mysqli, $rosterOrder, $rosterStartDate, $rosterEndDate, $positionid, $deptId)
{
    if (validateRosterOrder($mysqli, $rosterStartDate, $rosterEndDate, $positionid, $deptId)) {
        $up = $mysqli->prepare("UPDATE rosterorder SET orderQty = ? WHERE startDate = ? AND endDate = ? AND positionId = ? AND deptId = ?") or die($mysqli->error);
        $up->bind_param("issii", $rosterOrder, $rosterStartDate, $rosterEndDate, $positionid, $deptId) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows == '1') {
            return getRosterOrder($mysqli, $rosterStartDate, $rosterEndDate, $positionid, $deptId);
        } else {
            return $mysqli->error;
        }
    } else {
        $ins = $mysqli->prepare("INSERT INTO rosterorder(startDate,endDate,positionId,deptId,orderQty)VALUES(?,?,?,?,?)") or die($mysqli->error);
        $ins->bind_param("ssiii", $rosterStartDate, $rosterEndDate, $positionid, $deptId, $rosterOrder) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            return getRosterOrder($mysqli, $rosterStartDate, $rosterEndDate, $positionid, $deptId);
        } else {
            return $mysqli->error;
        }
    }
}

function getCandidateAttribute($mysqli, $canId, $deptId)
{
    $stmt = $mysqli->prepare("SELECT 
                              otherlicence.otherLicenceType
                            FROM
                              otherlicence
                              INNER JOIN candidate_otherlicence ON (otherlicence.otherLicenceId = candidate_otherlicence.otherLicenceId)
                            WHERE
                              candidate_otherlicence.candidateId = ? AND
                              otherlicence.deptId = ?") or die($mysqli->error);
    $stmt->bind_param("si", $canId, $deptId) or die($mysqli->error);
    $stmt->execute();
    $result = $stmt->get_result()->fetch_object()->otherLicenceType;
    if (empty($result)) {
        return $result = ' ';
    } else {
        return $result;
    }
}

function getAttributeTypeByCode($mysqli, $code)
{
    $sql = $mysqli->prepare("SELECT otherLicenceType FROM otherlicence WHERE code = ?") or die($mysqli->error);
    $sql->bind_param("s", $code) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->otherLicenceType;
    } else {
        return null;
    }
}

function attributeCheck($mysqli, $canId, $attrCode, $deptId)
{
    $stmt = $mysqli->prepare("SELECT 
                              candidate_otherlicence.candidateId
                            FROM
                              otherlicence
                              INNER JOIN candidate_otherlicence ON (otherlicence.otherLicenceId = candidate_otherlicence.otherLicenceId)
                            WHERE
                              otherlicence.code = ? AND 
                              candidate_otherlicence.candidateId = ? AND
                              otherlicence.deptId = ?") or die($mysqli->error);
    $stmt->bind_param("ssi", $attrCode, $canId, $deptId) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function getAllocatedEmployees($mysqli, $clientId, $stateId, $deptId, $num_th, $header, $estatus, $positionid, $canId, $startDate, $endDate, $stWrkDate)
{
    $empStatus = 'ACTIVE';
    $auditStatus = 1;
    if (!empty($canId)) {
        $sql = $mysqli->prepare("SELECT 
                                  employee_allocation.candidateId,
                                  employee_allocation.clientId,
                                  employee_allocation.stateId,
                                  employee_allocation.deptId,
                                  employee_allocation.ohs_sent_time,
                                  employee_positions.positionid,
                                  candidate.sex,
                                  candidate.firstName,
                                  candidate.lastName,
                                  candidate.nickname,
                                  candidate.mobileNo,
                                  candidate.fairwork_info_sent_time,
                                  department.department,
                                  client.client
                                FROM
                                  employee_allocation
                                  INNER JOIN employee_positions ON (employee_allocation.candidateId = employee_positions.candidateId)
                                  INNER JOIN candidate ON (employee_allocation.candidateId = candidate.candidateId)
                                  INNER JOIN department ON (employee_allocation.deptId = department.deptId)
                                  INNER JOIN client ON (employee_allocation.clientId = client.clientId)
                                WHERE
                                  employee_allocation.clientId = ? AND
                                  employee_allocation.stateId = ? AND
                                  employee_allocation.deptId = ? AND
                                  employee_allocation.status = ? AND
                                  employee_positions.positionid = ? AND 
                                  employee_allocation.candidateId = ? AND
                                  candidate.empStatus = ? AND
                                  candidate.auditStatus = ?
                                ORDER BY candidate.firstName ASC") or die($mysqli->error);
        $sql->bind_param("iiiiissi", $clientId, $stateId, $deptId, $estatus, $positionid, $canId, $empStatus, $auditStatus) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT 
                                  employee_allocation.candidateId,
                                  employee_allocation.clientId,
                                  employee_allocation.stateId,
                                  employee_allocation.deptId,
                                  employee_allocation.ohs_sent_time,
                                  employee_positions.positionid,
                                  candidate.sex,
                                  candidate.firstName,
                                  candidate.lastName,
                                  candidate.nickname,
                                  candidate.mobileNo,
                                  candidate.fairwork_info_sent_time,
                                  department.department,
                                  client.client
                                FROM
                                  employee_allocation
                                  INNER JOIN employee_positions ON (employee_allocation.candidateId = employee_positions.candidateId)
                                  INNER JOIN candidate ON (employee_allocation.candidateId = candidate.candidateId)
                                  INNER JOIN department ON (employee_allocation.deptId = department.deptId)
                                  INNER JOIN client ON (employee_allocation.clientId = client.clientId)
                                WHERE
                                  employee_allocation.clientId = ? AND
                                  employee_allocation.stateId = ? AND
                                  employee_allocation.deptId = ? AND
                                  employee_allocation.status = ? AND
                                  employee_positions.positionid = ? AND
                                  candidate.empStatus = ? AND
                                  candidate.auditStatus = ?
                                  ORDER BY candidate.firstName ASC") or die($mysqli->error);
        $sql->bind_param("iiiiisi", $clientId, $stateId, $deptId, $estatus, $positionid, $empStatus, $auditStatus) or die($mysqli->error);
    }
    $sql->execute();
    $sql->bind_result($candidateId, $clientId, $stateId, $deptId, $ohs_sent_time, $positionid, $sex, $firstName, $lastName, $nickname, $mobileNo, $fairwork_info_sent_time, $department, $client) or die($mysqli->error);
    $sql->store_result();
    $nrows = $sql->num_rows;
    $row = '';
    if ($nrows > 0) {
        while ($sql->fetch()) {
            $empWrkHrs = 0;
            $studentShiftCount = 0;
            $studentMaxShiftColor = '';
            if (getEmployeeVisaTypeId($mysqli, $candidateId) == 2) {
                $studentShiftCount = getStudentEmployeeMaxShiftCount($mysqli, $candidateId, $startDate, $endDate);
                $empWrkHrs = getStudentEmployeeWorkHours($mysqli, $candidateId, $startDate, $endDate);
                $studentMaxShiftColor = 'red';
            }
            $row = $row . '<tr id="' . $candidateId . ' ' . $empWrkHrs . ' ' . $nrows . '"';
            if ($empWrkHrs > 24) {
                $row = $row . ' style="background-color:' . $studentMaxShiftColor . '"';
            }
            if ($sex == 'Male') {
                $genderColor = 'cellColorMale';
            } else {
                $genderColor = 'cellColorFeMale';
            }
            $row = $row . '><td class="' . $genderColor . ' rosterRowHeader ' . unfilledIndicator($mysqli, $candidateId) . '">';
            $row = $row . '<span class="deptName"><a href="./clientDepartments.php" target="_blank" class="deptNameLink">' . $department . '</a></span>&nbsp;';

            $row = $row . '<span data-start-date="' . $header[0]['headerFullDate'] . '" data-end-date="' . $header[count($header) - 1]['headerFullDate'] . '" data-emp-id="' . $candidateId . '" data-clientid="' . $clientId . '"  data-stateid="' . $stateId . '" data-deptid="' . $deptId . '" data-positionid="' . $positionid . '"></span>';
            if (displayNoPhoneIndicator($mysqli, $candidateId)) {
                $row = $row . '&nbsp;<span class="noPhoneIndicator" style="background: red"><i class="icon-append fa fa-mobile-phone"></i><i class="icon-append fa fa-ban"></i></span>';
            } else {
                $row = $row . '&nbsp;<input type="checkbox" name="chRow[]" class="chRow" value="' . $candidateId . '"/>';
            }

            if (displayStudentIndicator($mysqli, $candidateId)) {
                $row = $row . '&nbsp;<span class="studentIndicator"><i class="icon-append fa fa-graduation-cap"></i></span>';
            }
            if ($studentShiftCount > 3) {
                $row = $row . '&nbsp;<span class="studentMaxShiftIndicator" data-student="' . $studentShiftCount . '"><i class="icon-append fa fa-x fa-stack-overflow" style="color: red" title="Max Student shift count exceeded"></i></span>';
            }
            /*if (displayWageSubsidyIndicator($mysqli, $candidateId)) {
                $row = $row . '&nbsp;<span class="wageSubsidyIndicator" title="Wage Subsidy"><img src="../img/wage-subsidy.png" width="16" height="16" alt=""></span>';
            }
            if (validateCandidateDocumentByDocTypeId($mysqli, $candidateId,76) && validateCandidateDocumentByDocTypeId($mysqli, $candidateId,77) && validateCandidateDocumentByDocTypeId($mysqli, $candidateId,78) && validateCandidateDocumentByDocTypeId($mysqli, $candidateId,79) && validateCandidateDocumentByDocTypeId($mysqli, $candidateId,80)) {
                $row = $row . '&nbsp;<span class="missionFoodDocs" title="Mission Food Documents"><i class="fa fa-files-o"></i></span>';
            }*/
            if ($clientId == 294) {
                if (validateMissionFoodsDocuments($mysqli, $canId)) {
                    $row = $row . '&nbsp;<span class="missionFoodDocs" title="Mission Food Documents"><i class="fa fa-files-o"></i></span>';
                }
            } elseif ($clientId == 308) {
                if (validateCandidateDocumentByDocTypeId($mysqli, $candidateId, 81)) {
                    $row = $row . '&nbsp;<span class="drisscolsInduction" title="Drisscolls Induction"><i class="fa fa-info"></i></span>';
                }
            }
            /*
            if (displayNovIndicator($mysqli, $candidateId)) {
                $row = $row . '&nbsp;<span class="novIndicator" style="color: red"><b>16NOV</b></span>';
            }*/

            $row = $row . '<br>';
            $row = $row . '<span class="employeeName"><a href="./candidateMain.php?canId=' . base64_encode($candidateId) . '" target="_blank" class="employeeNameLink">' . $firstName . ' ' . $lastName . '</a></span>';
            if (!empty($nickname)) {
                $row = $row . '(' . $nickname . ')';
            }
            $row = $row . '<br><span class="candidateid">' . $candidateId . '</span>';

            $row = $row . '&nbsp;&nbsp;<span class="candidatemobileno"><i class="fa fa-2x fa-mobile-phone"></i>&nbsp;&nbsp;&nbsp;<a href="tel:' . $mobileNo . '" class="candidatemobilenoLink">' . $mobileNo . '</a></span>
                            &nbsp;&nbsp;&nbsp;<span class="hrsTotal"></span>
                          <br>';
            $visa_expiry_date = getVisaExpiryDate($mysqli, $candidateId);
            $current_date = date('Y-m-d', strtotime(date('Y-m-d')));
            $emp_visa_type = getCandidateVisaType($mysqli,$candidateId);
            if(!empty($emp_visa_type)) {
                if ($emp_visa_type != 0 || $emp_visa_type != 1) {
                    if (!empty($visa_expiry_date)) {
                        if (($current_date > date('Y-m-d', strtotime($visa_expiry_date)))) {
                            $row = $row . '<span style="color:red; font-weight: bold">Visa Expired</span>';
                        }
                    }
                }
            }
            $row = $row . '</td>';

            foreach ($header as $header_data) {
                $row = $row . '<td class="rosterCell" 
                                data-canid="' . $candidateId . '" 
                                data-clid="' . $clientId . '" 
                                data-stid="' . $stateId . '" 
                                data-did="' . $deptId . '" 
                                data-tdDate="' . $header_data['headerFullDate'] . '">';
                $row = $row . getExistingShifts($mysqli, $header_data['headerFullDate'], $clientId, $stateId, $deptId, $candidateId, $positionid);
                $row = $row . overlappingShiftDisplay($mysqli, $header_data['headerFullDate'], $deptId, $positionid, $clientId, $candidateId);
                $row = $row . '</td>';
            }
            //sorting rows
            $row = $row . '<td data-allcanid="' . $candidateId . '" data-clientName="' . $client . '" data-clid="' . $clientId . '" data-stid="' . $stateId . '" data-did="' . $deptId . '" data-strDate="' . $header[0]['headerFullDate'] . '" data-endDate="' . $header[count($header) - 1]['headerFullDate'] . '" style="text-align:center">';
            if ($firstName != 'UNFILLED') {
                $row = $row . '<button class="sendAllBtn btn btn-info btn-xs roster-button" type="button"><i class="fa fa-envelope"></i>&nbsp;Send All SMS</button>
                                <br><button class="confirmAllBtn btn btn-info btn-xs roster-button" type="button"><i class="fa fa-check"></i>&nbsp;Confirm All</button><br>';
                if (!empty($ohs_sent_time)) {
                    $row = $row . '<button class="sendOHSBtn btn btn-info btn-xs roster-button" type="button"><i class="fa fa-check"></i>&nbsp;OH&S SENT</button><br>';
                } else {
                    $row = $row . '<button class="sendOHSBtn btn btn-info btn-xs roster-button" type="button"><i class="fa fa-remove"></i>&nbsp;OH&S REQ</button><br>';
                }
                if (!empty($fairwork_info_sent_time)) {
                    $row = $row . '<button class="sendFairWorkInfoBtn btn btn-info btn-xs roster-button" type="button"><i class="fa fa-check"></i>&nbsp;Fair Work Info SENT</button><br>';
                } else {
                    $row = $row . '<button class="sendFairWorkInfoBtn btn btn-info btn-xs roster-button" type="button"><i class="fa fa-remove"></i>&nbsp;Send Fair Work Info</button><br>';
                }
                /*if($clientId == 236){
                    $row = $row . '<button class="sendSciclunaBtn btn btn-success btn-xs roster-button" style="background-color:#b6841e;" type="button">&nbsp;SCICLUNA SURVEY</button><br>';
                }*/
            }
            /*            $row = $row . '<button class="sendAppVersionBtn btn btn-success btn-xs roster-button" style="background-color:#0c5460" type="button"><i class="glyphicon glyphicon-check"></i>&nbsp;Send App Check</button><br>';*/

            $row = $row . '<button class="deleteAllBtn btn btn-danger btn-xs roster-button" type="button"><i class="fa fa-trash"></i>&nbsp;Delete All</button></td></tr>';
        }
    } else {
        $row = $row . '<tr><td class="rosterCell" colspan="' . (count($header)) . '">No employees allocated to this department</td></tr>';
    }
    return $row;
}

function getAllocatedCasuals($mysqli, $clientId, $stateId, $deptId, $num_th, $header, $estatus, $positionid, $canId, $startDate, $endDate, $stWrkDate)
{
    $empStatus = 'ACTIVE';
    $auditStatus = 1;
    if (!empty($canId)) {
        $sql = $mysqli->prepare("SELECT 
                                  employee_allocation.candidateId,
                                  employee_allocation.clientId,
                                  employee_allocation.stateId,
                                  employee_allocation.deptId,
                                  employee_allocation.ohs_sent_time,
                                  employee_positions.positionid,
                                  candidate.sex,
                                  candidate.firstName,
                                  candidate.lastName,
                                  candidate.nickname,
                                  candidate.mobileNo,
                                  candidate.fairwork_info_sent_time,
                                  department.department,
                                  client.client
                                FROM
                                  employee_allocation
                                  INNER JOIN employee_positions ON (employee_allocation.candidateId = employee_positions.candidateId)
                                  INNER JOIN candidate ON (employee_allocation.candidateId = candidate.candidateId)
                                  INNER JOIN department ON (employee_allocation.deptId = department.deptId)
                                  INNER JOIN client ON (employee_allocation.clientId = client.clientId)
                                WHERE
                                  employee_allocation.clientId = ? AND
                                  employee_allocation.stateId = ? AND
                                  employee_allocation.deptId = ? AND
                                  employee_allocation.status = ? AND
                                  employee_positions.positionid = ? AND 
                                  employee_allocation.candidateId = ? AND
                                  candidate.empStatus = ? AND
                                  candidate.auditStatus = ?
                                ORDER BY candidate.firstName ASC") or die($mysqli->error);
        $sql->bind_param("iiiiissi", $clientId, $stateId, $deptId, $estatus, $positionid, $canId, $empStatus, $auditStatus) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT 
                                  employee_allocation.candidateId,
                                  employee_allocation.clientId,
                                  employee_allocation.stateId,
                                  employee_allocation.deptId,
                                  employee_allocation.ohs_sent_time,
                                  employee_positions.positionid,
                                  candidate.sex,
                                  candidate.firstName,
                                  candidate.lastName,
                                  candidate.nickname,
                                  candidate.mobileNo,
                                  candidate.fairwork_info_sent_time,
                                  department.department,
                                  client.client
                                FROM
                                  employee_allocation
                                  INNER JOIN employee_positions ON (employee_allocation.candidateId = employee_positions.candidateId)
                                  INNER JOIN candidate ON (employee_allocation.candidateId = candidate.candidateId)
                                  INNER JOIN department ON (employee_allocation.deptId = department.deptId)
                                  INNER JOIN client ON (employee_allocation.clientId = client.clientId)
                                WHERE
                                  employee_allocation.clientId = ? AND
                                  employee_allocation.stateId = ? AND
                                  employee_allocation.deptId = ? AND
                                  employee_allocation.status = ? AND
                                  employee_positions.positionid = ? AND
                                  candidate.empStatus = ? AND
                                  candidate.auditStatus = ?
                                  ORDER BY candidate.firstName ASC") or die($mysqli->error);
        $sql->bind_param("iiiiisi", $clientId, $stateId, $deptId, $estatus, $positionid, $empStatus, $auditStatus) or die($mysqli->error);
    }
    $sql->execute();
    $sql->bind_result($candidateId, $clientId, $stateId, $deptId, $ohs_sent_time, $positionid, $sex, $firstName, $lastName, $nickname, $mobileNo, $fairwork_info_sent_time, $department, $client) or die($mysqli->error);
    $sql->store_result();
    $nrows = $sql->num_rows;
    $row = '';
    if ($nrows > 0) {
        while ($sql->fetch()) {
            $empWrkHrs = 0;
            $studentShiftCount = 0;
            $studentMaxShiftColor = '';

            $row = $row . '<tr id="' . $candidateId . ' ' . $empWrkHrs . ' ' . $nrows . '"';

            if ($sex == 'Male') {
                $genderColor = 'cellColorMale';
            } else {
                $genderColor = 'cellColorFeMale';
            }
            $row = $row . '><td class="' . $genderColor . ' rosterRowHeader ' . unfilledIndicator($mysqli, $candidateId) . '">';
            $row = $row . '<span class="deptName"><a href="./clientDepartments.php" target="_blank" class="deptNameLink">' . $department . '</a></span>&nbsp;';

            $row = $row . '<span data-start-date="' . $header[0]['headerFullDate'] . '" data-end-date="' . $header[count($header) - 1]['headerFullDate'] . '" data-emp-id="' . $candidateId . '" data-clientid="' . $clientId . '"  data-stateid="' . $stateId . '" data-deptid="' . $deptId . '" data-positionid="' . $positionid . '"></span>';


            if ($clientId == 294) {
                if (validateMissionFoodsDocuments($mysqli, $canId)) {
                    $row = $row . '&nbsp;<span class="missionFoodDocs" title="Mission Food Documents"><i class="fa fa-files-o"></i></span>';
                }
            } elseif ($clientId == 308) {
                if (validateCandidateDocumentByDocTypeId($mysqli, $candidateId, 81)) {
                    $row = $row . '&nbsp;<span class="drisscolsInduction" title="Drisscolls Induction"><i class="fa fa-info"></i></span>';
                }
            }

            $row = $row . '<br>';
            $row = $row . '<span class="employeeName"><a href="./candidateMain.php?canId=' . base64_encode($candidateId) . '" target="_blank" class="employeeNameLink">' . $firstName . ' ' . $lastName . '</a></span>';
            if (!empty($nickname)) {
                $row = $row . '(' . $nickname . ')';
            }
            $row = $row . '<br><span class="candidateid">' . $candidateId . '</span>';

            $row = $row . '&nbsp;&nbsp;<span class="candidatemobileno"><i class="fa fa-2x fa-mobile-phone"></i>&nbsp;&nbsp;&nbsp;<a href="tel:' . $mobileNo . '" class="candidatemobilenoLink">' . $mobileNo . '</a></span>&nbsp;&nbsp;&nbsp;<span class="hrsTotal"></span></td>';

            foreach ($header as $header_data) {
                $row = $row . '<td class="rosterCell" 
                                data-canid="' . $candidateId . '" 
                                data-clid="' . $clientId . '" 
                                data-stid="' . $stateId . '" 
                                data-did="' . $deptId . '" 
                                data-tdDate="' . $header_data['headerFullDate'] . '">';
                //existing & overlapping shift check

                $row = $row . '<a id="' . uniqid() . '" href="#" class="release_shift"><i class="fa fa-plus" style="color: #0cbbc1;"></i></a>';
                $row = $row . '</td>';
            }
            $row = $row . '<td data-allcanid="' . $candidateId . '" data-clientName="' . $client . '" data-clid="' . $clientId . '" data-stid="' . $stateId . '" data-did="' . $deptId . '" data-strDate="' . $header[0]['headerFullDate'] . '" data-endDate="' . $header[count($header) - 1]['headerFullDate'] . '" style="text-align:center">';
            if ($firstName != 'UNFILLED') {
                $row = $row . '<button class="sendAllBtn btn btn-info btn-xs roster-button" type="button"><i class="fa fa-envelope"></i>&nbsp;Send All SMS</button>
                                <br><button class="confirmAllBtn btn btn-info btn-xs roster-button" type="button"><i class="fa fa-check"></i>&nbsp;Confirm All</button><br>';
                if (!empty($ohs_sent_time)) {
                    $row = $row . '<button class="sendOHSBtn btn btn-info btn-xs roster-button" type="button"><i class="fa fa-check"></i>&nbsp;OH&S SENT</button><br>';
                } else {
                    $row = $row . '<button class="sendOHSBtn btn btn-info btn-xs roster-button" type="button"><i class="fa fa-remove"></i>&nbsp;OH&S REQ</button><br>';
                }
                if (!empty($fairwork_info_sent_time)) {
                    $row = $row . '<button class="sendFairWorkInfoBtn btn btn-info btn-xs roster-button" type="button"><i class="fa fa-check"></i>&nbsp;Fair Work Info SENT</button><br>';
                } else {
                    $row = $row . '<button class="sendFairWorkInfoBtn btn btn-info btn-xs roster-button" type="button"><i class="fa fa-remove"></i>&nbsp;Send Fair Work Info</button><br>';
                }
            }
            $row = $row . '<button class="deleteAllBtn btn btn-danger btn-xs roster-button" type="button"><i class="fa fa-trash"></i>&nbsp;Delete All</button></td></tr>';
        }
    } else {
        $row = $row . '<tr><td class="rosterCell" colspan="' . (count($header)) . '">No employees allocated to this department</td></tr>';
    }
    return $row;
}

function getInactiveCandidates($mysqli)
{
    $sql = $mysqli->prepare("SELECT candidateId,firstName,lastName,empStatus FROM candidate WHERE empStatus = 'INACTIVE'") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($candidateId, $firstName, $lastName, $empStatus) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>' . $candidateId . '</td><td><a href="candidateMain.php?canId=' . base64_encode($candidateId) . '" target="_blank">' . $firstName . ' ' . $lastName . '</a></td><td>' . $empStatus . '</td></tr>';
    }
    return $row;
}

function searchInactiveCandidate($mysqli, $searchTxt)
{
    $sql = $mysqli->prepare("SELECT candidateId,firstName,lastName,empStatus FROM candidate WHERE empStatus = 'INACTIVE' AND candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $searchTxt) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($candidateId, $firstName, $lastName, $empStatus) or die($mysqli->error);
    $row = '';
    if ($sql->num_rows > 0) {
        while ($sql->fetch()) {
            $row = $row . '<tr><td>' . $candidateId . '</td><td>' . $firstName . ' ' . $lastName . '</td><td>' . $empStatus . '</td></tr>';
        }
    } else {
        $row = $row . '<tr><td colspan="3">No Matching results</td></tr>';
    }
    return $row;
}

/*function getAllocatedEmployeesTest($mysqli, $clientId, $stateId, $deptId, $num_th, $header, $estatus,$positionid,$canId)
{
    if(!empty($canId)){
        $sql = $mysqli->prepare("SELECT
                                      employee_allocation.candidateId,
                                      employee_allocation.clientId,
                                      employee_allocation.stateId,
                                      employee_allocation.deptId,
                                      employee_positions.positionid
                                    FROM
                                      employee_allocation
                                      INNER JOIN employee_positions ON (employee_allocation.candidateId = employee_positions.candidateId)
                                    WHERE
                                      employee_allocation.clientId = ? AND
                                      employee_allocation.stateId = ? AND
                                      employee_allocation.deptId = ? AND
                                      employee_allocation.status = ? AND
                                      employee_positions.positionid = ? AND
                                      employee_allocation.candidateId = ?") or die($mysqli->error);
        $sql->bind_param("iiiiis", $clientId, $stateId, $deptId, $estatus,$positionid,$canId) or die($mysqli->error);
    }else{
        $sql = $mysqli->prepare("SELECT
                                      employee_allocation.candidateId,
                                      employee_allocation.clientId,
                                      employee_allocation.stateId,
                                      employee_allocation.deptId,
                                      employee_positions.positionid
                                    FROM
                                      employee_allocation
                                      INNER JOIN employee_positions ON (employee_allocation.candidateId = employee_positions.candidateId)
                                    WHERE
                                      employee_allocation.clientId = ? AND
                                      employee_allocation.stateId = ? AND
                                      employee_allocation.deptId = ? AND
                                      employee_allocation.status = ? AND
                                      employee_positions.positionid = ?") or die($mysqli->error);
        $sql->bind_param("iiiii", $clientId, $stateId, $deptId, $estatus,$positionid) or die($mysqli->error);
    }
    $sql->execute();
    $sql->bind_result($candidateId, $clientId, $stateId, $deptId,$positionid) or die($mysqli->error);
    $sql->store_result();
    $nrows = $sql->num_rows;
    if ($nrows > 0) {
        while ($sql->fetch()) {
            $row = $row.'<tr id="'.$candidateId.'"><td class="' . displayEmployeeGenderIndicator($mysqli, $candidateId) . ' rosterRowHeader '.unfilledIndicator($mysqli,$candidateId).'"><span class="clientName">' . getClientNameByClientId($mysqli, $clientId) . '</span><span class="stateName">(' . getStateById($mysqli, $stateId) . ')</span>&nbsp;<span class="rosterNote" data-roscanid="'.$candidateId.'"><i class="glyphicon glyphicon-paperclip"></i></span><br><span class="deptName">' . getDepartmentById($mysqli, $deptId) . '</span><br><span class="employeeName">' . getCandidateLastNameByCandidateId($mysqli, $candidateId) . ',' . getCandidateFirstNameByCandidateId($mysqli, $candidateId) . '</span><br><span class="candidateid">' . $candidateId . '</span>&nbsp;<span class="candidatemobileno"><i class="glyphicon glyphicon-phone"></i>' . getCandidateMobileNoByCandidateId($mysqli,$candidateId) . '</span></td>';
            for ($i = 0, $size = count($header); $i < $size; ++$i) {
                $row = $row.'<td class="rosterCell" data-canid="'.$candidateId.'" data-clid="'.$clientId.'" data-stid="'.$stateId.'" data-did="'.$deptId.'" data-tdDate="'.$header[$i]['headerFullDate'].'">';
                $row = $row.getExistingShiftsTest($mysqli, $header[$i]['headerFullDate'], $clientId, $stateId, $deptId, $candidateId);
                $row = $row.overlappingShiftInOtherClientTest($mysqli, $header[$i]['headerFullDate'], $deptId, $candidateId);
                $row = $row. '</td>';
            }
            //sort rows here
            $row = $row.'<td data-allcanid="' . $candidateId . '" data-clientName="' . getClientNameByClientId($mysqli, $clientId) . '" data-clid="' . $clientId . '" data-stid="' . $stateId . '" data-did="' . $deptId . '" data-strDate="' . $header[0]['headerFullDate'] . '" data-endDate="' . $header[count($header) - 1]['headerFullDate'] . '">';
            if(getCandidateFirstNameByCandidateId($mysqli,$candidateId) != 'UNFILLED') {
                $row = $row.'<button class="sendAllBtn btn btn-success btn-sm" type="button"><i class="glyphicon glyphicon-phone"></i>&nbsp;Send All SMS</button><button class="confirmAllBtn btn btn-success btn-sm" type="button"><i class="glyphicon glyphicon-check"></i>&nbsp;Confirm All</button>';
            }
            $row = $row.'<button class="deleteAllBtn btn btn-danger btn-sm" type="button"><i class="glyphicon glyphicon-trash"></i>&nbsp;Delete All</button></td></tr>';
        }
    } else {
        $row = $row.'<tr><td class="rosterCell" colspan="'.(count($header)).'">No employees allocated to this department</td></tr>';
    }
    return $row;
}*/
/*function getExistingShiftsTest($mysqli, $shDate, $clid, $stid, $did, $canid)
{
    $shiftChk = $mysqli->prepare("SELECT
									  shift.shiftId,
									  shift.shiftDate,
									  shift.shiftDay,
									  shift.shiftStart,
									  shift.shiftEnd,
									  shift.workBreak,
									  shift.shiftStatus,
									  shift.shiftSMSStatus
									FROM
									  shift
									WHERE
									  shift.shiftDate = ? AND
									  shift.clientId = ? AND
									  shift.stateId = ? AND
									  shift.departmentId = ? AND
									  shift.candidateId = ?") or die($mysqli->error);
    $shiftChk->bind_param("siiis", $shDate, $clid, $stid, $did, $canid) or die($mysqli->error);
    $shiftChk->execute();
    $shiftChk->store_result();
    $shiftChk->bind_result($shiftId, $shiftDate, $shiftDay, $shiftStart, $shiftEnd, $workBreak, $shiftStatus, $shiftSMSStatus) or die($mysqli->error);
    $num_of_rows = $shiftChk->num_rows;
    if ($num_of_rows == 2) {
        while ($shiftChk->fetch()) {
            $smsSentCSS = '';
            $shiftSTSCSS = '';
            $shiftCancelCSS = '';
            $shiftSickCSS = '';
            $shiftRejectedCSS = '';
            if ($shiftSMSStatus == 1) {
                $smsSentCSS = 'smsSent';
            }
            if ($shiftStatus == 'CONFIRMED') {
                $shiftSTSCSS = 'shiftConfirmed';
            }else if($shiftStatus == 'UNFILLED'){
                $shiftSTSCSS = 'shiftUnfilled';
            }else if ($shiftStatus == 'CANCELLED') {
                $shiftSTSCSS = 'shiftCancelled';
            }else if ($shiftStatus == 'SICK') {
                $shiftSickCSS = 'shiftSick';
            }else if ($shiftStatus == 'REJECTED') {
                $shiftRejectedCSS = 'shiftRejected';
            }else if ($shiftStatus == 'N/A') {
                $shiftSTSCSS = 'shiftNotAvailable';
            }
            $div = $div . '<div class="shiftDisplay ' . $smsSentCSS . ' ' . $shiftSTSCSS . ' '.$shiftSickCSS.' '. $shiftRejectedCSS .' ' . $shiftCancelCSS . '" data-shiftid="' . $shiftId . '" data-shiftdate="' . $shiftDate . '" data-shiftday="' . $shiftDay . '"><a href="#" class="editshift"><i class="icon-append fa fa-pencil"></i><span class="shifTimes">' . $shiftStart . '&nbsp;-&nbsp;' . $shiftEnd . '</span><br><span class="hrsWorked">' . calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak) . 'hrs' . '</span></a><br>';
            if($shiftStatus != 'UNFILLED'){
                $div = $div.'<a href="#" class="smsShiftLink"><i class="glyphicon glyphicon-phone"></i>&nbsp;</a>';
            }
            $div = $div.'</div>';
        }
        return $div;
    } else if ($num_of_rows == 1) {
        while ($shiftChk->fetch()) {
            $smsSentCSS = '';
            $shiftSTSCSS = '';
            $shiftCancelCSS = '';
            $shiftSickCSS = '';
            $shiftRejectedCSS = '';
            if ($shiftSMSStatus == 1) {
                $smsSentCSS = 'smsSent';
            }
            if ($shiftStatus == 'CONFIRMED') {
                $shiftSTSCSS = 'shiftConfirmed';
            }else if($shiftStatus == 'UNFILLED'){
                $shiftSTSCSS = 'shiftUnfilled';
            }else if ($shiftStatus == 'CANCELLED') {
                $shiftSTSCSS = 'shiftCancelled';
            }else if ($shiftStatus == 'SICK') {
                $shiftSickCSS = 'shiftSick';
            }else if ($shiftStatus == 'REJECTED') {
                $shiftRejectedCSS = 'shiftRejected';
            }else if ($shiftStatus == 'N/A') {
                $shiftSTSCSS = 'shiftNotAvailable';
            }
            $div = $div . '<div class="shiftDisplay ' . $smsSentCSS . ' ' . $shiftSTSCSS . ' '.$shiftSickCSS.' '.$shiftRejectedCSS.' ' . $shiftCancelCSS . '" data-shiftid="' . $shiftId . '" data-shiftdate="' . $shiftDate . '" data-shiftday="' . $shiftDay . '"><a href="#" class="editshift"><i class="icon-append fa fa-pencil"></i><span class="shifTimes">' . $shiftStart . '&nbsp;-&nbsp;' . $shiftEnd . '</span><br><span class="hrsWorked">' . calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak) . 'hrs' . '</span></a><br>';
            if($shiftStatus != 'UNFILLED') {
                $div = $div . '<a href="#" class="smsShiftLink"><i class="glyphicon glyphicon-phone"></i>&nbsp;</a>';
            }
            $div = $div.'</div><a id="'.uniqid().'" href="#" class="addshift">+</a>';
        }
        return $div;
    } else if ($num_of_rows == 0) {
        if(checkUnavailability($mysqli,$canid,$shDate)){
            return '<span class="unavailableLink">N/A</span>';
        }else{
            return '<a id="'.uniqid().'" href="#" class="addshift">+</a>';
        }
    }
}*/
/*function overlappingShiftInOtherClientTest($mysqli, $shDate, $did, $canid)
{
    $shStatus = 'CANCELLED';
    $chk = $mysqli->prepare("SELECT
									  shift.shiftId,
									  shift.clientId,
									  shift.stateId,
									  shift.departmentId,
									  shift.shiftStart,
									  shift.shiftEnd,
									  shift.workBreak,
									  shift.positionId
									FROM
									  shift
									WHERE
									  shift.shiftDate = ? AND
									  shift.departmentId <> ? AND
									  shift.candidateId = ? AND
									  shift.shiftStatus != ? ") or die($mysqli->error);
    $chk->bind_param("siss", $shDate, $did, $canid,$shStatus) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->bind_result($shiftId, $clientId, $stateId, $departmentId, $shiftStart, $shiftEnd, $workBreak,$positionId) or die($mysqli->error);
    $num_of_rows = $chk->num_rows;
    if ($num_of_rows == 2) {
        while ($chk->fetch()) {
            $shiftSTSCSS = 'rosteredShift';
            $div = $div.'<div class="exshiftDisplay '  . $shiftSTSCSS . ' " data-shiftid="' . $shiftId . '" title="'.getClientNameByClientId($mysqli,$clientId).'&#010;&#013;'.getStateById($mysqli,$stateId).'&#010;&#013;'.getDepartmentById($mysqli,$departmentId).'&#010;&#013;'.getPositionByPositionId($mysqli,$positionId).'"><span class="shifTimes">' . $shiftStart . '&nbsp;-&nbsp;' . $shiftEnd . '</span><br><span class="hrsWorked">' . calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak) . 'hrs' . '</span><br>';
            $div = $div.'</div>';
        }
        return $div;
    } else if ($num_of_rows == 1) {
        while ($chk->fetch()) {
            $shiftSTSCSS = 'rosteredShift';
            $div = $div.'<div class="exshiftDisplay '  . $shiftSTSCSS . ' " data-shiftid="' . $shiftId . '" title="'.getClientNameByClientId($mysqli,$clientId).'&#010;&#013;'.getStateById($mysqli,$stateId).'&#010;&#013;'.getDepartmentById($mysqli,$departmentId).'&#010;&#013;'.getPositionByPositionId($mysqli,$positionId).'"><span class="shifTimes">' . $shiftStart . '&nbsp;-&nbsp;' . $shiftEnd . '</span><br><span class="hrsWorked">' . calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak) . 'hrs' . '</span><br>';
            $div = $div.'</div>';
        }
        return $div;
    }else{
        return '';
    }
}*/
function getExistingShifts($mysqli, $shDate, $clid, $stid, $did, $canid, $positionId)
{
    $calendar = '';
    $shiftChk = $mysqli->prepare("SELECT 
									  shift.shiftId,
									  shift.shiftDate,
									  shift.shiftDay,
									  shift.clientId,
									  shift.stateId,
									  shift.departmentId,
									  shift.candidateId,
									  shift.shiftStart,
									  shift.shiftEnd,
									  shift.workBreak,
									  shift.shiftNote,
									  shift.shiftStatus,
									  shift.shiftSMSStatus,
									  shift.addressId,
									  timeclock.checkIn,
                                      timeclock.checkOut
									FROM
									  shift
									LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)  
									
									WHERE
									  shift.shiftDate = ? AND 
									  shift.clientId = ? AND 
									  shift.stateId = ? AND 
									  shift.departmentId = ? AND 
									  shift.positionId = ? AND
									  shift.candidateId = ?") or die($mysqli->error);
    $shiftChk->bind_param("siiiis", $shDate, $clid, $stid, $did, $positionId, $canid) or die($mysqli->error);
    $shiftChk->execute();
    $shiftChk->store_result();
    $shiftChk->bind_result($shiftId, $shiftDate, $shiftDay, $clientId, $stateId, $departmentId, $candidateId, $shiftStart, $shiftEnd, $workBreak, $shiftNote, $shiftStatus, $shiftSMSStatus, $addressId, $checkIn, $checkOut) or die($mysqli->error);
    $num_of_rows = $shiftChk->num_rows;
    $workHours = '';
    if ($num_of_rows == 2) {
        while ($shiftChk->fetch()) {
            $smsSentCSS = '';
            $shiftSTSCSS = '';
            $shiftCancelCSS = '';
            $shiftSickCSS = '';
            $shiftRejectedCSS = '';
            $releaseStatusCSS = '';
            $checkInStatusCSS = '';
            $checkOutStatusCSS = '';
            if (strpos($shiftNote, 'RELEASE') !== false) {
                $releaseStatusCSS = 'shiftRelease';
            }
            if ($shiftSMSStatus == 1) {
                $smsSentCSS = 'smsSent';
            }
            if ($shiftStatus == 'CONFIRMED') {
                $shiftSTSCSS = 'shiftConfirmed';
            } else if ($shiftStatus == 'UNFILLED') {
                $shiftSTSCSS = 'shiftUnfilled';
            } else if ($shiftStatus == 'CANCELLED') {
                $shiftSTSCSS = 'shiftCancelled';
            } else if ($shiftStatus == 'SICK') {
                $shiftSickCSS = 'shiftSick';
            } else if ($shiftStatus == 'REJECTED') {
                $shiftRejectedCSS = 'shiftRejected';
            } else if ($shiftStatus == 'N/A') {
                $shiftSTSCSS = 'shiftNotAvailable';
            } else if ($shiftStatus == 'VOICEMAIL') {
                $shiftSTSCSS = 'shiftVoiceMail';
            } else if ($shiftStatus == 'NOANSWER') {
                $shiftSTSCSS = 'shiftNoAnswer';
            } else if ($shiftStatus == 'CANCELLATION WITH NOTICE') {
                $shiftSTSCSS = 'shiftCancelWithNotice';
            } else if ($shiftStatus == 'CANCELLATION WITHOUT NOTICE') {
                $shiftSTSCSS = 'shiftCancelWithoutNotice';
            } else if ($shiftStatus == 'CANCELLED BY AGENCY') {
                $shiftSTSCSS = 'shiftCancelAgency';
            } else if ($shiftStatus == 'NO SHOW') {
                $shiftSTSCSS = 'shiftNoShow';
            } else if ($shiftStatus == 'ACCEPTED') {
                $shiftSTSCSS = 'shiftAccepted';
            }


            if (($checkIn != '00:00') && ($checkIn != NULL)) {
                $checkInStatusCSS = 'shiftCheckedIn';
            }
            if (($checkOut != '00:00') && ($checkOut != NULL)) {
                $checkOutStatusCSS = 'shiftCheckedOut';
            }

            $workHours = calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak);
            $div = $div . '<div style="padding-left: 40px;">';
            $div = $div . '<div class="shiftDisplay ' . $releaseStatusCSS . ' ' . $smsSentCSS . ' ' . $shiftSTSCSS . ' ' . $shiftSickCSS . ' ' . $shiftRejectedCSS . ' ' . $shiftCancelCSS . ' ' . $checkInStatusCSS . ' ' . $checkOutStatusCSS . '" data-shiftid="' . $shiftId . '" data-shiftdate="' . $shiftDate . '" data-shiftday="' . $shiftDay . '" data-clid="' . $clientId . '" data-client="' . getClientNameByClientId($mysqli, $clientId) . '" data-stid="' . $stateId . '" data-did="' . $departmentId . '" data-canid="' . $candidateId . '" data-shiftstart="' . $shiftStart . '" data-shiftend="' . $shiftEnd . '" data-break="' . $workBreak . '" data-shiftnote="' . $shiftNote . '" data-shiftStatus="' . $shiftStatus . '" data-shiftSMSStatus="' . $shiftSMSStatus . '" data-addressId="' . $addressId . '"><a href="#" class="editshift"><i class="icon-append fa fa-pencil"></i><span class="shifTimes">' . $shiftStart . '&nbsp;-&nbsp;' . $shiftEnd . '</span><br><span class="hrsWorked" data-hrsWorked="' . $workHours . '">' . $workHours . 'hrs' . '</span></a>';
            if ($shiftStatus != 'UNFILLED') {
                $div = $div . '<a href="#" class="smsShiftLink"><i class="glyphicon glyphicon-phone"></i>&nbsp;</a>';
            }
            $div = $div . '</div></div>';
        }
        return $div;
    } else if ($num_of_rows == 1) {
        while ($shiftChk->fetch()) {
            $smsSentCSS = '';
            $shiftSTSCSS = '';
            $shiftCancelCSS = '';
            $shiftSickCSS = '';
            $shiftRejectedCSS = '';
            $releaseStatusCSS = '';
            $checkInStatusCSS = '';
            $checkOutStatusCSS = '';
            if (strpos($shiftNote, 'RELEASE') !== false) {
                $releaseStatusCSS = 'shiftRelease';
            }
            if ($shiftSMSStatus == 1) {
                $smsSentCSS = 'smsSent';
            }
            if ($shiftStatus == 'CONFIRMED') {
                $shiftSTSCSS = 'shiftConfirmed';
            } else if ($shiftStatus == 'UNFILLED') {
                $shiftSTSCSS = 'shiftUnfilled';
            } else if ($shiftStatus == 'CANCELLED') {
                $shiftSTSCSS = 'shiftCancelled';
            } else if ($shiftStatus == 'SICK') {
                $shiftSickCSS = 'shiftSick';
            } else if ($shiftStatus == 'REJECTED') {
                $shiftRejectedCSS = 'shiftRejected';
            } else if ($shiftStatus == 'N/A') {
                $shiftSTSCSS = 'shiftNotAvailable';
            } else if ($shiftStatus == 'VOICEMAIL') {
                $shiftSTSCSS = 'shiftVoiceMail';
            } else if ($shiftStatus == 'NOANSWER') {
                $shiftSTSCSS = 'shiftNoAnswer';
            } else if ($shiftStatus == 'CANCELLATION WITH NOTICE') {
                $shiftSTSCSS = 'shiftCancelWithNotice';
            } else if ($shiftStatus == 'CANCELLATION WITHOUT NOTICE') {
                $shiftSTSCSS = 'shiftCancelWithoutNotice';
            } else if ($shiftStatus == 'CANCELLED BY AGENCY') {
                $shiftSTSCSS = 'shiftCancelAgency';
            } else if ($shiftStatus == 'NO SHOW') {
                $shiftSTSCSS = 'shiftNoShow';
            } else if ($shiftStatus == 'ACCEPTED') {
                $shiftSTSCSS = 'shiftAccepted';
            }

            if (($checkIn != '00:00') && ($checkIn != NULL)) {
                $checkInStatusCSS = 'shiftCheckedIn';
            }
            if (($checkOut != '00:00') && ($checkOut != NULL)) {
                $checkOutStatusCSS = 'shiftCheckedOut';
            }

            $workHours = calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak);
            $calendar = displayShiftAvailabilityCalendar($mysqli, $canid, $shDate);
            $div = $div . $calendar;
            $div = $div . '<div style="padding-left: 40px;">
                            <div class="shiftDisplay ' . $releaseStatusCSS . ' ' . $smsSentCSS . ' ' . $shiftSTSCSS . ' ' . $shiftSickCSS . ' ' . $shiftRejectedCSS . ' ' . $shiftCancelCSS . ' ' . $checkInStatusCSS . ' ' . $checkOutStatusCSS . '" data-shiftid="' . $shiftId . '" data-shiftdate="' . $shiftDate . '" data-shiftday="' . $shiftDay . '" data-clid="' . $clientId . '" data-client="' . getClientNameByClientId($mysqli, $clientId) . '" data-stid="' . $stateId . '" data-did="' . $departmentId . '" data-canid="' . $candidateId . '" data-shiftstart="' . $shiftStart . '" data-shiftend="' . $shiftEnd . '" data-break="' . $workBreak . '" data-shiftnote="' . $shiftNote . '" data-shiftStatus="' . $shiftStatus . '" data-shiftSMSStatus="' . $shiftSMSStatus . '" data-addressId="' . $addressId . '">
                            <a href="#" class="editshift"><i class="icon-append fa fa-pencil"></i>&nbsp;&nbsp;';
            if ($shiftStatus != 'UNFILLED') {
                $div = $div . '<a href="#" class="smsShiftLink"><i class="glyphicon glyphicon-phone"></i>&nbsp;</a>';
            }
            $div = $div . '<span class="shifTimes">' . $shiftStart . '&nbsp;-&nbsp;' . $shiftEnd . '</span>
                            <br>
                            <span class="hrsWorked" data-hrsWorked="' . $workHours . '">' . $workHours . 'hrs' . '</span></a>';
            if (isExistingShiftsForOtherClients($mysqli, $shDate, $did, $canid) > 0) {
                $div = $div . '</div></div>';
            } else {
                $div = $div . '</div></div><br>';
                $visaExpiry = getVisaExpiryDate($mysqli, $canid);
                $emp_visa_type = getCandidateVisaType($mysqli,$candidateId);
                if(!empty($emp_visa_type)) {
                    if ($emp_visa_type != 0 || $emp_visa_type != 1) {
                        if (!empty($visaExpiry)) {
                            if (new DateTime($visaExpiry) < new DateTime($shDate)) {
                                $div = $div . '<span style="background-color:red; color:white; display:inline-block">VISA EXPIRED</span><br>';
                            } else {
                                $div = $div . '<a id="' . uniqid() . '" href="#" class="addshift"><i class="fa fa-plus-square" style="color: #1b2839;"></i></a><br>';
                            }
                        } else {
                            $div = $div . '<a id="' . uniqid() . '" href="#" class="addshift"><i class="fa fa-plus-square" style="color: #1b2839;"></i></a><br>';
                        }
                    }else{
                        $div = $div . '<a id="' . uniqid() . '" href="#" class="addshift"><i class="fa fa-plus-square" style="color: #1b2839;"></i></a><br>';
                    }
                }else{
                    $div = $div . '<a id="' . uniqid() . '" href="#" class="addshift"><i class="fa fa-plus-square" style="color: #1b2839;"></i></a><br>';
                }
            }
            return $div;
        }
    } else if ($num_of_rows == 0) {
        if (checkUnavailability($mysqli, $canid, $shDate)) {
            return '<span class="unavailableLink">N/A</span>';
        } else {
            if (isExistingShiftsForOtherClients($mysqli, $shDate, $did, $canid) == 2) {
                return '';
            } else {
                $calendar = displayShiftAvailabilityCalendar($mysqli, $canid, $shDate);
                $visaExpiry = getVisaExpiryDate($mysqli, $canid);
                $emp_visa_type = getCandidateVisaType($mysqli,$candidateId);
                if(!empty($emp_visa_type)) {
                    if ($emp_visa_type != 0 || $emp_visa_type != 1) {
                        if (!empty($visaExpiry)) {
                            if (new DateTime($visaExpiry) < new DateTime($shDate)) {
                                $shift_link = '<span style="background-color:red; color:white; display:inline-block">VISA EXPIRED</span><br>';
                            } else {
                                $shift_link = '<a id="' . uniqid() . '" href="#" class="addshift"><i class="fa fa-plus-square" style="color: #1b2839;"></i></a><br>';
                            }
                        } else {
                            $shift_link = '<a id="' . uniqid() . '" href="#" class="addshift"><i class="fa fa-plus-square" style="color: #1b2839;"></i></a><br>';
                        }
                    } else {
                        $shift_link = '<a id="' . uniqid() . '" href="#" class="addshift"><i class="fa fa-plus-square" style="color: #1b2839;"></i></a><br>';
                    }
                }else{
                    $shift_link = '<a id="' . uniqid() . '" href="#" class="addshift"><i class="fa fa-plus-square" style="color: #1b2839;"></i></a><br>';
                }
                return $calendar . '<br>' . $shift_link . '<br>';
            }
        }
    }
}

function displayShiftAvailabilityCalendar($mysqli, $canid, $shiftDate)
{
    $sql = $mysqli->prepare("SELECT am,pm,night FROM shift_availability WHERE candidateId = ? AND shift_date = ?") or die($mysqli->error);
    $sql->bind_param("ss", $canid, $shiftDate) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($am, $pm, $night) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    $html = '';
    if ($numRows > 0) {
        while ($sql->fetch()) {
            if ($am == 'yes') {
                $time_am = '<img src="img/am_tick.png" width="16" height="16"/>';
            } else {
                $time_am = '<img src="img/am_cross.png" width="16" height="16"/>';
            }
            if ($pm == 'yes') {
                $time_pm = '<img src="img/pm_tick.png" width="16" height="16"/>';
            } else {
                $time_pm = '<img src="img/pm_cross.png" width="16" height="16"/>';
            }
            if ($night == 'yes') {
                $time_night = '<img src="img/night_tick.png" width="16" height="16"/>';
            } else {
                $time_night = '<img src="img/night_cross.png" width="16" height="16"/>';
            }
            $html = $html . '<div>' . $time_am . $time_pm . $time_night . '</div>';
        }
    } else {
        $time_am = '<img src="img/question.gif" width="16" height="16"/>';
        $time_pm = '<img src="img/question.gif" width="16" height="16"/>';
        $time_night = '<img src="img/question.gif" width="16" height="16"/>';
        $html = $html . '<div>' . $time_am . $time_pm . $time_night . '</div>';
    }
    return $html;
}

function displayShiftAvailabilityCalendarForReport($mysqli, $canid, $shiftDate)
{
    $sql = $mysqli->prepare("SELECT am,pm,night FROM shift_availability WHERE candidateId = ? AND shift_date = ?") or die($mysqli->error);
    $sql->bind_param("ss", $canid, $shiftDate) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($am, $pm, $night) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    $html = '';
    if ($numRows > 0) {
        while ($sql->fetch()) {
            if ($am == 'yes') {
                $time_am = '✓ AM '; //tick &#x2713;
            } else {
                $time_am = 'x AM '; //cross &#x2717;
            }
            if ($pm == 'yes') {
                $time_pm = '✓ PM ';
            } else {
                $time_pm = 'x PM ';
            }
            if ($night == 'yes') {
                $time_night = '✓ NS ';
            } else {
                $time_night = 'x NS ';
            }
            $html = $html . $time_am . $time_pm . $time_night;
        }
    } else {
        $time_am = '?';
        $time_pm = '?';
        $time_night = '?';
        $html = $html . $time_am . $time_pm . $time_night;
    }
    return $html;
}

function isExistingShiftsForOtherClients($mysqli, $shDate, $did, $canid)
{
    $shCancelled = 'CANCELLED';
    $shiftChk = $mysqli->prepare("SELECT 
									  shift.shiftId
									FROM
									  shift
									WHERE
									  shift.shiftDate = ? AND 
									  shift.departmentId <> ? AND 
									  shift.candidateId = ? AND
									  shift.shiftStatus <> ?") or die($mysqli->error);
    $shiftChk->bind_param("siss", $shDate, $did, $canid, $shCancelled) or die($mysqli->error);
    $shiftChk->execute();
    $shiftChk->store_result();
    $num_of_rows = $shiftChk->num_rows;
    if ($num_of_rows > 0) {
        return $num_of_rows;
    } else {
        return 0;
    }
}

function overlappingShiftDisplay($mysqli, $shDate, $did, $positionid, $clientid, $canid)
{
    $shCancelled = 'CANCELLED';
    $shNotAvailable = 'N/A';
    $chk = $mysqli->prepare("SELECT 
									  shift.shiftId,
									  shift.shiftDate,
									  shift.clientId,
									  shift.stateId,
									  shift.departmentId,
									  shift.candidateId,
									  shift.shiftStart,
									  shift.shiftEnd,
									  shift.workBreak,
									  shift.positionId,
									  shift.shiftStatus,
									  client.client,
                                      states.state,
                                      department.department,
                                      candidate_position.positionName   
									FROM
									  shift
									INNER JOIN client ON (shift.clientId = client.clientId)
                                    INNER JOIN states ON (shift.stateId = states.stateId)
                                    INNER JOIN department ON (shift.departmentId = department.deptId)
                                    INNER JOIN candidate_position ON (shift.positionId = candidate_position.positionid)
									WHERE
									  shift.shiftDate = ? AND 
									  shift.candidateId = ? AND shift.shiftStatus != ?") or die($mysqli->error); // shift.departmentId != ? AND // AND shift.shiftStatus != ?
    $chk->bind_param("sss", $shDate, $canid, $shCancelled) or die($mysqli->error);//,$shCancelled
    $chk->execute();
    $chk->store_result();
    $chk->bind_result($shiftId, $shiftDate, $clientId, $stateId, $departmentId, $candidateId, $shiftStart, $shiftEnd, $workBreak, $positionId, $shiftStatus, $client, $state, $department, $positionName) or die($mysqli->error);
    $num_of_rows = $chk->num_rows;
    $div = '';
    if ($num_of_rows == 2) {
        while ($chk->fetch()) {
            /*$clientName = getClientNameByClientId($mysqli, $clientId);
            $stateName = getStateById($mysqli, $stateId);
            $departmentName = getDepartmentById($mysqli, $departmentId);
            $positionName = getPositionByPositionId($mysqli, $positionId);*/
            $calculatedWorkHours = calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak);
            $shiftSTSCSS = 'rosteredShift';
            if ($positionid != $positionId) {
                $div = $div . '<div style="padding-left:30px;"><div class="exshiftDisplay ' . $shiftSTSCSS . ' " data-shiftid="' . $shiftId . '" title="' . $client . '&#010;&#013;' . $state . '&#010;&#013;' . $department . '&#010;&#013;' . $positionName . '"><span class="shifTimes">' . $shiftStart . '&nbsp;-&nbsp;' . $shiftEnd . '</span><br><span class="hrsWorked">' . $calculatedWorkHours . 'hrs' . '</span><br><span class="shfStatus">' . $shiftStatus . '</span></div></div>';
            } elseif ($did != $departmentId) {
                $div = $div . '<div style="padding-left:30px;"><div class="exshiftDisplay ' . $shiftSTSCSS . ' " data-shiftid="' . $shiftId . '" title="' . $client . '&#010;&#013;' . $state . '&#010;&#013;' . $department . '&#010;&#013;' . $positionName . '"><span class="shifTimes">' . $shiftStart . '&nbsp;-&nbsp;' . $shiftEnd . '</span><br><span class="hrsWorked">' . $calculatedWorkHours . 'hrs' . '</span><br><span class="shfStatus">' . $shiftStatus . '</span></div></div>';
            } elseif ($clientid != $clientId) {
                $div = $div . '<div style="padding-left:30px;"><div class="exshiftDisplay ' . $shiftSTSCSS . ' " data-shiftid="' . $shiftId . '" title="' . $client . '&#010;&#013;' . $state . '&#010;&#013;' . $department . '&#010;&#013;' . $positionName . '"><span class="shifTimes">' . $shiftStart . '&nbsp;-&nbsp;' . $shiftEnd . '</span><br><span class="hrsWorked">' . $calculatedWorkHours . 'hrs' . '</span><br><span class="shfStatus">' . $shiftStatus . '</span></div></div>';
            }
        }
    } else if ($num_of_rows == 1) {
        while ($chk->fetch()) {
            /*$clientName = getClientNameByClientId($mysqli, $clientId);
            $stateName = getStateById($mysqli, $stateId);
            $departmentName = getDepartmentById($mysqli, $departmentId);
            $positionName = getPositionByPositionId($mysqli, $positionId);*/
            $calculatedWorkHours = calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak);
            $shiftSTSCSS = 'rosteredShift';
            if ($positionid != $positionId) {
                $div = $div . '<div style="padding-left:30px;"><div class="exshiftDisplay ' . $shiftSTSCSS . ' " data-shiftid="' . $shiftId . '" title="' . $client . '&#010;&#013;' . $state . '&#010;&#013;' . $department . '&#010;&#013;' . $positionName . '"><span class="shifTimes">' . $shiftStart . '&nbsp;-&nbsp;' . $shiftEnd . '</span><br><span class="hrsWorked">' . $calculatedWorkHours . 'hrs' . '</span><br><span class="shfStatus">' . $shiftStatus . '</span></div></div>';
            } elseif ($did != $departmentId) {
                $div = $div . '<div style="padding-left:30px;"><div class="exshiftDisplay ' . $shiftSTSCSS . ' " data-shiftid="' . $shiftId . '" title="' . $client . '&#010;&#013;' . $state . '&#010;&#013;' . $department . '&#010;&#013;' . $positionName . '"><span class="shifTimes">' . $shiftStart . '&nbsp;-&nbsp;' . $shiftEnd . '</span><br><span class="hrsWorked">' . $calculatedWorkHours . 'hrs' . '</span><br><span class="shfStatus">' . $shiftStatus . '</span></div></div>';
            } elseif ($clientid != $clientId) {
                $div = $div . '<div style="padding-left:30px;"><div class="exshiftDisplay ' . $shiftSTSCSS . ' " data-shiftid="' . $shiftId . '" title="' . $client . '&#010;&#013;' . $state . '&#010;&#013;' . $department . '&#010;&#013;' . $positionName . '"><span class="shifTimes">' . $shiftStart . '&nbsp;-&nbsp;' . $shiftEnd . '</span><br><span class="hrsWorked">' . $calculatedWorkHours . 'hrs' . '</span><br><span class="shfStatus">' . $shiftStatus . '</span></div></div>';
            }
        }
    } else {
        $div = $div . '';
    }
    return $div;
}

function getLastWeekRoster($mysqli, $clientId, $stateId, $deptId, $positionId, $endDate)
{
    $shftStatus = 'CONFIRMED';
    $startDate = date('Y-m-d', strtotime($endDate . '-7 days'));
    $sql = $mysqli->prepare("SELECT shiftDate,shiftDay,shiftStart,shiftEnd,workBreak,candidateId,addressId FROM shift WHERE clientId = ? AND stateId = ? AND departmentId = ? AND positionId = ? AND shiftDate BETWEEN ? AND ? AND shiftStatus = ?") or die($mysqli->error);
    $sql->bind_param("iiiisss", $clientId, $stateId, $deptId, $positionId, $startDate, $endDate, $shftStatus) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($shiftDate, $shiftDay, $shiftStart, $shiftEnd, $workBreak, $candidateId, $addressId) or die($mysqli->error);
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('shiftDate' => $shiftDate, 'shiftDay' => $shiftDay, 'shiftStart' => $shiftStart, 'shiftEnd' => $shiftEnd, 'workBreak' => $workBreak, 'candidateId' => $candidateId, 'addressId' => $addressId);
    }
    return $dataArray;
}

function checkOverlap($shiftDate, $exStartTime, $exEndTime, $newStartTime, $newEndTime)
{
    if ($exEndTime < $exStartTime) {
        $exDate = date('Y-m-d', strtotime($shiftDate . ' + 1 day'));
    } else {
        $exDate = $shiftDate;
    }
    if ($newEndTime < $newStartTime) {
        $newDate = date('Y-m-d', strtotime($shiftDate . ' + 1 day'));
    } else {
        $newDate = $shiftDate;
    }
    $gap = 10;
    $from = strtotime($shiftDate . ' ' . $exStartTime . ':00');
    $to = strtotime($exDate . ' ' . $exEndTime . ':00') + 3600 * $gap;
    $from_compare = strtotime($shiftDate . ' ' . $newStartTime . ':00');
    $to_compare = strtotime($newDate . ' ' . $newEndTime . ':00') + 3600 * $gap;

    $intersect = min($to, $to_compare) - max($from, $from_compare);
    if ($intersect < 0) $intersect = 0;
    $overlap = $intersect / 3600;
    if ($overlap <= 0) {
        // 'No time conflicts.';
        return false;
    } else {
        // 'There is a time conflict where the times overlap by ' , $overlap , ' hours.';
        return true;
    }
}

function prevCheckOverlap($shiftDate, $exStartTime, $exEndTime, $newStartTime, $newEndTime)
{
    $shiftDate = date('Y-m-d', strtotime($shiftDate . ' - 1 day'));
    if ($exEndTime < $exStartTime) {
        $exDate = date('Y-m-d', strtotime($shiftDate . ' + 1 day'));
    } else {
        $exDate = $shiftDate;
    }
    if ($newEndTime < $newStartTime) {
        $newDate = date('Y-m-d', strtotime($shiftDate . ' + 1 day'));
    } else {
        $newDate = $shiftDate;
    }
    $gap = 10;
    $from = strtotime($shiftDate . ' ' . $exStartTime . ':00');
    $to = strtotime($exDate . ' ' . $exEndTime . ':00') + 3600 * $gap;
    $from_compare = strtotime($shiftDate . ' ' . $newStartTime . ':00');
    $to_compare = strtotime($newDate . ' ' . $newEndTime . ':00') + 3600 * $gap;

    $intersect = min($to, $to_compare) - max($from, $from_compare);
    if ($intersect < 0) $intersect = 0;
    $overlap = $intersect / 3600;
    if ($overlap <= 0) {
        // 'No time conflicts.';
        return false;
    } else {
        // 'There is a time conflict where the times overlap by ' , $overlap , ' hours.';
        return true;
    }
}

function checkPreviousDayShift($mysqli, $canId, $shiftDate, $StartTime, $EndTime)
{
    $previousDay = date('Y-m-d', strtotime($shiftDate . ' - 1 day'));
    $sql = $mysqli->prepare("SELECT shiftStart,shiftEnd FROM shift WHERE shiftDate = ? AND candidateId = ?") or die($mysqli->error);
    $sql->bind_param("ss", $previousDay, $canId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftStart, $shiftEnd) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $shStart = '';
    $shEnd = '';
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $shStart = $shiftStart;
            $shEnd = $shiftEnd;
        }
    }
    return $shStart . '-' . $shEnd;
}

function saveAndDisplayShift($mysqli, $shDate, $shDay, $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $note, $shiftCopy, $startDate, $endDate, $dateRange, $positionId, $shStatus, $addressId, $consultantId, $user)
{
    try {
        if (getCandidateFirstNameByCandidateId($mysqli, $canid) == 'UNFILLED') {
            $shStatus = 'UNFILLED';
        } elseif ($shStatus == 'N/A') {
            $shStatus == 'N/A';
        } elseif ($shStatus == 'OPEN') {
            $shStatus = 'OPEN';
        } else {
            $shStatus = $shStatus;
        }

        if (getJobCodeByClientPosition($mysqli, $clid, $positionId, $did) == '') {
            createJobCode($mysqli, $clid, $positionId, $did, 0);
        }
        if ($shiftCopy == 'on') {
            $dateArray = explode(',', $dateRange ?? '');
            $insert = null;
            $cancelStatus = 'CANCELLED';
            foreach ($dateArray as $value) {
                $shiftChk = $mysqli->prepare("SELECT 
                                              shift.shiftDate,
                                              shift.shiftDay,
                                              shift.shiftStart,
                                              shift.shiftEnd
                                            FROM
                                              shift
                                            WHERE
                                              shift.shiftDate = ? AND 
                                              shift.candidateId = ? AND shift.shiftStatus != ?") or die($mysqli->error);
                $shiftChk->bind_param("sss", $value, $canid, $cancelStatus) or die($mysqli->error);
                $shiftChk->execute();
                $shiftChk->store_result();
                $shiftChk->bind_result($shiftDate, $shiftDay, $shiftStart, $shiftEnd) or die ($mysqli->error);
                $num_of_rows = $shiftChk->num_rows;
                $msgArray = array();
                if ($num_of_rows > 0) {
                    while ($shiftChk->fetch()) {
                        /*if($clid == 294){
                            $previousShifts = checkPreviousDayShift($mysqli,$canid,$value,$StartTime,$EndTime);
                            if(!empty($previousShifts)){
                                $prevShifts = explode('-',$previousShifts);
                                $prevShiftStart = $prevShifts[0];
                                $prevShiftEnd = $prevShifts[1];
                                if(checkOverlap($value, $prevShiftStart, $prevShiftEnd, $StartTime, $EndTime)){
                                    $overlap = true;
                                    break;
                                }
                            }
                        }else {*/
                        /*$previousShifts = checkPreviousDayShift($mysqli,$canid,$value,$StartTime,$EndTime);
                            if(!empty($previousShifts)){
                                $prevShifts = explode('-',$previousShifts);
                                $prevShiftStart = $prevShifts[0];
                                $prevShiftEnd = $prevShifts[1];
                                if(prevCheckOverlap($value, $prevShiftStart, $prevShiftEnd, $StartTime, $EndTime)){
                                    $prevOverlap = true;
                                    break;
                                }else {
                                    $prevOverlap = false;
                                    break;
                                }
                            }else{
                                $prevOverlap = false;
                            }*/
                        if (checkOverlap($value, $shiftStart, $shiftEnd, $StartTime, $EndTime)) {
                            $overlap = true;
                            break;
                        } else {
                            $overlap = false;
                            break;
                        }
                        /*}*/

                        if (checkUnavailability($mysqli, $canid, $value)) {
                            $unavailable = true;
                        } else {
                            $unavailable = false;
                        }
                    }
                    $wrkhrs = calculateHoursWorked($value, $StartTime, $EndTime, $workBreak);
                    if (!$overlap && !$unavailable) {
                        $insert = insertShift($mysqli, $value, dayOfWeek($value), $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $wrkhrs, $note, $positionId, $shStatus, $addressId, $consultantId, $user);
                    } else {
                        $status = 'shiftOverlap';
                        $msgArray[] = array('status' => $status);
                        $insert = json_encode($msgArray);
                    }
                } else {
                    if (!checkUnavailability($mysqli, $canid, $value)) {
                        $wrkhrs = calculateHoursWorked($value, $StartTime, $EndTime, $workBreak);
                        $insert = insertShift($mysqli, $value, dayOfWeek($value), $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $wrkhrs, $note, $positionId, $shStatus, $addressId, $consultantId, $user);
                    }
                }
            }
        } else {
            $cancelStatus = 'CANCELLED';
            $shiftChk = $mysqli->prepare("SELECT 
                                          shift.shiftDate,
                                          shift.shiftDay,
                                          shift.shiftStart,
                                          shift.shiftEnd
                                        FROM
                                          shift
                                        WHERE
                                          shift.shiftDate = ? AND 
                                          shift.candidateId = ? AND shift.shiftStatus != ?") or die($mysqli->error);
            $shiftChk->bind_param("sss", $shDate, $canid, $cancelStatus) or die($mysqli->error);
            $shiftChk->execute();
            $shiftChk->store_result();
            $shiftChk->bind_result($shiftDate, $shiftDay, $shiftStart, $shiftEnd) or die ($mysqli->error);
            $num_of_rows = $shiftChk->num_rows;
            $msgArray = array();
            if ($num_of_rows > 0) {
                while ($shiftChk->fetch()) {
                    /*if($clid == 294){
                        $previousShifts = checkPreviousDayShift($mysqli,$canid,$shDate,$StartTime,$EndTime);
                        if(!empty($previousShifts)){
                            $prevShifts = explode('-',$previousShifts);
                            $prevShiftStart = $prevShifts[0];
                            $prevShiftEnd = $prevShifts[1];
                            if(checkOverlap($shDate, $prevShiftStart, $prevShiftEnd, $StartTime, $EndTime)){
                                $overlap = true;
                                break;
                            }
                        }
                    }else {*/
                    if (checkOverlap($shDate, $shiftStart, $shiftEnd, $StartTime, $EndTime)) {
                        $overlap = true;
                        break;
                    } else {
                        $overlap = false;
                        break;
                    }
                    /* }*/
                }
                $wrkhrs = calculateHoursWorked($shDate, $StartTime, $EndTime, $workBreak);
                if (!$overlap) {
                    $insert = insertShift($mysqli, $shDate, $shDay, $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $wrkhrs, $note, $positionId, $shStatus, $addressId, $consultantId, $user);
                } else {
                    $status = 'shiftOverlap';
                    $msgArray[] = array('status' => $status);
                    $insert = json_encode($msgArray);
                }
            } else {
                /*if($clid == 294){
                    $previousShifts = checkPreviousDayShift($mysqli,$canid,$shDate,$StartTime,$EndTime);
                    if(!empty($previousShifts)){
                        $prevShifts = explode('-',$previousShifts);
                        $prevShiftStart = $prevShifts[0];
                        $prevShiftEnd = $prevShifts[1];
                        if(checkOverlap($shDate, $prevShiftStart, $prevShiftEnd, $StartTime, $EndTime)){
                            $overlap = true;
                        }
                    }
                }*/
                if (!$overlap) {
                    $wrkhrs = calculateHoursWorked($shDate, $StartTime, $EndTime, $workBreak);
                    $insert = insertShift($mysqli, $shDate, $shDay, $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $wrkhrs, $note, $positionId, $shStatus, $addressId, $consultantId, $user);
                } else {
                    $status = 'shiftOverlap';
                    $msgArray[] = array('status' => $status);
                    $insert = json_encode($msgArray);
                }
            }
        }
        return $insert;
    } catch (Exception $e) {
        echo 'Error save and display shift ' . $e->getMessage();
    }
}

//IGNORING CANCELLED SHIFTS WHEN ADDING SHIFTS
/*function saveAndDisplayShift($mysqli, $shDate, $shDay, $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $note, $shiftCopy, $startDate, $endDate,$dateRange,$positionId,$shStatus,$addressId)
{
    if(getCandidateFirstNameByCandidateId($mysqli,$canid) == 'UNFILLED'){
        $shStatus = 'UNFILLED';
    }elseif ($shStatus == 'N/A'){
        $shStatus == 'N/A';
    }else{
        $shStatus = 'OPEN';
    }
    $cancelStatus = 'CANCELLED';
    if($shiftCopy == 'on'){
            $dateArray = explode(',', $dateRange);
            $insert = null;
            foreach ($dateArray as $value) {
                $shiftChk = $mysqli->prepare("SELECT
                                          shift.shiftDate,
                                          shift.shiftDay,
                                          shift.shiftStart,
                                          shift.shiftEnd
                                        FROM
                                          shift
                                        WHERE
                                          shift.shiftDate = ? AND
                                          shift.candidateId = ? AND
                                          shift.shiftStatus != ?") or die($mysqli->error);
                $shiftChk->bind_param("sss", $value, $canid,$cancelStatus) or die($mysqli->error);
                $shiftChk->execute();
                $shiftChk->store_result();
                $shiftChk->bind_result($shiftDate, $shiftDay, $shiftStart, $shiftEnd) or die ($mysqli->error);
                $num_of_rows = $shiftChk->num_rows;
                $msgArray = array();
                if ($num_of_rows > 0) {
                    while ($shiftChk->fetch()) {
                        if (checkOverlap($value, $shiftStart, $shiftEnd, $StartTime, $EndTime)) {
                            $overlap = true;
                            break;
                        } else {
                            $overlap = false;
                            break;
                        }
                        if(checkUnavailability($mysqli,$canid,$value)){
                            $unavailable = true;
                        }else{
                            $unavailable = false;
                        }
                    }
                    if (!$overlap && !$unavailable) {
                        $insert = insertShift($mysqli, $value, dayOfWeek($value), $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $note,$positionId,$shStatus,$addressId,$consultantEmail);
                    } else {
                        $status = 'shiftOverlap';
                        $msgArray[] = array('status' => $status);
                        $insert = json_encode($msgArray);
                    }
                } else {
                    if(!checkUnavailability($mysqli,$canid,$value)){
                        $insert = insertShift($mysqli, $value, dayOfWeek($value), $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $note,$positionId,$shStatus,$addressId,$consultantEmail);
                    }
                }
            }
        return $insert;
    }else{
        $shiftChk = $mysqli->prepare("SELECT
									  shift.shiftDate,
									  shift.shiftDay,
									  shift.shiftStart,
									  shift.shiftEnd
									FROM
									  shift
									WHERE
									  shift.shiftDate = ? AND
									  shift.candidateId = ? AND
                                      shift.shiftStatus != ?") or die($mysqli->error);
        $shiftChk->bind_param("sss", $shDate, $canid, $cancelStatus) or die($mysqli->error);
        $shiftChk->execute();
        $shiftChk->store_result();
        $shiftChk->bind_result($shiftDate, $shiftDay, $shiftStart, $shiftEnd) or die ($mysqli->error);
        $num_of_rows = $shiftChk->num_rows;
        $msgArray = array();
        if ($num_of_rows > 0) {
            while ($shiftChk->fetch()) {
                if (checkOverlap($shDate, $shiftStart, $shiftEnd, $StartTime, $EndTime)) {
                    $overlap = true;
                    break;
                } else {
                    $overlap = false;
                    break;
                }
                if(checkUnavailability($mysqli,$canid,$value)){
                    $unavailable = true;
                }else{
                    $unavailable = false;
                }
            }
            if (!$overlap && !$unavailable) {
                return insertShift($mysqli, $shDate, $shDay, $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $note,$positionId,$shStatus,$addressId);
            } else {
                $status = 'shiftOverlap';
                $msgArray[] = array('status' => $status);
                return json_encode($msgArray);
            }
        } else {
            if(!checkUnavailability($mysqli,$canid,$value)) {
                return insertShift($mysqli, $shDate, $shDay, $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $note, $positionId, $shStatus, $addressId);
            }
        }
    }
}*/
function genEmail($subj, $toEmail, $canid)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, ' Notification');
    $subject = $subj;
    $mail->AddAddress($toEmail);
    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = '<h2>JOB ORDER TO BE ADDED</h2>' . $canid;
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function notifyJobOrder($subj, $toEmail, $canid)
{
    //API URL
    $url = 'http://localhost/ /notify.php';

    //create a new cURL resource
    $ch = curl_init($url);

    //setup request to send json via POST
    $data = array(
        'subj' => $subj,
        'toEmail' => $toEmail,
        'canId' => $canid
    );
    $payload = json_encode(array("user" => $data));

    //attach encoded JSON string to the POST fields
    curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);

    //set the content type to application/json
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));

    //return response instead of outputting
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    //execute the POST request
    $result = curl_exec($ch);

    //close cURL resource
    curl_close($ch);
}

function checkExistingShift($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT candidateId FROM shift WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $num_of_rows = $sql->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function getVisaExpiryDate($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT expiryDate FROM employee_visatype WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->expiryDate;
    } else {
        return null;
    }
}
function getCandidateVisaType($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT visaTypeId FROM employee_visatype WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->visaTypeId;
    } else {
        return null;
    }
}

function insertShift($mysqli, $shDate, $shDay, $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $wrkhrs, $note, $positionId, $shStatus, $addressId, $consultantId, $user)
{
    $visaExpiry = getVisaExpiryDate($mysqli, $canid);
    if (!empty($visaExpiry)) {
        if (new DateTime($visaExpiry) < new DateTime($shDate)) {
            $msgArray[] = array('status' => 'VisaExpired');
            return json_encode($msgArray);
        } else {
            if (empty($addressId)) {
                $msgArray[] = array('status' => 'ShiftLocationNotFound');
                return json_encode($msgArray);
            } else {
                $chk = $mysqli->prepare("SELECT shiftId FROM shift WHERE shiftDate = ? AND candidateId = ?") or die($mysqli->error);
                $chk->bind_param("ss", $shDate, $canid) or die($mysqli->error);
                $chk->execute();
                $chk->store_result();
                $chk->fetch();
                $num_of_rows = $chk->num_rows;
                $chk->free_result();
                if ($num_of_rows < 2) {
                    $stmt = $mysqli->prepare("INSERT INTO shift(shiftDate,shiftDay,clientId,stateId,departmentId,candidateId,shiftStart,shiftEnd,workBreak,wrkhrs,shiftNote,positionId,shiftStatus,addressId,consultantId,created_at) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,NOW())") or die($mysqli->error);
                    $stmt->bind_param("ssiiisssissisii", $shDate, $shDay, $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $wrkhrs, $note, $positionId, $shStatus, $addressId, $consultantId) or die($mysqli->error);
                    $stmt->execute();
                    $nrows = $stmt->affected_rows;
                    $msgArray = array();
                    if ($nrows == '1') {
                        $status = 'shiftAdded';
                        $last_id = $stmt->insert_id;
                        saveFirebaseShift($mysqli, $last_id);
                        $msgArray[] = array('status' => $status);
                        $shiftInfo = getShiftInfoByShiftId($mysqli, $last_id);
                        $log = updateShiftLog($mysqli, $last_id, $consultantId, $status);
                        updateUserActivityLog($mysqli, $user, $_SERVER['REMOTE_ADDR'], '', $last_id, 'ADD SHIFT', 'ADD SHIFT - ID: ' . $last_id . ' SHIFT INFO: ' . $shiftInfo);
                        return json_encode($msgArray);
                    } else {
                        $msgArray[] = array('status' => $mysqli->error);
                        return json_encode($msgArray);
                    }
                } else {
                    $status = 'maxShifts';
                    $msgArray[] = array('status' => $status);
                    return json_encode($msgArray);
                }
            }
        }
    } else {
        if (empty($addressId)) {
            $msgArray[] = array('status' => 'ShiftLocationNotFound');
            return json_encode($msgArray);
        } else {
            $chk = $mysqli->prepare("SELECT shiftId FROM shift WHERE shiftDate = ? AND candidateId = ?") or die($mysqli->error);
            $chk->bind_param("ss", $shDate, $canid) or die($mysqli->error);
            $chk->execute();
            $chk->store_result();
            $chk->fetch();
            $num_of_rows = $chk->num_rows;
            $chk->free_result();
            if ($num_of_rows < 2) {
                $stmt = $mysqli->prepare("INSERT INTO shift(shiftDate,shiftDay,clientId,stateId,departmentId,candidateId,shiftStart,shiftEnd,workBreak,wrkhrs,shiftNote,positionId,shiftStatus,addressId,consultantId,created_at) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,NOW())") or die($mysqli->error);
                $stmt->bind_param("ssiiisssissisii", $shDate, $shDay, $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $wrkhrs, $note, $positionId, $shStatus, $addressId, $consultantId) or die($mysqli->error);
                $stmt->execute();
                $nrows = $stmt->affected_rows;
                $msgArray = array();
                if ($nrows == '1') {
                    $status = 'shiftAdded';
                    $last_id = $stmt->insert_id;
                    saveFirebaseShift($mysqli, $last_id);
                    $shiftInfo = getShiftInfoByShiftId($mysqli, $last_id);
                    $log = updateShiftLog($mysqli, $last_id, $consultantId, $status);
                    updateUserActivityLog($mysqli, $user, $_SERVER['REMOTE_ADDR'], '', $last_id, 'ADD SHIFT', 'ADD SHIFT - ID: ' . $last_id . ' SHIFT INFO: ' . $shiftInfo);
                    $msgArray[] = array('status' => $status);
                    return json_encode($msgArray);
                } else {
                    $msgArray[] = array('status' => $mysqli->error);
                    return json_encode($msgArray);
                }
            } else {

                $status = 'maxShifts';
                $msgArray[] = array('status' => $status);
                return json_encode($msgArray);
            }
        }
    }
}

function modifyAndDisplayShift($mysqli, $shiftid, $eshiftDate, $eclid, $estid, $edid, $ecanid, $eshiftStart, $eshiftEnd, $ebreak, $enote, $shiftStatus, $addressId, $consultantId, $user)
{
    if (getCandidateFirstNameByCandidateId($mysqli, $ecanid) == 'UNFILLED') {
        $shiftStatus = 'UNFILLED';
    } else if ($shiftStatus == 'CONFIRMED') {
        $shiftStatus == 'CONFIRMED';
    } else if ($shiftStatus == 'OPEN') {
        $shiftStatus = 'OPEN';
    } else {
        $shiftStatus = $shiftStatus;
    }
    $cancelStatus = 'CANCELLED';
    $shiftChk = $mysqli->prepare("SELECT 
									  shift.shiftDate,
									  shift.shiftStart,
									  shift.shiftEnd
									FROM
									  shift
									WHERE
									  shift.shiftDate = ? AND 
									  shift.candidateId = ? AND
									  shift.shiftid != ? AND shift.shiftStatus != ?") or die($mysqli->error);
    $shiftChk->bind_param("ssis", $eshiftDate, $ecanid, $shiftid, $cancelStatus) or die($mysqli->error);
    $shiftChk->execute();
    $shiftChk->store_result();
    $shiftChk->bind_result($shiftDate, $shiftStart, $shiftEnd) or die ($mysqli->error);
    $num_of_rows = $shiftChk->num_rows;
    $msgArray = array();
    if ($num_of_rows > 0) {
        while ($shiftChk->fetch()) {
            if (checkOverlap($shiftDate, $shiftStart, $shiftEnd, $eshiftStart, $eshiftEnd)) {
                $overlap = true;
                break;
            } else {
                $overlap = false;
                break;
            }
        }
        if (!$overlap) {
            return updateShift($mysqli, $shiftid, $eshiftDate, $eclid, $estid, $edid, $ecanid, $eshiftStart, $eshiftEnd, $ebreak, $enote, $shiftStatus, $addressId, $consultantId, $user);
        } else {
            $status = 'shiftOverlap';
            $msgArray[] = array('status' => $status);
            return json_encode($msgArray);
        }
    } else {
        return updateShift($mysqli, $shiftid, $eshiftDate, $eclid, $estid, $edid, $ecanid, $eshiftStart, $eshiftEnd, $ebreak, $enote, $shiftStatus, $addressId, $consultantId, $user);
    }
}

function updateShiftLog($mysqli, $shiftId, $consultantId, $shiftStatus)
{
    $stmt = $mysqli->prepare("INSERT INTO shiftLog(shiftId,consultantId,status,updatedTime) VALUES(?,?,?,NOW())") or die($mysqli->error);
    $stmt->bind_param("iis", $shiftId, $consultantId, $shiftStatus) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    return $nrows;
}

function updateShift($mysqli, $shiftid, $eshiftDate, $eclid, $estid, $edid, $ecanid, $eshiftStart, $eshiftEnd, $ebreak, $enote, $shiftStatus, $addressId, $consultantId, $user)
{
    $shiftInfo = getShiftInfoByShiftId($mysqli, $shiftid);
    $stmt = $mysqli->prepare("UPDATE shift SET shiftStart = ?,shiftEnd = ?,workBreak = ?,shiftNote = ?,shiftStatus = ?, addressId = ?, consultantId = ? WHERE shiftid = ?") or die($mysqli->error);
    $stmt->bind_param("ssissiii", $eshiftStart, $eshiftEnd, $ebreak, $enote, $shiftStatus, $addressId, $consultantId, $shiftid) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    $msgArray = array();
    if ($nrows == '1') {
        $status = 'shiftUpdated';
        $stmt->free_result();
        $log = updateShiftLog($mysqli, $shiftid, $consultantId, $shiftStatus);
        updateUserActivityLog($mysqli, $user, $_SERVER['REMOTE_ADDR'], '', $shiftid, 'UPDATE SHIFT', 'UPDATE SHIFT - ID: ' . $shiftid . ' SHIFT INFO: ' . $shiftInfo . ' SHIFT STATUS ' . $shiftStatus);
        $msgArray[] = array('status' => $status);
        return json_encode($msgArray);
    } else {
        $msgArray[] = array('status' => $mysqli->error);
        return json_encode($msgArray);
    }
}

/*function intersectCheck($from, $from_compare, $to, $to_compare){
    $from = strtotime($from);
    $from_compare = strtotime($from_compare);
    $to = strtotime($to);
    $to_compare = strtotime($to_compare);
    $intersect = min($to, $to_compare) - max($from, $from_compare);
    if ( $intersect < 0 ) $intersect = 0;
    $overlap = $intersect / 3600;
    if ( $overlap <= 0 ):
        // There are no time conflicts
        return TRUE;
    else:
        // There is a time conflict
        // echo '<p>There is a time conflict where the times overlap by ' , $overlap , ' hours.</p>';
        return FALSE;
    endif;
}*/
function timeChecker($exsitingTime, $newTime)
{
    /*if(!empty($existingTime) && !empty($newTime)) {*/
        $ex = explode(':', $exsitingTime);
        $ne = explode(':', $newTime);

        $exTime = (float)$ex[0] * (float)SecondsPerHour + (float)$ex[1] * (float)SecondsPerMinute;
        $neTime = (float)$ne[0] * (float)SecondsPerHour + (float)$ne[1] * (float)SecondsPerMinute;

        if ($exTime < $neTime) {
            return $newTime; //rostered start time
        } else {
            return $exsitingTime; //actual checked in time
        }
   /* }else{
        return $existingTime;
    }*/
}

function checkoutTimeChecker($exsitingTime, $newTime)
{
    /*if(!empty($existingTime)&&!empty($newTime)) {*/
    $ex = explode(':', $exsitingTime);
    $ne = explode(':', $newTime);

    $exTime = (float)$ex[0] * (float)SecondsPerHour + (float)$ex[1] * (float)SecondsPerMinute;
    $neTime = (float)$ne[0] * (float)SecondsPerHour + (float)$ne[1] * (float)SecondsPerMinute;

    if ($exTime > $neTime) {
        return $newTime; //rostered end time
    } else {
        return $exsitingTime;//actual checked out time
    }
    /*}else{
        return $existingTime;
    }*/
}

function getCheckedInCasuals($mysqli, $currentDate, $clientId)
{
    $sql = $mysqli->prepare("SELECT 
                              timeclock.candidateId,
                              timeclock.shiftDate,
                              client.client,
                              timeclock.checkIn,
                              timeclock.jobCode,
                              candidate_position.positionName,
                              department.department,
                              timeclock.supervisor,
                              candidate.firstName,
                              candidate.lastName,
                              shift.shiftStart,
                              timeclock.shiftId,
                              timeclock.workBreak
                            FROM
                              timeclock
                              INNER JOIN client ON (timeclock.clientId = client.clientId)
                              INNER JOIN candidate_position ON (timeclock.positionId = candidate_position.positionid)
                              INNER JOIN department ON (timeclock.deptId = department.deptId)
                              INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                              INNER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                            WHERE
                              timeclock.clientId = ? AND 
                              timeclock.shiftDate = ?
                            ORDER BY shift.shiftStart,timeclock.candidateId ASC") or die($mysqli->error);
    $sql->bind_param("is", $clientId, $currentDate) or die ($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($candidateId, $shiftDate, $client, $checkIn, $jobCode, $positionName, $department, $supervisor, $firstName, $lastName, $shiftStart, $shiftId, $workBreak) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $dataArray[] = array('candidateId' => $candidateId, 'shiftDate' => $shiftDate, 'client' => $client, 'checkIn' => $checkIn, 'jobCode' => $jobCode, 'positionName' => $positionName, 'department' => $department, 'supervisor' => $supervisor, 'firstName' => $firstName, 'lastName' => $lastName, 'shiftStart' => $shiftStart, 'shiftId' => $shiftId, 'workBreak' => $workBreak);
        }
        return $dataArray;
    } else {
        return $dataArray;
    }
}

function getCheckedInCasualsAll($mysqli, $currentDate)
{
    $sql = $mysqli->prepare("SELECT 
                              timeclock.candidateId,
                              timeclock.shiftDate,
                              client.client,
                              timeclock.checkIn,
                              timeclock.jobCode,
                              candidate_position.positionName,
                              department.department,
                              timeclock.supervisor,
                              candidate.firstName,
                              candidate.lastName,
                              shift.shiftStart,
                              timeclock.shiftId,
                              timeclock.workBreak
                            FROM
                              timeclock
                              INNER JOIN client ON (timeclock.clientId = client.clientId)
                              INNER JOIN candidate_position ON (timeclock.positionId = candidate_position.positionid)
                              INNER JOIN department ON (timeclock.deptId = department.deptId)
                              INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                              INNER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                            WHERE
                              timeclock.shiftDate = ?
                            ORDER BY shift.shiftStart,timeclock.candidateId ASC") or die($mysqli->error);
    $sql->bind_param("s", $currentDate) or die ($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($candidateId, $shiftDate, $client, $checkIn, $jobCode, $positionName, $department, $supervisor, $firstName, $lastName, $shiftStart, $shiftId, $workBreak) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $dataArray[] = array('candidateId' => $candidateId, 'shiftDate' => $shiftDate, 'client' => $client, 'checkIn' => $checkIn, 'jobCode' => $jobCode, 'positionName' => $positionName, 'department' => $department, 'supervisor' => $supervisor, 'firstName' => $firstName, 'lastName' => $lastName, 'shiftStart' => $shiftStart, 'shiftId' => $shiftId, 'workBreak' => $workBreak);
        }
        return $dataArray;
    } else {
        return $dataArray;
    }
}

function getCheckedInCasualsAllDateRange($mysqli, $startDate, $endDate)
{
    $sql = $mysqli->prepare("SELECT 
                              timeclock.candidateId,
                              timeclock.shiftDate,
                              client.client,
                              timeclock.checkIn,
                              timeclock.jobCode,
                              candidate_position.positionName,
                              department.department,
                              timeclock.supervisor,
                              candidate.firstName,
                              candidate.lastName,
                              shift.shiftStart,
                              timeclock.shiftId,
                              timeclock.workBreak
                            FROM
                              timeclock
                              INNER JOIN client ON (timeclock.clientId = client.clientId)
                              INNER JOIN candidate_position ON (timeclock.positionId = candidate_position.positionid)
                              INNER JOIN department ON (timeclock.deptId = department.deptId)
                              INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                              INNER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                            WHERE
                              timeclock.shiftDate BETWEEN ? AND ? 
                            ORDER BY shift.shiftStart,timeclock.candidateId ASC") or die($mysqli->error);
    $sql->bind_param("ss", $startDate, $endDate) or die ($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($candidateId, $shiftDate, $client, $checkIn, $jobCode, $positionName, $department, $supervisor, $firstName, $lastName, $shiftStart, $shiftId, $workBreak) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $dataArray[] = array('candidateId' => $candidateId, 'shiftDate' => $shiftDate, 'client' => $client, 'checkIn' => $checkIn, 'jobCode' => $jobCode, 'positionName' => $positionName, 'department' => $department, 'supervisor' => $supervisor, 'firstName' => $firstName, 'lastName' => $lastName, 'shiftStart' => $shiftStart, 'shiftId' => $shiftId, 'workBreak' => $workBreak);
        }
        return $dataArray;
    } else {
        return $dataArray;
    }
}

function getRosteredConfirmedCasualsByDateRange($mysqli, $startDate, $endDate, $supervisorClient)
{
    $status = 'CONFIRMED';
    $sql = $mysqli->prepare("SELECT 
                              shift.candidateId,
                              candidate.firstName,
                              candidate.lastName,
                              shift.shiftDate,
                              shift.shiftStart,
                              shift.shiftEnd,
                              shift.workBreak,
                              department.department,
                              client.client
                            FROM
                              shift
                              INNER JOIN candidate ON (shift.candidateId = candidate.candidateId)
                              INNER JOIN department ON (shift.departmentId = department.deptId)
                              INNER JOIN client ON (shift.clientId = client.clientId)
                            WHERE
                              shift.shiftStatus = ? AND 
                              shift.shiftDate BETWEEN ? AND ? AND 
                              shift.clientId = ?") or die($mysqli->error);
    $sql->bind_param("sssi", $status, $startDate, $endDate, $supervisorClient) or die ($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($candidateId, $firstName, $lastName, $shiftDate, $shiftStart, $shiftEnd, $workBreak, $department, $client) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $dataArray[] = array('candidateId' => $candidateId, 'firstName' => $firstName, 'lastName' => $lastName, 'shiftDate' => $shiftDate, 'shiftStart' => $shiftStart, 'shiftEnd' => $shiftEnd, 'workBreak' => $workBreak, 'department' => $department, 'client' => $client);
        }
        return $dataArray;
    }
}

/*function getRosteredConfirmedCasualsSupervisorUnconfirmedByDateRange($mysqli, $startDate, $endDate, $supervisorClient,$deptId,$positionId)
{
    $status = 'CONFIRMED';
    $sql = $mysqli->prepare("SELECT
                              shift.candidateId,
                              candidate.firstName,
                              candidate.lastName,
                              shift.shiftDate,
                              shift.shiftStart,
                              shift.shiftEnd,
                              shift.workBreak,
                              department.department,
                              client.client
                            FROM
                              shift
                              INNER JOIN candidate ON (shift.candidateId = candidate.candidateId)
                              INNER JOIN department ON (shift.departmentId = department.deptId)
                              INNER JOIN client ON (shift.clientId = client.clientId)
                            WHERE
                              shift.shiftStatus = ? AND
                              shift.shiftDate BETWEEN ? AND ? AND
                              shift.clientId = ? AND
                              shift.departmentId = ? AND
                              shift.positionId = ?") or die($mysqli->error);
    $sql->bind_param("sssiii", $status, $startDate, $endDate, $supervisorClient,$deptId,$positionId) or die ($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($candidateId, $firstName, $lastName, $shiftDate, $shiftStart, $shiftEnd, $workBreak, $department, $client) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $dataArray[] =  array('candidateId' => $candidateId, 'firstName' => $firstName, 'lastName' => $lastName, 'shiftDate' => $shiftDate, 'shiftStart' => $shiftStart, 'shiftEnd' => $shiftEnd, 'workBreak' => $workBreak, 'department' => $department, 'client' => $client);
        }
        return $dataArray;
    }
}*/

function getRosteredConfirmedCasuals($mysqli, $currentDate, $clientId)
{
    $sql = $mysqli->prepare("SELECT 
                                  shift.candidateId,
                                  shift.shiftId,
                                  department.department,
                                  states.state,
                                  candidate.firstName,
                                  candidate.lastName,
                                  client.client,
                                  candidate_position.positionName,
                                  candidate.supervicerId,
                                  shift.shiftStart,
                                  timeclock.checkIn,
                                  shift.shiftEnd,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.workBreak
                                FROM
                                  shift
                                  INNER JOIN department ON (shift.departmentId = department.deptId)
                                  INNER JOIN states ON (shift.stateId = states.stateId)
                                  INNER JOIN candidate ON (shift.candidateId = candidate.candidateId)
                                  INNER JOIN client ON (shift.clientId = client.clientId)
                                  INNER JOIN candidate_position ON (shift.positionId = candidate_position.positionid)
                                  LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftDate = ? AND 
                                  shift.shiftStatus = 'CONFIRMED'
                                ORDER BY shift.shiftStart,shift.candidateId ASC") or die($mysqli->error);
    $sql->bind_param("is", $clientId, $currentDate) or die ($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($candidateId, $shiftId, $department, $state, $firstName, $lastName, $client, $positionName, $supervicerId, $shiftStart, $checkIn, $shiftEnd, $shiftDate, $shiftDay, $clientId, $positionId, $departmentId, $workBreak) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $dataArray[] = array('candidateId' => $candidateId, 'shiftId' => $shiftId, 'shiftDate' => $shiftDate, 'department' => $department, 'state' => $state, 'firstName' => $firstName, 'lastName' => $lastName, 'client' => $client, 'positionName' => $positionName, 'supervicerId' => $supervicerId, 'jobCode' => getJobCodeByClientPosition($mysqli, $clientId, $positionId, $departmentId), 'shiftStart' => $shiftStart, 'checkIn' => $checkIn, 'shiftEnd' => $shiftEnd, 'shiftDay' => $shiftDay, 'workBreak' => $workBreak);
        }
        return $dataArray;
    } else {
        return $dataArray;
    }
}

function getRosteredConfirmedCasualsAll($mysqli, $currentDate)
{
    /* $clientIds = array(245, 45, 36, 34, 144);
    $clients = join("','", $clientIds);*/
    $shStatus = 'CONFIRMED';
    $sql = $mysqli->prepare("SELECT 
                                  shift.candidateId,
                                  shift.shiftId,
                                  shift.clientId,
                                  department.department,
                                  states.state,
                                  candidate.firstName,
                                  candidate.lastName,
                                  client.client,
                                  candidate_position.positionName,
                                  candidate.supervicerId,
                                  shift.shiftStart,
                                  timeclock.checkIn,
                                  shift.shiftEnd,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.workBreak
                                FROM
                                  shift
                                  INNER JOIN department ON (shift.departmentId = department.deptId)
                                  INNER JOIN states ON (shift.stateId = states.stateId)
                                  INNER JOIN candidate ON (shift.candidateId = candidate.candidateId)
                                  INNER JOIN client ON (shift.clientId = client.clientId)
                                  INNER JOIN candidate_position ON (shift.positionId = candidate_position.positionid)
                                  LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.shiftDate = ? AND 
                                  shift.clientId NOT IN (5,243,245,34,144,236,328) AND
                                  shift.shiftStatus = ? 
                                ORDER BY shift.shiftStart,client.client ASC") or die($mysqli->error);
    $sql->bind_param("ss", $currentDate, $shStatus) or die ($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($candidateId, $shiftId, $clientId, $department, $state, $firstName, $lastName, $client, $positionName, $supervicerId, $shiftStart, $checkIn, $shiftEnd, $shiftDate, $shiftDay, $clientId, $positionId, $departmentId, $workBreak) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $dataArray[] = array('candidateId' => $candidateId, 'shiftId' => $shiftId, 'shiftDate' => $shiftDate, 'clientId' => $clientId, 'department' => $department, 'state' => $state, 'firstName' => $firstName, 'lastName' => $lastName, 'client' => $client, 'positionName' => $positionName, 'supervicerId' => $supervicerId, 'jobCode' => getJobCodeByClientPosition($mysqli, $clientId, $positionId, $departmentId), 'shiftStart' => $shiftStart, 'checkIn' => $checkIn, 'shiftEnd' => $shiftEnd, 'shiftDay' => $shiftDay, 'workBreak' => $workBreak);
        }
        return $dataArray;
    } else {
        return $dataArray;
    }
}

function getRosteredConfirmedCasualsByClient($mysqli, $currentDate, $client_id)
{
    $shStatus = 'CONFIRMED';
    $sql = $mysqli->prepare("SELECT 
                                  shift.candidateId,
                                  shift.shiftId,
                                  shift.clientId,
                                  department.department,
                                  states.state,
                                  candidate.firstName,
                                  candidate.lastName,
                                  client.client,
                                  candidate_position.positionName,
                                  candidate.supervicerId,
                                  shift.shiftStart,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.checkin_latitude, 
                                  timeclock.checkin_longitude, 
                                  timeclock.checkout_latitude, 
                                  timeclock.checkout_longitude,
                                  timeclock.workBreak,
                                  shift.shiftEnd,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId
                                FROM
                                  shift
                                  INNER JOIN department ON (shift.departmentId = department.deptId)
                                  INNER JOIN states ON (shift.stateId = states.stateId)
                                  INNER JOIN candidate ON (shift.candidateId = candidate.candidateId)
                                  INNER JOIN client ON (shift.clientId = client.clientId)
                                  INNER JOIN candidate_position ON (shift.positionId = candidate_position.positionid)
                                  LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.shiftDate = ? AND 
                                  shift.clientId = ? AND
                                  shift.shiftStatus = ? 
                                ORDER BY shift.shiftStart,client.client ASC") or die($mysqli->error);
    $sql->bind_param("sis", $currentDate, $client_id, $shStatus) or die ($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($candidateId, $shiftId, $clientId, $department, $state, $firstName, $lastName, $client, $positionName, $supervicerId, $shiftStart, $checkIn, $checkOut, $checkin_latitude, $checkin_longitude, $checkout_latitude, $checkout_longitude, $workBreak, $shiftEnd, $shiftDate, $shiftDay, $clientId, $positionId, $departmentId) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $dataArray[] = array('candidateId' => $candidateId, 'shiftId' => $shiftId, 'shiftDate' => $shiftDate, 'clientId' => $clientId, 'department' => $department, 'state' => $state, 'firstName' => $firstName, 'lastName' => $lastName, 'client' => $client, 'positionName' => $positionName, 'supervicerId' => $supervicerId, 'jobCode' => getJobCodeByClientPosition($mysqli, $clientId, $positionId, $departmentId), 'shiftStart' => $shiftStart, 'checkIn' => $checkIn, 'checkOut' => $checkOut, 'checkin_latitude' => $checkin_latitude, 'checkin_longitude' => $checkin_longitude, 'checkout_latitude' => $checkout_latitude, 'checkout_longitude' => $checkout_longitude, 'workBreak' => $workBreak, 'shiftEnd' => $shiftEnd, 'shiftDay' => $shiftDay);
        }
        return $dataArray;
    } else {
        return $dataArray;
    }
}

function getRosteredConfirmedCasualsAllDateRange($mysqli, $startDate, $endDate)
{
    /* $clientIds = array(245, 45, 36, 34, 144);
     $clients = join("','", $clientIds);*/
    $shStatus = 'CONFIRMED';
    $sql = $mysqli->prepare("SELECT 
                                  shift.candidateId,
                                  shift.shiftId,
                                  department.department,
                                  states.state,
                                  candidate.firstName,
                                  candidate.lastName,
                                  client.client,
                                  candidate_position.positionName,
                                  candidate.supervicerId,
                                  shift.shiftStart,
                                  timeclock.checkIn,
                                  shift.shiftEnd,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.workBreak
                                FROM
                                  shift
                                  INNER JOIN department ON (shift.departmentId = department.deptId)
                                  INNER JOIN states ON (shift.stateId = states.stateId)
                                  INNER JOIN candidate ON (shift.candidateId = candidate.candidateId)
                                  INNER JOIN client ON (shift.clientId = client.clientId)
                                  INNER JOIN candidate_position ON (shift.positionId = candidate_position.positionid)
                                  LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.clientId NOT IN (5,243,245, 45, 34, 144, 236) AND
                                  shift.shiftStatus = ? 
                                ORDER BY shift.shiftStart,client.client ASC") or die($mysqli->error);
    $sql->bind_param("sss", $startDate, $endDate, $shStatus) or die ($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($candidateId, $shiftId, $department, $state, $firstName, $lastName, $client, $positionName, $supervicerId, $shiftStart, $checkIn, $shiftEnd, $shiftDate, $shiftDay, $clientId, $positionId, $departmentId, $workBreak) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $dataArray[] = array('candidateId' => $candidateId, 'shiftId' => $shiftId, 'shiftDate' => $shiftDate, 'department' => $department, 'state' => $state, 'firstName' => $firstName, 'lastName' => $lastName, 'client' => $client, 'positionName' => $positionName, 'supervicerId' => $supervicerId, 'jobCode' => getJobCodeByClientPosition($mysqli, $clientId, $positionId, $departmentId), 'shiftStart' => $shiftStart, 'checkIn' => $checkIn, 'shiftEnd' => $shiftEnd, 'shiftDay' => $shiftDay, 'workBreak' => $workBreak);
        }
        return $dataArray;
    } else {
        return $dataArray;
    }
}

function generateMailNotification($subject, $ccEmail, $recipientEmail, $mailBody)
{
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME . 'Mail Notification');
    $mail->AddAddress($recipientEmail);
    $mail->AddCC($ccEmail);
    $mail->AddBCC('');
    $mail->AddEmbeddedImage('img/logo.png', "logo", "logo.png");
    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = $mailBody . '<br><br><div><img src="cid:logo" width="150" alt=""/></div><br/>';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function generateMailNotificationWithAttachments($subject, $ccEmail, $recipientEmail, $mailBody, $files)
{
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, ' Mail Notification');
    $mail->AddAddress($recipientEmail);
    $mail->AddCC($ccEmail);
    if (!empty($files)) {
        foreach ($files as $file) {
            $mail->AddAttachment($file);
        }
    }
    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = $mailBody . '<br><br/>';
    $mail->Body = $body;
    $mail->send();

    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}


function deleteShift($mysqli, $shiftid, $user)
{
    $shiftInfo = getShiftInfoByShiftId($mysqli, $shiftid);
    $del = $mysqli->prepare("DELETE FROM shift WHERE shiftid = ?") or die($mysqli->error);
    $del->bind_param("i", $shiftid) or die($mysqli->error);
    $del->execute();
    $rows_deleted = $del->affected_rows;
    $msgArray = array();
    if ($rows_deleted == '1') {
        $status = 'removed';
        updateUserActivityLog($mysqli, $user, $_SERVER['REMOTE_ADDR'], '', $shiftid, 'DELETE SHIFT', 'DELETE SHIFT - ID: ' . $shiftid . ' SHIFT INFO: ' . $shiftInfo);
        addToRemoveFirebaseShiftOnline($mysqli, $shiftid);
        removeFirebaseShift($mysqli, $shiftid);
        $msgArray[] = array('status' => $status, 'deleteId' => $shiftid);
        return json_encode($msgArray);
    }
}

function displayEmployeeGenderIndicator($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT sex FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        $sex = $obj->sex;
    } else {
        $sex = null;
    }
    if ($sex == 'Male') {
        return 'cellColorMale';
    } else {
        return 'cellColorFeMale';
    }
}

function displayVaccinationIcon($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT DISTINCT 
                              document_type.typeDescription
                            FROM
                              candidate_document
                              INNER JOIN document_type ON (candidate_document.docTypeId = document_type.typeId)
                            WHERE
                              candidate_document.docTypeId IN (57,58,59) AND 
                              candidate_document.candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($typeDescription) or die($mysqli->error);
    $span = '';
    while ($sql->fetch()) {
        $span = $span . '<span class="vaccinationIcon" title="' . $typeDescription . '"><img src="img/syring-green.png" width="16" height="16" alt=""></span>';
    }
    return $span;
}

function displayStudentIndicator($mysqli, $candidateId)
{
    $attrCode = 'STUDNT';
    $stmt = $mysqli->prepare("SELECT 
  candidate_otherlicence.candidateId
FROM
  otherlicence
  INNER JOIN candidate_otherlicence ON (otherlicence.otherLicenceId = candidate_otherlicence.otherLicenceId)
WHERE
  otherlicence.code = ? AND 
  candidate_otherlicence.candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("ss", $attrCode, $candidateId) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function displayWageSubsidyIndicator($mysqli, $candidateId)
{
    $attrCode = 'WAGESUB';
    $stmt = $mysqli->prepare("SELECT 
  candidate_otherlicence.candidateId
FROM
  otherlicence
  INNER JOIN candidate_otherlicence ON (otherlicence.otherLicenceId = candidate_otherlicence.otherLicenceId)
WHERE
  otherlicence.code = ? AND 
  candidate_otherlicence.candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("ss", $attrCode, $candidateId) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function displayNovIndicator($mysqli, $candidateId)
{
    $attrCode = '16NOV';
    $stmt = $mysqli->prepare("SELECT 
  candidate_otherlicence.candidateId
FROM
  otherlicence
  INNER JOIN candidate_otherlicence ON (otherlicence.otherLicenceId = candidate_otherlicence.otherLicenceId)
WHERE
  otherlicence.code = ? AND 
  candidate_otherlicence.candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("ss", $attrCode, $candidateId) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function displayNoPhoneIndicator($mysqli, $candidateId)
{
    $attrCode = 'NOPHONE';
    $stmt = $mysqli->prepare("SELECT 
  candidate_otherlicence.candidateId
FROM
  otherlicence
  INNER JOIN candidate_otherlicence ON (otherlicence.otherLicenceId = candidate_otherlicence.otherLicenceId)
WHERE
  otherlicence.code = ? AND 
  candidate_otherlicence.candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("ss", $attrCode, $candidateId) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function getCandidateVaccinationDocType($mysqli, $canId, $doctype)
{
    $sql = $mysqli->prepare("SELECT 
                              document_type.typeDescription
                            FROM
                              candidate_document
                              INNER JOIN document_type ON (candidate_document.docTypeId = document_type.typeId)
                            WHERE
                              candidate_document.docTypeId = ? AND 
                              candidate_document.candidateId = ?") or die($mysqli->error);
    $sql->bind_param("is", $doctype, $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->typeDescription;
    } else {
        return null;
    }
}


function unfilledIndicator($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT firstName FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        $firstName = $obj->firstName;
    } else {
        $firstName = null;
    }
    if ($firstName == 'UNFILLED') {
        return 'cellColorUnfilled';
    } else {
        return '';
    }
}

function calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak)
{
    if (strtotime($shiftEnd) < strtotime($shiftStart)) {
        $shiftEndDate = date('Y-m-d', strtotime($shiftDate . ' + 1 day'));
    } else {
        $shiftEndDate = $shiftDate;
    }

    $starttime = strtotime($shiftDate . ' ' . $shiftStart . ':00');
    $endtime = strtotime($shiftEndDate . ' ' . $shiftEnd . ':00');
    $diff = $endtime - $starttime;
    $breaks = $workBreak * 60;
    $hours = ($diff - $breaks) / 60 / 60;
    $info = '';
    $info = $info . 'clocked in: ' . $shiftDate . ' ' . $shiftStart . ':00' . '>>';
    $info = $info . 'clocked out: ' . $shiftEndDate . ' ' . $shiftEnd . ':00' . '>>';
    $info = $info . 'breaks: ' . $breaks . ' minutes >>';
    $info = $info . 'hours worked: ' . number_format($hours, 2) . ' ';
    if ($hours > 0) {
        return number_format($hours, 2);
    } else {
        return 0;
    }
}

function updateShiftSMSDelivery($mysqli, $shiftid)
{
    $smsStatus = true;
    $stmt = $mysqli->prepare("UPDATE shift SET shiftSMSStatus = ? WHERE shiftid = ?") or die($mysqli->error);
    $stmt->bind_param("ii", $smsStatus, $shiftid) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    $msgArray = array();
    if ($nrows == 1) {
        $status = 'Updated';
        $msgArray[] = array('status' => $status);
        return json_encode($msgArray);
    } else if ($nrows == 0) {
        $status = 'AlreadyUpdated';
        $msgArray[] = array('status' => $status);
        return json_encode($msgArray);
    } else {
        $msgArray[] = array('status' => $mysqli->error);
        return json_encode($msgArray);
    }
}

function updateBulkShiftSMSDelivery($mysqli, $clientId, $stateId, $deptId, $startDate, $endDate, $candidateId)
{
    $stDate = date('Y-m-d', strtotime($startDate));
    $enDate = date('Y-m-d', strtotime($endDate));
    $smsStatus = 1;
    $stmt = $mysqli->prepare("UPDATE shift SET shiftSMSStatus = ? WHERE clientId = ? AND stateId = ? AND departmentId = ? AND candidateId = ? AND shiftDate BETWEEN ? AND ?") or die($mysqli->error);
    $stmt->bind_param("iiiisss", $smsStatus, $clientId, $stateId, $deptId, $candidateId, $stDate, $enDate) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    $msgArray = array();
    if ($nrows > 0) {
        $status = 'Updated';
        $msgArray[] = array('status' => $status);
        return json_encode($msgArray);
    } else if ($nrows == 0) {
        $status = 'AlreadyUpdated';
        $msgArray[] = array('status' => $status);
        return json_encode($msgArray);
    } else {
        $msgArray[] = array('status' => $mysqli->error);
        return json_encode($msgArray);
    }
}

function getOtherExistingShifts($mysqli, $did, $strdate, $enddate, $canid)
{
    $shStatus = 'CANCELLED';
    $chk = $mysqli->prepare("SELECT   shift.shiftId,
									  shift.shiftDate,
									  shift.clientId,
									  shift.departmentId,
									  shift.shiftStart,
									  shift.shiftEnd
									FROM
									  shift
									WHERE
									  shift.departmentId <> ? AND 
									  shift.candidateId = ? AND
									  shift.shiftStatus != ? AND
									  shift.shiftDate BETWEEN ? AND ?") or die($mysqli->error);
    $chk->bind_param("issss", $did, $canid, $shStatus, $strdate, $enddate) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->bind_result($shiftId, $shiftDate, $clientId, $departmentId, $shiftStart, $shiftEnd) or die($mysqli->error);
    $numrows = $chk->num_rows;
    if ($numrows > 0) {
        while ($chk->fetch()) {
            $txt = $txt . "\n at " . getClientNameByClientId($mysqli, $clientId) . ", &nbsp;" . getDepartmentById($mysqli, $departmentId) . "\n";
            $txt = $txt . "(" . date('d-m-Y', strtotime($shiftDate)) . ") " . dayOfWeek($shiftDate) . ": " . convertTime($shiftStart) . " - " . convertTime($shiftEnd) . "\n";
        }
    } else {
        $txt = '';
    }
    return $txt;
}

function pinCheck($clid)
{
    $pinArray = array(89, 111, 49, 5, 63, 21, 118, 15, 16, 181, 36, 292, 308);
    if (in_array($clid, $pinArray)) {
        return true;
    } else {
        return false;
    }
}

function updateCovidAnswer($mysqli, $canId, $covidAnswer, $shift_id, $shift_date, $client_id)
{
    $ins = $mysqli->prepare("INSERT INTO employee_covid_answers(candidateId,shiftId,shiftDate,clientId,answer,answer_time)VALUES(?,?,?,?,?,NOW())") or die($mysqli->error);
    $ins->bind_param("sisis", $canId, $shift_id, $shift_date, $client_id, $covidAnswer) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    return 'Submitted';
}

function getShiftData($mysqli, $rCanId, $consultant, $clid, $pinNo, $stid, $did, $strdate, $enddate, $action)
{
    if ($action == 'COVIDCHECK') {
        if (!empty($rCanId)) {
            $empName = getNickNameById($mysqli, $rCanId);

            if (empty($empName)) {
                $empName = getCandidateFullName($mysqli, $rCanId);
            }
        }
        $shStatus = 'CANCELLED';
        $stmt = $mysqli->prepare("SELECT 
								  shift.shiftId,
								  shift.shiftDate,
								  shift.shiftDay,
								  shift.clientId,
								  shift.stateId,
								  shift.departmentId,
								  shift.candidateId,
								  shift.shiftStart,
								  shift.shiftEnd,
								  shift.workBreak,
								  shift.shiftSMSStatus,
  								  shift.shiftStatus
								FROM
								  shift
								WHERE
								  shift.candidateId = ? AND 
								  shift.clientId = ? AND 
								  shift.stateId = ? AND 
								  shift.departmentId = ? AND
								  shift.shiftStatus != ? AND
								  shift.shiftDate BETWEEN ? AND ?
								ORDER BY shift.shiftDate ASC") or die($mysqli->error);
        $stmt->bind_param("siiisss", $rCanId, $clid, $stid, $did, $shStatus, $strdate, $enddate) or die($mysqli->error);
        $stmt->execute();
        $stmt->store_result();
        $stmt->bind_result($shiftId, $shiftDate, $shiftDay, $clientId, $stateId, $departmentId, $candidateId, $shiftStart, $shiftEnd, $workBreak, $shiftSMSStatus, $shiftStatus) or die($mysqli->error);
        $num_of_rows = $stmt->num_rows;

        $txt = $txt . "Hello " . $empName . " ID:" . $rCanId . ", below is/are your shifts";
        $txt = $txt . "\n at " . getClientNameByClientId($mysqli, $clid) . ", &nbsp;" . getDepartmentById($mysqli, $did) . "\n";
        $shId = '';
        $shDate = '';
        $clId = '';
        while ($stmt->fetch()) {
            $txt = $txt . "(" . date('d-m-Y', strtotime($shiftDate)) . ") " . $shiftDay . ": " . convertTime($shiftStart) . " - " . convertTime($shiftEnd) . "\n";
            $shId = $shiftId;
            $shDate = $shiftDate;
        }

        $txt = $txt . "\nPrior to attend the shift please click below link to answer COVID-19 Health Declaration.\n \n";
        $txt = $txt . DOMAIN_URL . "/staff/index.php?action=" . base64_encode($action) . "&shift_id=" . base64_encode($shId) . "&shift_date=" . base64_encode($shDate) . "&client_id=" . base64_encode($clid) . "&username=" . base64_encode($rCanId);

        $txt = $txt . " \n \nRegards " . $consultant . " @ " . DOMAIN_NAME;
        $txt = $txt . "\nPLEASE DO NOT REPLY TO THIS TEXT";
        return $txt;
    } elseif ($action == 'VACCINE') {
        if (!empty($rCanId)) {
            $empName = getNickNameById($mysqli, $rCanId);

            if (empty($empName)) {
                $empName = getCandidateFullName($mysqli, $rCanId);
            }
        }
        $shStatus = 'CANCELLED';
        $stmt = $mysqli->prepare("SELECT 
								  shift.shiftId,
								  shift.shiftDate,
								  shift.shiftDay,
								  shift.clientId,
								  shift.stateId,
								  shift.departmentId,
								  shift.candidateId,
								  shift.shiftStart,
								  shift.shiftEnd,
								  shift.workBreak,
								  shift.shiftSMSStatus,
  								  shift.shiftStatus
								FROM
								  shift
								WHERE
								  shift.candidateId = ? AND 
								  shift.clientId = ? AND 
								  shift.stateId = ? AND 
								  shift.departmentId = ? AND
								  shift.shiftStatus != ? AND
								  shift.shiftDate BETWEEN ? AND ?
								ORDER BY shift.shiftDate ASC") or die($mysqli->error);
        $stmt->bind_param("siiisss", $rCanId, $clid, $stid, $did, $shStatus, $strdate, $enddate) or die($mysqli->error);
        $stmt->execute();
        $stmt->store_result();
        $stmt->bind_result($shiftId, $shiftDate, $shiftDay, $clientId, $stateId, $departmentId, $candidateId, $shiftStart, $shiftEnd, $workBreak, $shiftSMSStatus, $shiftStatus) or die($mysqli->error);
        $num_of_rows = $stmt->num_rows;

        $txt = $txt . "\n\nCOVID-19 Vaccination Proof\n\n";
        $txt = $txt . "Hello " . $empName . " ID:" . $rCanId . ", ";
        $txt = $txt . "\n\n Please click below link to upload COVID-19 Vaccination Results. \n\n";

        $shId = '';
        $shDate = '';
        $clId = '';
        $txt = $txt . DOMAIN_URL . "/vaccination.php?action=" . base64_encode($action) . "&shift_id=" . base64_encode($shId) . "&shift_date=" . base64_encode($shDate) . "&client_id=" . base64_encode($clid) . "&username=" . base64_encode($rCanId);

        $txt = $txt . " \n \nRegards " . $consultant . " @ " . DOMAIN_NAME;
        $txt = $txt . "\nPLEASE DO NOT REPLY TO THIS TEXT";
        return $txt;
    } else {
        //$SMSStatus = 1;shift.shiftSMSStatus != ? AND
        if (!empty($rCanId)) {
            $empName = getNickNameById($mysqli, $rCanId);

            if (empty($empName)) {
                $empName = getCandidateFullName($mysqli, $rCanId);
            }
        }
        $shStatus = 'CANCELLED';
        $stmt = $mysqli->prepare("SELECT 
								  shift.shiftId,
								  shift.shiftDate,
								  shift.shiftDay,
								  shift.clientId,
								  shift.stateId,
								  shift.departmentId,
								  shift.candidateId,
								  shift.shiftStart,
								  shift.shiftEnd,
								  shift.workBreak,
								  shift.shiftSMSStatus,
  								  shift.shiftStatus
								FROM
								  shift
								WHERE
								  shift.candidateId = ? AND 
								  shift.clientId = ? AND 
								  shift.stateId = ? AND 
								  shift.departmentId = ? AND
								  shift.shiftStatus != ? AND
								  shift.shiftDate BETWEEN ? AND ?
								ORDER BY shift.shiftDate ASC") or die($mysqli->error);
        $stmt->bind_param("siiisss", $rCanId, $clid, $stid, $did, $shStatus, $strdate, $enddate) or die($mysqli->error);
        $stmt->execute();
        $stmt->store_result();
        $stmt->bind_result($shiftId, $shiftDate, $shiftDay, $clientId, $stateId, $departmentId, $candidateId, $shiftStart, $shiftEnd, $workBreak, $shiftSMSStatus, $shiftStatus) or die($mysqli->error);
        $num_of_rows = $stmt->num_rows;
        // Requested to send All shift details everytime
        /*if ($num_of_rows > 0) {*/
        $txt = $txt . "Hello " . $empName . " " . $pinNo . ", below are your shifts";// for " . $strdate . " to " . $enddate;
        $txt = $txt . "\n at " . getClientNameByClientId($mysqli, $clid) . " ,  Department " . getDepartmentById($mysqli, $did) . "\n";

        while ($stmt->fetch()) {
            $txt = $txt . "(" . date('d-m-Y', strtotime($shiftDate)) . ") " . $shiftDay . ": " . convertTime($shiftStart) . " - " . convertTime($shiftEnd) . "\n";
        }
        if ($clid == '1') {
            $txt = $txt . "Please Clock in via \n";
            $txt = $txt . "1) UKG (Facial Recognition) \n";
            $txt = $txt . "2) " . DOMAIN_NAME . " APP \n";
            $txt = $txt . "Both methods MUST be followed to avoid pay delays \n";
        }
        /*if((147 <= $clid) && ($clid <= 152)){*/
        if ((147 <= $clid) && (148 != $clid) && (150 != $clid) && ($clid <= 152)) {
            $txt = $txt . "\nPlease click below link to accept your shifts.\n \n";
            $txt = $txt . DOMAIN_URL . "/staff/index.php?username=" . base64_encode($rCanId);
        }
        $txt = $txt . getOtherExistingShifts($mysqli, $did, $strdate, $enddate, $rCanId);

        $txt = $txt . "\nPLEASE accept/reject shifts via APP. Regards " . $consultant . " @ " . DOMAIN_NAME;

        if ($clid == 294) {
            $txt = $txt . "\n Please inform us ASAP if you are asked to work in a different department than your initial roster.";
            $txt = $txt . "\n Sign ins are required in ALL 3 below points TO AVOID PAY DELAYS";
            $txt = $txt . "\n 1. Front security";
            $txt = $txt . "\n 2. " . DOMAIN_NAME . " app OR Tablet on site";
            $txt = $txt . "\n 3. Manual sign in form ( in the line allocated)";
        }

        return $txt;
    }
}

function getShiftTimeInfo($empName, $pinNo, $shiftdate, $client, $clientId, $department, $shiftDay, $shiftstart, $shiftend, $consultant, $candidateId)
{
    $txt = $txt . "Hello " . $empName . " " . $pinNo . ", below is your shift for " . date('d-m-Y', strtotime($shiftdate)) . "\n at " . $client . " \n";
    if ($clientId == '1') {
        $txt = $txt . "Please Clock in via \n";
        $txt = $txt . "1) UKG (Facial Recognition) \n";
        $txt = $txt . "2) " . DOMAIN_NAME . " APP \n";
        $txt = $txt . "Both methods MUST be followed to avoid pay delays \n";
    }
    $txt = $txt . $shiftDay . ": " . convertTime($shiftstart) . " - " . convertTime($shiftend) . "\n";
    if ((147 <= $clientId) && (148 != $clientId) && (150 != $clientId) && ($clientId <= 152)) {
        $txt = $txt . "\nPlease click below link to accept your shifts.\n \n";
        $txt = $txt . DOMAIN_URL . "/staff/index.php?username=" . base64_encode($candidateId);
    }
    $txt = $txt . "\nPLEASE accept/reject shifts via APP. Regards " . $consultant . " @ " . DOMAIN_NAME;
    $footer = "\n\n See a risk? Report it to your supervisor immediately.";
    return $txt . $footer;
}

function getShiftId($mysqli, $rCanId, $consultant, $clid, $stid, $did, $strdate, $enddate)
{
    $SMSStatus = 1;
    $stmt = $mysqli->prepare("SELECT 
								  shift.shiftId
								FROM
								  shift
								WHERE
								  shift.candidateId = ? AND 
								  shift.clientId = ? AND 
								  shift.stateId = ? AND 
								  shift.departmentId = ? AND
								  shift.shiftSMSStatus != ? AND 
								  shift.shiftDate BETWEEN ? AND ?") or die($mysqli->error);
    $stmt->bind_param("siiiiss", $rCanId, $clid, $stid, $did, $SMSStatus, $strdate, $enddate) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->bind_result($shiftId) or die($mysqli->error);
    $num_of_rows = $stmt->num_rows;
    $msgArray = array();
    if ($num_of_rows > 0) {
        while ($stmt->fetch()) {
            $msgArray[] = array('shiftid' => $shiftId);
        }
        return json_encode($msgArray);
    } else {
        return json_encode($msgArray);
    }
}

function confirmAllShifts($mysqli, $canid, $clid, $stid, $did, $strdate, $enddate, $consultantId)
{
    //$shiftSMS = 1;shift.shiftSMSStatus = ? AND
    $shiftStatus = 'CONFIRMED';
    $sql = $mysqli->prepare("UPDATE shift SET shiftStatus = ?,consultantId = ? 
                              WHERE shift.candidateId = ? AND 
								  shift.clientId = ? AND 
								  shift.stateId = ? AND 
								  shift.departmentId = ? AND							
								  shift.shiftDate BETWEEN ? AND ?") or die($mysqli->error);
    $sql->bind_param("sisiiiss", $shiftStatus, $consultantId, $canid, $clid, $stid, $did, $strdate, $enddate) or die($mysqli->error);
    $sql->execute();
    $nrows = $sql->affected_rows;
    if ($nrows > 0) {
        return true;
    } else {
        return false;
    }
}

function cancelShift($mysqli, $shiftid, $shiftStatus, $shiftNote, $consultantId, $user)
{
    $shiftInfo = getShiftInfoByShiftId($mysqli, $shiftid);
    $sql = $mysqli->prepare("UPDATE shift SET shiftStatus = ?,consultantId = ?,shiftNote = ? 
                              WHERE shift.shiftId = ?") or die($mysqli->error);
    $sql->bind_param("sisi", $shiftStatus, $consultantId, $shiftNote, $shiftid) or die($mysqli->error);
    $sql->execute();
    $nrows = $sql->affected_rows;
    if ($nrows > 0) {
        saveCancelledFirebaseShift($mysqli, $shiftid, $shiftStatus);
        updateUserActivityLog($mysqli, $user, $_SERVER['REMOTE_ADDR'], '', $shiftid, 'CANCEL SHIFT', 'CANCEL SHIFT - ID: ' . $shiftid . ' SHIFT INFO: ' . $shiftInfo);
        return true;
    } else {
        return false;
    }
}

function saveSick($mysqli, $shiftid, $shiftStatus, $shiftNote, $consultantId, $user)
{
    $shiftInfo = getShiftInfoByShiftId($mysqli, $shiftid);
    $sql = $mysqli->prepare("UPDATE shift SET shiftStatus = ?,consultantId = ?,shiftNote = ? 
                              WHERE shift.shiftId = ?") or die($mysqli->error);
    $sql->bind_param("sisi", $shiftStatus, $consultantId, $shiftNote, $shiftid) or die($mysqli->error);
    $sql->execute();
    $nrows = $sql->affected_rows;
    if ($nrows > 0) {
        $sql->free_result();
        updateUserActivityLog($mysqli, $user, $_SERVER['REMOTE_ADDR'], '', $shiftid, 'SICK CANCEL SHIFT', 'CANCEL SHIFT - ID: ' . $shiftid . ' SHIFT INFO: ' . $shiftInfo);
        $candidateId = getCandidateIdByShiftId($mysqli, $shiftid);
        $emailAddress = getEmployeeEmail($mysqli, $candidateId);
        $candidateName = getCandidateFullName($mysqli, $candidateId);
        $medicalCertLink = '<table cellspacing="0" cellpadding="0">
                    <tr>
                    <td style="border-radius: 2px;" bgcolor="#3377b1">
                        <a href="' . DOMAIN_URL . '/medicalCertRequest.php?canId=' . base64_encode($candidateId) . '&fullName=' . base64_encode($candidateName) . '&shid=' . base64_encode($shiftid) . '" target="_blank" style="padding: 8px 12px; border: 1px solid #3377b1;border-radius: 2px;font-family: Helvetica, Arial, sans-serif;font-size: 14px; color: #ffffff;text-decoration: none;font-weight:bold;display: inline-block;">Click here to upload the certificate</a>
                    </td>
                    </tr>
                  </table>';
        $mailBody = 'Hi ' . $candidateName . ', <br><br>Please click on  the below link to submit your mandatory medical certificate<br><br>';
        $mailBody = $mailBody . $medicalCertLink;
        generateNotification($emailAddress, '', '', 'Medical Certificate Request - Sick Leave', DEFAULT_EMAIL, DOMAIN_NAME, $mailBody, '', '');
        //update med cert request sent time
        return updateShiftLog($mysqli, $shiftid, $consultantId, $shiftStatus);
        //return true;
    } else {
        return false;
    }
}

function deleteAllFirebaseDeleteShifts($mysqli, $canid, $clid, $stid, $did, $strdate, $enddate)
{
    $sql = $mysqli->prepare("SELECT shiftId FROM shift WHERE shift.candidateId = ? AND 
								  shift.clientId = ? AND 
								  shift.stateId = ? AND 
								  shift.departmentId = ? AND shift.shiftDate BETWEEN ? AND ?") or die($mysqli->error);
    $sql->bind_param("siiiss", $canid, $clid, $stid, $did, $strdate, $enddate) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId) or die($mysqli->error);
    while ($sql->fetch()) {
        addToRemoveFirebaseShiftOnline($mysqli, $shiftId);
    }
}

function deleteAllShifts($mysqli, $canid, $clid, $stid, $did, $strdate, $enddate, $consultantId, $currentUser)
{
    /*deleteAllFirebaseDeleteShifts($mysqli, $canid, $clid, $stid, $did, $strdate, $enddate);
    $del = $mysqli->prepare("DELETE FROM shift WHERE shift.candidateId = ? AND
								  shift.clientId = ? AND
								  shift.stateId = ? AND
								  shift.departmentId = ? AND shift.shiftDate BETWEEN ? AND ?") or die($mysqli->error);
    $del->bind_param("siiiss", $canid, $clid, $stid, $did, $strdate, $enddate) or die($mysqli->error);
    $del->execute();
    $rows_deleted = $del->affected_rows;
    if ($rows_deleted > 0) {
        return true;
    } else {
        return false;
    }*/
    $sql = $mysqli->prepare("SELECT shiftId FROM shift WHERE shift.candidateId = ? AND
								  shift.clientId = ? AND 
								  shift.stateId = ? AND 
								  shift.departmentId = ? AND shift.shiftDate BETWEEN ? AND ?") or die($mysqli->error);
    $sql->bind_param("siiiss", $canid, $clid, $stid, $did, $strdate, $enddate) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($shiftId) or die($mysqli->error);
    $sql->store_result();
    $response = '';
    while ($sql->fetch()) {
        $response = deleteShift($mysqli, $shiftId, $currentUser);
    }
    return $response;
}

function updateRosterAvailability($mysqli, $canId, $strDate, $endDate)
{
    $sql = $mysqli->prepare("SELECT * FROM employee_availability WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->fetch();
    $num_of_rows = $sql->num_rows;
    //$sql->free_result();
    //return $num_of_rows;
    if ($num_of_rows > 0) {
        $up = $mysqli->prepare("UPDATE employee_availability SET from_date = ?, to_date = ? WHERE candidateId = ?") or die($mysqli->error);
        $up->bind_param("sss", $strDate, $endDate, $canId) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            return getAvailableDateRange($mysqli, $canId);
        } else {
            return $mysqli->error; //'Error Updating unavailability Date range';
        }
    } else {
        $ins = $mysqli->prepare("INSERT INTO employee_availability(candidateId,from_date,to_date)VALUES(?,?,?)") or die($mysqli->error);
        $ins->bind_param("sss", $canId, $strDate, $endDate) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows > 0) {
            return getAvailableDateRange($mysqli, $canId);
        } else {
            return $mysqli->error;//'Error Adding unavailability Date range';
        }
    }
}

function getAvailableDateRange($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT from_date,to_date FROM employee_availability WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($from_date, $to_date) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $html = '';
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $html = $html . '<div style="background:#97ffeb; width: 300px;">Unavailable from <strong>' . $from_date . '</strong> to <strong>' . $to_date . '</strong><button type="button" name="removeAvailabilityBtn" id="removeAvailabilityBtn" value="" class="removeAvailabilityBtn btn btn-danger btn-sm">&nbsp;<i class="glyphicon glyphicon-trash"></i>&nbsp;</button></div>';
        }
    } else {
        $html = $html . 'No Date Range selected for unavailability';
    }
    return $html;
}

function checkUnavailability($mysqli, $canId, $shDate)
{
    $sql = $mysqli->prepare("SELECT candidateId,from_date,to_date FROM employee_availability WHERE candidateId = ? AND ? BETWEEN from_date AND to_date") or die($mysqli->error);
    $sql->bind_param("ss", $canId, $shDate) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $num_of_rows = $sql->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function removeUnAvailblity($mysqli, $canId)
{
    $del = $mysqli->prepare("DELETE FROM employee_availability WHERE candidateId = ?") or die($mysqli->error);
    $del->bind_param("s", $canId) or die($mysqli->error);
    $del->execute();
    $del->free_result();
    return getAvailableDateRange($mysqli, $canId);
}

function getRosterNotes($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT rosterNote FROM rosternotes WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->rosterNote;
    } else {
        return null;
    }
}

function saveRosterNote($mysqli, $canid, $rosternote)
{
    $sql = $mysqli->prepare("SELECT rosterNote FROM rosternotes WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canid) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->fetch();
    $num_of_rows = $sql->num_rows;
    $sql->free_result();
    if ($num_of_rows > 0) {
        $up = $mysqli->prepare("UPDATE rosternotes SET rosterNote = ? WHERE candidateId = ?") or die($mysqli->error);
        $up->bind_param("ss", $rosternote, $canid) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows == '1') {
            return getrosterNotes($mysqli, $canid);
        } else {
            return false;
        }
    } else {
        $ins = $mysqli->prepare("INSERT INTO rosternotes(rosterNote,candidateId)VALUES(?,?)") or die($mysqli->error);
        $ins->bind_param("ss", $rosternote, $canid) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            return getrosterNotes($mysqli, $canid);
        } else {
            return false;
        }
    }
}

function dayOfWeek($date)
{
    return date("D", strtotime($date));
}

function getIndustryTypesForDropdown($mysqli)
{
    $select = $mysqli->prepare("SELECT industryId,industryName FROM industry ORDER BY industryName ASC ") or die($mysqli->error);
    $select->execute();
    $select->bind_result($industryId, $industryName) or die($mysqli->error);
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $industryId . '">' . $industryName . '</option>';
    }
    return $opt;
}

function getIndustries($mysqli, $clientId)
{
    if ($clientId == 'All') {
        $select = $mysqli->prepare("SELECT industryId,industryName FROM industry ORDER BY industryName ASC ") or die($mysqli->error);
        $select->execute();
        $select->bind_result($industryId, $industryName) or die($mysqli->error);
    } else {
        $select = $mysqli->prepare("SELECT 
                                      industry.industryId,
                                      industry.industryName
                                    FROM
                                      client
                                      INNER JOIN industry ON (client.industryId = industry.industryId)
                                    WHERE
                                      client.clientId = ?") or die($mysqli->error);
        $select->bind_param("i", $clientId) or die($mysqli->error);
        $select->execute();
        $select->bind_result($industryId, $industryName) or die($mysqli->error);
    }
    $opt = '<option value="All">All</option>';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $industryId . '">' . $industryName . '</option>';
    }
    return $opt;
}

function generateRosterExcel($mysqli, $clid, $stid, $deptid, $startDate, $endDate)
{
    $shiftStatusCheck = 'OPEN';
    $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.shiftStatus,
                                  shift.shiftSMSStatus,
                                  shift.consultantId
                                FROM
                                  shift
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.stateId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.shiftStatus = ? AND 
                                  shift.shiftDate BETWEEN ? AND ?
                                ORDER BY shift.shiftDate,shift.shiftStart") or die($mysqli->error);
    $sql->bind_param("iiisss", $clid, $stid, $deptid, $shiftStatusCheck, $startDate, $endDate) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftDate, $shiftDay, $clientId, $stateId, $departmentId, $candidateId, $shiftStart, $shiftEnd, $workBreak, $shiftNote, $shiftStatus, $shiftSMSStatus,
        $consultantId) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $rosterArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $hrsWorked = calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak);
            $rosterArray[] = array('shiftId' => $shiftId, 'shiftDate' => $shiftDate, 'shiftDay' => $shiftDay, 'clientId' => $clientId, 'stateId' => $stateId, 'departmentId' => $departmentId, 'candidateId' => $candidateId, 'shiftStart' => $shiftStart, 'shiftEnd' => $shiftEnd, 'workBreak' => $workBreak, 'shiftNote' => $shiftNote, 'shiftStatus' => $shiftStatus, 'shiftSMSStatus' => $shiftSMSStatus,
                'consultantId' => $consultantId, 'hrsWorked' => $hrsWorked);
        }
        return $rosterArray;
    }
}

function generateOpenShifts($mysqli, $startDate, $endDate, $shiftStatusCheck)
{
    if ($shiftStatusCheck == 'OPEN') {
        $shiftStatus = 'OPEN';
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,                                                               
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.positionId,
                                  shift.shiftStatus
                                FROM
                                  shift
                                INNER JOIN client ON (shift.clientId = client.clientId)                                 
                                WHERE
                                  shift.shiftStatus = ? AND 
                                  shift.shiftDate BETWEEN ? AND ?
                                ORDER BY client.client") or die($mysqli->error);
        $sql->bind_param("sss", $shiftStatus, $startDate, $endDate) or die($mysqli->error);
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftDate, $shiftDay, $clientId, $stateId, $departmentId, $candidateId, $shiftStart, $shiftEnd, $workBreak, $shiftNote, $positionId, $shiftStatus) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $rosterArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $hrsWorked = calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak);
            $rosterArray[] = array('shiftId' => $shiftId, 'shiftDate' => $shiftDate, 'shiftDay' => $shiftDay, 'clientId' => $clientId, 'stateId' => $stateId, 'departmentId' => $departmentId, 'candidateId' => $candidateId, 'candidatePhone' => getCandidateMobileNoByCandidateId($mysqli, $candidateId), 'positionId' => $positionId, 'shiftStart' => $shiftStart, 'shiftEnd' => $shiftEnd, 'workBreak' => $workBreak, 'shiftNote' => $shiftNote, 'hrsWorked' => $hrsWorked, 'shiftStatus' => $shiftStatus);
        }
        return $rosterArray;
    }
}

function generateClockInShifts($mysqli, $startDate, $endDate, $shiftStatusCheck)
{
    if ($shiftStatusCheck == 'CLOCKIN') {
        $sql = $mysqli->prepare("SELECT 
                                      timeclock.shiftId,
                                      timeclock.shiftDate,
                                      timeclock.shiftDay,
                                      timeclock.clientId,
                                      shift.stateId,
                                      timeclock.deptId,
                                      timeclock.candidateId,
                                      timeclock.checkIn,
                                      timeclock.checkOut,
                                      timeclock.workBreak,
                                      shift.shiftNote,
                                      timeclock.positionId
                                    FROM
                                      timeclock
                                      INNER JOIN client ON (timeclock.clientId = client.clientId)
                                      INNER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                    WHERE
                                      timeclock.shiftDate BETWEEN ? AND ?
                                    ORDER BY
                                      timeclock.clientId") or die($mysqli->error);
        $sql->bind_param("ss", $startDate, $endDate) or die($mysqli->error);
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftDate, $shiftDay, $clientId, $stateId, $deptId, $candidateId, $checkIn, $checkOut, $workBreak, $shiftNote, $positionId) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $rosterArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            //$hrsWorked = calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak);
            if ($checkOut == '00:00') {
                $rosterArray[] = array('shiftId' => $shiftId, 'shiftDate' => $shiftDate, 'shiftDay' => $shiftDay, 'clientId' => $clientId, 'stateId' => $stateId, 'departmentId' => $deptId, 'candidateId' => $candidateId, 'candidatePhone' => getCandidateMobileNoByCandidateId($mysqli, $candidateId), 'positionId' => $positionId, 'shiftStart' => $checkIn, 'shiftEnd' => $checkOut, 'workBreak' => $workBreak, 'shiftNote' => $shiftNote);
            }
        }
        return $rosterArray;
    }
}

function generateRosterData($mysqli, $clid, $stid, $deptid, $positionid, $startDate, $endDate, $shiftStatusCheck)
{
    //$shiftStatusCheck = 'CONFIRMED';
    $allocationStatus = 1;
    if ($shiftStatusCheck == 'UNCONFIRMED') {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.positionId,
                                  shift.shiftStatus
                                FROM
                                  shift
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.stateId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.positionId = ? AND
                                  shift.shiftDate BETWEEN ? AND ?
                                ORDER BY shift.shiftDate,shift.shiftStart") or die($mysqli->error);
        $sql->bind_param("iiiiss", $clid, $stid, $deptid, $positionid, $startDate, $endDate) or die($mysqli->error);
    } elseif ($shiftStatusCheck == 'ROSTER') {
        $shiftStatus = 'CONFIRMED';
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,                                                               
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.positionId,
                                  shift.shiftStatus
                                FROM
                                  shift                                    
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.stateId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.positionId = ? AND
                                  shift.shiftStatus = ? AND 
                                  shift.shiftDate BETWEEN ? AND ?
                                ORDER BY shift.candidateId,shift.shiftDate,shift.shiftStart") or die($mysqli->error);
        $sql->bind_param("iiiisss", $clid, $stid, $deptid, $positionid, $shiftStatus, $startDate, $endDate) or die($mysqli->error);
    } elseif ($shiftStatusCheck == 'ALLROSTER') {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,                                                               
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.positionId,
                                  shift.shiftStatus
                                FROM
                                  shift                                    
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.stateId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.positionId = ? AND
                                  shift.shiftStatus IN ('CONFIRMED','OPEN') AND 
                                  shift.shiftDate BETWEEN ? AND ?
                                ORDER BY shift.candidateId,shift.shiftDate,shift.shiftStart") or die($mysqli->error);
        $sql->bind_param("iiiiss", $clid, $stid, $deptid, $positionid, $startDate, $endDate) or die($mysqli->error);
    } elseif ($shiftStatusCheck == 'EXPORTEV') {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,                                                               
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.positionId,
                                  shift.shiftStatus
                                FROM
                                  shift                                    
                                WHERE
                                  shift.clientId = ? AND
                                  shift.shiftStatus IN ('CONFIRMED','OPEN') AND 
                                  shift.shiftDate BETWEEN ? AND ?
                                ORDER BY shift.departmentId,shift.candidateId,shift.shiftDate,shift.shiftStart") or die($mysqli->error);
        $sql->bind_param("iss", $clid, $startDate, $endDate) or die($mysqli->error);
    } elseif ($shiftStatusCheck == 'EXPORTNOANSWER') {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,                                                               
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.positionId,
                                  shift.shiftStatus
                                FROM
                                  shift                                    
                                WHERE
                                  shift.clientId = ? AND
                                  shift.shiftStatus IN ('NOANSWER') AND 
                                  shift.shiftDate BETWEEN ? AND ?
                                ORDER BY shift.departmentId,shift.candidateId,shift.shiftDate,shift.shiftStart") or die($mysqli->error);
        $sql->bind_param("iss", $clid, $startDate, $endDate) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,                                                               
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.positionId,
                                  shift.shiftStatus
                                FROM
                                  shift                                    
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.stateId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.positionId = ? AND
                                  shift.shiftStatus = ? AND 
                                  shift.shiftDate BETWEEN ? AND ?
                                ORDER BY shift.candidateId,shift.shiftDate,shift.shiftStart") or die($mysqli->error);
        $sql->bind_param("iiiisss", $clid, $stid, $deptid, $positionid, $shiftStatusCheck, $startDate, $endDate) or die($mysqli->error);
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftDate, $shiftDay, $clientId, $stateId, $departmentId, $candidateId, $shiftStart, $shiftEnd, $workBreak, $shiftNote, $positionId, $shiftStatus) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $rosterArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $hrsWorked = calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak);
            $rosterArray[] = array('shiftId' => $shiftId, 'shiftDate' => $shiftDate, 'shiftDay' => $shiftDay, 'clientId' => $clientId, 'stateId' => $stateId, 'departmentId' => $departmentId, 'candidateId' => $candidateId, 'candidatePhone' => getCandidateMobileNoByCandidateId($mysqli, $candidateId), 'positionId' => $positionId, 'shiftStart' => $shiftStart, 'shiftEnd' => $shiftEnd, 'workBreak' => $workBreak, 'shiftNote' => $shiftNote, 'hrsWorked' => $hrsWorked, 'shiftStatus' => $shiftStatus, 'inductionCode' => getCandidateAttribute($mysqli, $candidateId, $departmentId));
        }
        return $rosterArray;
    }
}

function generateEmployeesAllocated($mysqli, $clid, $stid, $deptid, $positionid, $shiftStatusCheck)
{
    if ($shiftStatusCheck == 'EVERYONE') {
        $allocationStatus = 1;
        $empStatus = 'ACTIVE';
        $auditStatus = 1;
        $sql = $mysqli->prepare("SELECT 
                                  candidate.firstName,
                                  candidate.lastName,
                                  candidate.nickname,
                                  candidate.sex,
                                  candidate.mobileNo,
                                  candidate.email,
                                  candidate.candidateId
                                FROM
                                  candidate
                                  INNER JOIN employee_allocation ON (candidate.candidateId = employee_allocation.candidateId)
                                  INNER JOIN employee_positions ON (employee_allocation.candidateId = employee_positions.candidateId)
                                WHERE
                                  employee_allocation.clientId = ? AND 
                                  employee_allocation.stateId = ? AND 
                                  employee_allocation.deptId = ? AND 
                                  employee_positions.positionid = ? AND
                                  employee_allocation.status = ? AND 
                                  candidate.empStatus = ? AND
                                  candidate.auditStatus = ? 
                                ORDER BY
                                  candidate.firstName") or die($mysqli->error);
        $sql->bind_param("iiiiisi", $clid, $stid, $deptid, $positionid, $allocationStatus, $empStatus, $auditStatus) or die($mysqli->error);
        $sql->execute();
        $sql->store_result();
        $sql->bind_result($firstName, $lastName, $nickname, $sex, $mobileNo, $email, $candidateId) or die($mysqli->error);
        $num_of_rows = $sql->num_rows;
        $rosterArray = array();
        if ($num_of_rows > 0) {
            while ($sql->fetch()) {
                $rosterArray[] = array('candidateId' => $candidateId, 'firstName' => $firstName, 'lastName' => $lastName, 'nickname' => $nickname, 'gender' => strtoupper($sex), 'mobileNo' => $mobileNo, 'email' => $email, 'client' => getClientNameByClientId($mysqli, $clid), 'state' => getStateById($mysqli, $stid), 'department' => getDepartmentById($mysqli, $deptid), 'position' => getPositionByPositionId($mysqli, $positionid));
            }
            return $rosterArray;
        }
    }
}

function generateEmployeesAllocatedPerClient($mysqli, $clid, $shiftStatusCheck)
{
    if ($shiftStatusCheck == 'ALLPERCLIENT') {
        $allocationStatus = 1;
        $empStatus = 'ACTIVE';
        $auditStatus = 1;
        $sql = $mysqli->prepare("SELECT DISTINCT
                                  candidate.firstName,
                                  candidate.lastName,
                                  candidate.nickname,
                                  candidate.sex,
                                  candidate.mobileNo,
                                  candidate.email,
                                  candidate.candidateId
                                FROM
                                  candidate
                                  INNER JOIN employee_allocation ON (candidate.candidateId = employee_allocation.candidateId)
                                  INNER JOIN employee_positions ON (employee_allocation.candidateId = employee_positions.candidateId)
                                WHERE
                                  employee_allocation.clientId = ? AND 
                                  employee_allocation.status = ? AND 
                                  candidate.empStatus = ? AND
                                  candidate.auditStatus = ? 
                                ORDER BY
                                  candidate.firstName") or die($mysqli->error);
        $sql->bind_param("iisi", $clid, $allocationStatus, $empStatus, $auditStatus) or die($mysqli->error);
        $sql->execute();
        $sql->store_result();
        $sql->bind_result($firstName, $lastName, $nickname, $sex, $mobileNo, $email, $candidateId) or die($mysqli->error);
        $num_of_rows = $sql->num_rows;
        $rosterArray = array();
        if ($num_of_rows > 0) {
            while ($sql->fetch()) {
                $rosterArray[] = array('candidateId' => $candidateId, 'firstName' => $firstName, 'lastName' => $lastName, 'nickname' => $nickname, 'gender' => strtoupper($sex), 'mobileNo' => $mobileNo, 'email' => $email, 'client' => getClientNameByClientId($mysqli, $clid), 'state' => getStateById($mysqli, $stid), 'department' => getDepartmentById($mysqli, $deptid), 'position' => getPositionByPositionId($mysqli, $positionid));
            }
            return $rosterArray;
        }
    }
}

function validateExistingCandidatePosition($mysqli, $position)
{
    $sqlchk = $mysqli->prepare("SELECT positionName FROM candidate_position WHERE positionName = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $position) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function addCandidatePosition($mysqli, $position)
{
    $ins = $mysqli->prepare("INSERT INTO candidate_position(positionName) VALUES(?)") or die($mysqli->error);
    $ins->bind_param("s", $position) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows == '1') {
        $ins->free_result();
        return retrieveCandidatePositions($mysqli);
    } else {
        return '<tr><td colspan="2">' . $mysqli->error . '</td></tr>';
    }
}

function getCandidatePositionNameById($mysqli, $positionid)
{
    $sql = $mysqli->prepare("SELECT positionName FROM candidate_position WHERE positionid = ?") or die($mysqli->error);
    $sql->bind_param("i", $positionid) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->positionName;
    } else {
        return null;
    }
}

function retrieveCandidatePositions($mysqli)
{
    $sql = $mysqli->prepare("SELECT positionid,positionName FROM candidate_position") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($positionid, $positionName) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td class="positionid" data-positionid="' . $positionid . '" data-position="' . $positionName . '" >' . $positionid . '</td><td>' . $positionName . '</td><td><button type="button" name="editPositionBtn" id="editPositionBtn" value="remove" class="editPositionBtn btn btn-default btn-sm">&nbsp;<i class="glyphicon glyphicon-pencil"></i>&nbsp;</button><button type="button" name="removePositionBtn" id="removePositionBtn" value="remove" class="removePositionBtn btn btn-danger btn-sm">&nbsp;<i class="glyphicon glyphicon-trash"></i>&nbsp;</button></td></tr>';
    }
    return $row;
}

function removeCandidatePosition($mysqli, $positionid)
{
    $sql = $mysqli->prepare("DELETE FROM candidate_position WHERE positionid = ?") or die($mysqli->error);
    $sql->bind_param("i", $positionid) or die($mysqli->error);
    $sql->execute();
    $sql->free_result();
    return true;
}

function editCandidatePosition($mysqli, $positionid, $position)
{
    $up = $mysqli->prepare("UPDATE candidate_position SET positionName = ? WHERE positionid = ?") or die($mysqli->error);
    $up->bind_param("si", $position, $positionid) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    if ($nrows == '1') {
        $up->free_result();
        return retrieveCandidatePositions($mysqli);
    } else {
        return '<tr><td colspan="2">' . $mysqli->error . '</td></tr>';
    }
}

function getCandidatePositionList($mysqli)
{
    $select = $mysqli->prepare("SELECT positionid,positionName FROM candidate_position ORDER BY positionName ASC ") or die($mysqli->error);
    $select->execute();
    $select->bind_result($positionid, $positionName) or die($mysqli->error);
    /*$opt = '<option disabled="disabled" selected="selected" value="None">Select Position</option>';*/
    $opt = '<option value="All">All</option>';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $positionid . '">' . $positionName . '</option>';
    }
    return $opt;
}

function getCandidatePositionListDefault($mysqli)
{
    $select = $mysqli->prepare("SELECT positionid,positionName FROM candidate_position ORDER BY positionName ASC ") or die($mysqli->error);
    $select->execute();
    $select->bind_result($positionid, $positionName) or die($mysqli->error);
    $opt = '<option disabled="disabled" selected="selected" value="0">Select Position</option>';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $positionid . '">' . $positionName . '</option>';
    }
    return $opt;
}

function getClientBasedPositionList($mysqli, $clId)
{
    $select = $mysqli->prepare("SELECT DISTINCT
                                  client_position.posId,
                                  candidate_position.positionName
                                FROM
                                  client_position
                                  INNER JOIN candidate_position ON (client_position.posId = candidate_position.positionid)
                                WHERE
                                  clientId = ?
                                ORDER BY
                                  candidate_position.positionName") or die($mysqli->error);
    $select->bind_param("i", $clId) or die($mysqli->error);
    $select->execute();
    $select->bind_result($posId, $positionName) or die($mysqli->error);
    $opt = '';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $posId . '">' . $positionName . '</option>';
    }
    return $opt;
}

function getPositionListForReport($mysqli)
{
    $select = $mysqli->prepare("SELECT positionid,positionName FROM candidate_position ORDER BY positionName ASC ") or die($mysqli->error);
    $select->execute();
    $select->bind_result($positionid, $positionName) or die($mysqli->error);
    $opt = '<option disabled="disabled" selected="selected" value="None">Select Position</option><option value="All">All</option>';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $positionid . '">' . $positionName . '</option>';
    }
    return $opt;
}

function validateEmployeePosition($mysqli, $candidateId, $positionid)
{
    $sqlchk = $mysqli->prepare("SELECT positionid FROM employee_positions WHERE candidateId = ? AND positionid = ?") or die ($mysqli->error);
    $sqlchk->bind_param("si", $candidateId, $positionid) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function assignPositionEmpoloyee($mysqli, $candidateId, $positionid)
{
    if (!validateEmployeePosition($mysqli, $candidateId, $positionid)) {
        $ins = $mysqli->prepare("INSERT INTO employee_positions(candidateId,positionid) VALUES(?,?)") or die($mysqli->error);
        $ins->bind_param("si", $candidateId, $positionid) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            return getAssignedPositions($mysqli, $candidateId);
        } else {
            return '<tr><td colspan="2">' . $mysqli->error . '</td></tr>';
        }
    } else {
        return getAssignedPositions($mysqli, $candidateId);
    }
}

function removeAssignedPosition($mysqli, $positionid, $candidateId)
{
    $sql = $mysqli->prepare("DELETE FROM employee_positions WHERE positionid = ? AND candidateId = ?") or die($mysqli->error);
    $sql->bind_param("is", $positionid, $candidateId) or die($mysqli->error);
    $sql->execute();
    $sql->free_result();
    return getAssignedPositions($mysqli, $candidateId);
}

function getAssignedPositions($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT positionid FROM employee_positions WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($positionid) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td class="positionid" data-positionid="' . $positionid . '" data-position="' . getPositionByPositionId($mysqli, $positionid) . '" >' . getPositionByPositionId($mysqli, $positionid) . '</td><td><button type="button" name="removeEmpPositionBtn" id="removeEmpPositionBtn" value="remove" class="removeEmpPositionBtn btn btn-danger btn-sm">&nbsp;<i class="glyphicon glyphicon-trash"></i>&nbsp;</button></td></tr>';
    }
    return $row;
}

function getPositionByPositionId($mysqli, $positionid)
{
    $sql = $mysqli->prepare("SELECT positionName FROM candidate_position WHERE positionid = ?") or die($mysqli->error);
    $sql->bind_param("i", $positionid) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->positionName;
    } else {
        return null;
    }
}

function getPositionIdByPosition($mysqli, $positionName)
{
    $sql = $mysqli->prepare("SELECT positionid FROM candidate_position WHERE positionName = ?") or die($mysqli->error);
    $sql->bind_param("i", $positionName) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->positionid;
    } else {
        return null;
    }
}

function convertTime($time)
{
    $convertingTime = strtotime($time);
    return date("g:i A", $convertingTime);
}

function getPositionsForDropdown($mysqli)
{
    $sql = $mysqli->prepare("SELECT positionid, positionName FROM candidate_position ORDER BY positionName ASC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($positionid, $positionName) or die($mysqli->error);
    $option = '<option disabled="disabled" selected="selected" value="None">Select Position</option>';
    while ($sql->fetch()) {
        $option = $option . '<option value="' . $positionid . '">' . $positionName . '</option>';
    }
    return $option;
}

function getEmployeeVisaTypeId($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT visaTypeId FROM employee_visatype WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->visaTypeId;
    } else {
        return null;
    }
}

function getEmployeeVisaType($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT visaTypeId FROM employee_visatype WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return getVisaTypeById($mysqli, $obj->visaTypeId);
    } else {
        return null;
    }
}

function getEmployeeVisaInformation($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT employee_visatype.expiryDate, 
                                    visatype.visaType
                                  FROM
                                      employee_visatype
                                  INNER JOIN visatype ON ( employee_visatype.visaTypeId = visatype.id)
                                  WHERE employee_visatype.candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($expiryDate, $visaType) or die($mysqli->error);
    $result = '';
    while ($sql->fetch()) {
        $result = $visaType . '#' . $expiryDate;
    }
    return $result;
}

function generateRosterReport($mysqli, $clid, $stateId, $industryId, $posid, $canid, $startDate, $endDate, $shStatus)
{
    $query = '';
    $allocationStatus = 1;
    if ($shStatus == 'ALL') {
        $statusCheck = '';
    } else {
        $statusCheck = 'shift.shiftStatus = ? AND ';
    }
    /*else if($shStatus == 'CONFIRMED'){
        $statusCheck = 'shift.shiftStatus = ? AND ';
    }else if($shStatus == 'UNFILLED'){
        $statusCheck = 'shift.shiftStatus = ? AND ';
    }*/
    if (empty($canid)) {
        $candidateCheck = '';
    } else {
        $candidateCheck = 'shift.candidateId = ? AND ';
    }
    if ($posid != 'All') {
        $posCheck = 'shift.positionId = ? AND ';
    } else {
        $posCheck = '';
    }
    if ($clid != 'All') {
        $clientCheck = 'shift.clientId = ? AND ';
    } else {
        $clientCheck = '';
    }
    /*if($stateId == 0) {
        $stateId = 'All';
    }*/
    if ($stateId != 'All') {
        $stateCheck = 'shift.stateId = ? AND ';
    } else {
        $stateCheck = '';
    }
    if ($industryId != 'All') {
        $industryCheck = 'client.industryId = ? AND ';
    } else {
        $industryCheck = '';
    }

    $query = $query . 'SELECT shift.shiftId,
                       shift.shiftDate,
                       shift.shiftDay,
                       shift.clientId,
                       shift.stateId,
                       shift.departmentId,
                       shift.candidateId,
                       shift.shiftStart,
                       shift.shiftEnd,
                       shift.workBreak,
                       shift.shiftNote,
                       shift.shiftStatus,
                       shift.shiftSMSStatus,
                       shift.consultantId,
                       shift.positionId,
                       shift.timeSheetStatus,
                       employee_allocation.ohsCheckStatus,
                       employee_allocation.ohsCheckedBy,
                       employee_allocation.ohsCheckedTime
                       FROM shift 
                       INNER JOIN client 
                       ON (shift.clientId = client.clientId) 
                       LEFT OUTER JOIN employee_allocation 
                       ON (shift.candidateId = employee_allocation.candidateId) 
                       AND (shift.clientId = employee_allocation.clientId) 
                       AND (shift.stateId = employee_allocation.stateId) 
                       AND (shift.departmentId = employee_allocation.deptId) WHERE ';
    $query = $query . $clientCheck;
    $query = $query . $posCheck;
    $query = $query . $candidateCheck;
    $query = $query . $stateCheck;
    $query = $query . $industryCheck;
    $query = $query . $statusCheck;
    $query = $query . 'shift.shiftDate BETWEEN ? AND ? ORDER BY shift.candidateId ASC, shift.shiftDate DESC'; //AND employee_allocation.status = ?

    if ($clid == 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("ss", $startDate, $endDate) or die($mysqli->error);
    } else if ($clid == 'All' && $posid != 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iss", $posid, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId == 'All' && $industryId != 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iss", $industryId, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus == 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("sss", $canid, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus != 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("ssss", $canid, $shStatus, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid == 'All' && $posid != 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus != 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iisss", $posid, $canid, $shStatus, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus != 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiissss", $clid, $posid, $stateId, $canid, $shStatus, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiss", $clid, $stateId, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId != 'All' && $industryId != 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiiiss", $clid, $posid, $stateId, $industryId, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiiss", $clid, $posid, $stateId, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId != 'All' && $industryId != 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiiisss", $clid, $posid, $stateId, $industryId, $shStatus, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiisss", $clid, $posid, $stateId, $shStatus, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus != 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("issss", $clid, $canid, $shStatus, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus == 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("isss", $clid, $canid, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("isss", $clid, $shStatus, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("sss", $shStatus, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iisss", $clid, $stateId, $shStatus, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus == 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("isss", $clid, $canid, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iss", $clid, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid == 'All' && $posid != 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("isss", $posid, $shStatus, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid == 'All' && $posid != 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiss", $posid, $stateId, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iss", $stateId, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("isss", $stateId, $shStatus, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid == 'All' && $posid != 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iisss", $posid, $stateId, $shStatus, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId != 'All' && $industryId != 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iisss", $stateId, $industryId, $shStatus, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId != 'All' && $industryId != 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiss", $stateId, $industryId, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiss", $clid, $posid, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iisss", $clid, $posid, $shStatus, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId == 'All' && $industryId != 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiisss", $clid, $posid, $industryId, $shStatus, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid == 'All' && $posid != 'All' && $stateId != 'All' && $industryId != 'All' && $shStatus == 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiisss", $posid, $stateId, $industryId, $canid, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId != 'All' && $industryId != 'All' && $shStatus == 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiiisss", $clid, $posid, $stateId, $industryId, $canid, $startDate, $endDate) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId != 'All' && $industryId != 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiiss", $clid, $stateId, $industryId, $startDate, $endDate) or die($mysqli->error);
    }


    /*
    if ($clid == 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("sss", $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid == 'All' && $posid != 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("isss", $posid, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId == 'All' && $industryId != 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("isss", $industryId, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus == 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("ssss", $canid, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus != 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("sssss", $canid, $shStatus, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid == 'All' && $posid != 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus != 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iissss", $posid, $canid, $shStatus, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus != 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiisssss", $clid, $posid, $stateId, $canid, $shStatus, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iisss", $clid, $stateId, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId != 'All' && $industryId != 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiiisss", $clid, $posid, $stateId, $industryId, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiisss", $clid, $posid, $stateId, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId != 'All' && $industryId != 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiiissss", $clid, $posid, $stateId, $industryId, $shStatus, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiissss", $clid, $posid, $stateId, $shStatus, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus != 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("isssss", $clid, $canid, $shStatus, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus == 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("issss", $clid, $canid, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("issss", $clid, $shStatus, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("ssss", $shStatus, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iissss", $clid, $stateId, $shStatus, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus == 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("issss", $clid, $canid, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("isss", $clid, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid == 'All' && $posid != 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("issss", $posid, $shStatus, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid == 'All' && $posid != 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iisss", $posid, $stateId, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("isss", $stateId, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("issss", $stateId, $shStatus, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid == 'All' && $posid != 'All' && $stateId != 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iissss", $posid, $stateId, $shStatus, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId != 'All' && $industryId != 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iissss", $stateId, $industryId, $shStatus, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid == 'All' && $posid == 'All' && $stateId != 'All' && $industryId != 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iisss", $stateId, $industryId, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iisss", $clid, $posid, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId == 'All' && $industryId == 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iissss", $clid, $posid, $shStatus, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId == 'All' && $industryId != 'All' && $shStatus != 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiissss", $clid, $posid, $industryId, $shStatus, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid == 'All' && $posid != 'All' && $stateId != 'All' && $industryId != 'All' && $shStatus == 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiissss", $posid, $stateId, $industryId, $canid, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid != 'All' && $stateId != 'All' && $industryId != 'All' && $shStatus == 'ALL' && !empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiiissss", $clid, $posid, $stateId, $industryId, $canid, $startDate, $endDate, $allocationStatus) or die($mysqli->error);
    } else if ($clid != 'All' && $posid == 'All' && $stateId != 'All' && $industryId != 'All' && $shStatus == 'ALL' && empty($canid)) {
        $sql = $mysqli->prepare($query) or die($mysqli->error);
        $sql->bind_param("iiiss", $clid, $stateId, $industryId, $startDate, $endDate) or die($mysqli->error);
    }
    */
    $sql->execute();
    $sql->bind_result($shiftId, $shiftDate, $shiftDay, $clientId, $stateId, $departmentId, $candidateId, $shiftStart, $shiftEnd, $workBreak, $shiftNote, $shiftStatus, $shiftSMSStatus, $consultantId, $positionId, $timeSheetStatus, $ohsCheckStatus,
        $ohsCheckedBy,
        $ohsCheckedTime) or die($mysqli->error);
    $sql->store_result();
    $num_of_rows = $sql->num_rows;
    $rosterArray = array();
    $empVariationAgreementStatus = '';
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            if (displayStudentIndicator($mysqli, $candidateId)) {
                $studentIndicator = 'STUDENT';
            } else {
                $studentIndicator = '';
            }
            $hrsWorked = calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak);
            $clockIns = getClockInOut($mysqli, $shiftId);
            foreach ($clockIns as $clock) {
                $checkIn = $clock['checkIn'];
                $checkOut = $clock['checkOut'];
            }
            $consultantName = getConsultantName($mysqli, $consultantId);
            $vacc1 = getCandidateVaccinationDocType($mysqli, $candidateId, 57);
            $vacc2 = getCandidateVaccinationDocType($mysqli, $candidateId, 58);
            $vacc3 = getCandidateVaccinationDocType($mysqli, $candidateId, 59);
            if (displayNoPhoneIndicator($mysqli, $candidateId)) {
                $noPhoneIndicator = 'NO';
            } else {
                $noPhoneIndicator = 'YES';
            }
            $ohsTime = getOHSSentTimeByCandidateId($mysqli, $candidateId, $clientId, $stateId, $departmentId);
            $doc_info = getOHSDocumentInfo($mysqli, $candidateId, $clientId, $stateId, $departmentId);
            $doc_submitted_time = '';
            $feedback = '';
            if (!empty($doc_info)) {
                $doc = explode('@', $doc_info);
                $doc_submitted_time = $doc[0];
                if ($doc[1] == '!!') {
                    $feedback = 'ASAP';
                }
            }
            $supervisorEdit = getShiftSupervisorStatus($mysqli, $shiftId);
            if (validateDocumentTypeSigned($mysqli, $candidateId, 85)) {
                $empVariationAgreementStatus = 'SIGNED';
            } else {
                $empVariationAgreementStatus = '';
            }
            $rosterArray[] = array('shiftId' => $shiftId,
                'shiftDate' => $shiftDate,
                'shiftDay' => $shiftDay,
                'client' => getClientNameByClientId($mysqli, $clientId),
                'industry' => getIndustryNameById($mysqli, getIndustryByClient($mysqli, $clientId)),
                'state' => getStateById($mysqli, $stateId),
                'clientId' => $clientId,
                'stateId' => $stateId,
                'departmentId' => $departmentId,
                'department' => getDepartmentById($mysqli, $departmentId),
                'candidateId' => $candidateId,
                'candidate' => getCandidateFirstNameByCandidateId($mysqli, $candidateId) . ' ' . getCandidateLastNameByCandidateId($mysqli, $candidateId),
                'candidatePhone' => getCandidateMobileNoByCandidateId($mysqli, $candidateId),
                'email' => getEmployeeEmail($mysqli, $candidateId),
                'shiftStart' => $shiftStart,
                'shiftEnd' => $shiftEnd,
                'workBreak' => $workBreak,
                'shiftNote' => $shiftNote,
                'shiftStatus' => $shiftStatus,
                'shiftSMSStatus' => $shiftSMSStatus,
                'consultantId' => $consultantId,
                'position' => getPositionByPositionId($mysqli, $positionId),
                'timeSheetStatus' => $timeSheetStatus,
                'hrsWorked' => $hrsWorked,
                'visaType' => getEmployeeVisaType($mysqli, $candidateId),
                'dob' => getCandidateDOBById($mysqli, $candidateId),
                'gender' => getGenderById($mysqli, $candidateId),
                'employee_type' => $studentIndicator,
                'checkIn' => $checkIn,
                'checkOut' => $checkOut,
                'supervisorEdit' => $supervisorEdit,
                'consultantName' => $consultantName,
                'vacc1' => $vacc1,
                'vacc2' => $vacc2,
                'vacc3' => $vacc3,
                'noPhone' => $noPhoneIndicator,
                'ohsTime' => $ohsTime,
                'ohsCheckStatus' => $ohsCheckStatus,
                'ohsCheckedBy' => $ohsCheckedBy,
                'ohsCheckedTime' => $ohsCheckedTime,
                'ohsSubmittedTime' => $doc_submitted_time,
                'feedback' => $feedback,
                'maxStudentShiftIndicator' => getStudentEmployeeMaxShiftCount($mysqli, $candidateId, $startDate, $endDate),
                'empVariationSubmission' => $empVariationAgreementStatus);
        }
    }
    return $rosterArray;
}

function getShiftSupervisorStatus($mysqli, $shiftId)
{
    $sql = $mysqli->prepare("SELECT supervisorEdit FROM timesheet WHERE shiftId = ?") or die($mysqli->error);
    $sql->bind_param("i", $shiftId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->supervisorEdit;
    } else {
        return null;
    }
}

function getOHSDocumentInfo($mysqli, $empId, $clientId, $stateId, $deptId)
{
    try {
        $docType = 60;
        $status = 'SIGNED';
        $sql = $mysqli->prepare("SELECT validFrom,validTo,createdDate FROM candidate_document WHERE candidateId = ? AND docTypeId = ? AND notes = ?") or die ($mysqli->error);
        $sql->bind_param("sis", $empId, $docType, $status) or die($mysqli->error);
        $sql->execute();
        $sql->bind_result($validFrom, $validTo, $createdDate) or die($mysqli->error);
        $sql->store_result();
        $ohs_doc_data = '';
        if ($sql->num_rows > 0) {
            while ($sql->fetch()) {
                if (!empty($validFrom)) {
                    $valid = explode('-', $validFrom);
                    if (($empId == $valid[0]) && ($clientId == $valid[1]) && ($stateId == $valid[2]) && ($deptId == $valid[3])) {
                        $ohs_doc_data = $createdDate . '@' . $validTo;
                    }
                } else {
                    $ohs_doc_data = 'NA';
                }
            }
        }
        return $ohs_doc_data;
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function getClockInOut($mysqli, $shiftId)
{
    $sql = $mysqli->prepare("SELECT checkIn, checkOut, checkin_latitude, checkin_longitude, checkout_latitude, checkout_longitude FROM timeclock WHERE shiftId = ?") or die($mysqli->error);
    $sql->bind_param("i", $shiftId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($checkIn, $checkOut, $checkin_latitude, $checkin_longitude, $checkout_latitude, $checkout_longitude) or die($mysqli->error);
    $data = array();
    while ($sql->fetch()) {
        $data[] = array('checkIn' => $checkIn, 'checkOut' => $checkOut, 'checkin_latitude' => $checkin_latitude, 'checkin_longitude' => $checkin_longitude, 'checkout_latitude' => $checkout_latitude, 'checkout_longitude' => $checkout_longitude);
    }
    return $data;
}

function validateTimesheetAuditReport($mysqli, $weekEndingDateStart)
{
    $sqlchk = $mysqli->prepare("SELECT weekendingDate FROM timesheet_audit_report WHERE weekendingDate = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $weekEndingDateStart) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function saveTimesheetAuditReport($mysqli, $weekEndingDateStart, $reportPath)
{
    if (!validateTimesheetAuditReport($mysqli, $weekEndingDateStart)) {
        $ins = $mysqli->prepare("INSERT INTO timesheet_audit_report(weekendingDate,filePath) VALUES (?,?)") or die($mysqli->error);
        $ins->bind_param("ss", $weekEndingDateStart, $reportPath) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows > 0) {
            return 'Added';
        } else {
            return $mysqli->error;
        }
    } else {
        $up = $mysqli->prepare("UPDATE timesheet_audit_report SET filePath = ? WHERE weekendingDate = ?") or die($mysqli->error);
        $up->bind_param("ss", $reportPath, $weekEndingDateStart) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows == '1') {
            $up->free_result();
            return 'updated';
        } else {
            return $mysqli->error;
        }
    }
}

function getTimeSheetAuditReportsList($mysqli)
{
    $sql = $mysqli->prepare("SELECT 
                              timesheet_audit_report.weekendingDate,
                              timesheet_audit_report.filePath
                            FROM
                              timesheet_audit_report
                            ORDER BY timesheet_audit_report.weekendingDate DESC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($weekendingDate, $filePath) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>' . $weekendingDate . '&nbsp;</td><td><a href=".' . $filePath . '"> Download Report</a></td></tr>';
    }
    return $row;
}

function getPayrollCalculationReportsList($mysqli)
{
    $sql = $mysqli->prepare("SELECT 
                              payroll_reports.payrunId,
                              payroll_reports.weekendingDate,
                              payroll_reports.filePath
                            FROM
                              payroll_reports
                            ORDER BY payroll_reports.payrunId DESC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($payrunId, $weekendingDate, $filePath) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>' . $payrunId . '</td><td>' . $weekendingDate . '&nbsp;</td><td><a href=".' . $filePath . '"> Download Report</a></td></tr>';
    }
    return $row;
}

function savePayrollReport($mysqli, $payrunId, $weekendingDate, $filePath)
{
    $ins = $mysqli->prepare("INSERT INTO payroll_reports(payrunId,weekendingDate,filePath) VALUES(?,?,?)") or die($mysqli->error);
    $ins->bind_param("iss", $payrunId, $weekendingDate, $filePath) or die($mysqli->error);
    $ins->execute();
}

function getIndustryNameById($mysqli, $industryId)
{
    $sql = $mysqli->prepare("SELECT industryName FROM industry WHERE industryId = ?") or die($mysqli->error);
    $sql->bind_param("i", $industryId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->industryName;
    } else {
        return null;
    }
}

function getIndustryByClient($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT industryId FROM client WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->industryId;
    } else {
        return null;
    }
}

function getSupervisors($mysqli, $iclientId, $istateId, $ideptId)
{
    $sup = $mysqli->prepare("SELECT supervisorId,supervisorName,phone,email,clientId,stateId,deptId FROM supervisor WHERE clientId = ? AND stateId = ? AND deptId = ?") or die($mysqli->error);
    $sup->bind_param("iii", $iclientId, $istateId, $ideptId) or die($mysqli->error);
    $sup->execute();
    $sup->bind_result($supervisorId, $supervisorName, $phone, $email, $clientId, $stateId, $deptId) or die($mysqli->error);
    $row = '';
    while ($sup->fetch()) {
        $row = $row . '<tr><td>' . $supervisorName . '</td><td>' . $phone . '</td><td>' . $email . '</td><td data-supervisorId="' . $supervisorId . '"  data-supervisorName="' . $supervisorName . '"  data-supervisorPhone="' . $phone . '"  data-supervisorEmail="' . $email . '" data-clientId="' . $clientId . '" data-stateId="' . $stateId . '" data-deptId="' . $deptId . '" data-status="update"><button type="button" name="editSupervisorBtn" id="editSupervisorBtn" value="edit" class="editSupervisorBtn btn btn-default btn-sm">&nbsp;<i class="glyphicon glyphicon-pencil"></i>&nbsp;</button><button type="button" name="deleteSupervisorBtn" id="deleteSupervisorBtn" value="remove" class="deleteSupervisorBtn btn btn-danger btn-sm">&nbsp;<i class="glyphicon glyphicon-trash"></i>&nbsp;</button></td></tr>';
        //<button type="button" name="editSupervisorBtn" id="editSupervisorBtn" value="edit" class="editSupervisorBtn btn btn-default btn-sm">&nbsp;<i class="glyphicon glyphicon-pencil"></i>&nbsp;</button>
    }
    return $row;
}

function getEmployeeWorkStartDate($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT workStartDate FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->workStartDate;
    } else {
        return null;
    }
}

function getSupervisorsForDropdown($mysqli, $iclientId, $istateId, $ideptId)
{
    $sup = $mysqli->prepare("SELECT supervisorId,supervisorName FROM supervisor WHERE clientId = ? AND stateId = ? AND deptId = ?") or die($mysqli->error);
    $sup->bind_param("iii", $iclientId, $istateId, $ideptId) or die($mysqli->error);
    $sup->execute();
    $sup->bind_result($supervisorId, $supervisorName) or die($mysqli->error);
    $option = $option . '<option value="None">Select Supervisor</option>';
    while ($sup->fetch()) {
        $option = $option . '<option value="' . $supervisorId . '">' . $supervisorName . '</option>';
    }
    return $option;
}

function getSupervisorDetailsById($mysqli, $supervisorId)
{
    $sql = $mysqli->prepare("SELECT phone,email FROM supervisor WHERE supervisorId = ?") or die($mysqli->error);
    $sql->bind_param("i", $supervisorId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($phone, $email) or die($mysqli->error);
    while ($sql->fetch()) {
        return '<label>&nbsp;<i class="glyphicon glyphicon-mobile fa fa-mobile"></i></label>&nbsp;' . $phone . '<br><label>&nbsp;<i class="glyphicon glyphicon-envelope fa fa-envelope"></i></label>&nbsp;' . $email;
    }
}

function getSupervisorLoginInfoById($mysqli, $supervisorId)
{
    $sql = $mysqli->prepare("SELECT supervisorName,email,password FROM supervisor WHERE supervisorId = ?") or die($mysqli->error);
    $sql->bind_param("i", $supervisorId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($supervisorName, $email, $password) or die($mysqli->error);
    $html = '';
    while ($sql->fetch()) {
        $html = $html . '<br>Supervisor Name:' . $supervisorName . '<br/>URL: <a href="' . DOMAIN_URL . '/supervisor/" target="_blank">' . DOMAIN_URL . '/supervisor/</a> <br/>Username: ' . $email . '<br/><br/>';
    }
    return $html;
}

function validateSupervisor($mysqli, $supervisorPhone, $clientId, $stateId, $deptId)
{
    $sqlchk = $mysqli->prepare("SELECT supervisorId FROM supervisor WHERE phone = ? AND clientId = ? AND stateId= ? AND deptId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("siii", $supervisorPhone, $clientId, $stateId, $deptId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function getPasswordHash($password)
{
    $options = [
        'cost' => 12,
    ];
    $hash = password_hash($password, PASSWORD_BCRYPT, $options);
    return $hash;
}

function addSupervisorDetails($mysqli, $supervisorName, $supervisorPhone, $supervisorEmail, $clientId, $stateId, $deptId, $supervisorPassword, $consultantEmail)
{
    $clientName = getClientNameByClientId($mysqli, $clientId);
    $password = getPasswordHash($supervisorPassword);
    if (!validateSupervisor($mysqli, $supervisorPhone, $clientId, $stateId, $deptId)) {
        $ins = $mysqli->prepare("INSERT INTO supervisor(supervisorName,phone,email,clientId,stateId,deptId,password)VALUES(?,?,?,?,?,?,?)") or die($mysqli->error);
        $ins->bind_param("sssiiis", $supervisorName, $supervisorPhone, $supervisorEmail, $clientId, $stateId, $deptId, $password) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows > 0) {
            generateEmailSupervisorLogin($supervisorEmail, $supervisorPassword, $consultantEmail, $clientName);
            return getSupervisors($mysqli, $clientId, $stateId, $deptId);
        } else {
            return $mysqli->error;
        }
    } else {
        return 'supervisor exists';
    }
}

function updateSupervisorDetails($mysqli, $supervisorId, $supervisorName, $supervisorPhone, $supervisorEmail, $clientId, $stateId, $deptId, $supervisorPassword, $consultantEmail)
{
    $clientName = getClientNameByClientId($mysqli, $clientId);
    $password = getPasswordHash($supervisorPassword);
    $up = $mysqli->prepare("UPDATE supervisor SET supervisorName = ?, phone = ?, email = ?, password = ? WHERE supervisorId = ?") or die($mysqli->error);
    $up->bind_param("ssssi", $supervisorName, $supervisorPhone, $supervisorEmail, $password, $supervisorId) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    if ($nrows > 0) {
        generateEmailSupervisorLogin($supervisorEmail, $supervisorPassword, $consultantEmail, $clientName);
        return getSupervisors($mysqli, $clientId, $stateId, $deptId);
    } else {
        return $mysqli->error;
    }
}

function removeSupervisor($mysqli, $supervisorId, $clientId, $stateId, $deptId)
{
    $del = $mysqli->prepare("DELETE FROM supervisor WHERE supervisorId = ?") or die ($mysqli->error);
    $del->bind_param("i", $supervisorId) or die($mysqli->error);
    $del->execute();
    $rows_deleted = $del->affected_rows;
    if ($rows_deleted > 0) {
        return getSupervisors($mysqli, $clientId, $stateId, $deptId);
    } else {
        return false;
    }
}

/* Payroll Functions */
function getNewJobCode($mysqli)
{
    $stmt = $mysqli->prepare("SELECT MAX(jobNo) AS max_jobNo FROM jobcode") or die($mysqli->error());
    $stmt->execute();
    $stmt->bind_result($max_jobNo);
    $stmt->store_result();
    $stmt->fetch();
    if ($stmt->num_rows == 0) {
        $max_jobNo = 1;
    } else {
        $max_jobNo = $max_jobNo + 1;
    }
    $jobCode = 'JBC' . $max_jobNo;
    return $jobCode;
}

function validateJobCode($mysqli, $clientId, $positionId, $deptId)
{
    $sqlchk = $mysqli->prepare("SELECT jobCode FROM jobcode WHERE clientId = ? AND positionid = ? AND deptId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("iii", $clientId, $positionId, $deptId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function getJobCodeListByClient($mysqli, $clientSearch)
{
    if (!empty($clientSearch)) {
        $param = "%" . $clientSearch . "%";
        $sql = $mysqli->prepare("SELECT jobcode.jobCode,jobcode.clientId,jobcode.positionid,jobcode.deptId,jobcode.awardId FROM jobcode INNER JOIN client ON (jobcode.clientId = client.clientId) WHERE client.client LIKE ? ORDER BY client.client") or die($mysqli->error);
        $sql->bind_param("s", $param) or die($mysqli->error);
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($jobCode, $clientId, $positionid, $deptId, $awardId) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td class="jbc" data-jbCode="' . $jobCode . '" data-clId="' . $clientId . '" data-clientCode="' . getClientCodeById($mysqli, $clientId) . '" data-clName="' . getClientNameByClientId($mysqli, $clientId) . '"><span class="jbLink" style="text-decoration: none; cursor: pointer; font-weight: bold; color: #2a6395">' . $jobCode . '</span></td><td>' . getClientNameByClientId($mysqli, getClientIdByJobCode($mysqli, $jobCode)) . '(' . getClientIdByJobCode($mysqli, $jobCode) . ')</td><td>' . getPositionByPositionId($mysqli, getPositionIdByJobCode($mysqli, $jobCode)) . '(' . getPositionIdByJobCode($mysqli, $jobCode) . ')</td><td>' . getDepartmentById($mysqli, getDepartmentIdByJobCode($mysqli, $jobCode)) . '(' . getDepartmentIdByJobCode($mysqli, $jobCode) . ')</td><td>' . getClientNameByClientId($mysqli, $clientId) . '</td><td>' . getPositionByPositionId($mysqli, $positionid) . '</td><td>' . getAwardById($mysqli, $awardId) . '</td><td data-jobcode="' . $jobCode . '"><button type="button" name="editJobDetailBtn" id="editJobDetailBtn" value="edit" class="editJobDetailBtn btn btn-default btn-sm">&nbsp;<i class="glyphicon glyphicon-pencil"></i>&nbsp;</button><button type="button" name="deleteJobCodeBtn" id="deleteJobCodeBtn" value="remove" class="deleteJobCodeBtn btn btn-danger btn-sm">&nbsp;<i class="glyphicon glyphicon-trash"></i>&nbsp;</button></td></tr>';
    }
    return $row;
}

function getJobCodeList($mysqli, $clId)
{
    if ($clId == 'All' || $clId == '') {
        $sql = $mysqli->prepare("SELECT jobcode.jobCode,jobcode.clientId,jobcode.positionid,jobcode.deptId,jobcode.awardId FROM jobcode INNER JOIN client ON (jobcode.clientId = client.clientId) ORDER BY client.client") or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT jobcode.jobCode,jobcode.clientId,jobcode.positionid,jobcode.deptId,jobcode.awardId FROM jobcode INNER JOIN client ON (jobcode.clientId = client.clientId) WHERE client.clientId = ? ORDER BY client.client") or die($mysqli->error);
        $sql->bind_param("i", $clId) or die ($mysqli->error);
    }
    $sql->execute();
    $sql->bind_result($jobCode, $clientId, $positionid, $deptId, $awardId) or die($mysqli->error);
    $sql->store_result();
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td class="jbc" data-jbCode="' . $jobCode . '" data-clId="' . $clientId . '" data-clientCode="' . getClientCodeById($mysqli, $clientId) . '" data-clName="' . getClientNameByClientId($mysqli, $clientId) . '"><span class="jbLink" style="text-decoration: none; cursor: pointer; font-weight: bold; color: #2a6395">' . $jobCode . '</span></td><td>' . getClientNameByClientId($mysqli, getClientIdByJobCode($mysqli, $jobCode)) . '(' . getClientIdByJobCode($mysqli, $jobCode) . ')</td><td>' . getPositionByPositionId($mysqli, getPositionIdByJobCode($mysqli, $jobCode)) . '(' . getPositionIdByJobCode($mysqli, $jobCode) . ')</td><td>' . getDepartmentById($mysqli, getDepartmentIdByJobCode($mysqli, $jobCode)) . '(' . getDepartmentIdByJobCode($mysqli, $jobCode) . ')</td><td>' . getClientNameByClientId($mysqli, $clientId) . '</td><td>' . getPositionByPositionId($mysqli, $positionid) . '</td><td>';
        $row = $row . '<select class="awId form-control">';
        $row = $row . displayAwardsListWithCurrentSelection($mysqli, $awardId);
        $row = $row . '</select><button class="updateAwardBtn btn btn-info">Update Award</button></td><td data-jobcode="' . $jobCode . '"><button type="button" name="editJobDetailBtn" id="editJobDetailBtn" value="edit" class="editJobDetailBtn btn btn-default btn-sm">&nbsp;<i class="glyphicon glyphicon-pencil"></i>&nbsp;</button><button type="button" name="deleteJobCodeBtn" id="deleteJobCodeBtn" value="remove" class="deleteJobCodeBtn btn btn-danger btn-sm">&nbsp;<i class="glyphicon glyphicon-trash"></i>&nbsp;</button></td></tr>';
    }
    return $row;
}

function displayJobCodeList($mysqli)
{
    $sql = $mysqli->prepare("SELECT jobcode.jobCode,jobcode.clientId,jobcode.positionid,jobcode.deptId FROM jobcode INNER JOIN client ON (jobcode.clientId = client.clientId) ORDER BY client.client") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($jobCode, $clientId, $positionid, $deptId) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>' . $jobCode . '</td><td>' . getClientNameByClientId($mysqli, $clientId) . '(' . $clientId . ')</td><td>' . getPositionByPositionId($mysqli, $positionid) . '(' . $positionid . ')</td><td>' . getDepartmentById($mysqli, $deptId) . '(' . $deptId . ')</td><td>' . getClientNameByClientId($mysqli, $clientId) . '</td><td>' . getPositionByPositionId($mysqli, $positionid) . '</td></tr>';
    }
    return $row;
}

function getJobInfoByJobCode($mysqli, $jobCode)
{
    $sql = $mysqli->prepare("SELECT clientId,positionId FROM jobcode WHERE jobCode = ?") or die($mysqli->error);
    $sql->bind_param("s", $jobCode) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($clientId, $positionid) or die($mysqli->error);
    $arr = array('clientId' => '', 'positionId' => '', 'clientName' => '', 'position' => '');
    while ($sql->fetch()) {
        $arr['clientId'] = $clientId;
        $arr['positionId'] = $positionid;
        $arr['clientName'] = getClientNameByClientId($mysqli, $clientId);
        $arr['position'] = getPositionByPositionId($mysqli, $positionid);
    }
    return json_encode($arr);
}

function getJobDetail($mysqli, $jobcode)
{
    $sql = $mysqli->prepare("SELECT 
                                  job_detail.jobDetailId,
                                  job_detail.jobCode,
                                  job_detail.clientId,
                                  job_detail.clientCode,
                                  job_detail.clientName,
                                  job_detail.contactFirstName,
                                  job_detail.contactLastName,
                                  job_detail.description,
                                  job_detail.startDate,
                                  job_detail.payrollName,
                                  job_detail.invoiceTo,
                                  job_detail.workAddress
                                FROM
                                  job_detail
                                WHERE job_detail.jobCode = ?") or die($mysqli->error);
    $sql->bind_param("s", $jobcode) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($jobDetailId, $jobCode, $clientId, $clientCode, $clientName, $contactFirstName, $contactLastName,
        $description,
        $startDate,
        $payrollName,
        $invoiceTo,
        $workAddress) or die($mysqli->error);
    $detailArray = array();
    while ($sql->fetch()) {
        $detailArray[] =  array('jobDetailId' => $jobDetailId, 'jobcode' => $jobCode, 'clId' => $clientId, 'clientCode' => $clientCode, 'clientName' => $clientName, 'contactFirstName' => $contactFirstName, 'contactLastName' => $contactLastName,
            'description' => $description,
            'startDate' => $startDate,
            'payrollName' => $payrollName,
            'invoiceTo' => $invoiceTo,
            'workAddress' => $workAddress);
    }
    return json_encode($detailArray);
}

function getClientCodeById($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT clientCode FROM client WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->clientCode;
    } else {
        return null;
    }
}

function createJobCode($mysqli, $clientId, $positionId, $deptId, $awardId)
{
    if (!validateJobCode($mysqli, $clientId, $positionId, $deptId, $awardId)) {
        $jobCode = getNewJobCode($mysqli);
        $ins = $mysqli->prepare("INSERT INTO jobcode(jobCode,clientId,positionid,deptId,awardId)VALUES (?,?,?,?,?)") or die($mysqli->error);
        $ins->bind_param("siiii", $jobCode, $clientId, $positionId, $deptId, $awardId) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            $ins->free_result();
            return getJobCodeList($mysqli, $clientId);
        } else {
            return '<tr><td colspan="7">' . $mysqli->error . '</td></tr>';
        }
    } else {
        return getJobCodeList($mysqli, $clientId);
    }

}

function removeJobCode($mysqli, $jobCode)
{
    $del = $mysqli->prepare("DELETE FROM jobcode WHERE jobCode = ?") or die($mysqli->error);
    $del->bind_param("s", $jobCode) or die($mysqli->error);
    $del->execute();
    $del->free_result();

    $delDetail = $mysqli->prepare("DELETE FROM jobDetail WHERE jobCode = ?") or die($mysqli->error);
    $delDetail->bind_param("s", $jobCode) or die($mysqli->error);
    $delDetail->execute();
    $delDetail->free_result();

    return getJobCodeList($mysqli, 'All');
}

function validateJobDetail($mysqli, $jobCode, $clientId)
{
    $sql = $mysqli->prepare("SELECT jobCode FROM job_detail WHERE jobCode = ? AND clientId = ?") or die($mysqli->error);
    $sql->bind_param("si", $jobCode, $clientId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->fetch();
    $num_rows = $sql->num_rows;
    if ($num_rows > 0) {
        return true;
    } else {
        return false;
    }
}
function saveJobDetail($mysqli, $jobCode, $clientId, $clientCode, $clientName, $contactFirstName, $contactLastName, $description, $startDate, $payrollName, $invoiceTo, $workAddress)
{
    // code save JOB DETAILS
    if (!validateJobDetail($mysqli, $jobCode, $clientId)) {
        $ins = $mysqli->prepare("INSERT INTO
                                          job_detail(
                                          jobCode,
                                          clientId,
                                          clientCode,
                                          clientName,
                                          contactFirstName,
                                          contactLastName,
                                          description,
                                          startDate,
                                          payrollName,
                                          invoiceTo,
                                          workAddress)
                                        VALUES(
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?)") or die($mysqli->error);
        $ins->bind_param("sisssssssss", $jobCode, $clientId, $clientCode, $clientName, $contactFirstName, $contactLastName, $description, $startDate, $payrollName, $invoiceTo, $workAddress) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows > 0) {
            return 'Added';
        } else {
            return $mysqli->error;
        }
    } else {
        return 'Existing';
    }
}


function updateJobDetail($mysqli, $jobCode, $clientId, $clientCode, $clientName, $contactFirstName, $contactLastName, $description, $startDate, $payrollName, $invoiceTo, $workAddress)
{
    $up = $mysqli->prepare("UPDATE job_detail SET
                                          clientId = ?,
                                          clientCode = ?,
                                          clientName = ?,
                                          contactFirstName = ?,
                                          contactLastName = ?,
                                          description = ?,
                                          startDate = ?,
                                          payrollName = ?,
                                          invoiceTo = ?,
                                          workAddress = ?
                                          WHERE jobCode = ?") or die($mysqli->error);
    $up->bind_param("issssssss, $workAddress, $jobCode", $clientId, $clientCode, $clientName, $contactFirstName, $contactLastName, $description, $startDate, $payrollName, $invoiceTo, $workAddress, $jobCode) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    if ($nrows > 0) {
        return 'Update';
    } else {
        return $mysqli->error;
    }
}
function removePayCategory($mysqli, $payCatCode)
{
    $del = $mysqli->prepare("DELETE FROM paycategory WHERE payCatCode = ?") or die($mysqli->error);
    $del->bind_param("s", $payCatCode) or die($mysqli->error);
    $del->execute();
    $del->free_result();
    return getPayCategoryList($mysqli);
}

function getPayCategoryList($mysqli)
{
    $sql = $mysqli->prepare("SELECT payCatCode,payCategory FROM paycategory") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($payCatCode, $payCategory) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>' . $payCatCode . '</td><td>' . $payCategory . '</td><td data-paycatcode="' . $payCatCode . '"><button type="button" name="deletePayCatBtn" id="deletePayCatBtn" value="remove" class="deletePayCatBtn btn btn-danger btn-sm">&nbsp;<i class="glyphicon glyphicon-trash"></i>&nbsp;</button></td></tr>';
    }
    return $row;
}

function displayPayCategoryList($mysqli)
{
    $sql = $mysqli->prepare("SELECT payCatCode,payCategory FROM paycategory") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($payCatCode, $payCategory) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>' . $payCatCode . '</td><td>' . $payCategory . '</td></tr>';
    }
    return $row;
}

function getNewPayCategoryCode($mysqli)
{
    $stmt = $mysqli->prepare("SELECT MAX(payCatId) AS max_payCatCode FROM paycategory") or die($mysqli->error());
    $stmt->execute();
    $stmt->bind_result($max_payCatCode);
    $stmt->store_result();
    $stmt->fetch();
    if ($stmt->num_rows == 0) {
        $max_payCatCode = 1;
    } else {
        $max_payCatCode = $max_payCatCode + 1;
    }
    $paycatcode = 'PAYCAT' . $max_payCatCode;
    return $paycatcode;
}

function validatePayCategory($mysqli, $payCategory)
{
    $sqlchk = $mysqli->prepare("SELECT payCatCode FROM paycategory WHERE payCategory = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $payCategory) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function addPayCategory($mysqli, $payCategory)
{
    if (!validatePayCategory($mysqli, $payCategory)) {
        $payCategoryCode = getNewPayCategoryCode($mysqli);
        $ins = $mysqli->prepare("INSERT INTO paycategory(payCatCode,payCategory)VALUES (?,?)") or die($mysqli->error);
        $ins->bind_param("ss", $payCategoryCode, strtoupper($payCategory)) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            $ins->free_result();
            return getPayCategoryList($mysqli);
        } else {
            return '<tr><td colspan="3">' . $mysqli->error . '</td></tr>';
        }
    } else {
        return getPayCategoryList($mysqli);
    }
}

function getJobCodeByClientPosition($mysqli, $clientId, $positionId, $departmentId)
{
    $sql = $mysqli->prepare("SELECT jobCode FROM jobcode WHERE clientId = ? AND positionid = ? AND deptId = ?") or die($mysqli->error);
    $sql->bind_param("iii", $clientId, $positionId, $departmentId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->jobCode;
    } else {
        return null;
    }
}

function getPayruleByJobCode($mysqli, $jobCode)
{
    $sql = $mysqli->prepare("SELECT payAwrdCode FROM payrule WHERE jobCode = ?") or die($mysqli->error);
    $sql->bind_param("s", $jobCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payAwrdCode;
    } else {
        return null;
    }
}

function getRateCardView($mysqli, $clientId, $positionId, $jobCode)
{
    $sql = $mysqli->prepare("SELECT payCatId,payCatCode,payCategory FROM paycategory") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($payCatId, $payCatCode, $payCategory) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>' . $payCategory . '</td><td>' . getExistingPayRate($mysqli, $clientId, $positionId, $jobCode, $payCatCode) . '</td></tr>';
    }
    return $row;
}

function generateRateCardTable($mysqli, $clientId, $positionId, $jobCode)
{
    $sql = $mysqli->prepare("SELECT payCatId,payCatCode,payCategory FROM paycategory ORDER BY sorting ASC") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($payCatId, $payCatCode, $payCategory) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr>
                    <td>' . $payCategory . '</td>
                    <td style="text-align: center; vertical-align: middle;">
                        <input type="hidden" name="payCatCode[]" value="' . $payCatCode . '"/>
                        <input type="text" id="' . str_replace(" ", "", strtolower($payCategory)) . 'pay" name="payRate[]" value="' . getExistingPayRate($mysqli, $clientId, $positionId, $jobCode, $payCatCode) . '" size="5" style="text-align: right"/>
                    </td>
                    <td style="text-align: center; vertical-align: middle;">
                        <input type="text" id="' . str_replace(" ", "", strtolower($payCategory)) . 'newpay" name="' . str_replace(" ", "", strtolower($payCategory)) . 'newpay[]" value="" size="5" style="text-align: right; box-shadow:inset 0 0 5px #11bcb7;"/>
                    </td>
                    <td style="text-align: center; vertical-align: middle;">
                        <input type="text" id="' . str_replace(" ", "", strtolower($payCategory)) . 'charge" name="chargeRate[]" value="' . getExistingChargeRate($mysqli, $clientId, $positionId, $jobCode, $payCatCode) . '" size="5" style="text-align: right"/>
                    </td>
                    <td style="text-align: center; vertical-align: middle;">
                        <input type="text" id="' . str_replace(" ", "", strtolower($payCategory)) . 'newcharge" name="' . str_replace(" ", "", strtolower($payCategory)) . 'newcharge[]" value="" size="5" style="text-align: right;box-shadow:inset 0 0 5px #11bcb7;"/>
                    </td></tr>';
    }
    return $row;
}

function generateNewFinancialYearRateCardTable($mysqli, $clientId, $positionId, $jobCode)
{
    $sql = $mysqli->prepare("SELECT payCatId,payCatCode,payCategory FROM paycategory ORDER BY sorting ASC") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($payCatId, $payCatCode, $payCategory) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr>
                    <td>' . $payCategory . '</td>
                    <td style="text-align: center; vertical-align: middle;">
                        <input type="hidden" name="payCatCodeNF[]" value="' . $payCatCode . '"/>
                        <input type="text" id="' . str_replace(" ", "", strtolower($payCategory)) . 'payNF" name="payRateNF[]" value="' . getExistingPayRateNewFinancialYear($mysqli, $clientId, $positionId, $jobCode, $payCatCode) . '" size="5" style="text-align: right"/>
                    </td>
                    <td style="text-align: center; vertical-align: middle;">
                        <input type="text" id="' . str_replace(" ", "", strtolower($payCategory)) . 'chargeNF" name="chargeRateNF[]" value="' . getExistingChargeRateNewFinancialYear($mysqli, $clientId, $positionId, $jobCode, $payCatCode) . '" size="5" style="text-align: right"/>
                    </td>
                    </tr>';
    }
    return $row;
}

function validateRateCardSnapshot($mysqli, $clientId, $positionId, $jobCode, $payCatCode, $yearSaved)
{
    $sqlchk = $mysqli->prepare("SELECT rateCardId FROM ratecard_snapshot WHERE clientId = ? AND positionId = ? AND jobCode = ? AND payCatCode = ? AND rateCardYear = ?") or die($mysqli->error);
    $sqlchk->bind_param("iisss", $clientId, $positionId, $jobCode, $payCatCode, $yearSaved) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function generateRateCardSnapshot($mysqli, $clientId, $positionId, $jobCode, $snapYear)
{
    $sql = $mysqli->prepare("SELECT payCatId,payCatCode,payCategory FROM paycategory") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($payCatId, $payCatCode, $payCategory) or die($mysqli->error);
    while ($sql->fetch()) {
        //$row = $row . '<tr><td>' . $payCategory . '</td><td><input type="hidden" name="payCatCode[]" value="'.$payCatCode.'"/><input type="text" name="payRate[]" value="'.getExistingPayRate($mysqli,$clientId,$positionId,$jobCode,$payCatCode).'"/></td><td><input type="text" name="chargeRate[]" value="'.getExistingChargeRate($mysqli,$clientId,$positionId,$jobCode,$payCatCode).'"/></td></tr>';
        saveRateCardSnapshot($mysqli, $clientId, $positionId, $jobCode, $payCatCode, getExistingPayRate($mysqli, $clientId, $positionId, $jobCode, $payCatCode), getExistingChargeRate($mysqli, $clientId, $positionId, $jobCode, $payCatCode), $snapYear);
    }
}

function saveRateCardSnapshot($mysqli, $clientId, $positionId, $jobCode, $payCatCode, $payRate, $chargeRate, $yearSaved)
{
    if (!validateRateCardSnapshot($mysqli, $clientId, $positionId, $jobCode, $payCatCode, $yearSaved)) {
        $ins = $mysqli->prepare("INSERT INTO ratecard_snapshot(clientId,positionId,jobCode,payCatCode,payRate,chargeRate,rateCardYear,dateSaved) VALUES (?,?,?,?,?,?,?,NOW())") or die($mysqli->error);
        $ins->bind_param("iisssss", $clientId, $positionId, $jobCode, $payCatCode, $payRate, $chargeRate, $yearSaved) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows > 0) {
            return 'Added';
        } else {
            return $mysqli->error;
        }
    } else {
        $up = $mysqli->prepare("UPDATE ratecard_snapshot SET payRate = ?,chargeRate = ? WHERE clientId = ? AND positionId = ? AND jobCode = ? AND payCatCode= ? AND rateCardYear = ?") or die($mysqli->error);
        $up->bind_param("ssiisss", $payRate, $chargeRate, $clientId, $positionId, $jobCode, $payCatCode, $yearSaved) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows == '1') {
            $up->free_result();
            return 'updated';
        } else {
            return $mysqli->error;
        }
    }
}

function displayRateCardYears($mysqli, $clientId, $positionId, $jobCode)
{
    $sql = $mysqli->prepare("SELECT DISTINCT rateCardYear,dateSaved FROM ratecard_snapshot WHERE clientId = ? AND positionId = ? AND jobCode = ?") or die ($mysqli->error);
    $sql->bind_param("iis", $clientId, $positionId, $jobCode) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($rateCardYear, $dateSaved) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<div><a href="#" class="archived" style="text-decoration: none">' . $rateCardYear . '</a> - ' . $dateSaved . '</div>';
    }
    return $row;
}

function displayRateCardSnapshot($mysqli, $clientId, $positionId, $jobCode, $year)
{
    $sql = $mysqli->prepare("SELECT payCatCode,payRate,chargeRate,rateCardYear FROM ratecard_snapshot WHERE clientId = ? AND positionId = ? AND jobCode = ? AND rateCardYear = ?") or die ($mysqli->error);
    $sql->bind_param("iiss", $clientId, $positionId, $jobCode, $year) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($payCatCode, $payRate, $chargeRate, $rateCardYear) or die($mysqli->error);
    $rtYr = '';
    $row = '';
    while ($sql->fetch()) {
        $rtYr = $rateCardYear;
        $row = $row . '<tr><td>' . getPayCategoryByCode($mysqli, $payCatCode) . '</td><td>' . $payRate . '</td><td>' . $chargeRate . '</td></tr>';
    }
    $tableHeader = '<div>Archived on ' . $rtYr . '</div><table border="1" cellpadding="2" cellspacing="2" class="table table-striped table-bordered table-hover" width="100%" style="background: #7fa67f"><thead><tr><th data-class="expand"><i class="fa fa-fw fa-indent txt-color-blue hidden-md hidden-sm hidden-xs"></i>Pay Category</th><th data-hide="phone"><i class="fa fa-fw fa-dollar txt-color-blue hidden-md hidden-sm hidden-xs"></i>Pay Rate</th><th data-hide="phone"><i class="fa fa-fw fa-dollar txt-color-blue hidden-md hidden-sm hidden-xs"></i>Charge Rate</th></tr></thead><tbody>';
    $tableFooter = '</tbody></table>';
    return $tableHeader . $row . $tableFooter;
}

function getExistingPayRate($mysqli, $clientId, $positionId, $jobCode, $payCatCode)
{
    $sql = $mysqli->prepare("SELECT payRate FROM ratecard WHERE clientId = ? AND positionId = ? AND jobCode = ? AND payCatCode = ?") or die ($mysqli->error);
    $sql->bind_param("iiss", $clientId, $positionId, $jobCode, $payCatCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payRate;
    } else {
        return null;
    }
}

function getExistingChargeRate($mysqli, $clientId, $positionId, $jobCode, $payCatCode)
{
    $sql = $mysqli->prepare("SELECT chargeRate FROM ratecard WHERE clientId = ? AND positionId = ? AND jobCode = ? AND payCatCode = ?") or die ($mysqli->error);
    $sql->bind_param("iiss", $clientId, $positionId, $jobCode, $payCatCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->chargeRate;
    } else {
        return null;
    }

}

function getExistingPayRateNewFinancialYear($mysqli, $clientId, $positionId, $jobCode, $payCatCode)
{
    $sql = $mysqli->prepare("SELECT payRate FROM ratecard_new_financial_year WHERE clientId = ? AND positionId = ? AND jobCode = ? AND payCatCode = ?") or die ($mysqli->error);
    $sql->bind_param("iiss", $clientId, $positionId, $jobCode, $payCatCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payRate;
    } else {
        return null;
    }
}

function getExistingChargeRateNewFinancialYear($mysqli, $clientId, $positionId, $jobCode, $payCatCode)
{
    $sql = $mysqli->prepare("SELECT chargeRate FROM ratecard_new_financial_year WHERE clientId = ? AND positionId = ? AND jobCode = ? AND payCatCode = ?") or die ($mysqli->error);
    $sql->bind_param("iiss", $clientId, $positionId, $jobCode, $payCatCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->chargeRate;
    } else {
        return null;
    }
}

function validateRateCardEntry($mysqli, $clientId, $positionId, $jobCode, $payCatCode)
{
    $sqlchk = $mysqli->prepare("SELECT payRate FROM ratecard WHERE clientId = ? AND positionId = ? AND jobCode = ? AND payCatCode = ?") or die ($mysqli->error);
    $sqlchk->bind_param("iiss", $clientId, $positionId, $jobCode, $payCatCode) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateNFRateCardEntry($mysqli, $clientId, $positionId, $jobCode, $payCatCode)
{
    $sqlchk = $mysqli->prepare("SELECT payRate FROM ratecard_new_financial_year WHERE clientId = ? AND positionId = ? AND jobCode = ? AND payCatCode = ?") or die ($mysqli->error);
    $sqlchk->bind_param("iiss", $clientId, $positionId, $jobCode, $payCatCode) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function saveRateCard($mysqli, $clientId, $positionId, $jobCode, $payCatCode, $payRate, $chargeRate)
{
    $positionId = getPositionIdByJobCode($mysqli, $jobCode);
    $clientId = getClientIdByJobCode($mysqli, $jobCode);
    if (!validateRateCardEntry($mysqli, $clientId, $positionId, $jobCode, $payCatCode)) {
        $ins = $mysqli->prepare("INSERT INTO ratecard(clientId,positionId,jobCode,payCatCode,payRate,chargeRate)VALUES (?,?,?,?,?,?)") or die($mysqli->error);
        $ins->bind_param("iissss", $clientId, $positionId, $jobCode, $payCatCode, $payRate, $chargeRate) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            $ins->free_result();
            return true;//getSavedRateCard($mysqli,$clientId,$positionId,$jobCode,$payCatCode);
        } else {
            return $mysqli->error;
        }
    } else {
        $up = $mysqli->prepare("UPDATE ratecard SET payRate = ?,chargeRate = ? WHERE clientId = ? AND positionId = ? AND jobCode = ? AND payCatCode= ?") or die($mysqli->error);
        $up->bind_param("ssiiss", $payRate, $chargeRate, $clientId, $positionId, $jobCode, $payCatCode) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows == '1') {
            $up->free_result();
            return true;
        } else {
            return 'Error Updating Rate Card';
        }
    }
}

function saveNFRateCard($mysqli, $clientId, $positionId, $jobCode, $payCatCode, $payRate, $chargeRate)
{
    $positionId = getPositionIdByJobCode($mysqli, $jobCode);
    $clientId = getClientIdByJobCode($mysqli, $jobCode);
    if (!validateNFRateCardEntry($mysqli, $clientId, $positionId, $jobCode, $payCatCode)) {
        $ins = $mysqli->prepare("INSERT INTO ratecard_new_financial_year(clientId,positionId,jobCode,payCatCode,payRate,chargeRate)VALUES (?,?,?,?,?,?)") or die($mysqli->error);
        $ins->bind_param("iissss", $clientId, $positionId, $jobCode, $payCatCode, $payRate, $chargeRate) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            $ins->free_result();
            return true;
        } else {
            return 'Error Saving New Financial Year Rate Card';
        }
    } else {
        $up = $mysqli->prepare("UPDATE ratecard_new_financial_year SET payRate = ?,chargeRate = ? WHERE clientId = ? AND positionId = ? AND jobCode = ? AND payCatCode= ?") or die($mysqli->error);
        $up->bind_param("ssiiss", $payRate, $chargeRate, $clientId, $positionId, $jobCode, $payCatCode) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows == '1') {
            $up->free_result();
            return true;
        } else {
            return 'Error Updating New Financial Year Rate Card';
        }
    }
}

function getCandidateImage($mysqli, $canId)
{
    $empCondition = getEmployeeCondition($mysqli, $canId);
    $photoDocType = 17;
    $sqlPh = $mysqli->prepare("SELECT filePath FROM candidate_document WHERE candidateId = ? AND docTypeId = ?") or die($mysqli->error);
    $sqlPh->bind_param("si", $canId, $photoDocType) or die($mysqli->error);
    $sqlPh->execute();
    $html = '';
    $obj = $sqlPh->get_result()->fetch_object();
    $filePath = '';
    if ($obj) {
        $filePath = $obj->filePath;
    } else {
        $filePath = null;
    }
    if (!empty($filePath)) {
        $html = $html . '<img src="' . $filePath . '" width="150" height="150" style="border-radius: 50%; overflow: hidden; display: inline-block; vertical-align: middle;';
        if ($empCondition == '1') {
            $html = $html . 'border: 1px solid red;';
        }
        $html = $html . '"/>';
    } else {
        $sql = $mysqli->prepare("SELECT employeeImage FROM candidate WHERE candidateId = ?") or die($mysqli->error);
        $sql->bind_param("s", $canId) or die($mysqli->error);
        $sql->execute();
        $employeeImage = '';
        $obj = $sql->get_result()->fetch_object();
        if ($obj) {
            $employeeImage = $obj->employeeImage;
        } else {
            $employeeImage = null;
        }
        if (!empty($employeeImage)) {
            $html = $html . '<img src="data:image/png;base64,' . $employeeImage . '" width="150" height="150" style="border-radius: 50%;	overflow: hidden; display: inline-block; vertical-align: middle;';
            if ($empCondition == '1') {
                $html = $html . 'border: 1px solid red;';
            }
            $html = $html . '"/>';
        } else {
            $html = $html . '<img src="img/avatars/default.png"  width="150" height="150"  style="border-radius: 50%;	overflow: hidden; display: inline-block; vertical-align: middle;';
            if ($empCondition == '1') {
                $html = $html . 'border: 1px solid red;';
            }
            $html = $html . '"/>';
        }
    }
    return $html;
}

function getPayCategoryByCode($mysqli, $payCatCode)
{
    $sql = $mysqli->prepare("SELECT payCategory FROM paycategory WHERE payCatCode = ?") or die($mysqli->error);
    $sql->bind_param("s", $payCatCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payCategory;
    } else {
        return null;
    }
}

function getSavedRateCard($mysqli, $clientId, $positionId, $jobCode)
{
    $sql = $mysqli->prepare("SELECT payCatCode,payRate,chargeRate FROM ratecard WHERE clientId = ? AND positionId = ? AND jobCode = ?") or die ($mysqli->error);
    $sql->bind_param("iis", $clientId, $positionId, $jobCode) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($payCatCode, $payRate, $chargeRate) or die($mysqli->error);
    $tableHeader = '<div><h3>Saved Rates</h3></div><table border="1" cellpadding="2" cellspacing="2" class="table table-striped table-bordered table-hover" width="100%"><thead><tr><th data-class="expand"><i class="fa fa-fw fa-indent txt-color-blue hidden-md hidden-sm hidden-xs"></i>Pay Category</th><th data-hide="phone"><i class="fa fa-fw fa-dollar txt-color-blue hidden-md hidden-sm hidden-xs"></i>Pay Rate</th><th data-hide="phone"><i class="fa fa-fw fa-dollar txt-color-blue hidden-md hidden-sm hidden-xs"></i>Charge Rate</th></tr></thead><tbody>';
    $tableFooter = '</tbody></table>';
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>' . getPayCategoryByCode($mysqli, $payCatCode) . '</td><td>' . $payRate . '</td><td>' . $chargeRate . '</td></tr>';
    }
    return $tableHeader . $row . $tableFooter;
}

function getSavedNFRateCard($mysqli, $clientId, $positionId, $jobCode)
{
    $sql = $mysqli->prepare("SELECT payCatCode,payRate,chargeRate FROM ratecard_new_financial_year WHERE clientId = ? AND positionId = ? AND jobCode = ?") or die ($mysqli->error);
    $sql->bind_param("iis", $clientId, $positionId, $jobCode) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($payCatCode, $payRate, $chargeRate) or die($mysqli->error);
    $tableHeader = '<div><h3>Saved Rates</h3></div><table border="1" cellpadding="2" cellspacing="2" class="table table-striped table-bordered table-hover" width="100%"><thead><tr><th data-class="expand"><i class="fa fa-fw fa-indent txt-color-blue hidden-md hidden-sm hidden-xs"></i>Pay Category</th><th data-hide="phone"><i class="fa fa-fw fa-dollar txt-color-blue hidden-md hidden-sm hidden-xs"></i>Pay Rate</th><th data-hide="phone"><i class="fa fa-fw fa-dollar txt-color-blue hidden-md hidden-sm hidden-xs"></i>Charge Rate</th></tr></thead><tbody>';
    $tableFooter = '</tbody></table>';
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>' . getPayCategoryByCode($mysqli, $payCatCode) . '</td><td>' . $payRate . '</td><td>' . $chargeRate . '</td></tr>';
    }
    return $tableHeader . $row . $tableFooter;
}

function getAuditCheckListType($mysqli, $chkType)
{
    $sql = $mysqli->prepare("SELECT description FROM audit_check_list WHERE id = ?") or die($mysqli->error);
    $sql->bind_param("i", $chkType) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->description;
    } else {
        return null;
    }
}

function getAuditCheckPoliceCheckData($mysqli, $startDate, $endDate)
{
    $chk_type = 19;
    $auditStatus = 1;
    $sql = $mysqli->prepare("SELECT 
                                  audit_check_data.candidateId,
                                  audit_check_data.payroll_status,
                                  audit_check_data.payroll_officer,
                                  audit_check_data.verified_time,
                                  visatype.visaType,
                                  client.client,
                                  candidate_position.positionName,
                                  candidate.firstName,
                                  candidate.lastName,
                                  candidate.nickname
                                FROM
                                  audit_check_data
                                  INNER JOIN employee_visatype ON (audit_check_data.candidateId = employee_visatype.candidateId)
                                  INNER JOIN visatype ON (employee_visatype.visaTypeId = visatype.id)
                                  LEFT OUTER JOIN client ON (audit_check_data.clientId = client.clientId)
                                  LEFT OUTER JOIN candidate_position ON (audit_check_data.positionId = candidate_position.positionid)
                                  INNER JOIN candidate ON (audit_check_data.candidateId = candidate.candidateId)
                                WHERE
                                  CAST(audit_check_data.checked_time AS DATE) BETWEEN ? AND ? AND    
                                  audit_check_data.chkType = ? AND 
                                  audit_check_data.payroll_status IN ('Yes','Complete') AND
                                  candidate.auditStatus = ?") or die($mysqli->error);
    $sql->bind_param("ssii", $startDate, $endDate, $chk_type, $auditStatus) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId,
        $payroll_status,
        $payroll_officer,
        $verified_time,
        $visaType,
        $client,
        $positionName,
        $firstName,
        $lastName,
        $nickname) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('candidateId' => $candidateId,
            'payroll_status' => $payroll_status,
            'payroll_officer' => $payroll_officer,
            'verified_time' => $verified_time,
            'visaType' => $visaType,
            'client' => $client,
            'positionName' => $positionName,
            'firstName' => $firstName,
            'lastName' => $lastName,
            'nickname' => $nickname);
    }
    return $dataArray;
}

function getAuditCompletedLastRecord($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT 
                              auditlog.auditStatus,
                              auditlog.auditedTime
                            FROM
                              auditlog
                            WHERE
                              auditlog.candidateId = ?
                            ORDER BY
                              auditlog.auditedTime DESC
                            LIMIT 1") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($auditStatus, $auditedTime) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('auditStatus' => $auditStatus,
            'auditedTime' => $auditedTime);
    }
    return $dataArray;
}

function getAuditCheckAllData($mysqli, $startDate, $endDate)
{
    $jobOrderNotify = 1;
    $sql = $mysqli->prepare("SELECT 
                              audit_check_data.candidateId,
                              audit_check_data.chkType,
                              audit_check_data.status,
                              audit_check_data.id,
                              audit_check_data.consultant,
                              audit_check_data.checked_time,
                              audit_check_data.jobOrderNotify,
                              audit_check_data.payroll_status,
                              audit_check_data.payroll_officer,
                              audit_check_data.verified_time,
                              audit_check_data.clientId,
                              audit_check_data.positionId
                            FROM
                              audit_check_data
                            INNER JOIN candidate ON (audit_check_data.candidateId = candidate.candidateId)
                            WHERE 
                                CAST(audit_check_data.checked_time AS DATE) BETWEEN ? AND ? AND 
                                audit_check_data.jobOrderNotify = ?
                            ORDER BY
                              audit_check_data.candidateId ASC") or die($mysqli->error);
    $sql->bind_param("ssi", $startDate, $endDate, $jobOrderNotify) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId,
        $chkType,
        $status,
        $id,
        $consultant,
        $checked_time,
        $jobOrderNotify,
        $payroll_status,
        $payroll_officer,
        $verified_time,
        $clientId,
        $positionId) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('candidateId' => $candidateId, 'chkType' => $chkType,
            'status' => $status,
            'id' => $id,
            'consultant' => $consultant,
            'checked_time' => $checked_time,
            'jobOrderNotify' => $jobOrderNotify,
            'payroll_status' => $payroll_status,
            'payroll_officer' => $payroll_officer,
            'verified_time' => $verified_time,
            'clientId' => $clientId,
            'positionId' => $positionId);
    }
    return $dataArray;
}

function getAuditCheckData($mysqli, $startDate, $endDate)
{
    $status = 'No';
    $jobOrderNotify = 1;
    $sql = $mysqli->prepare("SELECT 
                              audit_check_data.candidateId,
                              audit_check_data.chkType,
                              audit_check_data.status,
                              audit_check_data.id,
                              audit_check_data.consultant,
                              audit_check_data.checked_time,
                              audit_check_data.jobOrderNotify,
                              audit_check_data.payroll_status,
                              audit_check_data.payroll_officer,
                              audit_check_data.verified_time,
                              audit_check_data.clientId,
                              audit_check_data.positionId
                            FROM
                              audit_check_data
                            INNER JOIN candidate ON (audit_check_data.candidateId = candidate.candidateId)
                            WHERE 
                                CAST(audit_check_data.checked_time AS DATE) BETWEEN ? AND ? AND 
                                audit_check_data.status = ? AND 
                                audit_check_data.jobOrderNotify = ?
                            ORDER BY
                              audit_check_data.candidateId ASC") or die($mysqli->error);
    $sql->bind_param("sssi", $startDate, $endDate, $status, $jobOrderNotify) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId,
        $chkType,
        $status,
        $id,
        $consultant,
        $checked_time,
        $jobOrderNotify,
        $payroll_status,
        $payroll_officer,
        $verified_time,
        $clientId,
        $positionId) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('candidateId' => $candidateId, 'chkType' => $chkType,
            'status' => $status,
            'id' => $id,
            'consultant' => $consultant,
            'checked_time' => $checked_time,
            'jobOrderNotify' => $jobOrderNotify,
            'payroll_status' => $payroll_status,
            'payroll_officer' => $payroll_officer,
            'verified_time' => $verified_time,
            'clientId' => $clientId,
            'positionId' => $positionId);
    }
    return $dataArray;
}

function getAuditCheckDataPayroll($mysqli, $startDate, $endDate)
{
    $jobOrderNotify = 1;
    $sql = $mysqli->prepare("SELECT 
                              audit_check_data.candidateId,
                              audit_check_data.chkType,
                              audit_check_data.status,
                              audit_check_data.id,
                              audit_check_data.consultant,
                              audit_check_data.checked_time,
                              audit_check_data.jobOrderNotify,
                              audit_check_data.payroll_status,
                              audit_check_data.payroll_officer,
                              audit_check_data.verified_time,
                              audit_check_data.clientId,
                              audit_check_data.positionId
                            FROM
                              audit_check_data
                            INNER JOIN candidate ON (audit_check_data.candidateId = candidate.candidateId)
                            WHERE 
                                CAST(audit_check_data.checked_time AS DATE) BETWEEN ? AND ? AND 
                                audit_check_data.jobOrderNotify = ?
                            ORDER BY
                              audit_check_data.verified_time DESC") or die($mysqli->error);
    $sql->bind_param("ssi", $startDate, $endDate, $jobOrderNotify) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId,
        $chkType,
        $status,
        $id,
        $consultant,
        $checked_time,
        $jobOrderNotify,
        $payroll_status,
        $payroll_officer,
        $verified_time,
        $clientId,
        $positionId) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('candidateId' => $candidateId, 'chkType' => $chkType,
            'status' => $status,
            'id' => $id,
            'consultant' => $consultant,
            'checked_time' => $checked_time,
            'jobOrderNotify' => $jobOrderNotify,
            'payroll_status' => $payroll_status,
            'payroll_officer' => $payroll_officer,
            'verified_time' => $verified_time,
            'clientId' => $clientId,
            'positionId' => $positionId);
    }
    return $dataArray;
}

function getAuditCheckPayrollData($mysqli, $startDate, $endDate)
{
    $payroll_status = 'No';
    $jobOrderNotify = 1;
    $sql = $mysqli->prepare("SELECT 
                              audit_check_data.candidateId,
                              audit_check_data.chkType,
                              audit_check_data.status,
                              audit_check_data.id,
                              audit_check_data.consultant,
                              audit_check_data.checked_time,
                              audit_check_data.jobOrderNotify,
                              audit_check_data.payroll_status,
                              audit_check_data.payroll_officer,
                              audit_check_data.verified_time,
                              audit_check_data.clientId,
                              audit_check_data.positionId
                            FROM
                              audit_check_data
                            INNER JOIN candidate ON (audit_check_data.candidateId = candidate.candidateId)
                            WHERE 
                                CAST(audit_check_data.checked_time AS DATE) BETWEEN ? AND ? AND 
                                audit_check_data.payroll_status = ? AND 
                                audit_check_data.jobOrderNotify = ?
                            ORDER BY
                              audit_check_data.candidateId ASC") or die($mysqli->error);
    $sql->bind_param("sssi", $startDate, $endDate, $payroll_status, $jobOrderNotify) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId,
        $chkType,
        $status,
        $id,
        $consultant,
        $checked_time,
        $jobOrderNotify,
        $payroll_status,
        $payroll_officer,
        $verified_time,
        $clientId,
        $positionId) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('candidateId' => $candidateId, 'chkType' => $chkType,
            'status' => $status,
            'id' => $id,
            'consultant' => $consultant,
            'checked_time' => $checked_time,
            'jobOrderNotify' => $jobOrderNotify,
            'payroll_status' => $payroll_status,
            'payroll_officer' => $payroll_officer,
            'verified_time' => $verified_time,
            'clientId' => $clientId,
            'positionId' => $positionId);
    }
    return $dataArray;
}

function getSavedRateCardSnapshot($mysqli, $clientId, $positionId, $jobCode, $year)
{
    $sql = $mysqli->prepare("SELECT payCatCode,payRate,chargeRate,rateCardYear FROM ratecard_snapshot WHERE clientId = ? AND positionId = ? AND jobCode = ? AND rateCardYear = ?") or die ($mysqli->error);
    $sql->bind_param("iiss", $clientId, $positionId, $jobCode, $year) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($payCatCode, $payRate, $chargeRate, $rateCardYear) or die($mysqli->error);
    $rtYr = '';
    $row = '';
    while ($sql->fetch()) {
        $rtYr = $rateCardYear;
        $row = $row . '<tr><td>' . getPayCategoryByCode($mysqli, $payCatCode) . '</td><td>' . $payRate . '</td><td>' . $chargeRate . '</td></tr>';
    }
    $tableHeader = '<style>.snapShotContent{ font-family: Arial, Helvetica, sans-serif;font-size: 10pt; }th{ background-color: lightgrey}</style><div class="snapShotContent">' . getClientNameByClientId($mysqli, $clientId) . ' ' . getPositionByPositionId($mysqli, $positionId) . ' JOBCODE ' . $jobCode . ' SAVED FOR ' . $rtYr . '<br><table border="1" cellpadding="2" cellspacing="2" class="table table-striped table-bordered table-hover" width="100%"><thead><tr><th data-class="expand"><i class="fa fa-fw fa-indent txt-color-blue hidden-md hidden-sm hidden-xs"></i>Pay Category</th><th data-hide="phone"><i class="fa fa-fw fa-dollar txt-color-blue hidden-md hidden-sm hidden-xs"></i>Pay Rate</th><th data-hide="phone"><i class="fa fa-fw fa-dollar txt-color-blue hidden-md hidden-sm hidden-xs"></i>Charge Rate</th></tr></thead><tbody>';
    $tableFooter = '</tbody></table></div>';
    return $tableHeader . $row . $tableFooter;
}

function getConfirmedShifts($mysqli, $clientid, $canid, $positionid, $deptid, $startDate, $endDate)
{
    $shiftStatusCheck = 'CONFIRMED';
    if (empty($canid) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.tandaShiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.shiftStatus,
                                  shift.shiftSMSStatus,
                                  shift.consultantId,
                                  shift.positionId,
                                  shift.timeSheetStatus
                                FROM
                                  shift
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftStatus = ? AND
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.timeSheetStatus IS NULL AND
                                  shift.shiftDate BETWEEN ? AND ? ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isiiss", $clientid, $shiftStatusCheck, $positionid, $deptid, $startDate, $endDate) or die($mysqli->error);
    } else if (empty($canid) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.tandaShiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.shiftStatus,
                                  shift.shiftSMSStatus,
                                  shift.consultantId,
                                  shift.positionId,
                                  shift.timeSheetStatus
                                FROM
                                  shift
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftStatus = ? AND
                                  shift.positionId = ? AND
                                  shift.timeSheetStatus IS NULL AND
                                  shift.shiftDate BETWEEN ? AND ? ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isiss", $clientid, $shiftStatusCheck, $positionid, $startDate, $endDate) or die($mysqli->error);
    } else if (empty($canid) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.tandaShiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.shiftStatus,
                                  shift.shiftSMSStatus,
                                  shift.consultantId,
                                  shift.positionId,
                                  shift.timeSheetStatus
                                FROM
                                  shift
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftStatus = ? AND
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.timeSheetStatus IS NULL AND
                                  shift.shiftDate BETWEEN ? AND ? ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isiiss", $clientid, $shiftStatusCheck, $positionid, $deptid, $startDate, $endDate) or die($mysqli->error);
    } else if (empty($canid) && ($clientid == 'All') && ($positionid == 'All') && ($deptid <> 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.tandaShiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.shiftStatus,
                                  shift.shiftSMSStatus,
                                  shift.consultantId,
                                  shift.positionId,
                                  shift.timeSheetStatus
                                FROM
                                  shift
                                WHERE
                                  shift.departmentId = ? AND
                                  shift.shiftStatus = ? AND
                                  shift.timeSheetStatus IS NULL AND
                                  shift.shiftDate BETWEEN ? AND ? ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isss", $deptid, $shiftStatusCheck, $startDate, $endDate) or die($mysqli->error);
    } else if (empty($canid) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.tandaShiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.shiftStatus,
                                  shift.shiftSMSStatus,
                                  shift.consultantId,
                                  shift.positionId,
                                  shift.timeSheetStatus
                                FROM
                                  shift
                                WHERE
                                  shift.shiftStatus = ? AND
                                  shift.timeSheetStatus IS NULL AND
                                  shift.shiftDate BETWEEN ? AND ? ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("sss", $shiftStatusCheck, $startDate, $endDate) or die($mysqli->error);
    } else if (empty($canid) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid <> 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.tandaShiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.shiftStatus,
                                  shift.shiftSMSStatus,
                                  shift.consultantId,
                                  shift.positionId,
                                  shift.timeSheetStatus
                                FROM
                                  shift
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.shiftStatus = ? AND
                                  shift.timeSheetStatus IS NULL AND
                                  shift.shiftDate BETWEEN ? AND ? ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisss", $clientid, $deptid, $shiftStatusCheck, $startDate, $endDate) or die($mysqli->error);
    } else if (empty($canid) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.tandaShiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.shiftStatus,
                                  shift.shiftSMSStatus,
                                  shift.consultantId,
                                  shift.positionId,
                                  shift.timeSheetStatus
                                FROM
                                  shift
                                WHERE
                                  shift.positionId = ? AND 
                                  shift.shiftStatus = ? AND
                                  shift.timeSheetStatus IS NULL AND
                                  shift.shiftDate BETWEEN ? AND ? ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isss", $positionid, $shiftStatusCheck, $startDate, $endDate) or die($mysqli->error);
    } else if (!empty($canid) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.tandaShiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.shiftStatus,
                                  shift.shiftSMSStatus,
                                  shift.consultantId,
                                  shift.positionId,
                                  shift.timeSheetStatus
                                FROM
                                  shift
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.candidateId = ? AND
                                  shift.shiftStatus = ? AND
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.timeSheetStatus IS NULL AND
                                  shift.shiftDate BETWEEN ? AND ? ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("issiiss", $clientid, $canid, $shiftStatusCheck, $positionid, $deptid, $startDate, $endDate) or die($mysqli->error);
    } else if (!empty($canid) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.tandaShiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.shiftStatus,
                                  shift.shiftSMSStatus,
                                  shift.consultantId,
                                  shift.positionId,
                                  shift.timeSheetStatus
                                FROM
                                  shift
                                WHERE
                                  shift.candidateId = ? AND
                                  shift.shiftStatus = ? AND
                                  shift.timeSheetStatus IS NULL AND
                                  shift.shiftDate BETWEEN ? AND ? ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("ssss", $canid, $shiftStatusCheck, $startDate, $endDate) or die($mysqli->error);
    } else if (!empty($canid) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.tandaShiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.shiftStatus,
                                  shift.shiftSMSStatus,
                                  shift.consultantId,
                                  shift.positionId,
                                  shift.timeSheetStatus
                                FROM
                                  shift
                                WHERE
                                  shift.candidateId = ? AND
                                  shift.clientId = ? AND 
                                  shift.shiftStatus = ? AND
                                  shift.timeSheetStatus IS NULL AND
                                  shift.shiftDate BETWEEN ? AND ? ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("sisss", $canid, $clientid, $shiftStatusCheck, $startDate, $endDate) or die($mysqli->error);
    } else if (!empty($canid) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid <> 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.tandaShiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.shiftStatus,
                                  shift.shiftSMSStatus,
                                  shift.consultantId,
                                  shift.positionId,
                                  shift.timeSheetStatus
                                FROM
                                  shift
                                WHERE
                                  shift.candidateId = ? AND
                                  shift.positionId = ? AND 
                                  shift.shiftStatus = ? AND
                                  shift.timeSheetStatus IS NULL AND
                                  shift.shiftDate BETWEEN ? AND ? ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("sisss", $canid, $positionid, $shiftStatusCheck, $startDate, $endDate) or die($mysqli->error);
    } else if (!empty($canid) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.tandaShiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.shiftStatus,
                                  shift.shiftSMSStatus,
                                  shift.consultantId,
                                  shift.positionId,
                                  shift.timeSheetStatus
                                FROM
                                  shift
                                WHERE
                                  shift.candidateId = ? AND
                                  shift.clientId = ? AND
                                  shift.positionId = ? AND 
                                  shift.shiftStatus = ? AND
                                  shift.timeSheetStatus IS NULL AND
                                  shift.shiftDate BETWEEN ? AND ? ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("siisss", $canid, $clientid, $positionid, $shiftStatusCheck, $startDate, $endDate) or die($mysqli->error);
    } else if (!empty($canid) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid <> 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.tandaShiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.shiftStatus,
                                  shift.shiftSMSStatus,
                                  shift.consultantId,
                                  shift.positionId,
                                  shift.timeSheetStatus
                                FROM
                                  shift
                                WHERE
                                  shift.candidateId = ? AND
                                  shift.clientId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftStatus = ? AND
                                  shift.timeSheetStatus IS NULL AND
                                  shift.shiftDate BETWEEN ? AND ? ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("siisss", $canid, $clientid, $deptid, $shiftStatusCheck, $startDate, $endDate) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.tandaShiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.candidateId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftNote,
                                  shift.shiftStatus,
                                  shift.shiftSMSStatus,
                                  shift.consultantId,
                                  shift.positionId,
                                  shift.timeSheetStatus
                                FROM
                                  shift
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.candidateId = ? AND
                                  shift.shiftStatus = ? AND
                                  shift.positionId = ? AND
                                  shift.timeSheetStatus IS NULL AND
                                  shift.shiftDate BETWEEN ? AND ? ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isisss", $clientid, $canid, $shiftStatusCheck, $positionid, $startDate, $endDate) or die($mysqli->error);
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $tandaShiftId, $shiftDate, $shiftDay, $clientId, $stateId, $departmentId, $candidateId, $shiftStart, $shiftEnd, $workBreak, $shiftNote, $shiftStatus, $shiftSMSStatus, $consultantId, $positionId, $timeSheetStatus) or die($mysqli->error);
    $count = 0;
    $transport = '';
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td><input type="hidden" name="shiftId[]" value="' . $shiftId . '" class="shid"/><input type="hidden" name="tandaShiftId[]" value="' . $tandaShiftId . '" class="tshid"/><input type="hidden" name="shiftDay[]" value="' . $shiftDay . '" class="shday"/><input type="hidden" name="shiftDate[]" value="' . $shiftDate . '" class="shdate"/>' . $shiftDay . ' ' . $shiftDate . '</td><td><input type="hidden" name="candidateId[]" value="' . $candidateId . '" class="canid">' . $candidateId . ' ' . getCandidateFirstNameByCandidateId($mysqli, $candidateId) . ' ' . getCandidateLastNameByCandidateId($mysqli, $candidateId) . '(' . getNickNameById($mysqli, $candidateId) . ')</td>';
        $row = $row . '<td><label for="clid" class="select"><select name="clid[]" class="clid">' . getClientListForDropDown($mysqli, $clientId) . '</select></td>';
        //$row = $row.'<td><label for="posid" class="select"><select name="posid[]" id="posid'.$count.'" class="posid">'.getPositionListForDropDown($mysqli,$positionId).'</select></label></td>';
        $row = $row . '<td><label for="posid" class="select"><select name="posid[]" id="posid' . $count . '" class="posid">' . getClientPositionsListForTimesheetCheck($mysqli, $clientId, $positionId) . '</select></label></td>';
        $row = $row . '<td><label for="deptId" class="select"><select name="deptId[]" id="deptId' . $count . '" class="deptId">' . getClientDepartmentsListDropdown($mysqli, $clientId, $departmentId) . '</select></label></td>';
        $row = $row . '<td><input type="hidden" name="jobCode[]" class="jbcode" value="' . getJobCodeByClientPosition($mysqli, $clientId, $positionId, $departmentId) . '"/><span class="jbc">' . getJobCodeByClientPosition($mysqli, $clientId, $positionId, $departmentId) . '</span></td>';
        $row = $row . '<td></td>';
        $row = $row . '<td></td>';
        $row = $row . '<td></td>';
        $row = $row . '<td></td>';
        $row = $row . '<td></td>';
        $row = $row . '<td></td>';
        $row = $row . '<td></td>';
        $row = $row . '<td></td>';
        $row = $row . '<td></td>';
        $row = $row . '<td></td>';
        /* getClientDepartmentsDropdown($mysqli,$clientId,$deptid) getClientDepartmentsListDropdown($mysqli,$clientId)*/
        /*$row = $row.'<td><input type="hidden" name="deptId[]" class="deptId" value="'.$departmentId.'"/><span class="deptId">'.getDepartmentById($mysqli,$departmentId).'</span></td>';*/

        $row = $row . '<td><input type="text" name="shiftStart[]" class="shStart" value="' . $shiftStart . '" size="5"/></td>';
        $row = $row . '<td><input type="text" name="shiftEnd[]" class="shEnd" value="' . $shiftEnd . '" size="5"/></td>';
        $row = $row . '<td><input type="text" name="workBreak[]" class="break" value="' . $workBreak . '" size="3"/></td>';
        $row = $row . '<td><span class="totalHrs"></span><input type="hidden" name="wrkhrs[]" class="hrs" value="' . calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak) . '" size="5"/></td>';
        $row = $row . '<td></td>';
        $row = $row . '<td><label for="transport" class="select"><select name="transport[]" class="transport">' . getTransportMethods($mysqli, $transport) . '</select></label><i></i></td>';
        $row = $row . '<td><input type="checkbox" name="timeSheetTick[' . $count . ']" class="timeSheetTick" value="' . $shiftId . '"/></td></tr>';
        $count++;
    }
    return $row;
}

function getPositionListForDropDown($mysqli, $positionId)
{
    $select = $mysqli->prepare("SELECT positionid,positionName FROM candidate_position ORDER BY positionName ASC ") or die($mysqli->error);
    $select->execute();
    $select->bind_result($positionid, $positionName) or die($mysqli->error);
    $opt = '<option selected="selected" value="None">Select Position</option>';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $positionid . '"';
        if ($positionId == $positionid) {
            $opt = $opt . 'selected="selected"';
        }
        $opt = $opt . '>' . $positionName . '</option>';
    }
    return $opt;
}

function getClientListForDropDown($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT clientId as clid,client FROM client ORDER BY client") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clid, $client) or die($mysqli->error);
    $opt = '<option disabled="disabled" selected="selected" value="None">Select Client</option>';
    while ($sql->fetch()) {
        $opt = $opt . '<option value="' . $clid . '"';
        if ($clid == $clientId) {
            $opt = $opt . 'selected="selected"';
        }
        $opt = $opt . '>' . $client . '</option>';
    }
    return $opt;
}

function getAllClientsListDropDown($mysqli)
{
    $sql = $mysqli->prepare("SELECT clientId,client FROM client ORDER BY client") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clientId, $client) or die($mysqli->error);
    $opt = '';
    while ($sql->fetch()) {
        $opt = $opt . '<option value="' . $clientId . '">' . $client . '</option>';
    }
    return $opt;
}

function validateTimeSheetEntry($mysqli, $shiftId)
{
    $sqlchk = $mysqli->prepare("SELECT timeSheetId FROM timesheet WHERE shiftId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("i", $shiftId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function updateShiftTimeSheetStatus($mysqli, $shiftId, $timeSheetStatus)
{
    $up = $mysqli->prepare("UPDATE shift SET timeSheetStatus = ? WHERE shiftId = ?") or die($mysqli->error);
    $up->bind_param("si", $timeSheetStatus, $shiftId) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    if ($nrows == '1') {
        $up->free_result();
        return true;
    } else {
        return false;
    }
}

function deleteTimeSheet($mysqli, $shiftId)
{
    $del = $mysqli->prepare("DELETE FROM timesheet WHERE shiftId = ?") or die($mysqli->error);
    $del->bind_param("i", $shiftId) or die($mysqli->error);
    $del->execute();
}

function saveTimeSheet($mysqli, $shiftId, $tandaShiftId, $shiftDay, $shiftDate, $candidateId, $clid, $posid, $deptid, $jobCode, $shiftStart, $shiftEnd, $workBreak, $wrkhrs, $weekendingDate, $transport, $timeSheetTick)
{
    $statusCheck = '';
    $accountsEdit = 'Y';
    if ($jobCode == 'None') {
        $statusCheck = 'Please select a valid Job Code';
    } else {
        if(empty($jobCode)){
            $jobCode = getJobCodeByClientPosition($mysqli,$clid, $posid, $deptid);
        }
        if (!empty($timeSheetTick) && ($clid != 'None' || $clid != NULL) && ($posid != 'None' || $posid != NULL)) {
            if (!validateTimeSheetEntry($mysqli, $shiftId)) {
                $ins = $mysqli->prepare("INSERT INTO timesheet(shiftId,tandaShiftId,shiftDate,shiftDay,candidateId,clientId,positionId,deptId,jobCode,shiftStart,shiftEnd,workBreak,wrkHrs,weekendingDate,status,transport,accountsEdit)VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
                $ins->bind_param("iisssiiissssssiss", $shiftId, $tandaShiftId, $shiftDate, $shiftDay, $candidateId, $clid, $posid, $deptid, $jobCode, $shiftStart, $shiftEnd, $workBreak, $wrkhrs, $weekendingDate, $timeSheetTick, $transport, $accountsEdit) or die($mysqli->error);
                $ins->execute();
                $nrows = $ins->affected_rows;
                if ($nrows > 0) {
                    $ins->free_result();
                    $timeSheetStatus = 'UPDATED';
                    $stat = updateShiftTimeSheetStatus($mysqli, $shiftId, $timeSheetStatus);
                    if ($stat) {
                        $statusCheck = 'inserted';
                    } else {
                        $statusCheck = 'error inserting timesheet status';
                    }
                } else {
                    $statusCheck = $mysqli->error;
                }
            } else {
                $up = $mysqli->prepare("UPDATE timesheet SET shiftDate = ?,shiftDay = ?,candidateId = ?,clientId = ?,positionId = ?, deptId = ?, jobCode = ?,shiftStart = ?,shiftEnd = ?,workBreak = ?,wrkHrs = ?, weekendingDate = ?, status = ?, transport = ?, accountsEdit = ? WHERE shiftId = ?") or die($mysqli->error);
                $up->bind_param("sssiiissssssissi", $shiftDate, $shiftDay, $candidateId, $clid, $posid, $deptid, $jobCode, $shiftStart, $shiftEnd, $workBreak, $wrkhrs, $weekendingDate, $timeSheetTick, $transport, $accountsEdit, $shiftId) or die($mysqli->error);
                $up->execute();
                $nrows = $up->affected_rows;
                if ($nrows > 0) {
                    //$up->free_result();
                    $statusCheck = 'updated';
                } else {
                    $statusCheck = 'error updating timesheet shifts' . $mysqli->error;
                }
            }
        } else {
            $statusCheck = 'please tick at least one checkbox';
        }
    }
    return $statusCheck;
}

function getUpdatedTimeSheets($mysqli, $clientid, $canId, $positionid, $deptid, $startDate, $endDate, $appStatus)
{

    if (empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.tandaShiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.transport,
                                  timesheet.comments,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak
                                FROM
                                  timesheet
                                INNER JOIN shift ON (timesheet.shiftId = shift.shiftId)
                                LEFT OUTER JOIN timeclock ON (timesheet.shiftId = timeclock.shiftId)
                                WHERE
                                  timesheet.clientId = ? AND 
                                  timesheet.positionId = ? AND
                                  timesheet.deptId = ? AND
                                  timesheet.appStatus = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ?
                                ORDER BY timesheet.candidateId,timesheet.shiftDate ASC LIMIT 0,300") or die($mysqli->error);
        $sql->bind_param("iiisss", $clientid, $positionid, $deptid, $appStatus, $startDate, $endDate) or die($mysqli->error);
    } else if (empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.tandaShiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.transport,
                                  timesheet.comments,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak
                                FROM
                                  timesheet
                                INNER JOIN shift ON (timesheet.shiftId = shift.shiftId)
                                LEFT OUTER JOIN timeclock ON (timesheet.shiftId = timeclock.shiftId)
                                WHERE
                                  timesheet.clientId = ? AND 
                                  timesheet.appStatus = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ?
                                ORDER BY timesheet.shiftDate ASC LIMIT 0,300") or die($mysqli->error);
        $sql->bind_param("isss", $clientid, $appStatus, $startDate, $endDate) or die($mysqli->error);
    } else if (empty($canId) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid <> 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.tandaShiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.transport,
                                  timesheet.comments,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak
                                FROM
                                  timesheet
                                INNER JOIN shift ON (timesheet.shiftId = shift.shiftId)
                                LEFT OUTER JOIN timeclock ON (timesheet.shiftId = timeclock.shiftId)
                                WHERE
                                  timesheet.positionId = ? AND
                                  timesheet.deptId = ? AND
                                  timesheet.appStatus = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ?
                                ORDER BY timesheet.candidateId,timesheet.shiftDate ASC LIMIT 0,300") or die($mysqli->error);
        $sql->bind_param("iisss", $positionid, $deptid, $appStatus, $startDate, $endDate) or die($mysqli->error);
    } else if (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid <> 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.tandaShiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.transport,
                                  timesheet.comments,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak
                                FROM
                                  timesheet
                                INNER JOIN shift ON (timesheet.shiftId = shift.shiftId)
                                LEFT OUTER JOIN timeclock ON (timesheet.shiftId = timeclock.shiftId)
                                WHERE
                                  timesheet.deptId = ? AND
                                  timesheet.appStatus = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ?
                                ORDER BY timesheet.candidateId,timesheet.shiftDate ASC LIMIT 0,300") or die($mysqli->error);
        $sql->bind_param("isss", $deptid, $appStatus, $startDate, $endDate) or die($mysqli->error);
    } else if (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.tandaShiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.transport,
                                  timesheet.comments,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak
                                FROM
                                  timesheet
                                INNER JOIN shift ON (timesheet.shiftId = shift.shiftId)
                                LEFT OUTER JOIN timeclock ON (timesheet.shiftId = timeclock.shiftId)
                                WHERE
                                  timesheet.appStatus = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ?
                                ORDER BY timesheet.candidateId,timesheet.shiftDate ASC LIMIT 0,300") or die($mysqli->error);
        $sql->bind_param("sss", $appStatus, $startDate, $endDate) or die($mysqli->error);
    } else if (!empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.tandaShiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.transport,
                                  timesheet.comments,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak
                                FROM
                                  timesheet
                                INNER JOIN shift ON (timesheet.shiftId = shift.shiftId)
                                LEFT OUTER JOIN timeclock ON (timesheet.shiftId = timeclock.shiftId)
                                WHERE
                                  timesheet.candidateId = ? AND
                                  timesheet.clientId = ? AND 
                                  timesheet.positionId = ? AND
                                  timesheet.deptId = ? AND
                                  timesheet.appStatus = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ?
                                ORDER BY timesheet.candidateId,timesheet.shiftDate ASC LIMIT 0,300") or die($mysqli->error);
        $sql->bind_param("siiisss", $canId, $clientid, $positionid, $deptid, $appStatus, $startDate, $endDate) or die($mysqli->error);
    } else if (empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.tandaShiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.transport,
                                  timesheet.comments,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak
                                FROM
                                  timesheet
                                INNER JOIN shift ON (timesheet.shiftId = shift.shiftId)
                                LEFT OUTER JOIN timeclock ON (timesheet.shiftId = timeclock.shiftId)
                                WHERE
                                  timesheet.clientId = ? AND 
                                  timesheet.positionId = ? AND
                                  timesheet.appStatus = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ?
                                ORDER BY timesheet.candidateId,timesheet.shiftDate ASC LIMIT 0,300") or die($mysqli->error);
        $sql->bind_param("iisss", $clientid, $positionid, $appStatus, $startDate, $endDate) or die($mysqli->error);
    } else if (empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid <> 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.tandaShiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.transport,
                                  timesheet.comments,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak
                                FROM
                                  timesheet
                                INNER JOIN shift ON (timesheet.shiftId = shift.shiftId)
                                LEFT OUTER JOIN timeclock ON (timesheet.shiftId = timeclock.shiftId)
                                WHERE
                                  timesheet.clientId = ? AND 
                                  timesheet.deptId = ? AND
                                  timesheet.appStatus = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ?
                                ORDER BY timesheet.candidateId,timesheet.shiftDate ASC LIMIT 0,300") or die($mysqli->error);
        $sql->bind_param("iisss", $clientid, $deptid, $appStatus, $startDate, $endDate) or die($mysqli->error);
    } else if (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.tandaShiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.transport,
                                  timesheet.comments,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak
                                FROM
                                  timesheet
                                INNER JOIN shift ON (timesheet.shiftId = shift.shiftId)
                                LEFT OUTER JOIN timeclock ON (timesheet.shiftId = timeclock.shiftId)
                                WHERE
                                  timesheet.appStatus = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ?
                                ORDER BY timesheet.candidateId,timesheet.shiftDate ASC LIMIT 0,300") or die($mysqli->error);
        $sql->bind_param("sss", $appStatus, $startDate, $endDate) or die($mysqli->error);
    } else if (!empty($canId) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid <> 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.tandaShiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.transport,
                                  timesheet.comments,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak
                                FROM
                                  timesheet
                                INNER JOIN shift ON (timesheet.shiftId = shift.shiftId)
                                LEFT OUTER JOIN timeclock ON (timesheet.shiftId = timeclock.shiftId)
                                WHERE
                                  timesheet.candidateId = ? AND 
                                  timesheet.positionId = ? AND
                                  timesheet.deptId = ? AND
                                  timesheet.appStatus = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ?
                                ORDER BY timesheet.candidateId,timesheet.shiftDate ASC LIMIT 0,300") or die($mysqli->error);
        $sql->bind_param("siisss", $canId, $positionid, $deptid, $appStatus, $startDate, $endDate) or die($mysqli->error);
    } else if (!empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.tandaShiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.transport,
                                  timesheet.comments,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak
                                FROM
                                  timesheet
                                INNER JOIN shift ON (timesheet.shiftId = shift.shiftId)
                                LEFT OUTER JOIN timeclock ON (timesheet.shiftId = timeclock.shiftId)
                                WHERE
                                  timesheet.candidateId = ? AND 
                                  timesheet.clientId = ? AND
                                  timesheet.appStatus = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ?
                                ORDER BY timesheet.candidateId,timesheet.shiftDate ASC LIMIT 0,300") or die($mysqli->error);
        $sql->bind_param("sisss", $canId, $clientid, $appStatus, $startDate, $endDate) or die($mysqli->error);
    } else if (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid <> 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.tandaShiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.transport,
                                  timesheet.comments,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak
                                FROM
                                  timesheet
                                INNER JOIN shift ON (timesheet.shiftId = shift.shiftId)
                                LEFT OUTER JOIN timeclock ON (timesheet.shiftId = timeclock.shiftId)
                                WHERE
                                  timesheet.candidateId = ? AND
                                  timesheet.deptId = ? AND
                                  timesheet.appStatus = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ?
                                ORDER BY timesheet.candidateId,timesheet.shiftDate ASC LIMIT 0,300") or die($mysqli->error);
        $sql->bind_param("sisss", $canId, $deptid, $appStatus, $startDate, $endDate) or die($mysqli->error);
    } else if (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.tandaShiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.transport,
                                  timesheet.comments,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak
                                FROM
                                  timesheet
                                INNER JOIN shift ON (timesheet.shiftId = shift.shiftId)
                                LEFT OUTER JOIN timeclock ON (timesheet.shiftId = timeclock.shiftId)
                                WHERE
                                  timesheet.candidateId = ? AND
                                  timesheet.appStatus = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ?
                                ORDER BY timesheet.candidateId,timesheet.shiftDate ASC LIMIT 0,300") or die($mysqli->error);
        $sql->bind_param("ssss", $canId, $appStatus, $startDate, $endDate) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.tandaShiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.transport,
                                  timesheet.comments,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak
                                FROM
                                  timesheet
                                INNER JOIN shift ON (timesheet.shiftId = shift.shiftId)
                                LEFT OUTER JOIN timeclock ON (timesheet.shiftId = timeclock.shiftId)
                                WHERE
                                  timesheet.clientId = ? AND 
                                  timesheet.candidateId = ? AND
                                  timesheet.positionId = ? AND
                                  timesheet.deptId = ? AND
                                  timesheet.appStatus = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ?
                                ORDER BY timesheet.candidateId,timesheet.shiftDate ASC LIMIT 0,300") or die($mysqli->error);
        $sql->bind_param("isiisss", $clientid, $canId, $positionid, $deptid, $appStatus, $startDate, $endDate) or die($mysqli->error);
    }

    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $tandaShiftId, $shiftDate, $shiftDay, $candidateId, $clientId, $positionId, $deptId, $jobCode, $shiftStart, $shiftEnd, $workBreak, $wrkHrs, $transport, $comments, $rosterStart, $rosterEnd, $checkIn, $checkOut, $supervisorCheckIn,
        $supervisorCheckOut, $supervisorBreak) or die($mysqli->error);
    $count = 0;
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td><input type="hidden" name="shiftId[]" value="' . $shiftId . '" class="shid"/><input type="hidden" name="tandaShiftId[]" value="' . $tandaShiftId . '" class="tshid"/><input type="hidden" name="shiftDay[]" value="' . $shiftDay . '" class="shday"/><input type="hidden" name="shiftDate[]" value="' . $shiftDate . '" class="shdate"/>' . $shiftDay . ' ' . $shiftDate . '</td><td><input type="hidden" name="candidateId[]" value="' . $candidateId . '" class="canid">' . $candidateId . ' ' . getCandidateFirstNameByCandidateId($mysqli, $candidateId) . ' ' . getCandidateLastNameByCandidateId($mysqli, $candidateId) . '(' . getNickNameById($mysqli, $candidateId) . ')</td>';
        $row = $row . '<td><label for="clid" class="select"><select name="clid[]" class="clid">' . getClientListForDropDown($mysqli, $clientId) . '</select></td>';
        /* $row = $row . '<td><label for="posid" class="select"><select name="posid[]" id="posid'.$count.'" class="posid">' . getPositionListForDropDown($mysqli, $positionId) . '</select><i></i></label></td>';*/
        $row = $row . '<td><label for="posid" class="select"><select name="posid[]" id="posid' . $count . '" class="posid">' . getClientPositionsListForTimesheetCheck($mysqli, $clientId, $positionId) . '</select><i></i></label></td>';
        $row = $row . '<td><label for="deptId" class="select"><select name="deptId[]" id="deptId' . $count . '" class="deptId">' . getClientDepartmentsListDropdown($mysqli, $clientId, $deptId) . '</select></label></td>';
        $row = $row . '<td class="jbd"><input type="hidden" name="jobCode[]" class="jbcode" value="' . getJobCodeByClientPosition($mysqli, $clientId, $positionId, $deptId) . '"/><span class="jbc">' . getJobCodeByClientPosition($mysqli, $clientId, $positionId, $deptId) . '</span></td>';
        $row = $row . '<td><input type="text" name="rosterStart[]" class="rosterStart" value="' . $rosterStart . '" size="5"/></td>';
        $row = $row . '<td><input type="text" name="rosterEnd[]" class="rosterEnd" value="' . $rosterEnd . '" size="5"/></td>';
        $row = $row . '<td><input type="checkbox" name="pick_roster_time[]" class="pick_roster_time"/></td>';
        $row = $row . '<td><input type="text" name="checkIn[]" class="checkIn" value="' . $checkIn . '" size="5"/></td>';
        $row = $row . '<td><input type="text" name="checkOut[]" class="checkOut" value="' . $checkOut . '" size="5"/></td>';
        $row = $row . '<td><input type="checkbox" name="pick_check_in_out_time[]" class="pick_check_in_out_time"/></td>';
        $row = $row . '<td><input type="text" name="supervisorCheckIn[]" class="supervisorCheckIn" value="' . $supervisorCheckIn . '" size="5"/></td>';
        $row = $row . '<td><input type="text" name="supervisorCheckOut[]" class="supervisorCheckOut" value="' . $supervisorCheckOut . '" size="5"/></td>';
        $row = $row . '<td><input type="text" name="supervisorBreakTime[]" class="supervisorBreakTime" value="' . $supervisorBreak . '" size="5"/></td>';
        $row = $row . '<td><input type="checkbox" name="pick_supervisor_time[]" class="pick_supervisor_time"/></td>';
        /* $row = $row . '<td><input type="hidden" name="deptId[]" class="deptId" value="' . $deptId . '"/><span class="deptId">' . getDepartmentById($mysqli, $deptId) . '</span></td>';*/
        $row = $row . '<td><input type="text" name="shiftStart[]" class="shStart" value="' . $shiftStart . '" size="5"/></td>';
        $row = $row . '<td><input type="text" name="shiftEnd[]" class="shEnd" value="' . $shiftEnd . '" size="5"/></td>';
        $row = $row . '<td><input type="text" name="workBreak[]" class="break" value="' . $workBreak . '" size="3"/></td>';
        $row = $row . '<td><span class="totalHrs"></span><input type="hidden" name="wrkhrs[]" class="hrs" value="' . $wrkHrs . '" size="5"/></td>';
        $row = $row . '<td><textarea type="text" name="comments[]" class="comments" cols="10" rows="2">' . $comments . '</textarea><button class="commentEdit btn btn-sm btn-info reverse" data-shift-id="' . $shiftId . '"><i class="fa fa-pencil"></i></button></td>';
        $row = $row . '<td><label for="transport" class="select"><select name="transport[]" class="transport">' . getTransportMethods($mysqli, $transport) . '</select></label><i></i></td>';
        $row = $row . '<td><input type="checkbox" name="timeSheetTick[' . $count . ']" class="timeSheetTick" value="' . $shiftId . '"/></input></td></tr>';
        $count++;
    }
    return $row;
}

function getTransportMethods($mysqli, $trsPort)
{
    $select = $mysqli->prepare("SELECT transport FROM transport_method ORDER BY transport ASC ") or die($mysqli->error);
    $select->execute();
    $select->bind_result($transport) or die($mysqli->error);
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $transport . '"';
        if ($trsPort == $transport) {
            $opt = $opt . 'selected="selected"';
        }
        $opt = $opt . '>' . $transport . '</option>';
    }
    return $opt;
}

function isWeekend($date)
{
    //return (date('N', strtotime($date)) >= 6);
    /*$weekDay = date('w', strtotime($date));
    return ($weekDay == 0 || $weekDay == 6);*/
    if (date('w', strtotime($date)) == 6 || date('w', strtotime($date)) == 0) {//0 for sun 6 for sat
        return 'weekend';
    } else {
        return 'weekday';
    }
}

function getStateByDepartment($mysqli, $deptId)
{
    $sql = $mysqli->prepare("SELECT stateId FROM department WHERE deptId = ?") or die($mysqli->error);
    $sql->bind_param("i", $deptId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->stateId;
    } else {
        return null;
    }
}

function isPublicHoliday($mysqli, $shiftDate, $deptId)
{
    $stateId = getStateByDepartment($mysqli, $deptId);
    $sql = $mysqli->prepare("SELECT publicHolidayDate FROM public_holiday WHERE publicHolidayDate = ? AND stateId = ?") or die($mysqli->error);
    $sql->bind_param("si", $shiftDate, $stateId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->fetch();
    $num_of_rows = $sql->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function getDiskFreeSpace()
{
    $bytes = disk_free_space("/");
    $si_prefix = array('B', 'KB', 'MB', 'GB', 'TB', 'EB', 'ZB', 'YB');
    $base = 1024;
    $class = min((int)log($bytes, $base), count($si_prefix) - 1);
    //echo $bytes . '<br />';
    //echo sprintf('%1.2f', $bytes / pow($base, $class)) . ' ' . $si_prefix[$class] . '<br />';
    $print = number_format($bytes / pow($base, $class), 2) . $si_prefix[$class];
    return 'Web Server Disk Free Space:  ' . $print;
}

function getTotalDiskSpace()
{
    $bytes = disk_total_space("/");
    $si_prefix = array('B', 'KB', 'MB', 'GB', 'TB', 'EB', 'ZB', 'YB');
    $base = 1024;

    $class = min((int)log($bytes, $base), count($si_prefix) - 1);

    //echo $bytes . '<br />';
    $print = sprintf('%1.2f', $bytes / pow($base, $class)) . $si_prefix[$class];
    return 'Web Server Total Disk Space: ' . $print;
}

function loadPublicHolidays($mysqli)
{
    $sql = $mysqli->prepare("SELECT publicHolidayId, publicHolidayDate,stateId FROM public_holiday") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($publicHolidayId, $publicHolidayDate, $stateId) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>' . $publicHolidayDate . '</td><td>' . getStateById($mysqli, $stateId) . '</td><td data-pholidayid="' . $publicHolidayId . '"><button type="button" name="deletePubHolidayBtn" id="deletePubHolidayBtn" value="remove" class="deletePubHolidayBtn btn btn-danger btn-sm">&nbsp;<i class="glyphicon glyphicon-trash"></i>&nbsp;</button></td></tr>';
    }
    return $row;
}

function removePublicHoliday($mysqli, $publicHolidayId)
{
    $del = $mysqli->prepare("DELETE FROM public_holiday WHERE publicHolidayId = ?") or die ($mysqli->error);
    $del->bind_param("i", $publicHolidayId) or die($mysqli->error);
    $del->execute();
    return loadPublicHolidays($mysqli);
}

function savePublicHoliday($mysqli, $publicHoliday, $stateId)
{
    $ins = $mysqli->prepare("INSERT INTO public_holiday(publicHolidayDate,stateId)VALUES(?,?)") or die($mysqli->error);
    $ins->bind_param("si", $publicHoliday, $stateId) or die($mysqli->error);
    $ins->execute();
    return loadPublicHolidays($mysqli);
}

function calculatePayrollHoursForWeekDay($shiftDay, $shiftDate, $shiftStart, $shiftEnd, $workBreak)
{
    if ($shiftEnd < $shiftStart) {
        $shiftEndDate = date('Y-m-d', strtotime($shiftDate . ' + 1 day'));
    } else {
        $shiftEndDate = $shiftDate;
    }

    $starttime = strtotime($shiftDate . ' ' . $shiftStart . ':00');
    $endtime = strtotime($shiftEndDate . ' ' . $shiftEnd . ':00');
    $diff = $endtime - $starttime;
    $breaks = $workBreak * 60;
    $totalHours = ($diff - $breaks) / 60 / 60;
    $row = '';
    if ($totalHours > 4) {
        if ($totalHours > 8) {
            $row = $row . '<td class="ordinary">' . number_format(8, 2) . '</td>';
            $extraHrs = ($totalHours - 8);
            if ($extraHrs < 3) {
                //T1.5
                $row = $row . '<td class="overtime">' . number_format($extraHrs, 2) . '</td><td class="doubletime"></td><td class="holiday"></td>';
            } else {
                //T2.0
                $row = $row . '<td class="overtime">&nbsp;</td><td class="doubletime">' . number_format($extraHrs, 2) . '</td><td class="holiday"></td>';
            }
        } else if ($totalHours <= 8) {
            $row = $row . '<td class="ordinary">' . number_format($totalHours, 2) . '</td><td class="overtime"></td><td class="doubletime"></td><td class="holiday"></td>';
        }
        return $row;
    } else {
        return $row . '<td class="ordinary"></td><td class="overtime"></td><td class="doubletime"></td><td class="holiday"></td>';
    }
    /*$info = $info . 'clocked in: ' . $shiftDate . ' ' . $shiftStart . ':00' . '>>';
    $info = $info . 'clocked out: ' . $shiftEndDate . ' ' . $shiftEnd . ':00' . '>>';
    $info = $info . 'breaks: ' . $breaks . ' minutes >>';
    $info = $info . 'hours worked: ' . number_format($hours, 2) . ' ';
    return number_format($hours, 2);*/
}

function calculatePayrollHoursForWeekEnd($shiftDay, $shiftDate, $shiftStart, $shiftEnd, $workBreak)
{
    if ($shiftEnd < $shiftStart) {
        $shiftEndDate = date('Y-m-d', strtotime($shiftDate . ' + 1 day'));
    } else {
        $shiftEndDate = $shiftDate;
    }

    $starttime = strtotime($shiftDate . ' ' . $shiftStart . ':00');
    $endtime = strtotime($shiftEndDate . ' ' . $shiftEnd . ':00');
    $diff = $endtime - $starttime;
    $breaks = $workBreak * 60;
    $totalHours = ($diff - $breaks) / 60 / 60;


    $fromMidnight = strtotime($shiftDate . ' ' . '00:00:00');
    $toMidnight = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . '00:00:00');

    $row = '';
    if ($shiftDay == 'Sat') {
        if ($starttime >= $fromMidnight && $endtime <= $toMidnight) {
            return $row = $row . '<td class="ordinary"></td><td class="overtime">' . number_format($totalHours, 2) . '</td><td class="doubletime"></td><td class="holiday"></td>';
        }
    } else if ($shiftDay == 'Sun') {
        if ($starttime >= $fromMidnight && $endtime <= $toMidnight) {
            return $row = $row . '<td class="ordinary"></td><td class="overtime"></td><td class="doubletime">' . number_format($totalHours, 2) . '</td><td class="holiday"></td>';
        }
    }
    /*if($totalHours>4){
        if($totalHours>8){
            $row = $row.'<td>8</td>';
            $extraHrs = ($totalHours-8);
            if($extraHrs<3){
                //T2.0
                $row = $row.'<td>&nbsp;1</td><td>'.number_format($extraHrs,2).'</td><td>&nbsp;</td>';
            }else{
                //T1.5
                $row = $row.'<td>&nbsp;2</td><td>'.number_format($extraHrs,2).'</td><td>&nbsp;</td>';
            }
        }else if($totalHours<=8){
            $row = $row.'<td>'.number_format($totalHours,2).'</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>';
        }
        return $row;
    }else{
        return $row.'<td colspan="4">less than 4 hours</td>';
    }*/
}

function saveCompanyInformation($mysqli, $companyName, $abn, $acn, $companyAddress, $phone, $fax, $companyDesc, $website, $remittanceEmail, $companyNote)
{
    $ins = $mysqli->prepare("INSERT INTO company(companyName,companyAddress,telephone,fax,companyDesc,website,remittanceEmail,abn,acn,companyNote) VALUES(?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
    $ins->bind_param("sssssssiis", $companyName, $companyAddress, $phone, $fax, $companyDesc, $website, $remittanceEmail, $abn, $acn, $companyNote) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows > 0) {
        $ins->free_result();
        $statusCheck = 'inserted';
    } else {
        $statusCheck = $mysqli->error;
    }
    return $statusCheck;
}

function updateCompanyInformation($mysqli, $companyId, $companyName, $abn, $acn, $companyAddress, $phone, $fax, $companyDesc, $website, $remittanceEmail, $companyNote)
{
    $up = $mysqli->prepare("UPDATE company SET companyName = ?, abn = ?,acn = ?, companyAddress = ?, telephone = ?,fax = ?, companyDesc = ?, website = ?, remittanceEmail = ?, companyNote = ? WHERE companyId = ?") or die($mysqli->error);
    $up->bind_param("siisssssssi", $companyName, $abn, $acn, $companyAddress, $phone, $fax, $companyDesc, $website, $remittanceEmail, $companyNote, $companyId) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    if ($nrows == '1') {
        $up->free_result();
        return 'updated';
    } else {
        return $mysqli->error;
    }
}

function calculateOvertimeBreaking($mysqli, $shiftDay, $shiftDate, $shiftStart, $shiftEnd, $workBreak, $jobCode, $payRule, $deptId)
{
    $minimuHours;
    $avgNormalHours;
    $earlyMorningHours;
    $ordinaryHours;
    $afterHours;
    $mealbreakLimit;
    $ruleSQL = $mysqli->prepare("SELECT 
                                      payrule.payruleId,
                                      payrule.jobCode,
                                      payrule.payAwrdCode,
                                      payrule.payAwrdDesc,
                                      payrule.avgNormalHrs,
                                      payrule.spreadStart,
                                      payrule.spreadEnd,
                                      payrule.spreadDuration,
                                      payrule.firstEightHours,
                                      payrule.minimumHrs,
                                      payrule.earlyMorningStartTime,
                                      payrule.earlyMorningEndTime,
                                      payrule.dayShiftStartTime,
                                      payrule.dayShiftEndTime,
                                      payrule.afternoonShiftStartTime,
                                      payrule.afternoonShiftEndTime,
                                      payrule.nightShiftStartTime,
                                      payrule.nightShiftEndTime,
                                      payrule.overtime,
                                      payrule.overtimeAfterHrs,
                                      payrule.overtimeSatAfterHrs,
                                      payrule.overtimeSunAfterHrs,
                                      payrule.doubletime,
                                      payrule.saturday,
                                      payrule.sunday,
                                      payrule.publicHoliday,
                                      payrule.overtimeRule,
                                      payrule.mealBreakLimit
                                    FROM
                                      payrule
                                    WHERE
                                      payrule.jobCode = ?") or die($mysqli->error);
    $ruleSQL->bind_param("s", $jobCode) or die($mysqli->error);
    $ruleSQL->execute();
    $ruleSQL->store_result();
    $ruleSQL->bind_result($payruleId, $jobCode, $payAwrdCode, $payAwrdDesc, $avgNormalHrs, $spreadStart, $spreadEnd, $spreadDuration, $firstEightHours, $minimumHrs, $earlyMorningStartTime, $earlyMorningEndTime, $dayShiftStartTime, $dayShiftEndTime, $afternoonShiftStartTime, $afternoonShiftEndTime,
        $nightShiftStartTime, $nightShiftEndTime, $overtime, $overtimeAfterHrs, $overtimeSatAfterHrs, $overtimeSunAfterHrs, $doubletime, $saturday, $sunday, $publicHoliday, $overtimeRule, $mealBreakLimit) or die($mysqli->error);

    while ($ruleSQL->fetch()) {
        $minimumHours = $minimumHrs;
        $avgNormalHours = $avgNormalHrs;
        $ordinaryHoursSpread = $spreadDuration;
        $firstEightHours = $firstEightHours;
        $earlyMorningStart = $earlyMorningStartTime;
        $earlyMorningEnd = $earlyMorningEndTime;
        $dayStart = $dayShiftStartTime;
        $dayEnd = $dayShiftEndTime;
        $afternoonStart = $afternoonShiftStartTime;
        $afternoonEnd = $afternoonShiftEndTime;
        $nightStart = $nightShiftStartTime;
        $nightEnd = $nightShiftEndTime;
        $afterHours = $overtimeAfterHrs;
        $satAfterHours = $overtimeSatAfterHrs;
        $sunAfterHours = $overtimeSunAfterHrs;
        $mealbreakLimit = $mealBreakLimit;
    }

    $afternoonHours = 0;
    $dayHours = 0;
    $earlyMorningHours = 0;
    $nightHours = 0;
    $saturdayHours = 0;
    $sundayHours = 0;
    $publicHolidayHours = 0;

    $totalOrdinaryHours = 0;
    $totalEarlyMorningHours = 0;
    $totalAfternoonHours = 0;
    $totalNightHours = 0;
    $totalsaturdayHours = 0;
    $totalsundayHours = 0;
    $totalPublicHolidayHours = 0;
    $totalOvertimeHours = 0;
    $totalPeriodOvertimeHours = 0;
    $totalOvertimeSatHours = 0;
    $totalOvertimeSunHours = 0;
    $totalDoubletimeHours = 0;
    $mealBreakStatus = true;

    $shiftEndComp = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate . ' ' . $shiftEnd . ':00')));//strtotime($shiftDate.' '.$shiftEnd.':00');
    $shiftStartComp = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate . ' ' . $shiftStart . ':00')));//strtotime($shiftDate.' '.$shiftStart.':00');

    if ($shiftEndComp < $shiftStartComp) {
        $shiftEndDate = date('Y-m-d', strtotime($shiftDate . ' + 1 day'));
    } else {
        $shiftEndDate = $shiftDate;
    }

    $starttime = strtotime($shiftDate . ' ' . $shiftStart . ':00');
    $endtime = strtotime($shiftEndDate . ' ' . $shiftEnd . ':00');

    if ($earlyMorningStart == '00:00:00') {
        $earlyMorningStartTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $earlyMorningStart);
    } else {
        $earlyMorningStartTime = strtotime($shiftDate . ' ' . $earlyMorningStart); //'06:00:00'
    }
    if ($earlyMorningEnd == '00:00:00') {
        $earlyMorningEndTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $earlyMorningEnd);
    } else {
        $earlyMorningEndTime = strtotime($shiftDate . ' ' . $earlyMorningEnd); //'18:00:00'
    }

    if ($dayStart == '00:00:00') {
        $dayshiftStartTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $dayStart);
    } else {
        $dayshiftStartTime = strtotime($shiftDate . ' ' . $dayStart); //'06:00:00'
    }
    if ($dayEnd == '00:00:00') {
        $dayshiftEndTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $dayEnd);
    } else {
        $dayshiftEndTime = strtotime($shiftDate . ' ' . $dayEnd);//'18:00:00'
    }
    if ($afternoonStart == '00:00:00') {
        $afternoonShiftStartTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $afternoonStart);
    } else {
        $afternoonShiftStartTime = strtotime($shiftDate . ' ' . $afternoonStart);//'18:00:00'
    }
    if ($afternoonEnd == '00:00:00') {
        $afternoonShiftEndTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $afternoonEnd);
    } else {
        $afternoonShiftEndTime = strtotime($shiftDate . ' ' . $afternoonEnd);//'23:59:59'
    }

    $nightShiftStartTime = strtotime($shiftDate . ' ' . $nightStart);

    $nightShiftEndTime = strtotime($shiftEndDate . ' ' . $nightEnd);

    $fromMidnight = strtotime($shiftDate . ' ' . '00:00:00');
    $toMidnight = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . '00:00:00');

    $sprdTime = explode(':', $firstEightHours);
    $sprdHours = $sprdTime[0];
    $sprdMinutes = $sprdTime[1];
    $eightHours = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate . ' ' . $shiftStart . ':00' . ' + ' . $sprdHours . ' hour +' . $sprdMinutes . ' minutes')));

    //$eightHours = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate.' '.$shiftStart.':00'. ' + 8 hours')));
    $diff = $endtime - $starttime;
    $breaks = $workBreak * 60;
    $totalHours = ($diff - $breaks) / 60 / 60;

    if ($totalHours > $minimuHours) {
        if (isPublicHoliday($mysqli, $shiftDate, $deptId)) {
            $publicHolidayHours = $totalHours;
            if ($totalHours >= $ordinaryHoursSpread) {
                if ($publicHolidayHours >= $ordinaryHoursSpread) {
                    $publicHolidayHours = $ordinaryHoursSpread;
                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                } else {
                    $publicHolidayHours = $publicHolidayHours;
                }
                if ($extraHrs <= $afterHours) {
                    $publicHolidayHours;
                } else if ($extraHrs > $afterHours) {
                    $remainingHours = $extraHrs - $afterHours;
                    $publicHolidayHours;
                }
                return 'holiday-' . $publicHolidayHours;
            } else if ($totalHours < $ordinaryHoursSpread) {
                $publicHolidayHours = $totalHours;
                return 'holiday-' . $publicHolidayHours;
            }
        } else {
            if (isWeekend($shiftDate) == 'weekday') {
                if ($totalHours >= $ordinaryHoursSpread) {
                    //Night shift
                    if (($starttime > $nightShiftStartTime) && ($starttime < $earlyMorningStart)) {
                        $nightHours = $totalHours;
                        if ($nightHours >= $ordinaryHoursSpread) {
                            $nightHours = $ordinaryHoursSpread;
                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                        } else {
                            $nightHours = $nightHours;
                        }
                    } else if (($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)) {
                        $earlyMorningHours = $totalHours;
                        if ($earlyMorningHours >= $ordinaryHoursSpread) {
                            $earlyMorningHours = $ordinaryHoursSpread;
                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                        } else {
                            $earlyMorningHours = $earlyMorningHours;
                        }
                    } else if (($starttime >= $dayshiftStartTime) && ($eightHours <= $dayshiftEndTime)) {//&& ($endtime <= $dayshiftEndTime)
                        $dayHours = $totalHours;
                        if ($dayHours >= $ordinaryHoursSpread) {
                            $dayHours = $ordinaryHoursSpread;
                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                        } else {
                            $dayHours = $dayHours;
                        }
                    } else if (($endtime > $afternoonShiftStartTime) && (($eightHours >= $afternoonShiftStartTime) && ($eightHours <= $afternoonShiftEndTime)) && ($endtime >= $afternoonShiftStartTime)) { //($starttime <= $afternoonShiftStartTime)//&& ($endtime <= $afternoonShiftEndTime)     && ($eightHours <= $afternoonShiftEndTime)($endtime == $afternoonShiftEndTime || $endtime < $afternoonShiftEndTime)
                        // Afternoon Shift
                        $afternoonHours = $totalHours;
                        if ($afternoonHours >= $ordinaryHoursSpread) {
                            $afternoonHours = $ordinaryHoursSpread;
                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                        } else {
                            $afternoonHours = $afternoonHours;
                        }
                    } else if (($endtime > $nightShiftStartTime) && ($eightHours > $nightShiftStartTime)) {//&& ($endtime >= $nightShiftEndTime)&& ($endtime > $afternoonShiftEndTime)
                        // Night Shift
                        $nightHours = $totalHours;
                        if ($nightHours >= $ordinaryHoursSpread) {
                            $nightHours = $ordinaryHoursSpread;
                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                        } else {
                            $nightHours = $nightHours;
                        }
                    }
                    // check for first 3 hours
                    if ($extraHrs <= $afterHours) {
                        //$ordinaryHours;'.$starttime.'e'.$endtime.'as'.$afternoonShiftStartTime.'ae'.$afternoonShiftEndTime.'
                        return 'day-' . $dayHours . '-early-' . $earlyMorningHours . '-afternoon-' . $afternoonHours . '-night-' . $nightHours;//.'-extra-'.$extraHrs;
                        //more than 3 hours
                    } else if ($extraHrs > $afterHours) {
                        $remainingHours = $extraHrs - $afterHours;
                        return 'day-' . $dayHours . '-early-' . $earlyMorningHours . '-afternoon-' . $afternoonHours . '-night-' . $nightHours;//.'-after-'.$afterHours.'-remaining-'.$remainingHours;
                    }
                } else if ($totalHours < $ordinaryHoursSpread) {
                    if (($starttime > $nightShiftStartTime) && ($starttime < $earlyMorningStart)) {
                        $nightHours = $totalHours;
                    } else if (($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)) {
                        $earlyMorningHours = $totalHours;
                    } else if (($starttime >= $dayshiftStartTime) && ($eightHours <= $dayshiftEndTime)) {//if(($starttime >= $dayshiftStartTime) && ($endtime <= $dayshiftEndTime)){ //&& ($eightHours <= $dayshiftEndTime)
                        $dayHours = $totalHours;
                    } else if (($endtime > $afternoonShiftStartTime) && ($endtime == $afternoonShiftEndTime || $endtime < $afternoonShiftEndTime) && ($endtime >= $afternoonShiftStartTime)) {
                        $afternoonHours = $totalHours;
                    } else if (($endtime > $nightShiftStartTime) && ($eightHours > $nightShiftStartTime)) {//&& ($endtime > $afternoonShiftEndTime)
                        $nightHours = $totalHours;
                    }
                    return 'day-' . $dayHours . '-early-' . $earlyMorningHours . '-afternoon-' . $afternoonHours . '-night-' . $nightHours;
                }
            } else {
                if ($shiftDay == 'Sat') {
                    if ($starttime >= $fromMidnight && $endtime <= $toMidnight) {
                        //$saturdayHours = $saturdayHours + $totalHours;
                        $saturdayHours = $totalHours;
                        if ($saturdayHours >= $ordinaryHoursSpread) {
                            if ($satAfterHours != '0') {
                                //$saturdayHours = $ordinaryHoursSpread;
                                $saturdayHours = $totalHours;
                                $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                return 'day-' . $dayHours . '-early-' . $earlyMorningHours . '-afternoon-' . $afternoonHours . '-night-' . $nightHours . '-saturday-' . $saturdayHours;//.'-extra-'.$extraHrs;

                                /*if ($totalHours >= $satAfterHours) {
                                    $extraHrs = $difference;
                                    $saturdayHours = $totalHours - $totalHoursDifference;
                                } else {
                                    $saturdayHours = $totalHours - $difference;
                                    $extraHrs = $difference;
                                }*/
                            } else {
                                if ($satAfterHours == '0') {
                                    return 'day-' . $dayHours . '-early-' . $earlyMorningHours . '-afternoon-' . $afternoonHours . '-night-' . $nightHours . '-saturday-' . $saturdayHours;//.'-extra-'.$extraHrs;
                                } else if ($extraHrs <= $satAfterHours) {
                                    $saturdayHours = $saturdayHours + $extraHrs;
                                    return 'day-' . $dayHours . '-early-' . $earlyMorningHours . '-afternoon-' . $afternoonHours . '-night-' . $nightHours . '-saturday-' . $saturdayHours;//.'-extra-'.$extraHrs;
                                } else if ($extraHrs > $satAfterHours) {
                                    $remainingHours = $extraHrs - $satAfterHours;
                                    return 'day-' . $dayHours . '-early-' . $earlyMorningHours . '-afternoon-' . $afternoonHours . '-night-' . $nightHours . '-saturday-' . $saturdayHours;//.'-satafter-'.$satAfterHours.'-remaining-'.$remainingHours;
                                }
                            }
                        } else if ($totalHours < $ordinaryHoursSpread) {
                            /*if($satAfterHours == '0'){*/
                            return 'day-' . $dayHours . '-early-' . $earlyMorningHours . '-afternoon-' . $afternoonHours . '-night-' . $nightHours . '-saturday-' . $saturdayHours;//.'-extra-'.$extraHrs;
                            /* }else if ($extraHrs <= $satAfterHours) {
                                return 'saturday-'.$saturdayHours + $extraHrs;//.'-extra-'.$extraHrs;
                             } else if ($extraHrs > $satAfterHours) {
                                 $remainingHours = $extraHrs - $satAfterHours;
                                 return 'saturday-'.$saturdayHours;//.'-satafter-'.$satAfterHours.'-remaining-'.$remainingHours;
                             }*/
                        }

                    }
                } else if ($shiftDay == 'Sun') {
                    if ($starttime >= $fromMidnight && $endtime <= $toMidnight) {
                        $sundayHours = $totalHours;
                        if ($sundayHours >= $ordinaryHoursSpread) {
                            if ($sunAfterHours != '0') {
                                $sundayHours = $totalHours;
                                $extraHrs = ($totalHours - $ordinaryHoursSpread);
                            }
                            if ($sunAfterHours == '0') {
                                return 'day-' . $dayHours . '-early-' . $earlyMorningHours . '-afternoon-' . $afternoonHours . '-night-' . $nightHours . '-saturday-' . $saturdayHours . '-sunday-' . $sundayHours;
                            } else if ($extraHrs <= $sunAfterHours) {
                                return 'day-' . $dayHours . '-early-' . $earlyMorningHours . '-afternoon-' . $afternoonHours . '-night-' . $nightHours . '-saturday-' . $saturdayHours . '-sunday-' . $sundayHours;//.'-extra-'.$extraHrs;
                            }
                            if ($extraHrs > $sunAfterHours) {
                                $remainingHours = $extraHrs - $sunAfterHours;
                                return 'day-' . $dayHours . '-early-' . $earlyMorningHours . '-afternoon-' . $afternoonHours . '-night-' . $nightHours . '-saturday-' . $saturdayHours . '-sunday-' . $sundayHours;//.'-sunafter-'.$sunAfterHours.'-remaining-'.$remainingHours;
                            }
                        } else if ($sundayHours < $ordinaryHoursSpread) {
                            /*$sundayHours = $totalHours;

                            if($sunAfterHours == '0'){*/
                            return 'day-' . $dayHours . '-early-' . $earlyMorningHours . '-afternoon-' . $afternoonHours . '-night-' . $nightHours . '-saturday-' . $saturdayHours . '-sunday-' . $sundayHours;
                            /*}else if ($extraHrs <= $sunAfterHours) {
                                return 'sunday-'.$sundayHours;//.'-extra-'.$extraHrs;
                            } if ($extraHrs > $sunAfterHours) {
                                $remainingHours = $extraHrs - $sunAfterHours;
                                return 'sunday-'.$sundayHours;//.'-sunafter-'.$sunAfterHours.'-remaining-'.$remainingHours;
                            }*/
                        }
                    }
                }
            }
        }

    } else if ($totalHours <= $minimumHours) {
        return 'day-' . $dayHours . '-early-' . $earlyMorningHours . '-afternoon-' . $afternoonHours . '-night-' . $nightHours . '-saturday-' . $saturdayHours . '-sunday-' . $sundayHours;//'totalhrs-'. $totalHours.
    }
}

/*function calculateTimeSheet($mysqli,$shiftDay, $shiftDate, $shiftStart, $shiftEnd, $workBreak,$jobCode,$payRule,$avgTotal,$avgBeforeTotal,$deptId){
    $minimuHours;
    $avgNormalHours;
    $earlyMorningHours;
    $ordinaryHours;
    $afterHours;
    $mealbreakLimit;
    $ruleSQL = $mysqli->prepare("SELECT
                                      payrule.payruleId,
                                      payrule.jobCode,
                                      payrule.payAwrdCode,
                                      payrule.payAwrdDesc,
                                      payrule.avgNormalHrs,
                                      payrule.spreadStart,
                                      payrule.spreadEnd,
                                      payrule.spreadDuration,
                                      payrule.firstEightHours,
                                      payrule.minimumHrs,
                                      payrule.earlyMorningStartTime,
                                      payrule.earlyMorningEndTime,
                                      payrule.dayShiftStartTime,
                                      payrule.dayShiftEndTime,
                                      payrule.afternoonShiftStartTime,
                                      payrule.afternoonShiftEndTime,
                                      payrule.nightShiftStartTime,
                                      payrule.nightShiftEndTime,
                                      payrule.overtime,
                                      payrule.overtimeAfterHrs,
                                      payrule.overtimeSatAfterHrs,
                                      payrule.overtimeSunAfterHrs,
                                      payrule.doubletime,
                                      payrule.saturday,
                                      payrule.sunday,
                                      payrule.publicHoliday,
                                      payrule.overtimeRule,
                                      payrule.mealBreakLimit
                                    FROM
                                      payrule
                                    WHERE
                                      payrule.jobCode = ?") or die($mysqli->error);
    $ruleSQL->bind_param("s",$jobCode)or die($mysqli->error);
    $ruleSQL->execute();
    $ruleSQL->store_result();
    $ruleSQL->bind_result($payruleId,$jobCode,$payAwrdCode,$payAwrdDesc,$avgNormalHrs,$spreadStart,$spreadEnd,$spreadDuration,$firstEightHours,$minimumHrs,$earlyMorningStartTime,$earlyMorningEndTime,$dayShiftStartTime,$dayShiftEndTime,$afternoonShiftStartTime,$afternoonShiftEndTime,
        $nightShiftStartTime,$nightShiftEndTime,$overtime,$overtimeAfterHrs,$overtimeSatAfterHrs,$overtimeSunAfterHrs,$doubletime,$saturday,$sunday,$publicHoliday,$overtimeRule,$mealBreakLimit) or die($mysqli->error);

    while($ruleSQL->fetch()){
        $minimumHours = $minimumHrs;
        $avgNormalHours = $avgNormalHrs;
        $ordinaryHoursSpread = $spreadDuration;
        $firstEightHours = $firstEightHours;
        $earlyMorningStart = $earlyMorningStartTime;
        $earlyMorningEnd = $earlyMorningEndTime;
        $dayStart = $dayShiftStartTime;
        $dayEnd = $dayShiftEndTime;
        $afternoonStart = $afternoonShiftStartTime;
        $afternoonEnd = $afternoonShiftEndTime;
        $nightStart = $nightShiftStartTime;
        $nightEnd = $nightShiftEndTime;
        $afterHours = $overtimeAfterHrs;
        $satAfterHours = $overtimeSatAfterHrs;
        $sunAfterHours = $overtimeSunAfterHrs;
        $mealbreakLimit = $mealBreakLimit;
    }
    $GLOBALS['gl_avg_normal_hours'] = $avgNormalHours;
    $afternoonHours = 0;
    $dayHours = 0;
    $earlyMorningHours = 0;
    $nightHours = 0;
    $saturdayHours = 0;
    $sundayHours = 0;
    $publicHolidayHours = 0;

    $totalOrdinaryHours = 0;
    $totalEarlyMorningHours = 0;
    $totalAfternoonHours = 0;
    $totalNightHours = 0;
    $totalsaturdayHours = 0;
    $totalsundayHours = 0;
    $totalPublicHolidayHours = 0;
    $totalOvertimeHours = 0;
    $totalPeriodOvertimeHours = 0;
    $totalOvertimeSatHours = 0;
    $totalOvertimeSunHours = 0;
    $totalDoubletimeHours = 0;
    $mealBreakStatus = true;

    $shiftEndComp = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate.' '.$shiftEnd.':00')));//strtotime($shiftDate.' '.$shiftEnd.':00');
    $shiftStartComp = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate.' '.$shiftStart.':00')));//strtotime($shiftDate.' '.$shiftStart.':00');

    if ($shiftEndComp < $shiftStartComp) {
        $shiftEndDate = date('Y-m-d', strtotime($shiftDate . ' + 1 day'));
    } else {
        $shiftEndDate = $shiftDate;
    }

    $starttime = strtotime($shiftDate.' '.$shiftStart.':00');
    $endtime = strtotime($shiftEndDate.' '.$shiftEnd.':00');

    if($earlyMorningStart == '00:00:00'){
        $earlyMorningStartTime = strtotime(date('Y-m-d', strtotime($shiftDate. ' + 1 day')).' '.$earlyMorningStart);
    }else{
        $earlyMorningStartTime = strtotime($shiftDate.' '.$earlyMorningStart); //'06:00:00'
    }
    if($earlyMorningEnd == '00:00:00'){
        $earlyMorningEndTime = strtotime(date('Y-m-d', strtotime($shiftDate. ' + 1 day')).' '.$earlyMorningEnd);
    }else{
        $earlyMorningEndTime = strtotime($shiftDate.' '.$earlyMorningEnd); //'18:00:00'
    }

    if($dayStart == '00:00:00'){
        $dayshiftStartTime = strtotime(date('Y-m-d', strtotime($shiftDate. ' + 1 day')).' '.$dayStart);
    }else{
        $dayshiftStartTime = strtotime($shiftDate.' '.$dayStart); //'06:00:00'
    }
    if($dayEnd == '00:00:00'){
        $dayshiftEndTime = strtotime(date('Y-m-d', strtotime($shiftDate. ' + 1 day')).' '.$dayEnd);
    }else{
        $dayshiftEndTime = strtotime($shiftDate.' '.$dayEnd);//'18:00:00'
    }
    if($afternoonStart == '00:00:00'){
        $afternoonShiftStartTime = strtotime(date('Y-m-d', strtotime($shiftDate. ' + 1 day')).' '.$afternoonStart);
    }else{
        $afternoonShiftStartTime = strtotime($shiftDate.' '.$afternoonStart);//'18:00:00'
    }
    if($afternoonEnd == '00:00:00'){
        $afternoonShiftEndTime = strtotime(date('Y-m-d', strtotime($shiftDate. ' + 1 day')).' '.$afternoonEnd);
    }else{
        $afternoonShiftEndTime = strtotime($shiftDate.' '.$afternoonEnd);//'23:59:59'
    }

    $nightShiftStartTime = strtotime($shiftDate.' '.$nightStart);

    $nightShiftEndTime = strtotime($shiftEndDate.' '.$nightEnd);
    //strtotime(date('Y-m-d H:i:s', strtotime($shiftEndDate.' '.'00:00:00')));

    $fromMidnight = strtotime($shiftDate.' '.'00:00:00');
    $toMidnight = strtotime(date('Y-m-d', strtotime($shiftDate. ' + 1 day')).' '.'00:00:00');

    //split ordinary hours spread to hours and minutes
    $sprdTime = explode(':',$firstEightHours);
    $sprdHours = $sprdTime[0];
    $sprdMinutes = $sprdTime[1];
    $eightHours = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate.' '.$shiftStart.':00'. ' + '.$sprdHours.' hour +'.$sprdMinutes.' minutes')));

    //$eightHours = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate.' '.$shiftStart.':00'. ' + '.$sprdHours.' hour +'.$sprdMinutes.' minutes -'.$workBreak.' minutes')));
    //$eightHours = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate.' '.$shiftStart.':00'. ' + 8 hour')));
    //$eightHoursD = date('Y-m-d H:i:s', strtotime($shiftDate.' '.$shiftStart.':00'. ' + 8 hours'));
    $diff = $endtime - $starttime;
    $breaks = $workBreak * 60;
    $totalHours = ($diff - $breaks) / 60 / 60;

    if($totalHours > $minimuHours){
                if(isPublicHoliday($mysqli,$shiftDate,$deptId)){
                    if ($avgTotal > $avgNormalHours){
                        $difference = $avgTotal - $avgNormalHours;
                        $totalHours = $totalHours - $difference;
                    }
                    $publicHolidayHours = $totalHours;
                    //$totalPublicHolidayHours = $totalPublicHolidayHours + $publicHolidayHours;
                    if ($totalHours >= $ordinaryHoursSpread) {
                        if($publicHolidayHours >= $ordinaryHoursSpread){
                            $publicHolidayHours = $ordinaryHoursSpread;
                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                        }else{
                            $publicHolidayHours = $publicHolidayHours;
                        }

                        if ($extraHrs <= $afterHours) {

                            $GLOBALS['gl_holiday_hours'] = $GLOBALS['gl_holiday_hours'] + $publicHolidayHours;
                            $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                            return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="" class="earlyMorningHrs"/></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="' . $publicHolidayHours . '" class="holHrs"/>' . number_format($publicHolidayHours, 2) . '</td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="'.$extraHrs.'" class="ovrHrs"/>'.number_format($extraHrs,2).'</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                        } else if ($extraHrs > $afterHours) {
                            $remainingHours = $extraHrs - $afterHours;

                            $GLOBALS['gl_holiday_hours'] = $GLOBALS['gl_holiday_hours'] + $publicHolidayHours;
                            $GLOBALS['gl_after_hours'] = $GLOBALS['gl_after_hours'] + $afterHours;
                            $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;
                            return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="" class="earlyMorningHrs"/></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="' . $publicHolidayHours . '" class="holHrs"/>' . number_format($publicHolidayHours, 2) . '</td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="'.$afterHours.'" class="ovrHrs"/>'.number_format($afterHours,2).'</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="'.number_format($remainingHours,2).'" class="dblHrs"/>'.number_format($remainingHours,2).'</td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                        }
                    }else if ($totalHours < $ordinaryHoursSpread) {
                        $publicHolidayHours = $totalHours;

                        $GLOBALS['gl_holiday_hours'] = $GLOBALS['gl_holiday_hours'] + $publicHolidayHours;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="" class="earlyMorningHrs"/></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="' . $publicHolidayHours . '" class="holHrs"/>' . number_format($publicHolidayHours, 2) . '</td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="" class="ovrHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                    }
                }else{
                    if (isWeekend($shiftDate) == 'weekday') {
                        // Mon - Fri
                        // more than 8 hours worked -- overtime
                        if ($totalHours >= $ordinaryHoursSpread) {
                            //Night shift

                            if(($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)){ //&& ($endtime <= $earlyMorningEndTime)
                                if ($avgTotal > $avgNormalHours) {
                                    $difference = $avgNormalHours - $avgBeforeTotal;
                                    $totalHours = $totalHours - $difference;
                                    if($afterHours != '0') {
                                        $earlyMorningHours = $difference;// difference
                                        if ($totalHours >= $afterHours) {
                                            $extraHrs = $totalHours;
                                        } else {
                                            $extraHrs = $totalHours;
                                        }
                                    }else{
                                        $earlyMorningHours = $totalHours;
                                        if ($totalHours >= $afterHours) {
                                            $earlyMorningHours = $ordinaryHoursSpread;
                                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                        } else {
                                            $extraHrs = $totalHours;
                                        }
                                    }
                                }else{
                                    $earlyMorningHours = $totalHours;
                                    if ($earlyMorningHours >= $ordinaryHoursSpread) {
                                        if($afterHours != '0') {
                                            $earlyMorningHours = $ordinaryHoursSpread;
                                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                        }else{
                                            if ($totalHours >= $afterHours) {
                                                $earlyMorningHours = $ordinaryHoursSpread;
                                                $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                            } else {
                                                $extraHrs = $totalHours;
                                            }
                                        }
                                    } else {
                                        $earlyMorningHours = $totalHours;
                                    }
                                }

                            }elseif(($starttime >= $dayshiftStartTime) && ($eightHours <= $dayshiftEndTime)){//&& ($endtime <= $dayshiftEndTime)
                                if ($avgTotal > $avgNormalHours) {
                                    $difference = $avgNormalHours - $avgBeforeTotal;//6
                                    $totalHours = $totalHours - $difference;//2
                                    if($afterHours != '0') {
                                        $dayHours = $difference;// difference
                                        if ($totalHours >= $afterHours) {
                                            $extraHrs = $totalHours;
                                        } else {
                                            $extraHrs = $totalHours;
                                        }
                                    }else{
                                        $dayHours = $totalHours;
                                        if ($totalHours >= $afterHours) {
                                            $extraHrs = $totalHours;
                                        } else {
                                            $extraHrs = $totalHours;
                                        }
                                    }
                                }else{
                                    $dayHours = $totalHours;
                                    if ($dayHours >= $ordinaryHoursSpread) {
                                        if($afterHours != '0') {
                                            $dayHours = $ordinaryHoursSpread;
                                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                        }else{
                                            if ($totalHours >= $afterHours) {
                                                $dayHours = $ordinaryHoursSpread;
                                                $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                            } else {
                                                $extraHrs = $totalHours;
                                            }
                                        }
                                    } else {
                                        $dayHours = $totalHours;
                                    }
                                }

                            }elseif(($endtime > $afternoonShiftStartTime) && ($eightHours >= $afternoonShiftStartTime)&&($eightHours <= $afternoonShiftEndTime) && ($endtime >= $afternoonShiftStartTime)){ //($starttime <= $afternoonShiftStartTime)//&& ($endtime <= $afternoonShiftEndTime)     && ($eightHours <= $afternoonShiftEndTime)($endtime == $afternoonShiftEndTime || $endtime < $afternoonShiftEndTime)
                                // Afternoon Shift
                                if ($avgTotal > $avgNormalHours) {
                                    $difference = $avgNormalHours - $avgBeforeTotal;
                                    $totalHours = $totalHours - $difference;
                                    if($afterHours != '0') {
                                        $afternoonHours = $difference;// difference
                                        if ($totalHours >= $afterHours) {
                                            $extraHrs = $totalHours;
                                        } else {
                                            $extraHrs = $totalHours;
                                        }
                                    }else{
                                        $afternoonHours = $totalHours;
                                        if ($totalHours >= $afterHours) {
                                            $extraHrs = $totalHours;
                                        } else {
                                            $extraHrs = $totalHours;
                                        }
                                    }
                                }else{
                                    $afternoonHours = $totalHours;
                                    if ($afternoonHours >= $ordinaryHoursSpread) {
                                        if($afterHours != '0') {
                                            $afternoonHours = $ordinaryHoursSpread;
                                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                        }else{
                                            if ($totalHours >= $afterHours) {
                                                $afternoonHours = $ordinaryHoursSpread;
                                                $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                            } else {
                                                $extraHrs = $totalHours;
                                            }
                                        }
                                    } else {
                                        $afternoonHours = $totalHours;
                                    }
                                }

                            }elseif(($endtime > $nightShiftStartTime)  && ($eightHours > $nightShiftStartTime)){
                            //}elseif(($endtime > $nightShiftStartTime) && ($starttime > $nightShiftStartTime) && ($starttime < $earlyMorningStart) && ($eightHours > $nightShiftStartTime)){

                                //if(($endtime > $nightShiftStartTime) && ($endtime > $afternoonShiftEndTime) && ($endtime <= $nightShiftEndTime)&& ($eightHours > $nightShiftStartTime)){ ////&& ($endtime >= $nightShiftEndTime)&& ($endtime > $afternoonShiftEndTime)
                                // Night Shift
                                if ($avgTotal > $avgNormalHours) {
                                    $difference = $avgNormalHours - $avgBeforeTotal;
                                    $totalHours = $totalHours - $difference;
                                    if($afterHours != '0') {
                                        $nightHours = $difference;// difference
                                        if ($totalHours >= $afterHours) {
                                            $extraHrs = $totalHours;
                                        } else {
                                            $extraHrs = $totalHours;
                                        }
                                    }else{
                                        $nightHours = $totalHours;
                                        if ($totalHours >= $afterHours) {
                                            $extraHrs = $totalHours;
                                        } else {
                                            $extraHrs = $totalHours;
                                        }
                                    }
                                }else{
                                    $nightHours = $totalHours;
                                    if ($nightHours >= $ordinaryHoursSpread) {
                                        if($afterHours != '0') {
                                            $nightHours = $ordinaryHoursSpread;
                                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                        }else{
                                            if ($totalHours >= $afterHours) {
                                                $nightHours = $ordinaryHoursSpread;
                                                $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                            } else {
                                                $extraHrs = $totalHours;
                                            }
                                        }
                                    } else {
                                        $nightHours = $nightHours;
                                    }
                                }
                            }
                            // check for first 3 hours
                            if($afterHours == '0'){
                                $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                                $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                                return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="'.$afterHours.'" class="ordHrs"/>'.$extraHrs.'</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="" class="earlyMorningHrs"/></td><td class="afternoon"></td><td class="night">'.number_format($nightHours,2).'</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                            }else if ($extraHrs <= $afterHours) {
                                //$ordinaryHours;'.$starttime.'e'.$endtime.'as'.$afternoonShiftStartTime.'ae'.$afternoonShiftEndTime.'
                                $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $dayHours;
                                $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
                                $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
                                $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                                $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                                return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $dayHours . '" class="ordHrs"/>' .number_format($dayHours,2).'</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="' . $earlyMorningHours . '" class="earlyMorningHrs"/>' .number_format($earlyMorningHours,2).'</td><td class="afternoon">'.number_format($afternoonHours,2).'</td><td class="night">'.number_format($nightHours,2).'</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                                //more than 3 hours
                            } else if ($extraHrs > $afterHours) {
                                //calculate for first 3 hours $afterHours * ?
                                //$ordinaryHours;
                                //calculate for more than 3 hours
                                $remainingHours = $extraHrs - $afterHours;

                                $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $dayHours;
                                $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
                                $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
                                $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                                $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $afterHours;
                                $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;

                                return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $dayHours . '" class="ordHrs"/>'.number_format($dayHours,2).'</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="' . $earlyMorningHours . '" class="earlyMorningHrs"/>' .number_format($earlyMorningHours,2).'</td><td class="afternoon">'.number_format($afternoonHours,2).'</td><td class="night">'.number_format($nightHours,2).'</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $afterHours . '" class="ovrHrs"/>' . number_format($afterHours, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $remainingHours . '" class="dblHrs"/>' . number_format($remainingHours, 2) . '</td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                            }
                        } else if ($totalHours < $ordinaryHoursSpread) {
                            //if(($starttime >= $earlyMorningStartTime) && ($endtime <= $earlyMorningEndTime)){ //&& ($eightHours <= $dayshiftEndTime)


                            if(($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)){
                                 $earlyMorningHours = $totalHours;
                            }elseif (($starttime >= $dayshiftStartTime) && ($endtime <= $dayshiftEndTime)) { //($eightHours <= $dayshiftEndTime)
                                //if(($starttime >= $dayshiftStartTime) && ($endtime <= $dayshiftEndTime)){ //&& ($eightHours <= $dayshiftEndTime)
                                $dayHours = $totalHours;
                            }elseif(($endtime > $afternoonShiftStartTime) && ($endtime <= $afternoonShiftEndTime) && ($endtime >= $afternoonShiftStartTime)){
                                // if(($endtime > $afternoonShiftStartTime) && ($endtime == $afternoonShiftEndTime || $endtime < $afternoonShiftEndTime)&& ($endtime >= $afternoonShiftStartTime)){
                                $afternoonHours = $totalHours;
                            }elseif(($endtime > $nightShiftStartTime) && ($endtime <= $nightShiftEndTime)) {//elseif(($endtime > $nightShiftStartTime) && ($endtime > $afternoonShiftEndTime) && ($endtime <= $nightShiftEndTime)&& ($eightHours > $nightShiftStartTime)){//if(($endtime > $nightShiftStartTime)  && ($eightHours > $nightShiftStartTime)){//if(($endtime > $nightShiftStartTime)  && ($endtime <= $nightShiftEndTime)){//&& ($endtime > $afternoonShiftEndTime)
                                $nightHours = $totalHours;
                            }


                            $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $dayHours;
                            $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
                            $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
                            $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;

                            return $row = $row.'<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $dayHours . '" class="ordHrs"/>' . number_format($dayHours, 2) . '</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="' . $earlyMorningHours . '" class="earlyMorningHrs"/>' . number_format($earlyMorningHours, 2) . '</td><td class="afternoon">'.number_format($afternoonHours,2).'</td><td class="night">'.number_format($nightHours,2).'</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="" class="ovrHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                        }
                    } else {
                        if ($shiftDay == 'Sat') {

                                    //$saturdayHours = $saturdayHours + $totalHours;
                                    if ($avgTotal > $avgNormalHours){
                                            $extraHrs = $totalHours;
                                            $saturdayHours = 0.00;

                                    }else{
                                        $saturdayHours = $totalHours;
                                        if ($saturdayHours >= $ordinaryHoursSpread) {
                                            if($satAfterHours != '0') {
                                                $saturdayHours = $ordinaryHoursSpread;
                                                $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                            }else{

                                            }
                                        } else {
                                            $saturdayHours = $saturdayHours;
                                        }
                                    }

                                    if($satAfterHours == '0'){
                                        $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $saturdayHours;
                                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;

                                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"><input type="hidden" name="satHrs[]" value="'.number_format($saturdayHours,2).'" class="satHrs"/>'.number_format($saturdayHours,2).'</td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2).'</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovertime"><input type="hidden" name="satovertimeHrs[]" value="" class="satovrHrs"/></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                                    }else if ($extraHrs <= $satAfterHours) {
                                        $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $saturdayHours;
                                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;

                                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"><input type="hidden" name="satHrs[]" value="'.number_format($saturdayHours,2).'" class="satHrs"/>'.number_format($saturdayHours,2).'</td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovertime"><input type="hidden" name="satovertimeHrs[]" value="" class="satovrHrs"/></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                                    } else if ($extraHrs > $satAfterHours) {
                                        $remainingHours = $extraHrs - $satAfterHours;

                                        $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $saturdayHours;
                                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $satAfterHours;
                                        //$GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $satAfterHours;
                                        $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;

                                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"><input type="hidden" name="satHrs[]" value="'.number_format($saturdayHours,2).'" class="satHrs"/>'.number_format($saturdayHours,2).'</td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $satAfterHours . '" class="ovrHrs"/>' . number_format($satAfterHours, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="'.$remainingHours.'" class="dblHrs"/>' . number_format($remainingHours, 2) . '</td><td class="satovertime"><input type="hidden" name="satovertimeHrs[]" value="" class="satovrHrs"/></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                                    }

                        } else if ($shiftDay == 'Sun') {

                                //$sundayHours = $sundayHours + $totalHours;
                                $sundayDoubletimeHours = 0;
                                if ($avgTotal > $avgNormalHours){
                                    $difference = $avgTotal - $avgNormalHours;
                                    if($difference > $ordinaryHoursSpread){
                                        $sundayDoubletimeHours = $totalHours;
                                    }else{
                                        if($totalHours < $difference){
                                            $sundayHours = 0;
                                            $sundayDoubletimeHours = $totalHours;
                                        }else{
                                            $sundayHours = $totalHours - $difference;
                                            $sundayDoubletimeHours = $difference;
                                        }
                                    }

                                    $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;
                                    $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $sundayDoubletimeHours;

                                    return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"><input type="hidden" name="sunHrs[]" value="'.number_format($sundayHours,2).'" class="sunHrs"/>' . number_format($sundayHours, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="" class="ovrHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="'.$sundayDoubletimeHours.'" class="dblHrs"/>' . number_format($sundayDoubletimeHours, 2) . '</td><td class="satovrtime"></td><td class="sunovertime"><input type="hidden" name="sunovertimeHrs[]" value="" class="sunovrHrs"/></td><td class="povrtime"></td>';
                                }else{
                                    $sundayHours = $totalHours;
                                    if ($sundayHours >= $ordinaryHoursSpread) {
                                        if($sunAfterHours != '0') {
                                            $sundayHours = $ordinaryHoursSpread;
                                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                        }
                                    } else {
                                        $sundayHours = $sundayHours;
                                    }
                                    if($sunAfterHours == '0'){

                                        $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;

                                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"><input type="hidden" name="sunHrs[]" value="'.number_format($sundayHours,2).'" class="sunHrs"/>' . number_format($sundayHours, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="" class="ovrHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovertime"><input type="hidden" name="sunovertimeHrs[]" value="" class="sunovrHrs"/></td><td class="povrtime"></td>';
                                    }else if ($extraHrs <= $sunAfterHours) {

                                        $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;
                                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;

                                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"><input type="hidden" name="sunHrs[]" value="'.number_format($sundayHours,2).'" class="sunHrs"/>' . number_format($sundayHours, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovertime"><input type="hidden" name="sunovertimeHrs[]" value="" class="sunovrHrs"/></td><td class="povrtime"></td>';
                                    } if ($extraHrs > $sunAfterHours) {
                                        $remainingHours = $extraHrs - $sunAfterHours;

                                        $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;
                                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $remainingHours;
                                        $GLOBALS['gl_sunAfter_hours'] = $GLOBALS['gl_sunAfter_hours'] + $sunAfterHours;

                                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"><input type="hidden" name="sunHrs[]" value="'.number_format($sundayHours,2).'" class="sunHrs"/>'.number_format($sundayHours,2).'</td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $remainingHours . '" class="ovrHrs"/>' . number_format($remainingHours, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovertime"><input type="hidden" name="sunovertimeHrs[]" value="'.$sunAfterHours.'" class="sunovrHrs"/>' . number_format($sunAfterHours, 2) . '</td><td class="povrtime"></td>';
                                    }
                                }


                        }
                    }
                }
    }else if($totalHours <= $minimumHours){

        if ($avgTotal > $avgNormalHours){
            $difference = $avgTotal - $avgNormalHours;
            $totalHours = $totalHours - $difference;
        }


        $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $totalHours;
        $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
        $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
        $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $saturdayHours;
        $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;

        return $row = $row.'<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="'.$totalHours.'" class="ordHrs"/>'. number_format($totalHours, 2) . '</td><td class="earlymorning">'.number_format($earlyMorningHours, 2) . '</td><td class="afternoon">'.number_format($afternoonHours,2).'</td><td class="night">'.number_format($nightHours,2).'</td><td class="sat">'.number_format($saturdayHours,2).'</td><td class="sun">'.number_format($sundayHours,2).'</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="" class="ovrHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
    }
}*/
function calculateHealthSectorTimeSheet($mysqli, $shiftDay, $shiftDate, $shiftStart, $shiftEnd, $workBreak, $jobCode, $payRule, $avgTotal, $avgBeforeTotal, $deptId)
{
    $minimuHours;
    $avgNormalHours;
    $earlyMorningHours;
    $ordinaryHours;
    $afterHours;
    $mealbreakLimit;
    $ruleSQL = $mysqli->prepare("SELECT 
                                      payrule.payruleId,
                                      payrule.jobCode,
                                      payrule.payAwrdCode,
                                      payrule.payAwrdDesc,
                                      payrule.avgNormalHrs,
                                      payrule.spreadStart,
                                      payrule.spreadEnd,
                                      payrule.spreadDuration,
                                      payrule.firstEightHours,
                                      payrule.minimumHrs,
                                      payrule.earlyMorningStartTime,
                                      payrule.earlyMorningEndTime,
                                      payrule.dayShiftStartTime,
                                      payrule.dayShiftEndTime,
                                      payrule.afternoonShiftStartTime,
                                      payrule.afternoonShiftEndTime,
                                      payrule.nightShiftStartTime,
                                      payrule.nightShiftEndTime,
                                      payrule.overtime,
                                      payrule.overtimeAfterHrs,
                                      payrule.overtimeSatAfterHrs,
                                      payrule.overtimeSunAfterHrs,
                                      payrule.doubletime,
                                      payrule.saturday,
                                      payrule.sunday,
                                      payrule.publicHoliday,
                                      payrule.overtimeRule,
                                      payrule.mealBreakLimit
                                    FROM
                                      payrule
                                    WHERE
                                      payrule.jobCode = ?") or die($mysqli->error);
    $ruleSQL->bind_param("s", $jobCode) or die($mysqli->error);
    $ruleSQL->execute();
    $ruleSQL->store_result();
    $ruleSQL->bind_result($payruleId, $jobCode, $payAwrdCode, $payAwrdDesc, $avgNormalHrs, $spreadStart, $spreadEnd, $spreadDuration, $firstEightHours, $minimumHrs, $earlyMorningStartTime, $earlyMorningEndTime, $dayShiftStartTime, $dayShiftEndTime, $afternoonShiftStartTime, $afternoonShiftEndTime,
        $nightShiftStartTime, $nightShiftEndTime, $overtime, $overtimeAfterHrs, $overtimeSatAfterHrs, $overtimeSunAfterHrs, $doubletime, $saturday, $sunday, $publicHoliday, $overtimeRule, $mealBreakLimit) or die($mysqli->error);

    while ($ruleSQL->fetch()) {
        $minimumHours = $minimumHrs;
        $avgNormalHours = $avgNormalHrs;
        $ordinaryHoursSpread = $spreadDuration;
        $firstEightHours = $firstEightHours;
        $earlyMorningStart = $earlyMorningStartTime;
        $earlyMorningEnd = $earlyMorningEndTime;
        $dayStart = $dayShiftStartTime;
        $dayEnd = $dayShiftEndTime;
        $afternoonStart = $afternoonShiftStartTime;
        $afternoonEnd = $afternoonShiftEndTime;
        $nightStart = $nightShiftStartTime;
        $nightEnd = $nightShiftEndTime;
        $afterHours = $overtimeAfterHrs;
        $satAfterHours = $overtimeSatAfterHrs;
        $sunAfterHours = $overtimeSunAfterHrs;
        $mealbreakLimit = $mealBreakLimit;
    }
    $GLOBALS['gl_avg_normal_hours'] = $avgNormalHours;
    $afternoonHours = 0;
    $dayHours = 0;
    $earlyMorningHours = 0;
    $nightHours = 0;
    $saturdayHours = 0;
    $sundayHours = 0;
    $publicHolidayHours = 0;
    $totalOrdinaryHours = 0;
    $totalEarlyMorningHours = 0;
    $totalAfternoonHours = 0;
    $totalNightHours = 0;
    $totalsaturdayHours = 0;
    $totalsundayHours = 0;
    $totalPublicHolidayHours = 0;
    $totalOvertimeHours = 0;
    $totalPeriodOvertimeHours = 0;
    $totalOvertimeSatHours = 0;
    $totalOvertimeSunHours = 0;
    $totalDoubletimeHours = 0;
    $mealBreakStatus = true;

    $shiftEndComp = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate . ' ' . $shiftEnd . ':00')));//strtotime($shiftDate.' '.$shiftEnd.':00');
    $shiftStartComp = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate . ' ' . $shiftStart . ':00')));//strtotime($shiftDate.' '.$shiftStart.':00');

    if ($shiftEndComp < $shiftStartComp) {
        $shiftEndDate = date('Y-m-d', strtotime($shiftDate . ' + 1 day'));
    } else {
        $shiftEndDate = $shiftDate;
    }

    $starttime = strtotime($shiftDate . ' ' . $shiftStart . ':00');
    $endtime = strtotime($shiftEndDate . ' ' . $shiftEnd . ':00');

    if ($earlyMorningStart == '00:00:00') {
        $earlyMorningStartTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $earlyMorningStart);
    } else {
        $earlyMorningStartTime = strtotime($shiftDate . ' ' . $earlyMorningStart); //'06:00:00'
    }
    if ($earlyMorningEnd == '00:00:00') {
        $earlyMorningEndTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $earlyMorningEnd);
    } else {
        $earlyMorningEndTime = strtotime($shiftDate . ' ' . $earlyMorningEnd); //'18:00:00'
    }

    if ($dayStart == '00:00:00') {
        $dayshiftStartTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $dayStart);
    } else {
        $dayshiftStartTime = strtotime($shiftDate . ' ' . $dayStart); //'06:00:00'
    }
    if ($dayEnd == '00:00:00') {
        $dayshiftEndTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $dayEnd);
    } else {
        $dayshiftEndTime = strtotime($shiftDate . ' ' . $dayEnd);//'18:00:00'
    }
    if ($afternoonStart == '00:00:00') {
        $afternoonShiftStartTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $afternoonStart);
    } else {
        $afternoonShiftStartTime = strtotime($shiftDate . ' ' . $afternoonStart);//'18:00:00'
    }
    if ($afternoonEnd == '00:00:00') {
        $afternoonShiftEndTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $afternoonEnd);
    } else {
        $afternoonShiftEndTime = strtotime($shiftDate . ' ' . $afternoonEnd);//'23:59:59'
    }
    $nightShiftStartTime = strtotime($shiftDate . ' ' . $nightStart);
    $nightShiftEndTime = strtotime($shiftEndDate . ' ' . $nightEnd);

    $fromMidnight = strtotime($shiftDate . ' ' . '00:00:00');
    $toMidnight = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . '00:00:00');

    //split ordinary hours spread to hours and minutes
    $sprdTime = explode(':', $firstEightHours);
    $sprdHours = $sprdTime[0];
    $sprdMinutes = $sprdTime[1];
    $eightHours = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate . ' ' . $shiftStart . ':00' . ' + ' . $sprdHours . ' hour +' . $sprdMinutes . ' minutes')));

    $diff = $endtime - $starttime;
    $breaks = $workBreak * 60;
    $totalHours = ($diff - $breaks) / 60 / 60;

    if ($totalHours > $minimuHours) {
        if (isPublicHoliday($mysqli, $shiftDate, $deptId)) {
            $publicHolidayHours = $totalHours;
            $GLOBALS['gl_holiday_hours'] = $GLOBALS['gl_holiday_hours'] + $publicHolidayHours;
            $GLOBALS['gl_saturday_hours'] = 0;
            $GLOBALS['gl_sunday_hours'] = 0;
            return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="" class="earlyMorningHrs"/></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="' . $publicHolidayHours . '" class="holHrs"/>' . number_format($publicHolidayHours, 2) . '</td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="" class="ovrHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
        } else {
            if (isWeekend($shiftDate) == 'weekday') {
                // Mon - Fri
                // more than 8 hours worked -- overtime
                if ($totalHours >= $ordinaryHoursSpread) {
                    //Night shift
                    if (($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)) { //&& ($endtime <= $earlyMorningEndTime)
                        if ($avgTotal > $avgNormalHours) {
                            $difference = $avgNormalHours - $avgBeforeTotal;
                            $totalHours = $totalHours - $difference;
                            if ($afterHours != '0') {
                                $earlyMorningHours = $difference;// difference
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            } else {
                                $earlyMorningHours = $totalHours;
                                if ($totalHours >= $afterHours) {
                                    $earlyMorningHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            }
                        } else {
                            $earlyMorningHours = $totalHours;
                            if ($earlyMorningHours >= $ordinaryHoursSpread) {
                                if ($afterHours != '0') {
                                    $earlyMorningHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                    if ($totalHours >= $afterHours) {
                                        $earlyMorningHours = $ordinaryHoursSpread;
                                        $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    } else {
                                        $extraHrs = $totalHours;
                                    }
                                }
                            } else {
                                $earlyMorningHours = $totalHours;
                            }
                        }
                    } elseif (($starttime >= $dayshiftStartTime) && ($eightHours <= $dayshiftEndTime) && ($endtime <= $dayshiftEndTime)) { //&& ($endtime <= $dayshiftEndTime)
                        if ($avgTotal > $avgNormalHours) {
                            $difference = $avgNormalHours - $avgBeforeTotal;//6
                            $totalHours = $totalHours - $difference;//2
                            if ($afterHours != '0') {
                                $dayHours = $difference;// difference
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            } else {
                                $dayHours = $totalHours;
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            }
                        } else {
                            $dayHours = $totalHours;
                            if ($dayHours >= $ordinaryHoursSpread) {
                                if ($afterHours != '0') {
                                    $dayHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                    if ($totalHours >= $afterHours) {
                                        $dayHours = $ordinaryHoursSpread;
                                        $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    } else {
                                        $extraHrs = $totalHours;
                                    }
                                }
                            } else {
                                $dayHours = $totalHours;
                            }
                        }

                    } elseif (($endtime >= $afternoonShiftStartTime) && ($eightHours <= $afternoonShiftEndTime) && ($endtime <= $afternoonShiftEndTime)) {
                        //($starttime <= $afternoonShiftStartTime)//&& ($endtime <= $afternoonShiftEndTime)     && ($eightHours <= $afternoonShiftEndTime)($endtime == $afternoonShiftEndTime || $endtime < $afternoonShiftEndTime)
                        // Afternoon Shift
                        if ($avgTotal > $avgNormalHours) {
                            $difference = $avgNormalHours - $avgBeforeTotal;
                            $totalHours = $totalHours - $difference;
                            if ($afterHours != '0') {
                                $afternoonHours = $difference;// difference
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            } else {
                                $afternoonHours = $totalHours;
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            }
                        } else {
                            $afternoonHours = $totalHours;
                            if ($afternoonHours >= $ordinaryHoursSpread) {
                                if ($afterHours != '0') {
                                    $afternoonHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                    if ($totalHours >= $afterHours) {
                                        $afternoonHours = $ordinaryHoursSpread;
                                        $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    } else {
                                        $extraHrs = $totalHours;
                                    }
                                }
                            } else {
                                $afternoonHours = $totalHours;
                            }
                        }
                    } elseif (($endtime > $nightShiftStartTime) && ($eightHours > $nightShiftStartTime) && ($endtime <= $nightShiftEndTime)) {
                        // Night Shift
                        if ($avgTotal > $avgNormalHours) {
                            $difference = $avgNormalHours - $avgBeforeTotal;
                            $totalHours = $totalHours - $difference;
                            if ($afterHours != '0') {
                                $nightHours = $difference;// difference
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            } else {
                                $nightHours = $totalHours;
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            }
                        } else {
                            $nightHours = $totalHours;
                            if ($nightHours >= $ordinaryHoursSpread) {
                                if ($afterHours != '0') {
                                    $nightHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                    if ($totalHours >= $afterHours) {
                                        $nightHours = $ordinaryHoursSpread;
                                        $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    } else {
                                        $extraHrs = $totalHours;
                                    }
                                }
                            } else {
                                $nightHours = $nightHours;
                            }
                        }
                    }
                    // check for first 3 hours
                    if ($afterHours == '0') {
                        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $afterHours . '" class="ordHrs"/>' . $extraHrs . '</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="" class="earlyMorningHrs"/></td><td class="afternoon"></td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                    } else if ($extraHrs <= $afterHours) {
                        $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $dayHours;
                        $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
                        $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
                        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $dayHours . '" class="ordHrs"/>' . number_format($dayHours, 2) . '</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="' . $earlyMorningHours . '" class="earlyMorningHrs"/>' . number_format($earlyMorningHours, 2) . '</td><td class="afternoon">' . number_format($afternoonHours, 2) . '</td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                        //more than 3 hours
                    } else if ($extraHrs > $afterHours) {
                        //calculate for first 3 hours $afterHours * ?
                        //calculate for more than 3 hours
                        $remainingHours = $extraHrs - $afterHours;
                        $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $dayHours;
                        $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
                        $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
                        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $afterHours;
                        $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $dayHours . '" class="ordHrs"/>' . number_format($dayHours, 2) . '</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="' . $earlyMorningHours . '" class="earlyMorningHrs"/>' . number_format($earlyMorningHours, 2) . '</td><td class="afternoon">' . number_format($afternoonHours, 2) . '</td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $afterHours . '" class="ovrHrs"/>' . number_format($afterHours, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $remainingHours . '" class="dblHrs"/>' . number_format($remainingHours, 2) . '</td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                    }
                } else if ($totalHours < $ordinaryHoursSpread) {
                    if ($avgTotal > $avgNormalHours) {
                        $difference = $avgNormalHours - $avgBeforeTotal;
                        $extraHrs = $totalHours - $difference;
                        $totalHours = $difference;
                    }
                    if ($afterHours == '0') {

                    } else if ($extraHrs <= $afterHours) {


                    } else if ($extraHrs > $afterHours) {
                        $remainingHours = $extraHrs - $afterHours;

                    }
                    if (($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)) {
                        $earlyMorningHours = $totalHours;
                    } elseif (($starttime >= $dayshiftStartTime) && ($endtime <= $dayshiftEndTime) && ($eightHours <= $dayshiftEndTime)) { //
                        $dayHours = $totalHours;
                    } elseif (($endtime >= $afternoonShiftStartTime) && ($eightHours <= $afternoonShiftEndTime) && ($endtime <= $afternoonShiftEndTime)) { //
                        //elseif(($endtime >= $afternoonShiftStartTime) && ($endtime < $afternoonShiftEndTime)){
                        $afternoonHours = $totalHours;
                    } elseif (($endtime > $nightShiftStartTime) && ($eightHours > $nightShiftStartTime) && ($endtime <= $nightShiftEndTime)) {//elseif(($endtime > $nightShiftStartTime) && ($endtime > $afternoonShiftEndTime) && ($endtime <= $nightShiftEndTime)&& ($eightHours > $nightShiftStartTime)){//if(($endtime > $nightShiftStartTime)  && ($eightHours > $nightShiftStartTime)){//if(($endtime > $nightShiftStartTime)  && ($endtime <= $nightShiftEndTime)){//&& ($endtime > $afternoonShiftEndTime)
                        $nightHours = $totalHours;
                    }
                    $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $dayHours;
                    $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
                    $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
                    $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                    $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                    $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;
                    return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $dayHours . '" class="ordHrs"/>' . number_format($dayHours, 2) . '</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="' . $earlyMorningHours . '" class="earlyMorningHrs"/>' . number_format($earlyMorningHours, 2) . '</td><td class="afternoon">' . number_format($afternoonHours, 2) . '</td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $remainingHours . '" class="dblHrs"/>' . number_format($remainingHours, 2) . '</td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                }
            } else {
                if ($shiftDay == 'Sat') {
                    $saturdayHours = 0;
                    if ($totalHours < $satAfterHours) {
                        $extraHrs = $totalHours;
                    } else {
                        $remainingHours = $totalHours - $satAfterHours;
                        $extraHrs = $satAfterHours;
                    }
                    $GLOBALS['gl_saturday_hours'] = 0;
                    $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                    $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;
                    return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"><input type="hidden" name="satHrs[]" value="" class="satHrs"/></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $remainingHours . '" class="dblHrs"/>' . number_format($remainingHours, 2) . '</td><td class="satovertime"><input type="hidden" name="satovertimeHrs[]" value="" class="satovrHrs"/></td><td class="sunovrtime"></td><td class="povrtime"></td>';

                } else if ($shiftDay == 'Sun') {
                    $sundayHours = 0;
                    if ($totalHours < $sunAfterHours) {
                        $extraHrs = $totalHours;
                    } else {
                        $remainingHours = $totalHours - $sunAfterHours;
                        $extraHrs = $sunAfterHours;
                    }
                    $GLOBALS['gl_sunday_hours'] = 0;
                    $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                    $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;
                    return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"><input type="hidden" name="sunHrs[]" value="" class="sunHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $remainingHours . '" class="dblHrs"/>' . number_format($remainingHours, 2) . '</td><td class="satovrtime"></td><td class="sunovertime"><input type="hidden" name="sunovertimeHrs[]" value="" class="sunovrHrs"/></td><td class="povrtime"></td>';
                }
            }
        }
    } else if ($totalHours <= $minimumHours) {
        if ($avgTotal > $avgNormalHours) {
            $difference = $avgTotal - $avgNormalHours;
            $totalHours = $totalHours - $difference;
        }
        $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $totalHours;
        $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
        $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
        $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $saturdayHours;
        $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;
        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $totalHours . '" class="ordHrs"/>' . number_format($totalHours, 2) . '</td><td class="earlymorning">' . number_format($earlyMorningHours, 2) . '</td><td class="afternoon">' . number_format($afternoonHours, 2) . '</td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat">' . number_format($saturdayHours, 2) . '</td><td class="sun">' . number_format($sundayHours, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="" class="ovrHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
    }
}

function calculateTimeSheet($mysqli, $shiftDay, $shiftDate, $shiftStart, $shiftEnd, $workBreak, $jobCode, $payRule, $avgTotal, $avgBeforeTotal, $deptId)
{
    $minimuHours;
    $avgNormalHours;
    $earlyMorningHours;
    $ordinaryHours;
    $afterHours;
    $mealbreakLimit;
    $ruleSQL = $mysqli->prepare("SELECT 
                                      payrule.payruleId,
                                      payrule.jobCode,
                                      payrule.payAwrdCode,
                                      payrule.payAwrdDesc,
                                      payrule.avgNormalHrs,
                                      payrule.spreadStart,
                                      payrule.spreadEnd,
                                      payrule.spreadDuration,
                                      payrule.firstEightHours,
                                      payrule.minimumHrs,
                                      payrule.earlyMorningStartTime,
                                      payrule.earlyMorningEndTime,
                                      payrule.dayShiftStartTime,
                                      payrule.dayShiftEndTime,
                                      payrule.afternoonShiftStartTime,
                                      payrule.afternoonShiftEndTime,
                                      payrule.nightShiftStartTime,
                                      payrule.nightShiftEndTime,
                                      payrule.overtime,
                                      payrule.overtimeAfterHrs,
                                      payrule.overtimeSatAfterHrs,
                                      payrule.overtimeSunAfterHrs,
                                      payrule.doubletime,
                                      payrule.saturday,
                                      payrule.sunday,
                                      payrule.publicHoliday,
                                      payrule.overtimeRule,
                                      payrule.mealBreakLimit
                                    FROM
                                      payrule
                                    WHERE
                                      payrule.jobCode = ?") or die($mysqli->error);
    $ruleSQL->bind_param("s", $jobCode) or die($mysqli->error);
    $ruleSQL->execute();
    $ruleSQL->store_result();
    $ruleSQL->bind_result($payruleId, $jobCode, $payAwrdCode, $payAwrdDesc, $avgNormalHrs, $spreadStart, $spreadEnd, $spreadDuration, $firstEightHours, $minimumHrs, $earlyMorningStartTime, $earlyMorningEndTime, $dayShiftStartTime, $dayShiftEndTime, $afternoonShiftStartTime, $afternoonShiftEndTime,
        $nightShiftStartTime, $nightShiftEndTime, $overtime, $overtimeAfterHrs, $overtimeSatAfterHrs, $overtimeSunAfterHrs, $doubletime, $saturday, $sunday, $publicHoliday, $overtimeRule, $mealBreakLimit) or die($mysqli->error);

    while ($ruleSQL->fetch()) {
        $minimumHours = $minimumHrs;
        $avgNormalHours = $avgNormalHrs;
        $ordinaryHoursSpread = $spreadDuration;
        $firstEightHours = $firstEightHours;
        $earlyMorningStart = $earlyMorningStartTime;
        $earlyMorningEnd = $earlyMorningEndTime;
        $dayStart = $dayShiftStartTime;
        $dayEnd = $dayShiftEndTime;
        $afternoonStart = $afternoonShiftStartTime;
        $afternoonEnd = $afternoonShiftEndTime;
        $nightStart = $nightShiftStartTime;
        $nightEnd = $nightShiftEndTime;
        $afterHours = $overtimeAfterHrs;
        $satAfterHours = $overtimeSatAfterHrs;
        $sunAfterHours = $overtimeSunAfterHrs;
        $mealbreakLimit = $mealBreakLimit;
    }
    $GLOBALS['gl_avg_normal_hours'] = $avgNormalHours;
    $afternoonHours = 0;
    $dayHours = 0;
    $earlyMorningHours = 0;
    $nightHours = 0;
    $saturdayHours = 0;
    $sundayHours = 0;
    $publicHolidayHours = 0;

    $totalOrdinaryHours = 0;
    $totalEarlyMorningHours = 0;
    $totalAfternoonHours = 0;
    $totalNightHours = 0;
    $totalsaturdayHours = 0;
    $totalsundayHours = 0;
    $totalPublicHolidayHours = 0;
    $totalOvertimeHours = 0;
    $totalPeriodOvertimeHours = 0;
    $totalOvertimeSatHours = 0;
    $totalOvertimeSunHours = 0;
    $totalDoubletimeHours = 0;
    $mealBreakStatus = true;

    $shiftEndComp = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate . ' ' . $shiftEnd . ':00')));//strtotime($shiftDate.' '.$shiftEnd.':00');
    $shiftStartComp = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate . ' ' . $shiftStart . ':00')));//strtotime($shiftDate.' '.$shiftStart.':00');

    if ($shiftEndComp < $shiftStartComp) {
        $shiftEndDate = date('Y-m-d', strtotime($shiftDate . ' + 1 day'));
    } else {
        $shiftEndDate = $shiftDate;
    }

    $starttime = strtotime($shiftDate . ' ' . $shiftStart . ':00');
    $endtime = strtotime($shiftEndDate . ' ' . $shiftEnd . ':00');

    if ($earlyMorningStart == '00:00:00') {
        $earlyMorningStartTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $earlyMorningStart);
    } else {
        $earlyMorningStartTime = strtotime($shiftDate . ' ' . $earlyMorningStart); //'06:00:00'
    }
    if ($earlyMorningEnd == '00:00:00') {
        $earlyMorningEndTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $earlyMorningEnd);
    } else {
        $earlyMorningEndTime = strtotime($shiftDate . ' ' . $earlyMorningEnd); //'18:00:00'
    }

    if ($dayStart == '00:00:00') {
        $dayshiftStartTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $dayStart);
    } else {
        $dayshiftStartTime = strtotime($shiftDate . ' ' . $dayStart); //'06:00:00'
    }
    if ($dayEnd == '00:00:00') {
        $dayshiftEndTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $dayEnd);
    } else {
        $dayshiftEndTime = strtotime($shiftDate . ' ' . $dayEnd);//'18:00:00'
    }
    if ($afternoonStart == '00:00:00') {
        $afternoonShiftStartTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $afternoonStart);
    } else {
        $afternoonShiftStartTime = strtotime($shiftDate . ' ' . $afternoonStart);//'18:00:00'
    }
    if ($afternoonEnd == '00:00:00') {
        $afternoonShiftEndTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $afternoonEnd);
    } else {
        $afternoonShiftEndTime = strtotime($shiftDate . ' ' . $afternoonEnd);//'23:59:59'
    }
    /*if($nightStart == '00:00:00'){
        $nightShiftStartTime = strtotime(date('Y-m-d', strtotime($shiftDate. ' + 1 day')).' '.$nightStart);
    }else{
        $nightShiftStartTime = strtotime($shiftDate.' '.$nightStart);//'23:59:59'
    }*/
    $nightShiftStartTime = strtotime($shiftDate . ' ' . $nightStart);
    /*if($nightEnd == '00:00:00'){
        $nightShiftEndTime = strtotime(date('Y-m-d', strtotime($shiftDate. ' + 1 day')).' '.$nightEnd);
        //$nightShiftEndTime = strtotime($shiftEndDate.' '.$nightEnd);
    }else{
        $nightShiftEndTime =strtotime(date('Y-m-d', strtotime($shiftDate. ' + 1 day')).' '.$nightEnd);
        //$nightShiftEndTime = strtotime($shiftEndDate.' '.$nightEnd);//'08:00:00'
    }*/
    $nightShiftEndTime = strtotime($shiftEndDate . ' ' . $nightEnd);
    //strtotime(date('Y-m-d H:i:s', strtotime($shiftEndDate.' '.'00:00:00')));

    $fromMidnight = strtotime($shiftDate . ' ' . '00:00:00');
    $toMidnight = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . '00:00:00');

    //split ordinary hours spread to hours and minutes
    $sprdTime = explode(':', $firstEightHours);
    $sprdHours = $sprdTime[0];
    $sprdMinutes = $sprdTime[1];
    $eightHours = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate . ' ' . $shiftStart . ':00' . ' + ' . $sprdHours . ' hour +' . $sprdMinutes . ' minutes')));

    //$eightHours = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate.' '.$shiftStart.':00'. ' + '.$sprdHours.' hour +'.$sprdMinutes.' minutes -'.$workBreak.' minutes')));
    //$eightHours = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate.' '.$shiftStart.':00'. ' + 8 hour')));
    //$eightHoursD = date('Y-m-d H:i:s', strtotime($shiftDate.' '.$shiftStart.':00'. ' + 8 hours'));
    $diff = $endtime - $starttime;
    $breaks = $workBreak * 60;
    $totalHours = ($diff - $breaks) / 60 / 60;

    if ($totalHours > $minimuHours) {
        if (isPublicHoliday($mysqli, $shiftDate, $deptId)) {
            if ($avgTotal > $avgNormalHours) {
                $difference = $avgTotal - $avgNormalHours;
                $totalHours = $totalHours - $difference;
            }
            $publicHolidayHours = $totalHours;
            //$totalPublicHolidayHours = $totalPublicHolidayHours + $publicHolidayHours;
            if ($totalHours >= $ordinaryHoursSpread) {
                if ($publicHolidayHours >= $ordinaryHoursSpread) {
                    $publicHolidayHours = $ordinaryHoursSpread;
                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                } else {
                    $publicHolidayHours = $publicHolidayHours;
                }

                if ($extraHrs <= $afterHours) {

                    $GLOBALS['gl_holiday_hours'] = $GLOBALS['gl_holiday_hours'] + $publicHolidayHours;
                    $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                    return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="" class="earlyMorningHrs"/></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="' . $publicHolidayHours . '" class="holHrs"/>' . number_format($publicHolidayHours, 2) . '</td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                } else if ($extraHrs > $afterHours) {
                    $remainingHours = $extraHrs - $afterHours;

                    $GLOBALS['gl_holiday_hours'] = $GLOBALS['gl_holiday_hours'] + $publicHolidayHours;
                    $GLOBALS['gl_after_hours'] = $GLOBALS['gl_after_hours'] + $afterHours;
                    $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;
                    return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="" class="earlyMorningHrs"/></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="' . $publicHolidayHours . '" class="holHrs"/>' . number_format($publicHolidayHours, 2) . '</td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $afterHours . '" class="ovrHrs"/>' . number_format($afterHours, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . number_format($remainingHours, 2) . '" class="dblHrs"/>' . number_format($remainingHours, 2) . '</td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                }
            } else if ($totalHours < $ordinaryHoursSpread) {
                $publicHolidayHours = $totalHours;

                $GLOBALS['gl_holiday_hours'] = $GLOBALS['gl_holiday_hours'] + $publicHolidayHours;
                return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="" class="earlyMorningHrs"/></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="' . $publicHolidayHours . '" class="holHrs"/>' . number_format($publicHolidayHours, 2) . '</td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="" class="ovrHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
            }
        } else {
            if (isWeekend($shiftDate) == 'weekday') {
                // Mon - Fri
                // more than 8 hours worked -- overtime
                if ($totalHours >= $ordinaryHoursSpread) {
                    //Night shift
                    /*if(($starttime > $nightShiftStartTime) && ($starttime < $earlyMorningStart)){
                        if ($avgTotal > $avgNormalHours){
                            $difference = $avgTotal - $avgNormalHours;
                            $totalHours = $totalHours - $difference;
                        }
                        if($afterHours != '0') {
                            $nightHours = $difference;
                            if ($totalHours >= $afterHours) {
                                $extraHrs = $totalHours;
                            } else {
                                $extraHrs = $totalHours;
                            }
                        }else{
                            $nightHours = $totalHours;
                            $extraHrs = $difference;
                        }
                        $nightHours = $totalHours;
                        if($nightHours >= $ordinaryHoursSpread){
                            if($afterHours != '0') {
                                $nightHours = $ordinaryHoursSpread;
                                $extraHrs = ($totalHours - $ordinaryHoursSpread);
                            }
                        }else{
                            $nightHours = $nightHours;
                        }
                    }else */
                    if (($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)) { //&& ($endtime <= $earlyMorningEndTime)
                        if ($avgTotal > $avgNormalHours) {
                            $difference = $avgNormalHours - $avgBeforeTotal;
                            $totalHours = $totalHours - $difference;
                            if ($afterHours != '0') {
                                $earlyMorningHours = $difference;// difference
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            } else {
                                $earlyMorningHours = $totalHours;
                                if ($totalHours >= $afterHours) {
                                    $earlyMorningHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            }
                        } else {
                            $earlyMorningHours = $totalHours;
                            if ($earlyMorningHours >= $ordinaryHoursSpread) {
                                if ($afterHours != '0') {
                                    $earlyMorningHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                    if ($totalHours >= $afterHours) {
                                        $earlyMorningHours = $ordinaryHoursSpread;
                                        $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    } else {
                                        $extraHrs = $totalHours;
                                    }
                                }
                            } else {
                                $earlyMorningHours = $totalHours;
                            }
                        }
                        /*if ($avgTotal > $avgNormalHours){
                            $difference = $avgTotal - $avgNormalHours;
                            $totalHours = $totalHours - $difference;
                        }
                        $earlyMorningHours = $totalHours;
                        if ($earlyMorningHours >= $ordinaryHoursSpread) {
                            $earlyMorningHours = $ordinaryHoursSpread;
                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                        } else {
                            $earlyMorningHours = $earlyMorningHours;
                        }*/
                    } elseif (($starttime >= $dayshiftStartTime) && ($eightHours <= $dayshiftEndTime)) {//&& ($endtime <= $dayshiftEndTime)
                        if ($avgTotal > $avgNormalHours) {
                            $difference = $avgNormalHours - $avgBeforeTotal;//6
                            $totalHours = $totalHours - $difference;//2
                            if ($afterHours != '0') {
                                $dayHours = $difference;// difference
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            } else {
                                $dayHours = $totalHours;
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            }
                        } else {
                            $dayHours = $totalHours;
                            if ($dayHours >= $ordinaryHoursSpread) {
                                if ($afterHours != '0') {
                                    $dayHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                    if ($totalHours >= $afterHours) {
                                        $dayHours = $ordinaryHoursSpread;
                                        $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    } else {
                                        $extraHrs = $totalHours;
                                    }
                                }
                            } else {
                                $dayHours = $totalHours;
                            }
                        }
                        /*if ($avgTotal > $avgNormalHours){
                            $difference = $avgTotal - $avgNormalHours;
                            $totalHours = $totalHours - $difference;
                        }
                        $dayHours = $totalHours;
                        if ($dayHours >= $ordinaryHoursSpread) {
                            $dayHours = $ordinaryHoursSpread;
                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                        } else {
                            $dayHours = $dayHours;
                        }*/
                    } elseif (($endtime > $afternoonShiftStartTime) && ($eightHours >= $afternoonShiftStartTime) && ($eightHours <= $afternoonShiftEndTime) && ($endtime >= $afternoonShiftStartTime)) { //($starttime <= $afternoonShiftStartTime)//&& ($endtime <= $afternoonShiftEndTime)     && ($eightHours <= $afternoonShiftEndTime)($endtime == $afternoonShiftEndTime || $endtime < $afternoonShiftEndTime)
                        // Afternoon Shift
                        if ($avgTotal > $avgNormalHours) {
                            $difference = $avgNormalHours - $avgBeforeTotal;
                            $totalHours = $totalHours - $difference;
                            if ($afterHours != '0') {
                                $afternoonHours = $difference;// difference
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            } else {
                                $afternoonHours = $totalHours;
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            }
                        } else {
                            $afternoonHours = $totalHours;
                            if ($afternoonHours >= $ordinaryHoursSpread) {
                                if ($afterHours != '0') {
                                    $afternoonHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                    if ($totalHours >= $afterHours) {
                                        $afternoonHours = $ordinaryHoursSpread;
                                        $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    } else {
                                        $extraHrs = $totalHours;
                                    }
                                }
                            } else {
                                $afternoonHours = $totalHours;
                            }
                        }
                        /*if ($avgTotal > $avgNormalHours){
                            $difference = $avgTotal - $avgNormalHours;
                            $totalHours = $totalHours - $difference;
                        }
                        $afternoonHours = $totalHours;
                        if ($afternoonHours >= $ordinaryHoursSpread) {
                            $afternoonHours = $ordinaryHoursSpread;
                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                        } else {
                            $afternoonHours = $afternoonHours;
                        }*/
                    } elseif (($endtime > $nightShiftStartTime) && ($eightHours > $nightShiftStartTime)) {
                        //}elseif(($endtime > $nightShiftStartTime) && ($starttime > $nightShiftStartTime) && ($starttime < $earlyMorningStart) && ($eightHours > $nightShiftStartTime)){

                        //if(($endtime > $nightShiftStartTime) && ($endtime > $afternoonShiftEndTime) && ($endtime <= $nightShiftEndTime)&& ($eightHours > $nightShiftStartTime)){ ////&& ($endtime >= $nightShiftEndTime)&& ($endtime > $afternoonShiftEndTime)
                        // Night Shift
                        if ($avgTotal > $avgNormalHours) {
                            $difference = $avgNormalHours - $avgBeforeTotal;
                            $totalHours = $totalHours - $difference;
                            if ($afterHours != '0') {
                                $nightHours = $difference;// difference
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            } else {
                                $nightHours = $totalHours;
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            }
                        } else {
                            $nightHours = $totalHours;
                            if ($nightHours >= $ordinaryHoursSpread) {
                                if ($afterHours != '0') {
                                    $nightHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                    if ($totalHours >= $afterHours) {
                                        $nightHours = $ordinaryHoursSpread;
                                        $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    } else {
                                        $extraHrs = $totalHours;
                                    }
                                }
                            } else {
                                $nightHours = $nightHours;
                            }
                        }
                    }
                    // check for first 3 hours
                    if ($afterHours == '0') {
                        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $afterHours . '" class="ordHrs"/>' . $extraHrs . '</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="" class="earlyMorningHrs"/></td><td class="afternoon"></td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                    } else if ($extraHrs <= $afterHours) {
                        //$ordinaryHours;'.$starttime.'e'.$endtime.'as'.$afternoonShiftStartTime.'ae'.$afternoonShiftEndTime.'
                        $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $dayHours;
                        $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
                        $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
                        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $dayHours . '" class="ordHrs"/>' . number_format($dayHours, 2) . '</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="' . $earlyMorningHours . '" class="earlyMorningHrs"/>' . number_format($earlyMorningHours, 2) . '</td><td class="afternoon">' . number_format($afternoonHours, 2) . '</td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                        //more than 3 hours
                    } else if ($extraHrs > $afterHours) {
                        //calculate for first 3 hours $afterHours * ?
                        //$ordinaryHours;
                        //calculate for more than 3 hours
                        $remainingHours = $extraHrs - $afterHours;

                        $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $dayHours;
                        $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
                        $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
                        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $afterHours;
                        $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;

                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $dayHours . '" class="ordHrs"/>' . number_format($dayHours, 2) . '</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="' . $earlyMorningHours . '" class="earlyMorningHrs"/>' . number_format($earlyMorningHours, 2) . '</td><td class="afternoon">' . number_format($afternoonHours, 2) . '</td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $afterHours . '" class="ovrHrs"/>' . number_format($afterHours, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $remainingHours . '" class="dblHrs"/>' . number_format($remainingHours, 2) . '</td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                    }
                } else if ($totalHours < $ordinaryHoursSpread) {
                    //if(($starttime >= $earlyMorningStartTime) && ($endtime <= $earlyMorningEndTime)){ //&& ($eightHours <= $dayshiftEndTime)
                    /*if(($starttime > $nightShiftStartTime) && ($starttime < $earlyMorningStart)){
                        if ($avgTotal > $avgNormalHours){
                            $difference = $avgTotal - $avgNormalHours;
                            $totalHours = $totalHours - $difference;
                        }
                        $nightHours = $totalHours;
                    }else */
                    if ($avgTotal > $avgNormalHours) {
                        $difference = $avgNormalHours - $avgBeforeTotal;
                        $extraHrs = $totalHours - $difference;
                        $totalHours = $difference;
                    }
                    if ($afterHours == '0') {

                    } else if ($extraHrs <= $afterHours) {


                    } else if ($extraHrs > $afterHours) {
                        $remainingHours = $extraHrs - $afterHours;

                    }
                    if (($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)) {
                        $earlyMorningHours = $totalHours;
                    } elseif (($starttime >= $dayshiftStartTime) && ($endtime <= $dayshiftEndTime)) { //($eightHours <= $dayshiftEndTime)
                        //if(($starttime >= $dayshiftStartTime) && ($endtime <= $dayshiftEndTime)){ //&& ($eightHours <= $dayshiftEndTime)
                        $dayHours = $totalHours;

                    } elseif (($endtime > $afternoonShiftStartTime) && ($endtime <= $afternoonShiftEndTime) && ($endtime >= $afternoonShiftStartTime)) {
                        // if(($endtime > $afternoonShiftStartTime) && ($endtime == $afternoonShiftEndTime || $endtime < $afternoonShiftEndTime)&& ($endtime >= $afternoonShiftStartTime)){
                        $afternoonHours = $totalHours;
                    } elseif (($endtime > $nightShiftStartTime) && ($endtime <= $nightShiftEndTime)) {//elseif(($endtime > $nightShiftStartTime) && ($endtime > $afternoonShiftEndTime) && ($endtime <= $nightShiftEndTime)&& ($eightHours > $nightShiftStartTime)){//if(($endtime > $nightShiftStartTime)  && ($eightHours > $nightShiftStartTime)){//if(($endtime > $nightShiftStartTime)  && ($endtime <= $nightShiftEndTime)){//&& ($endtime > $afternoonShiftEndTime)
                        $nightHours = $totalHours;
                    }

                    /*if(($starttime > $nightShiftStartTime) && ($starttime < $earlyMorningStart)){
                        $nightHours = $totalHours;
                    }else if(($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)){
                        $earlyMorningHours = $totalHours;
                    }else if(($starttime >= $dayshiftStartTime) && ($eightHours <= $dayshiftEndTime)){//if(($starttime >= $dayshiftStartTime) && ($endtime <= $dayshiftEndTime)){
                        $dayHours = $totalHours;
                    }else if(($endtime > $afternoonShiftStartTime) && ($endtime >= $afternoonShiftStartTime)){//if(($endtime > $afternoonShiftStartTime) && ($endtime == $afternoonShiftEndTime || $endtime < $afternoonShiftEndTime)&& ($endtime >= $afternoonShiftStartTime)){
                        $afternoonHours = $totalHours;
                    }else if(($endtime > $nightShiftStartTime)  && ($eightHours > $nightShiftStartTime)){ //if(($endtime > $nightShiftStartTime)  && ($endtime <= $nightShiftEndTime)){
                        $nightHours = $totalHours;
                    }*/
                    $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $dayHours;
                    $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
                    $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
                    $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                    $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                    $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;

                    return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $dayHours . '" class="ordHrs"/>' . number_format($dayHours, 2) . '</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="' . $earlyMorningHours . '" class="earlyMorningHrs"/>' . number_format($earlyMorningHours, 2) . '</td><td class="afternoon">' . number_format($afternoonHours, 2) . '</td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $remainingHours . '" class="dblHrs"/>' . number_format($remainingHours, 2) . '</td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                }
            } else {
                if ($shiftDay == 'Sat') {
                    //36 Monash Health Scoresby
                    //$saturdayHours = $saturdayHours + $totalHours;
                    /*if(getClientIdByJobCode($mysqli,$jobCode) == 36){

                    }else {*/
                    if ($avgTotal > $avgNormalHours) {
                        $extraHrs = $totalHours;
                        $saturdayHours = 0.00;
                        /*$difference = $avgTotal - $avgNormalHours;
                            if($difference > $ordinaryHoursSpread){
                                $difference = $totalHours - $ordinaryHoursSpread;
                                $totalHoursDifference = $difference;
                            }else{
                                $totalHoursDifference = $difference;
                            }


                            if(($avgTotal - $avgNormalHours - $totalHours)==0){
                                if ($satAfterHours != '0') {
                                    if ($totalHours >= $satAfterHours) {
                                        $extraHrs = $difference;
                                        $saturdayHours = $totalHours - $totalHoursDifference;
                                    } else {
                                        $saturdayHours = $totalHours - $difference;
                                        $extraHrs = $difference;
                                    }
                                }
                            }else {
                                if ($satAfterHours != '0') {
                                    if ($totalHours >= $satAfterHours) {
                                        $extraHrs = $difference;
                                        $saturdayHours = $totalHours - $totalHoursDifference;
                                    } else {
                                        $saturdayHours = $totalHours - $difference;
                                        $extraHrs = $difference;
                                    }
                                } else {
                                    if($avgTotal > $avgNormalHours){
                                        $saturdayHours = $totalHours - $difference;
                                        $extraHrs = $difference;
                                    }else{
                                        $saturdayHours = $totalHours - $difference;
                                        $extraHrs = $totalHoursDifference;
                                    }
                                }
                            }*/
                    } else {
                        $saturdayHours = $totalHours;
                        if ($saturdayHours >= $ordinaryHoursSpread) {
                            if ($satAfterHours != '0') {
                                $saturdayHours = $ordinaryHoursSpread;
                                $extraHrs = ($totalHours - $ordinaryHoursSpread);
                            } else {

                            }
                        } else {
                            $saturdayHours = $saturdayHours;
                        }
                    }
                    if ($satAfterHours == 0) {
                        $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $saturdayHours;
                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"><input type="hidden" name="satHrs[]" value="' . number_format($saturdayHours, 2) . '" class="satHrs"/>' . number_format($saturdayHours, 2) . '</td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovertime"><input type="hidden" name="satovertimeHrs[]" value="" class="satovrHrs"/></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                    } else if ($extraHrs <= $satAfterHours) {
                        $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $saturdayHours;
                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"><input type="hidden" name="satHrs[]" value="' . number_format($saturdayHours, 2) . '" class="satHrs"/>' . number_format($saturdayHours, 2) . '</td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovertime"><input type="hidden" name="satovertimeHrs[]" value="" class="satovrHrs"/></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                    } else if ($extraHrs > $satAfterHours) {
                        $remainingHours = $extraHrs - $satAfterHours;
                        $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $saturdayHours;
                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $satAfterHours;
                        $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;
                        //'  T'.$avgTotal.' N'.$avgNormalHours.' TH'.$totalHours.
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"><input type="hidden" name="satHrs[]" value="' . number_format($saturdayHours, 2) . '" class="satHrs"/>' . number_format($saturdayHours, 2) . '</td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $satAfterHours . '" class="ovrHrs"/>' . number_format($satAfterHours, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $remainingHours . '" class="dblHrs"/>' . number_format($remainingHours, 2) . '</td><td class="satovertime"><input type="hidden" name="satovertimeHrs[]" value="" class="satovrHrs"/></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                    }
                    /* }*/
                } else if ($shiftDay == 'Sun') {
                    /* if ($starttime >= $fromMidnight && $endtime <= $toMidnight) {*/
                    //$sundayHours = $sundayHours + $totalHours;
                    $sundayDoubletimeHours = 0;
                    if ($avgTotal > $avgNormalHours) {
                        $difference = $avgTotal - $avgNormalHours;
                        if ($difference > $ordinaryHoursSpread) {
                            $sundayDoubletimeHours = $totalHours;
                        } else {
                            if ($totalHours < $difference) {
                                $sundayHours = 0;
                                $sundayDoubletimeHours = $totalHours;
                            } else {
                                $sundayHours = $totalHours - $difference;
                                $sundayDoubletimeHours = $difference;
                            }
                        }
                        /*if ($totalHours >= $sunAfterHours) {
                            if($sunAfterHours != '0') {
                                $extraHrs = $totalHours;
                            }
                        } else {
                            $extraHrs = $totalHours;
                        }*/
                        $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;
                        $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $sundayDoubletimeHours;

                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"><input type="hidden" name="sunHrs[]" value="' . number_format($sundayHours, 2) . '" class="sunHrs"/>' . number_format($sundayHours, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="" class="ovrHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $sundayDoubletimeHours . '" class="dblHrs"/>' . number_format($sundayDoubletimeHours, 2) . '</td><td class="satovrtime"></td><td class="sunovertime"><input type="hidden" name="sunovertimeHrs[]" value="" class="sunovrHrs"/></td><td class="povrtime"></td>';
                    } else {
                        $sundayHours = $totalHours;
                        if ($sundayHours >= $ordinaryHoursSpread) {
                            if ($sunAfterHours != '0') {
                                $sundayHours = $ordinaryHoursSpread;
                                $extraHrs = ($totalHours - $ordinaryHoursSpread);
                            }
                        } else {
                            $sundayHours = $sundayHours;
                        }
                        if ($sunAfterHours == '0') {

                            $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;

                            return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"><input type="hidden" name="sunHrs[]" value="' . number_format($sundayHours, 2) . '" class="sunHrs"/>' . number_format($sundayHours, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="" class="ovrHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovertime"><input type="hidden" name="sunovertimeHrs[]" value="" class="sunovrHrs"/></td><td class="povrtime"></td>';
                        } else if ($extraHrs <= $sunAfterHours) {

                            $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;
                            $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;

                            return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"><input type="hidden" name="sunHrs[]" value="' . number_format($sundayHours, 2) . '" class="sunHrs"/>' . number_format($sundayHours, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovertime"><input type="hidden" name="sunovertimeHrs[]" value="" class="sunovrHrs"/></td><td class="povrtime"></td>';
                        }
                        if ($extraHrs > $sunAfterHours) {
                            $remainingHours = $extraHrs - $sunAfterHours;

                            $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;
                            $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $remainingHours;
                            $GLOBALS['gl_sunAfter_hours'] = $GLOBALS['gl_sunAfter_hours'] + $sunAfterHours;

                            return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"><input type="hidden" name="sunHrs[]" value="' . number_format($sundayHours, 2) . '" class="sunHrs"/>' . number_format($sundayHours, 2) . '</td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $remainingHours . '" class="ovrHrs"/>' . number_format($remainingHours, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovertime"><input type="hidden" name="sunovertimeHrs[]" value="' . $sunAfterHours . '" class="sunovrHrs"/>' . number_format($sunAfterHours, 2) . '</td><td class="povrtime"></td>';
                        }
                    }
                    /* }*/
                }
            }
        }
    } else if ($totalHours <= $minimumHours) {

        if ($avgTotal > $avgNormalHours) {
            $difference = $avgTotal - $avgNormalHours;
            $totalHours = $totalHours - $difference;
        }
        /*if(isPublicHoliday($mysqli,$shiftDate)){
            $publicHolidayHours = $totalHours;
        }else if ($shiftDay == 'Sat') {
            $saturdayHours = $totalHours;
        }else if ($shiftDay == 'Sun') {
            $sundayHours = $totalHours;
        }else if (($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)){
            $earlyMorningHours = $totalHours;
        }else if (($starttime >= $dayshiftStartTime) && ($endtime <= $dayshiftEndTime)) {
            $dayHours = $totalHours;
        }else if(($endtime > $afternoonShiftStartTime) && ($endtime >= $afternoonShiftStartTime)){
            $afternoonHours = $totalHours;
        }else if(($endtime > $nightShiftStartTime) && ($endtime <= $nightShiftEndTime)) {
            $nightHours = $totalHours;
        }*/

        $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $totalHours;
        $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
        $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
        $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $saturdayHours;
        $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;

        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $totalHours . '" class="ordHrs"/>' . number_format($totalHours, 2) . '</td><td class="earlymorning">' . number_format($earlyMorningHours, 2) . '</td><td class="afternoon">' . number_format($afternoonHours, 2) . '</td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat">' . number_format($saturdayHours, 2) . '</td><td class="sun">' . number_format($sundayHours, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="" class="ovrHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
    }
}

function getTimeSheetData($mysqli, $clientid, $candidateId, $positionid, $jobCode, $payRule, $startDate, $endDate)
{
    $accountsEdit = 'Y';
    $dpId = getDepartmentIdByJobCode($mysqli, $jobCode);
    if (empty($candidateId)) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.weekendingDate                                  
                                FROM
                                  timesheet
                                WHERE
                                  timesheet.clientId = ? AND 
                                  timesheet.positionId = ? AND
                                  timesheet.deptId = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ? AND 
                                  timesheet.accountsEdit = ? ORDER BY timesheet.candidateId,timesheet.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iiisss", $clientid, $positionid, $dpId, $startDate, $endDate, $accountsEdit) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.weekendingDate                                  
                                FROM
                                  timesheet
                                WHERE
                                  timesheet.clientId = ? AND 
                                  timesheet.candidateId = ? AND
                                  timesheet.positionId = ? AND
                                  timesheet.deptId = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ? AND
                                  timesheet.accountsEdit = ? ORDER BY timesheet.candidateId,timesheet.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isiisss", $clientid, $candidateId, $positionid, $dpId, $startDate, $endDate, $accountsEdit) or die($mysqli->error);
    }

    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftDate, $shiftDay, $candidateId, $clientId, $positionId, $deptId, $jobCode, $shiftStart, $shiftEnd, $workBreak, $wrkHrs, $weekendingDate) or die($mysqli->error);
    $empId = '';
    $payRollTotal = '';
    $len = $sql->num_rows;
    $k = 0;
    $avgHours = 0;
    $avgTotal = 0;
    $avgBeforeTotal = 0;
    while ($sql->fetch()) {

        if (empty($empId)) {
            $empId = $candidateId;
        }
        if ($empId != $candidateId) {
            $avgHours = 0;
            $avgTotal = 0;
            $avgBeforeTotal = 0;
            $GLOBALS['gl_day_hours'] = 0;
            $GLOBALS['gl_holiday_hours'] = 0;
            $GLOBALS['gl_extra_hours'] = 0;
            $GLOBALS['$gl_sat_extra_hours'] = 0;
            $GLOBALS['gl_sun_extra_hours'] = 0;
            $GLOBALS['gl_after_hours'] = 0;
            $GLOBALS['gl_double_time_hours'] = 0;
            $GLOBALS['gl_night_hours'] = 0;
            $GLOBALS['gl_early_morning_hours'] = 0;
            $GLOBALS['gl_afternoon_hours'] = 0;
            $GLOBALS['gl_saturday_hours'] = 0;
            $GLOBALS['gl_satAfter_hours'] = 0;
            $GLOBALS['gl_sunday_double_time_hours'] = 0;
            $GLOBALS['gl_sunday_hours'] = 0;
            $GLOBALS['gl_sunAfter_hours'] = 0;
            $GLOBALS['gl_total_hours'] = 0;
            $GLOBALS['gl_period_overtime_hours'] = 0;
            $GLOBALS['gl_total_period_overtime_hours'] = 0;
            $row = $row . $payRollTotal;
            $row = $row . '<tr><td><i class="fa fa-fw fa-calendar txt-color-blue hidden-md hidden-sm hidden-xs"></i>Employee ID</td>
                            <td><i class="fa fa-fw fa-calendar txt-color-blue hidden-md hidden-sm hidden-xs"></i>Shift Day</td>
                            <td><i class="fa fa-fw fa-calendar txt-color-blue hidden-md hidden-sm hidden-xs"></i>Shift Date</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Start Time</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Break</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>End Time</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Total Hours</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Breaking</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Day</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Early Morning</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Afternoon</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Night</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Saturday</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Sunday</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Public Holiday(T2.5)</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Overtime(T1.5)</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Doubletime(T2)</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Saturday Overtime</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Sunday Overtime</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Period Overtime</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Week Ending Date</td></tr>';
            $empId = $candidateId;
        }
        $row = $row . '<tr><td>' . $candidateId . '(' . getCandidateFirstNameByCandidateId($mysqli, $candidateId) . ' ' . getCandidateLastNameByCandidateId($mysqli, $candidateId) . ')</td><td><input type="hidden" name="shiftId[]" value="' . $shiftId . '" class="shid"/><input type="hidden" name="shiftDay[]" value="' . $shiftDay . '" class="shday"/>' . $shiftDay . '</td>';
        $row = $row . '<td><input type="hidden" name="shiftDate[]" value="' . $shiftDate . '" class="shdate"/><input type="hidden" name="candidateId[]" value="' . $candidateId . '" class="canid"/><input type="hidden" name="clid[]" value="' . $clientId . '" class="clid"/><input type="hidden" name="posid[]" value="' . $positionId . '" class="posid"/><input type="hidden" name="jobCode[]" value="' . $jobCode . '" class="jobCode"/>' . $shiftDate . '</td>';
        $row = $row . '<td><input type="hidden" name="shiftStart[]" class="shStart" value="' . $shiftStart . '" size="5"/>' . $shiftStart . '</td>';
        $row = $row . '<td><input type="hidden" name="workBreak[]" class="break" value="' . $workBreak . '" size="3"/>' . $workBreak . '</td>';
        $row = $row . '<td><input type="hidden" name="shiftEnd[]" class="shEnd" value="' . $shiftEnd . '" size="5"/>' . $shiftEnd . '</td>';
        $row = $row . '<td><span class="totalHrs"></span><input type="hidden" name="wrkhrs[]" class="hrs" value="' . $wrkHrs . '" size="5"/>' . $wrkHrs . '</td>';

        $calculateBreaking = calculateOvertimeBreaking($mysqli, $shiftDay, $shiftDate, $shiftStart, $shiftEnd, $workBreak, $jobCode, $payRule, $deptId);
        $breakData = explode('-', $calculateBreaking);
        $avgTotal = $avgTotal + $breakData[1] + $breakData[3] + $breakData[5] + $breakData[7] + $breakData[9] + $breakData[11];
        $row = $row . '<td>' . $avgTotal . '</td>';
        if (in_array($jobCode, array('JBC16', 'JBC603', 'JBC21', 'JBC614', 'JBC615', 'JBC625', 'JBC613', 'JBC616', 'JBC396', 'JBC44', 'JBC344', 'JBC268', 'JBC50', 'JBC452', 'JBC239', 'JBC340', 'JBC20', 'JBC587', 'JBC411', 'JBC376', 'JBC622', 'JBC398'))) {
            $calTimeSheet = calculateHealthSectorTimeSheet($mysqli, $shiftDay, $shiftDate, $shiftStart, $shiftEnd, $workBreak, $jobCode, $payRule, $avgTotal, $avgBeforeTotal, $deptId);
        } else {
            $calTimeSheet = calculateTimeSheet($mysqli, $shiftDay, $shiftDate, $shiftStart, $shiftEnd, $workBreak, $jobCode, $payRule, $avgTotal, $avgBeforeTotal, $deptId);
        }
        $row = $row . $calTimeSheet;
        $row = $row . '<td><input type="hidden" name="wkendingDate[]" class="wkendDate" value="' . $weekendingDate . '"/>' . $weekendingDate . '</td></tr>';

        $GLOBALS['gl_period_overtime_hours'] = ($GLOBALS['gl_day_hours'] + $GLOBALS['gl_early_morning_hours'] + $GLOBALS['gl_afternoon_hours'] + $GLOBALS['gl_night_hours'] + $GLOBALS['gl_saturday_hours'] + $GLOBALS['gl_sunday_hours'] + $GLOBALS['gl_holiday_hours']);
        if ($GLOBALS['gl_period_overtime_hours'] > $GLOBALS['gl_avg_normal_hours']) {
            $GLOBALS['gl_total_period_overtime_hours'] = $GLOBALS['gl_period_overtime_hours'] - $GLOBALS['gl_avg_normal_hours'];
        } else {
            $GLOBALS['gl_total_period_overtime_hours'] = 0;
        }
        $payRollTotal = '<tr class="totalRow"><td colspan="8" style="text-align: left;">Totals</td><td class="timeTotals"><input type="hidden" name="startDate" id="startDate" value="' . $startDate . '"/><input type="hidden" name="endDate" id="endDate" value="' . $endDate . '"/><input type="hidden" name="ordTotal" value="' . $GLOBALS['gl_day_hours'] . '" class="ordTotal"/>' . number_format($GLOBALS['gl_day_hours'], 2) . '</td><td class="earlyMorningTotal"><input type="hidden" name="earlyMorningTotal" value="' . $GLOBALS['gl_early_morning_hours'] . '" class="earlyMorningTotal"/> ' . number_format($GLOBALS['gl_early_morning_hours'], 2) . '</td><td class="afternoonTotal"><input type="hidden" name="aftTotal" value="' . $GLOBALS['gl_afternoon_hours'] . '" class="aftTotal"/>' . number_format($GLOBALS['gl_afternoon_hours'], 2) . '</td><td class="nightTotal"><input type="hidden" name="ngtTotal" value="' . $GLOBALS['gl_night_hours'] . '" class="ngtTotal"/> ' . number_format($GLOBALS['gl_night_hours'], 2) . '</td><td class="satTotal"><input type="hidden" name="saturdayTotal" value="' . $GLOBALS['gl_saturday_hours'] . '" class="saturdayTotal"/>' . number_format($GLOBALS['gl_saturday_hours'], 2) . '</td><td class="sunTotal"><input type="hidden" name="sundayTotal" value="' . $GLOBALS['gl_sunday_hours'] . '" class="sundayTotal"/>' . number_format($GLOBALS['gl_sunday_hours'], 2) . '</td><td class="timeTotals"><input type="hidden" name="hldTotal" value="' . $GLOBALS['gl_holiday_hours'] . '" class="hldTotal"/>' . number_format($GLOBALS['gl_holiday_hours'], 2) . '</td><td class="timeTotals"><input type="hidden" name="ovtTotal" value="' . $GLOBALS['gl_extra_hours'] . '" class="ovtTotal"/>' . number_format($GLOBALS['gl_extra_hours'], 2) . '</td><td class="timeTotals"><input type="hidden" name="dblTotal" value="' . $GLOBALS['gl_double_time_hours'] . '" class="dblTotal"/>' . number_format($GLOBALS['gl_double_time_hours'], 2) . '</td><td class="timeTotals"><input type="hidden" name="satovtTotal" value="' . $GLOBALS['gl_sat_extra_hours'] . '" class="satovtTotal"/>' . number_format($GLOBALS['gl_sat_extra_hours'], 2) . '</td><td class="timeTotals"><input type="hidden" name="sunovtTotal" value="' . $GLOBALS['gl_sun_extra_hours'] . '" class="sunovtTotal"/>' . number_format($GLOBALS['gl_sun_extra_hours'], 2) . '</td><td class="timeTotals"><input type="hidden" name="povtTotal" value="' . $GLOBALS['gl_total_period_overtime_hours'] . '" class="povtTotal"/>' . number_format($GLOBALS['gl_total_period_overtime_hours'], 2) . '</td><td data-empid="' . $candidateId . '" data-startdate="' . $startDate . '" data-enddate="' . $endDate . '" data-ordtotal="' . number_format($GLOBALS['gl_day_hours'], 2) . '" data-emgtotal="' . number_format($GLOBALS['gl_early_morning_hours'], 2) . '" data-afttotal="' . number_format($GLOBALS['gl_afternoon_hours'], 2) . '" data-nighttotal="' . number_format($GLOBALS['gl_night_hours'], 2) . '" data-ovttotal="' . number_format($GLOBALS['gl_extra_hours'], 2) . '" data-dbltotal="' . number_format($GLOBALS['gl_double_time_hours'], 2) . '" data-satovttotal="' . number_format($GLOBALS['gl_sat_extra_hours'], 2) . '" data-sunovttotal="' . number_format($GLOBALS['gl_sun_extra_hours'], 2) . '" data-povttotal="' . number_format($GLOBALS['gl_total_period_overtime_hours'], 2) . '" data-sattotal="' . number_format($GLOBALS['gl_saturday_hours'], 2) . '" data-suntotal="' . number_format($GLOBALS['gl_sunday_hours'], 2) . '" data-holtotal="' . number_format($GLOBALS['gl_holiday_hours'], 2) . '">&nbsp;<button type="button" name="saveTotalBtn" id="saveTotalBtn" class="saveTotalBtn pull-right btn btn-warning btn-sm"><i class="glyphicon glyphicon-file fa fa-save"></i>&nbsp; Save</button></td></tr>';
        $avgBeforeTotal = $avgTotal;
        if ($k == $len - 1) {
            $avgBeforeTotal = $avgTotal;
            $row = $row . $payRollTotal;
        }
        $k++;
    }
    $row = $row . '<tr><td colspan="21"><button type="button" name="saveAllBtn" id="saveAllBtn" class="saveAllBtn pull-right btn btn-warning btn-sm"><i class="glyphicon glyphicon-file fa fa-save"></i>&nbsp; Save All</button></td></tr>';
    return $row;
}

function getDaviesTimeSheetData($mysqli, $clientid, $candidateId, $positionid, $jobCode, $payRule, $startDate, $endDate)
{
    $accountsEdit = 'Y';
    if (empty($candidateId)) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.weekendingDate                                  
                                FROM
                                  timesheet
                                WHERE
                                  timesheet.clientId = ? AND 
                                  timesheet.positionId = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ? AND 
                                  timesheet.accountsEdit = ? ORDER BY timesheet.candidateId,timesheet.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisss", $clientid, $positionid, $startDate, $endDate, $accountsEdit) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.weekendingDate                                  
                                FROM
                                  timesheet
                                WHERE
                                  timesheet.clientId = ? AND 
                                  timesheet.candidateId = ? AND
                                  timesheet.positionId = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ? AND
                                  timesheet.accountsEdit = ? ORDER BY timesheet.candidateId,timesheet.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isisss", $clientid, $candidateId, $positionid, $startDate, $endDate, $accountsEdit) or die($mysqli->error);
    }

    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftDate, $shiftDay, $candidateId, $clientId, $positionId, $deptId, $jobCode, $shiftStart, $shiftEnd, $workBreak, $wrkHrs, $weekendingDate) or die($mysqli->error);
    $empId = '';
    $payRollTotal = '';
    $len = $sql->num_rows;
    $k = 0;
    $avgHours = 0;
    $avgTotal = 0;
    $avgBeforeTotal = 0;
    while ($sql->fetch()) {
        if (empty($empId)) {
            $empId = $candidateId;
        }
        if ($empId != $candidateId) {
            $avgHours = 0;
            $avgTotal = 0;
            $avgBeforeTotal = 0;
            $GLOBALS['gl_day_hours'] = 0;
            $GLOBALS['gl_holiday_hours'] = 0;
            $GLOBALS['gl_extra_hours'] = 0;
            $GLOBALS['$gl_sat_extra_hours'] = 0;
            $GLOBALS['gl_sun_extra_hours'] = 0;
            $GLOBALS['gl_after_hours'] = 0;
            $GLOBALS['gl_double_time_hours'] = 0;
            $GLOBALS['gl_night_hours'] = 0;
            $GLOBALS['gl_early_morning_hours'] = 0;
            $GLOBALS['gl_afternoon_hours'] = 0;
            $GLOBALS['gl_saturday_hours'] = 0;
            $GLOBALS['gl_satAfter_hours'] = 0;
            $GLOBALS['gl_sunday_double_time_hours'] = 0;
            $GLOBALS['gl_sunday_hours'] = 0;
            $GLOBALS['gl_sunAfter_hours'] = 0;
            $GLOBALS['gl_total_hours'] = 0;
            $GLOBALS['gl_period_overtime_hours'] = 0;
            $GLOBALS['gl_total_period_overtime_hours'] = 0;
            $row = $row . $payRollTotal;
            $row = $row . '<tr><td><i class="fa fa-fw fa-calendar txt-color-blue hidden-md hidden-sm hidden-xs"></i>Employee ID</td>
                            <td><i class="fa fa-fw fa-calendar txt-color-blue hidden-md hidden-sm hidden-xs"></i>Shift Day</td>
                            <td><i class="fa fa-fw fa-calendar txt-color-blue hidden-md hidden-sm hidden-xs"></i>Shift Date</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Start Time</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Break</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>End Time</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Total Hours</td>
                             <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Breaking</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Day</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Early Morning</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Afternoon</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Night</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Saturday</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Sunday</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Public Holiday(T2.5)</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Overtime(T1.5)</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Doubletime(T2)</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Saturday Overtime</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Sunday Overtime</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Period Overtime</td>
                            <td><i class="fa fa-fw fa-clock-o txt-color-blue hidden-md hidden-sm hidden-xs"></i>Week Ending Date</td></tr>';
            //<td colspan="17"><hr style="border:1px dashed #5C6C86"></td>
            $empId = $candidateId;
        }
        $row = $row . '<tr><td>' . $candidateId . '(' . getCandidateFirstNameByCandidateId($mysqli, $candidateId) . ' ' . getCandidateLastNameByCandidateId($mysqli, $candidateId) . ')</td><td><input type="hidden" name="shiftId[]" value="' . $shiftId . '" class="shid"/><input type="hidden" name="shiftDay[]" value="' . $shiftDay . '" class="shday"/>' . $shiftDay . '</td>';
        $row = $row . '<td><input type="hidden" name="shiftDate[]" value="' . $shiftDate . '" class="shdate"/><input type="hidden" name="candidateId[]" value="' . $candidateId . '" class="canid"/><input type="hidden" name="clid[]" value="' . $clientId . '" class="clid"/><input type="hidden" name="posid[]" value="' . $positionId . '" class="posid"/><input type="hidden" name="jobCode[]" value="' . $jobCode . '" class="jobCode"/>' . $shiftDate . '</td>';
        $row = $row . '<td><input type="hidden" name="shiftStart[]" class="shStart" value="' . $shiftStart . '" size="5"/>' . $shiftStart . '</td>';
        $row = $row . '<td><input type="hidden" name="workBreak[]" class="break" value="' . $workBreak . '" size="3"/>' . $workBreak . '</td>';
        $row = $row . '<td><input type="hidden" name="shiftEnd[]" class="shEnd" value="' . $shiftEnd . '" size="5"/>' . $shiftEnd . '</td>';
        $row = $row . '<td><span class="totalHrs"></span><input type="hidden" name="wrkhrs[]" class="hrs" value="' . $wrkHrs . '" size="5"/>' . $wrkHrs . '</td>';
        /*if(isWeekend($shiftDate)=='weekday'){
            $row = $row.calculatePayrollHoursForWeekDay($shiftDay, $shiftDate, $shiftStart, $shiftEnd, $workBreak);
        }else{
            $row = $row.calculatePayrollHoursForWeekEnd($shiftDay, $shiftDate, $shiftStart, $shiftEnd, $workBreak);
        }*/


        $calculateBreaking = calculateOvertimeBreaking($mysqli, $shiftDay, $shiftDate, $shiftStart, $shiftEnd, $workBreak, $jobCode, $payRule, $deptId);
        $breakData = explode('-', $calculateBreaking);
        $avgTotal = $avgTotal + $breakData[1] + $breakData[3] + $breakData[5] + $breakData[7] + $breakData[9] + $breakData[11];
        $row = $row . '<td>' . $avgTotal . '</td>';
        // $row = $row.'<td></td>';
        //'<td>'.$breakData[0].$breakData[1].$breakData[2].$breakData[3].$breakData[4].$breakData[5].$breakData[6].$breakData[7].$breakData[8].$breakData[9].$breakData[10].$breakData[11].$breakData[12].'</td>';
//
        $calTimeSheet = calculateDaviesTimeSheet($mysqli, $shiftDay, $shiftDate, $shiftStart, $shiftEnd, $workBreak, $jobCode, $payRule, $avgTotal, $avgBeforeTotal, $deptId);
        $row = $row . $calTimeSheet;
        $row = $row . '<td><input type="hidden" name="wkendingDate[]" class="wkendDate" value="' . $weekendingDate . '"/>' . $weekendingDate . '</td></tr>';
        //$payRollTotal = payruleProcessing($mysqli,$clientid,$candidateId,$positionid,$jobCode,$payRule,$startDate,$endDate,$avgTotal);

        $GLOBALS['gl_period_overtime_hours'] = ($GLOBALS['gl_day_hours'] + $GLOBALS['gl_early_morning_hours'] + $GLOBALS['gl_afternoon_hours'] + $GLOBALS['gl_night_hours'] + $GLOBALS['gl_saturday_hours'] + $GLOBALS['gl_sunday_hours'] + $GLOBALS['gl_holiday_hours']);
        if ($GLOBALS['gl_period_overtime_hours'] > $GLOBALS['gl_avg_normal_hours']) {
            $GLOBALS['gl_total_period_overtime_hours'] = $GLOBALS['gl_period_overtime_hours'] - $GLOBALS['gl_avg_normal_hours'];
        } else {
            $GLOBALS['gl_total_period_overtime_hours'] = 0;
        }
        $payRollTotal = '<tr class="totalRow"><td colspan="8" style="text-align: left;">Totals</td><td class="timeTotals"><input type="hidden" name="startDate" id="startDate" value="' . $startDate . '"/><input type="hidden" name="endDate" id="endDate" value="' . $endDate . '"/><input type="hidden" name="ordTotal" value="' . $GLOBALS['gl_day_hours'] . '" class="ordTotal"/>' . number_format($GLOBALS['gl_day_hours'], 2) . '</td><td class="earlyMorningTotal"><input type="hidden" name="earlyMorningTotal" value="' . $GLOBALS['gl_early_morning_hours'] . '" class="earlyMorningTotal"/> ' . number_format($GLOBALS['gl_early_morning_hours'], 2) . '</td><td class="afternoonTotal"><input type="hidden" name="aftTotal" value="' . $GLOBALS['gl_afternoon_hours'] . '" class="aftTotal"/>' . number_format($GLOBALS['gl_afternoon_hours'], 2) . '</td><td class="nightTotal"><input type="hidden" name="ngtTotal" value="' . $GLOBALS['gl_night_hours'] . '" class="ngtTotal"/> ' . number_format($GLOBALS['gl_night_hours'], 2) . '</td><td class="satTotal"><input type="hidden" name="saturdayTotal" value="' . $GLOBALS['gl_saturday_hours'] . '" class="saturdayTotal"/>' . number_format($GLOBALS['gl_saturday_hours'], 2) . '</td><td class="sunTotal"><input type="hidden" name="sundayTotal" value="' . $GLOBALS['gl_sunday_hours'] . '" class="sundayTotal"/>' . number_format($GLOBALS['gl_sunday_hours'], 2) . '</td><td class="timeTotals"><input type="hidden" name="hldTotal" value="' . $GLOBALS['gl_holiday_hours'] . '" class="hldTotal"/>' . number_format($GLOBALS['gl_holiday_hours'], 2) . '</td><td class="timeTotals"><input type="hidden" name="ovtTotal" value="' . $GLOBALS['gl_extra_hours'] . '" class="ovtTotal"/>' . number_format($GLOBALS['gl_extra_hours'], 2) . '</td><td class="timeTotals"><input type="hidden" name="dblTotal" value="' . $GLOBALS['gl_double_time_hours'] . '" class="dblTotal"/>' . number_format($GLOBALS['gl_double_time_hours'], 2) . '</td><td class="timeTotals"><input type="hidden" name="satovtTotal" value="' . $GLOBALS['gl_sat_extra_hours'] . '" class="satovtTotal"/>' . number_format($GLOBALS['gl_sat_extra_hours'], 2) . '</td><td class="timeTotals"><input type="hidden" name="sunovtTotal" value="' . $GLOBALS['gl_sun_extra_hours'] . '" class="sunovtTotal"/>' . number_format($GLOBALS['gl_sun_extra_hours'], 2) . '</td><td class="timeTotals"><input type="hidden" name="povtTotal" value="' . $GLOBALS['gl_total_period_overtime_hours'] . '" class="povtTotal"/>' . number_format($GLOBALS['gl_total_period_overtime_hours'], 2) . '</td><td data-empid="' . $candidateId . '" data-startdate="' . $startDate . '" data-enddate="' . $endDate . '" data-ordtotal="' . number_format($GLOBALS['gl_day_hours'], 2) . '" data-emgtotal="' . number_format($GLOBALS['gl_early_morning_hours'], 2) . '" data-afttotal="' . number_format($GLOBALS['gl_afternoon_hours'], 2) . '" data-nighttotal="' . number_format($GLOBALS['gl_night_hours'], 2) . '" data-ovttotal="' . number_format($GLOBALS['gl_extra_hours'], 2) . '" data-dbltotal="' . number_format($GLOBALS['gl_double_time_hours'], 2) . '" data-satovttotal="' . number_format($GLOBALS['gl_sat_extra_hours'], 2) . '" data-sunovttotal="' . number_format($GLOBALS['gl_sun_extra_hours'], 2) . '" data-povttotal="' . number_format($GLOBALS['gl_total_period_overtime_hours'], 2) . '" data-sattotal="' . number_format($GLOBALS['gl_saturday_hours'], 2) . '" data-suntotal="' . number_format($GLOBALS['gl_sunday_hours'], 2) . '" data-holtotal="' . number_format($GLOBALS['gl_holiday_hours'], 2) . '">&nbsp;<button type="button" name="saveTotalBtn" id="saveTotalBtn" class="saveTotalBtn pull-right btn btn-warning btn-sm"><i class="glyphicon glyphicon-file fa fa-save"></i>&nbsp; Save</button></td></tr>';
        $avgBeforeTotal = $avgTotal;
        if ($k == $len - 1) {
            //$payRollTotal = payruleProcessing($mysqli,$clientid,$candidateId,$positionid,$jobCode,$payRule,$startDate,$endDate,$avgTotal);
            //$payRollTotal = '<tr class="totalRow"><td colspan="8" style="text-align: left;">Totals</td><td class="timeTotals"><input type="hidden" name="startDate" id="startDate" value="'.$startDate.'"/><input type="hidden" name="endDate" id="endDate" value="'.$endDate.'"/><input type="hidden" name="ordTotal" value="'.$GLOBALS['gl_day_hours'].'" class="ordTotal"/>'.number_format($GLOBALS['gl_day_hours'],2).'</td><td class="earlyMorningTotal"><input type="hidden" name="earlyMorningTotal" value="'.$GLOBALS['gl_early_morning_hours'].'" class="earlyMorningTotal"/> '.number_format($GLOBALS['gl_early_morning_hours'],2).'</td><td class="afternoonTotal"><input type="hidden" name="aftTotal" value="'.$GLOBALS['gl_afternoon_hours'].'" class="aftTotal"/>'.number_format($GLOBALS['gl_afternoon_hours'],2).'</td><td class="nightTotal"><input type="hidden" name="ngtTotal" value="'.$GLOBALS['gl_night_hours'].'" class="ngtTotal"/> '.number_format($GLOBALS['gl_night_hours'],2).'</td><td class="satTotal"><input type="hidden" name="saturdayTotal" value="'.$GLOBALS['gl_saturday_hours'].'" class="saturdayTotal"/>'.number_format($GLOBALS['gl_saturday_hours'],2).'</td><td class="sunTotal"><input type="hidden" name="sundayTotal" value="'.$GLOBALS['gl_sunday_hours'].'" class="sundayTotal"/>'.number_format($GLOBALS['gl_sunday_hours'],2).'</td><td class="timeTotals"><input type="hidden" name="hldTotal" value="'.$GLOBALS['gl_holiday_hours'].'" class="hldTotal"/>'.number_format($GLOBALS['gl_holiday_hours'],2).'</td><td class="timeTotals"><input type="hidden" name="ovtTotal" value="'.$GLOBALS['gl_extra_hours'].'" class="ovtTotal"/>'.number_format($GLOBALS['gl_extra_hours'],2).'</td><td class="timeTotals"><input type="hidden" name="dblTotal" value="'.$GLOBALS['gl_double_time_hours'].'" class="dblTotal"/>'.number_format($GLOBALS['gl_double_time_hours'],2).'</td><td class="timeTotals"><input type="hidden" name="satovtTotal" value="'.$GLOBALS['gl_sat_extra_hours'].'" class="satovtTotal"/>'.number_format($GLOBALS['gl_sat_extra_hours'],2).'</td><td class="timeTotals"><input type="hidden" name="sunovtTotal" value="'.$GLOBALS['gl_sun_extra_hours'].'" class="sunovtTotal"/>'.number_format($GLOBALS['gl_sun_extra_hours'],2).'</td><td class="timeTotals"><input type="hidden" name="povtTotal" value="'.$GLOBALS['gl_total_period_overtime_hours'].'" class="povtTotal"/>'.number_format($GLOBALS['gl_total_period_overtime_hours'],2).'</td><td data-empid="'.$candidateId.'" data-startdate="'.$startDate.'" data-enddate="'.$endDate.'" data-ordtotal="'.number_format($GLOBALS['gl_day_hours'],2).'" data-emgtotal="'.number_format($GLOBALS['gl_early_morning_hours'],2).'" data-afttotal="'.number_format($GLOBALS['gl_afternoon_hours'],2).'" data-nighttotal="'.number_format($GLOBALS['gl_night_hours'],2).'" data-ovttotal="'.number_format($GLOBALS['gl_extra_hours'],2).'" data-dbltotal="'.number_format($GLOBALS['gl_double_time_hours'],2).'" data-satovttotal="'.number_format($GLOBALS['gl_sat_extra_hours'],2).'" data-sunovttotal="'.number_format($GLOBALS['gl_sun_extra_hours'],2).'" data-povttotal="'.number_format($GLOBALS['gl_period_overtime_hours'],2).'" data-sattotal="'.number_format($GLOBALS['gl_saturday_hours'],2).'" data-suntotal="'.number_format($GLOBALS['gl_sunday_hours'],2).'" data-holtotal="'.number_format($GLOBALS['gl_holiday_hours'],2).'">&nbsp;<button type="button" name="saveTotalBtn" id="saveTotalBtn" class="saveTotalBtn pull-right btn btn-warning btn-sm"><i class="glyphicon glyphicon-file fa fa-save"></i>&nbsp; Save</button></td></tr>';
            $avgBeforeTotal = $avgTotal;
            $row = $row . $payRollTotal;
        }
        $k++;
    }
    $row = $row . '<tr><td colspan="21"><button type="button" name="saveAllBtn" id="saveAllBtn" class="saveAllBtn pull-right btn btn-warning btn-sm"><i class="glyphicon glyphicon-file fa fa-save"></i>&nbsp; Save All</button></td></tr>';
    return $row;
}

function calculateDaviesTimeSheet($mysqli, $shiftDay, $shiftDate, $shiftStart, $shiftEnd, $workBreak, $jobCode, $payRule, $avgTotal, $avgBeforeTotal, $deptId)
{
    $minimuHours;
    $avgNormalHours;
    $earlyMorningHours;
    $ordinaryHours;
    $afterHours;
    $mealbreakLimit;
    $ruleSQL = $mysqli->prepare("SELECT 
                                      payrule.payruleId,
                                      payrule.jobCode,
                                      payrule.payAwrdCode,
                                      payrule.payAwrdDesc,
                                      payrule.avgNormalHrs,
                                      payrule.spreadStart,
                                      payrule.spreadEnd,
                                      payrule.spreadDuration,
                                      payrule.firstEightHours,
                                      payrule.minimumHrs,
                                      payrule.earlyMorningStartTime,
                                      payrule.earlyMorningEndTime,
                                      payrule.dayShiftStartTime,
                                      payrule.dayShiftEndTime,
                                      payrule.afternoonShiftStartTime,
                                      payrule.afternoonShiftEndTime,
                                      payrule.nightShiftStartTime,
                                      payrule.nightShiftEndTime,
                                      payrule.overtime,
                                      payrule.overtimeAfterHrs,
                                      payrule.overtimeSatAfterHrs,
                                      payrule.overtimeSunAfterHrs,
                                      payrule.doubletime,
                                      payrule.saturday,
                                      payrule.sunday,
                                      payrule.publicHoliday,
                                      payrule.overtimeRule,
                                      payrule.mealBreakLimit
                                    FROM
                                      payrule
                                    WHERE
                                      payrule.jobCode = ?") or die($mysqli->error);
    $ruleSQL->bind_param("s", $jobCode) or die($mysqli->error);
    $ruleSQL->execute();
    $ruleSQL->store_result();
    $ruleSQL->bind_result($payruleId, $jobCode, $payAwrdCode, $payAwrdDesc, $avgNormalHrs, $spreadStart, $spreadEnd, $spreadDuration, $firstEightHours, $minimumHrs, $earlyMorningStartTime, $earlyMorningEndTime, $dayShiftStartTime, $dayShiftEndTime, $afternoonShiftStartTime, $afternoonShiftEndTime,
        $nightShiftStartTime, $nightShiftEndTime, $overtime, $overtimeAfterHrs, $overtimeSatAfterHrs, $overtimeSunAfterHrs, $doubletime, $saturday, $sunday, $publicHoliday, $overtimeRule, $mealBreakLimit) or die($mysqli->error);

    while ($ruleSQL->fetch()) {
        $minimumHours = $minimumHrs;
        $avgNormalHours = $avgNormalHrs;
        $ordinaryHoursSpread = $spreadDuration;
        $firstEightHours = $firstEightHours;
        $earlyMorningStart = $earlyMorningStartTime;
        $earlyMorningEnd = $earlyMorningEndTime;
        $dayStart = $dayShiftStartTime;
        $dayEnd = $dayShiftEndTime;
        $afternoonStart = $afternoonShiftStartTime;
        $afternoonEnd = $afternoonShiftEndTime;
        $nightStart = $nightShiftStartTime;
        $nightEnd = $nightShiftEndTime;
        $afterHours = $overtimeAfterHrs;
        $satAfterHours = $overtimeSatAfterHrs;
        $sunAfterHours = $overtimeSunAfterHrs;
        $mealbreakLimit = $mealBreakLimit;
    }
    $GLOBALS['gl_avg_normal_hours'] = $avgNormalHours;
    $afternoonHours = 0;
    $dayHours = 0;
    $earlyMorningHours = 0;
    $nightHours = 0;
    $saturdayHours = 0;
    $sundayHours = 0;
    $publicHolidayHours = 0;

    $totalOrdinaryHours = 0;
    $totalEarlyMorningHours = 0;
    $totalAfternoonHours = 0;
    $totalNightHours = 0;
    $totalsaturdayHours = 0;
    $totalsundayHours = 0;
    $totalPublicHolidayHours = 0;
    $totalOvertimeHours = 0;
    $totalPeriodOvertimeHours = 0;
    $totalOvertimeSatHours = 0;
    $totalOvertimeSunHours = 0;
    $totalDoubletimeHours = 0;
    $mealBreakStatus = true;

    $shiftEndComp = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate . ' ' . $shiftEnd . ':00')));
    $shiftStartComp = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate . ' ' . $shiftStart . ':00')));

    if ($shiftEndComp < $shiftStartComp) {
        $shiftEndDate = date('Y-m-d', strtotime($shiftDate . ' + 1 day'));
    } else {
        $shiftEndDate = $shiftDate;
    }

    $starttime = strtotime($shiftDate . ' ' . $shiftStart . ':00');
    $endtime = strtotime($shiftEndDate . ' ' . $shiftEnd . ':00');

    if ($earlyMorningStart == '00:00:00') {
        $earlyMorningStartTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $earlyMorningStart);
    } else {
        $earlyMorningStartTime = strtotime($shiftDate . ' ' . $earlyMorningStart); //'06:00:00'
    }
    if ($earlyMorningEnd == '00:00:00') {
        $earlyMorningEndTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $earlyMorningEnd);
    } else {
        $earlyMorningEndTime = strtotime($shiftDate . ' ' . $earlyMorningEnd); //'18:00:00'
    }

    if ($dayStart == '00:00:00') {
        $dayshiftStartTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $dayStart);
    } else {
        $dayshiftStartTime = strtotime($shiftDate . ' ' . $dayStart); //'06:00:00'
    }
    if ($dayEnd == '00:00:00') {
        $dayshiftEndTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $dayEnd);
    } else {
        $dayshiftEndTime = strtotime($shiftDate . ' ' . $dayEnd);//'18:00:00'
    }
    if ($afternoonStart == '00:00:00') {
        $afternoonShiftStartTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $afternoonStart);
    } else {
        $afternoonShiftStartTime = strtotime($shiftDate . ' ' . $afternoonStart);//'18:00:00'
    }
    if ($afternoonEnd == '00:00:00') {
        $afternoonShiftEndTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $afternoonEnd);
    } else {
        $afternoonShiftEndTime = strtotime($shiftDate . ' ' . $afternoonEnd);//'23:59:59'
    }

    $nightShiftStartTime = strtotime($shiftDate . ' ' . $nightStart);

    $nightShiftEndTime = strtotime($shiftEndDate . ' ' . $nightEnd);

    $fromMidnight = strtotime($shiftDate . ' ' . '00:00:00');
    $toMidnight = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . '00:00:00');

    //split ordinary hours spread to hours and minutes
    $sprdTime = explode(':', $firstEightHours);
    $sprdHours = $sprdTime[0];
    $sprdMinutes = $sprdTime[1];
    $eightHours = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate . ' ' . $shiftStart . ':00' . ' + ' . $sprdHours . ' hour +' . $sprdMinutes . ' minutes')));

    $diff = $endtime - $starttime;
    $breaks = $workBreak * 60;
    $totalHours = ($diff - $breaks) / 60 / 60;

    if ($totalHours > $minimuHours) {
        if (isPublicHoliday($mysqli, $shiftDate, $deptId)) {
            if ($avgTotal > $avgNormalHours) {
                $difference = $avgTotal - $avgNormalHours;
                $totalHours = $totalHours - $difference;
            }
            $publicHolidayHours = $totalHours;
            //$totalPublicHolidayHours = $totalPublicHolidayHours + $publicHolidayHours;
            if ($totalHours >= $ordinaryHoursSpread) {
                if ($publicHolidayHours >= $ordinaryHoursSpread) {
                    $publicHolidayHours = $ordinaryHoursSpread;
                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                } else {
                    $publicHolidayHours = $publicHolidayHours;
                }

                if ($extraHrs <= $afterHours) {

                    $GLOBALS['gl_holiday_hours'] = $GLOBALS['gl_holiday_hours'] + $publicHolidayHours;
                    $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                    return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="" class="earlyMorningHrs"/></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="' . $publicHolidayHours . '" class="holHrs"/>' . number_format($publicHolidayHours, 2) . '</td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                } else if ($extraHrs > $afterHours) {
                    $remainingHours = $extraHrs - $afterHours;

                    $GLOBALS['gl_holiday_hours'] = $GLOBALS['gl_holiday_hours'] + $publicHolidayHours;
                    $GLOBALS['gl_after_hours'] = $GLOBALS['gl_after_hours'] + $afterHours;
                    $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;
                    return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="" class="earlyMorningHrs"/></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="' . $publicHolidayHours . '" class="holHrs"/>' . number_format($publicHolidayHours, 2) . '</td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $afterHours . '" class="ovrHrs"/>' . number_format($afterHours, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . number_format($remainingHours, 2) . '" class="dblHrs"/>' . number_format($remainingHours, 2) . '</td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                }
            } else if ($totalHours < $ordinaryHoursSpread) {
                $publicHolidayHours = $totalHours;

                $GLOBALS['gl_holiday_hours'] = $GLOBALS['gl_holiday_hours'] + $publicHolidayHours;
                return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="" class="earlyMorningHrs"/></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="' . $publicHolidayHours . '" class="holHrs"/>' . number_format($publicHolidayHours, 2) . '</td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="" class="ovrHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
            }
        } else {
            $overlapSaturday = 0;
            $overlapSunday = 0;
            if (isWeekend($shiftDate) == 'weekday') {
                // Mon - Fri
                // more than 8 hours worked -- overtime
                if ($totalHours >= $ordinaryHoursSpread) {

                    if (($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)) { //&& ($endtime <= $earlyMorningEndTime)
                        if ($avgTotal > $avgNormalHours) {
                            $difference = $avgNormalHours - $avgBeforeTotal;
                            $totalHours = $totalHours - $difference;
                            if ($afterHours != '0') {
                                $earlyMorningHours = $difference;// difference
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            } else {
                                $earlyMorningHours = $totalHours;
                                if ($totalHours >= $afterHours) {
                                    $earlyMorningHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            }
                        } else {
                            $earlyMorningHours = $totalHours;
                            if ($earlyMorningHours >= $ordinaryHoursSpread) {
                                if ($afterHours != '0') {
                                    $earlyMorningHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                    if ($totalHours >= $afterHours) {
                                        $earlyMorningHours = $ordinaryHoursSpread;
                                        $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    } else {
                                        $extraHrs = $totalHours;
                                    }
                                }
                            } else {
                                $earlyMorningHours = $totalHours;
                            }
                        }

                    } elseif (($starttime >= $dayshiftStartTime) && ($eightHours <= $dayshiftEndTime)) {//&& ($endtime <= $dayshiftEndTime)
                        if ($avgTotal > $avgNormalHours) {
                            $difference = $avgNormalHours - $avgBeforeTotal;//6
                            $totalHours = $totalHours - $difference;//2
                            if ($afterHours != '0') {
                                $dayHours = $difference;// difference
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            } else {
                                $dayHours = $totalHours;
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            }
                        } else {
                            $dayHours = $totalHours;
                            if ($dayHours >= $ordinaryHoursSpread) {
                                if ($afterHours != '0') {
                                    $dayHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                    if ($totalHours >= $afterHours) {
                                        $dayHours = $ordinaryHoursSpread;
                                        $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    } else {
                                        $extraHrs = $totalHours;
                                    }
                                }
                            } else {
                                $dayHours = $totalHours;
                            }
                        }

                    } elseif (($endtime > $afternoonShiftStartTime) && ($eightHours >= $afternoonShiftStartTime) && ($eightHours <= $afternoonShiftEndTime) && ($endtime >= $afternoonShiftStartTime)) { //($starttime <= $afternoonShiftStartTime)//&& ($endtime <= $afternoonShiftEndTime)     && ($eightHours <= $afternoonShiftEndTime)($endtime == $afternoonShiftEndTime || $endtime < $afternoonShiftEndTime)
                        // Afternoon Shift
                        if ($avgTotal > $avgNormalHours) {
                            $difference = $avgNormalHours - $avgBeforeTotal;
                            $totalHours = $totalHours - $difference;
                            if ($afterHours != '0') {
                                $afternoonHours = $difference;// difference
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            } else {
                                $afternoonHours = $totalHours;
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            }
                        } else {
                            $afternoonHours = $totalHours;
                            if ($afternoonHours >= $ordinaryHoursSpread) {
                                if ($afterHours != '0') {
                                    $afternoonHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                    if ($totalHours >= $afterHours) {
                                        $afternoonHours = $ordinaryHoursSpread;
                                        $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    } else {
                                        $extraHrs = $totalHours;
                                    }
                                }
                            } else {
                                $afternoonHours = $totalHours;
                            }
                        }
                    } elseif (($endtime > $nightShiftStartTime) && ($eightHours <= $nightShiftEndTime)) {//($endtime >= $nightShiftStartTime) && ($eightHours <= $nightShiftStartTime)
                        // Night Shift
                        if ($avgTotal > $avgNormalHours) {
                            $difference = $avgNormalHours - $avgBeforeTotal;
                            $totalHours = $totalHours - $difference;
                            if ($afterHours != '0') {
                                $nightHours = $difference;// difference
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            } else {
                                $nightHours = $totalHours;
                                if ($totalHours >= $afterHours) {
                                    $extraHrs = $totalHours;
                                } else {
                                    $extraHrs = $totalHours;
                                }
                            }
                        } else {
                            $nightHours = $totalHours;
                            if ($nightHours >= $ordinaryHoursSpread) {
                                if ($afterHours != '0') {
                                    $nightHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                    if ($totalHours >= $afterHours) {
                                        $nightHours = $ordinaryHoursSpread;
                                        $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    } else {
                                        $extraHrs = $totalHours;
                                    }
                                }
                            } else {
                                $nightHours = $nightHours;
                            }
                        }
                    }
                    // check for first 3 hours
                    if ($afterHours == '0') {
                        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $afterHours . '" class="ordHrs"/>' . $extraHrs . '</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="" class="earlyMorningHrs"/></td><td class="afternoon"></td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                    } else if ($extraHrs <= $afterHours) {
                        //$ordinaryHours;'.$starttime.'e'.$endtime.'as'.$afternoonShiftStartTime.'ae'.$afternoonShiftEndTime.'
                        $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $dayHours;
                        $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
                        $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
                        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $dayHours . '" class="ordHrs"/>' . number_format($dayHours, 2) . '</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="' . $earlyMorningHours . '" class="earlyMorningHrs"/>' . number_format($earlyMorningHours, 2) . '</td><td class="afternoon">' . number_format($afternoonHours, 2) . '</td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                        //more than 3 hours
                    } else if ($extraHrs > $afterHours) {
                        //calculate for first 3 hours $afterHours * ?
                        //$ordinaryHours;
                        //calculate for more than 3 hours
                        $remainingHours = $extraHrs - $afterHours;
                        $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $dayHours;
                        $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
                        $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
                        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $afterHours;
                        $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $dayHours . '" class="ordHrs"/>' . number_format($dayHours, 2) . '</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="' . $earlyMorningHours . '" class="earlyMorningHrs"/>' . number_format($earlyMorningHours, 2) . '</td><td class="afternoon">' . number_format($afternoonHours, 2) . '</td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $afterHours . '" class="ovrHrs"/>' . number_format($afterHours, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $remainingHours . '" class="dblHrs"/>' . number_format($remainingHours, 2) . '</td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                    }
                } else if ($totalHours < $ordinaryHoursSpread) {
                    if ($avgTotal > $avgNormalHours) {
                        $difference = $avgNormalHours - $avgBeforeTotal;
                        $extraHrs = $totalHours - $difference;
                        $totalHours = $difference;
                    }
                    /* if($afterHours == '0'){

                    }else if ($extraHrs <= $afterHours) {


                    }else if ($extraHrs > $afterHours) {
                        $remainingHours = $extraHrs - $afterHours;
                        $extraHrs = $afterHours;
                    }*/
                    if (($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)) {
                        $earlyMorningHours = $totalHours;
                    } elseif (($starttime >= $dayshiftStartTime) && ($endtime <= $dayshiftEndTime)) { //($eightHours <= $dayshiftEndTime)
                        $dayHours = $totalHours;
                    } elseif (($endtime > $afternoonShiftStartTime) && ($endtime <= $afternoonShiftEndTime) && ($endtime >= $afternoonShiftStartTime)) {
                        $afternoonHours = $totalHours;
                    } /*elseif(($endtime >= $nightShiftStartTime) && ($endtime <= $nightShiftEndTime)) {//elseif(($endtime > $nightShiftStartTime) && ($endtime > $afternoonShiftEndTime) && ($endtime <= $nightShiftEndTime)&& ($eightHours > $nightShiftStartTime)){//if(($endtime > $nightShiftStartTime)  && ($eightHours > $nightShiftStartTime)){//if(($endtime > $nightShiftStartTime)  && ($endtime <= $nightShiftEndTime)){//&& ($endtime > $afternoonShiftEndTime)
                        $nightHours = $totalHours;
                    }*/
                    else {
                        if ($shiftDay == 'Fri') {
                            if ($totalHours > 1) {
                                $nightHours = 1;
                                $overlapSaturday = $totalHours - $nightHours;
                            }
                        } else {
                            $nightHours = $totalHours;
                        }
                    }
                    /*$GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $dayHours;
                    $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
                    $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
                    $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                    $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                    $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;
                    return $row = $row.'<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $dayHours . '" class="ordHrs"/>' . number_format($dayHours, 2) . '</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="' . $earlyMorningHours . '" class="earlyMorningHrs"/>' . number_format($earlyMorningHours, 2) . '</td><td class="afternoon">'.number_format($afternoonHours,2).'</td><td class="night">'.number_format($nightHours,2).'</td><td class="sat"></td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="'.$extraHrs.'" class="ovrHrs"/>'.number_format($extraHrs).'</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="'.$remainingHours.'" class="dblHrs"/>'.number_format($remainingHours,2).'</td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';*/

                    if ($afterHours == '0') {
                        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                        $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $overlapSaturday;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $afterHours . '" class="ordHrs"/>' . $extraHrs . '</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="" class="earlyMorningHrs"/></td><td class="afternoon"></td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat">' . number_format($overlapSaturday, 2) . '</td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                    } else if ($extraHrs <= $afterHours) {
                        //$ordinaryHours;'.$starttime.'e'.$endtime.'as'.$afternoonShiftStartTime.'ae'.$afternoonShiftEndTime.'
                        $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $dayHours;
                        $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
                        $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
                        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                        $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $overlapSaturday;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $dayHours . '" class="ordHrs"/></td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="' . $earlyMorningHours . '" class="earlyMorningHrs"/>' . number_format($earlyMorningHours, 2) . '</td><td class="afternoon">' . number_format($afternoonHours, 2) . '</td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat">' . number_format($overlapSaturday, 2) . '</td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                        //more than 3 hours
                    } else if ($extraHrs > $afterHours) {
                        //calculate for first 3 hours $afterHours * ?
                        //$ordinaryHours;
                        //calculate for more than 3 hours
                        $remainingHours = $extraHrs - $afterHours;
                        $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $dayHours;
                        $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
                        $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
                        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
                        $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $afterHours;
                        $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;
                        $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $overlapSaturday;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $dayHours . '" class="ordHrs"/>' . number_format($dayHours, 2) . '</td><td class="earlymorning"><input type="hidden" name="earlyMorningHrs[]" value="' . $earlyMorningHours . '" class="earlyMorningHrs"/>' . number_format($earlyMorningHours, 2) . '</td><td class="afternoon">' . number_format($afternoonHours, 2) . '</td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat">' . number_format($overlapSaturday, 2) . '</td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $afterHours . '" class="ovrHrs"/>' . number_format($afterHours, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $remainingHours . '" class="dblHrs"/>' . number_format($remainingHours, 2) . '</td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                    }
                }
            } else {
                if ($shiftDay == 'Sat') {
                    if (($endtime > $nightShiftStartTime)) {
                        if ($totalHours > 0.5) {
                            $saturdayHours = 0.5;
                            $overlapSunday = $totalHours - $saturdayHours;
                        } else {
                            $saturdayHours = $totalHours;
                        }
                        $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $saturdayHours;
                        $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $overlapSunday;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"><input type="hidden" name="satHrs[]" value="' . number_format($saturdayHours, 2) . '" class="satHrs"/>' . number_format($saturdayHours, 2) . '</td><td class="sun">' . number_format($overlapSunday, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $doubletime . '" class="dblHrs"/>' . number_format($doubletime, 2) . '</td><td class="satovertime"><input type="hidden" name="satovertimeHrs[]" value="" class="satovrHrs"/></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                    } else {
                        if ($avgTotal > $avgNormalHours) {
                            $hoursToFill = $avgNormalHours - $avgBeforeTotal;
                            $extraHrs = $avgTotal - $avgNormalHours;
                            if ($satAfterHours > 0) {
                                if ($extraHrs > $satAfterHours) {
                                    $doubletime = $extraHrs - $satAfterHours;
                                    $remainingHours = $doubletime;
                                }
                                $extraHrs = $satAfterHours;
                            }
                            $saturdayHours = $hoursToFill;
                        } else {
                            $saturdayHours = $totalHours;
                            if ($saturdayHours >= $ordinaryHoursSpread) {
                                if ($satAfterHours != '0') {
                                    $saturdayHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                } else {
                                }
                            } else {
                                $saturdayHours = $saturdayHours;
                            }
                        }
                        /* $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $saturdayHours;
                         $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                         $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;
                         return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"><input type="hidden" name="satHrs[]" value="' . number_format($saturdayHours, 2) . '" class="satHrs"/>' . number_format($saturdayHours, 2) . '</td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="'.$doubletime.'" class="dblHrs"/>' . number_format($doubletime, 2) . '</td><td class="satovertime"><input type="hidden" name="satovertimeHrs[]" value="" class="satovrHrs"/></td><td class="sunovrtime"></td><td class="povrtime"></td>';*/

                        if ($satAfterHours == 0) {
                            $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $saturdayHours;
                            $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                            $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;
                            $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;
                            return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"><input type="hidden" name="satHrs[]" value="' . number_format($saturdayHours, 2) . '" class="satHrs"/>' . number_format($saturdayHours, 2) . '</td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $doubletime . '" class="dblHrs"/>' . number_format($doubletime, 2) . '</td><td class="satovertime"><input type="hidden" name="satovertimeHrs[]" value="" class="satovrHrs"/></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                        } else if ($extraHrs <= $satAfterHours) {
                            if ($avgBeforeTotal > $avgNormalHours) {
                                $doubletime = $totalHours - $satAfterHours;
                                $remainingHours = $doubletime;
                                $saturdayHours = 0;
                            }
                            $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $saturdayHours;
                            $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                            $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;
                            $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;
                            return $row = $row . '<td class="ordinary">' . $endtime . ' ' . $nightShiftStartTime . ' ' . $eightHours . ' ' . $nightShiftEndTime . '<input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"><input type="hidden" name="satHrs[]" value="' . number_format($saturdayHours, 2) . '" class="satHrs"/>' . number_format($saturdayHours, 2) . '</td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $doubletime . '" class="dblHrs"/>' . number_format($doubletime, 2) . '</td><td class="satovertime"><input type="hidden" name="satovertimeHrs[]" value="" class="satovrHrs"/></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                        } else if ($extraHrs > $satAfterHours) {
                            $remainingHours = $extraHrs - $satAfterHours;
                            $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $saturdayHours;
                            $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $satAfterHours;
                            $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $remainingHours;
                            $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;
                            return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"><input type="hidden" name="satHrs[]" value="' . number_format($saturdayHours, 2) . '" class="satHrs"/>' . number_format($saturdayHours, 2) . '</td><td class="sun"></td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $satAfterHours . '" class="ovrHrs"/>' . number_format($satAfterHours, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $remainingHours . '" class="dblHrs"/>' . number_format($remainingHours, 2) . '</td><td class="satovertime"><input type="hidden" name="satovertimeHrs[]" value="" class="satovrHrs"/></td><td class="sunovrtime"></td><td class="povrtime"></td>';
                        }
                    }
                } else if ($shiftDay == 'Sun') {
                    $sundayDoubletimeHours = 0;
                    if ($avgTotal > $avgNormalHours) {
                        $difference = $avgTotal - $avgNormalHours;
                        if ($difference > $ordinaryHoursSpread) {
                            $sundayDoubletimeHours = $totalHours;
                        } else {
                            if ($totalHours < $difference) {
                                $sundayHours = 0;
                                $sundayDoubletimeHours = $totalHours;
                            } else {
                                $sundayHours = $totalHours - $difference;
                                $sundayDoubletimeHours = $difference;
                            }
                        }
                        $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;
                        $GLOBALS['gl_double_time_hours'] = $GLOBALS['gl_double_time_hours'] + $sundayDoubletimeHours;
                        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"><input type="hidden" name="sunHrs[]" value="' . number_format($sundayHours, 2) . '" class="sunHrs"/>' . number_format($sundayHours, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="" class="ovrHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="' . $sundayDoubletimeHours . '" class="dblHrs"/>' . number_format($sundayDoubletimeHours, 2) . '</td><td class="satovrtime"></td><td class="sunovertime"><input type="hidden" name="sunovertimeHrs[]" value="" class="sunovrHrs"/></td><td class="povrtime"></td>';
                    } else {
                        $sundayHours = $totalHours;
                        if ($sundayHours >= $ordinaryHoursSpread) {
                            if ($sunAfterHours != '0') {
                                $sundayHours = $ordinaryHoursSpread;
                                $extraHrs = ($totalHours - $ordinaryHoursSpread);
                            }
                        } else {
                            $sundayHours = $sundayHours;
                        }
                        if ($sunAfterHours == '0') {
                            $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;
                            return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"><input type="hidden" name="sunHrs[]" value="' . number_format($sundayHours, 2) . '" class="sunHrs"/>' . number_format($sundayHours, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="" class="ovrHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovertime"><input type="hidden" name="sunovertimeHrs[]" value="" class="sunovrHrs"/></td><td class="povrtime"></td>';
                        } else if ($extraHrs <= $sunAfterHours) {
                            $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;
                            $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $extraHrs;
                            return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"><input type="hidden" name="sunHrs[]" value="' . number_format($sundayHours, 2) . '" class="sunHrs"/>' . number_format($sundayHours, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $extraHrs . '" class="ovrHrs"/>' . number_format($extraHrs, 2) . '</td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovertime"><input type="hidden" name="sunovertimeHrs[]" value="" class="sunovrHrs"/></td><td class="povrtime"></td>';
                        }
                        if ($extraHrs > $sunAfterHours) {
                            $remainingHours = $extraHrs - $sunAfterHours;
                            $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;
                            $GLOBALS['gl_extra_hours'] = $GLOBALS['gl_extra_hours'] + $remainingHours;
                            $GLOBALS['gl_sunAfter_hours'] = $GLOBALS['gl_sunAfter_hours'] + $sunAfterHours;
                            return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="" class="ordHrs"/></td><td class="earlymorning"></td><td class="afternoon"></td><td class="night"></td><td class="sat"></td><td class="sun"><input type="hidden" name="sunHrs[]" value="' . number_format($sundayHours, 2) . '" class="sunHrs"/>' . number_format($sundayHours, 2) . '</td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="' . $remainingHours . '" class="ovrHrs"/>' . number_format($remainingHours, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovertime"><input type="hidden" name="sunovertimeHrs[]" value="' . $sunAfterHours . '" class="sunovrHrs"/>' . number_format($sunAfterHours, 2) . '</td><td class="povrtime"></td>';
                        }
                    }
                }
            }
        }
    } else if ($totalHours <= $minimumHours) {

        if ($avgTotal > $avgNormalHours) {
            $difference = $avgTotal - $avgNormalHours;
            $totalHours = $totalHours - $difference;
        }
        /*if(isPublicHoliday($mysqli,$shiftDate)){
            $publicHolidayHours = $totalHours;
        }else if ($shiftDay == 'Sat') {
            $saturdayHours = $totalHours;
        }else if ($shiftDay == 'Sun') {
            $sundayHours = $totalHours;
        }else if (($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)){
            $earlyMorningHours = $totalHours;
        }else if (($starttime >= $dayshiftStartTime) && ($endtime <= $dayshiftEndTime)) {
            $dayHours = $totalHours;
        }else if(($endtime > $afternoonShiftStartTime) && ($endtime >= $afternoonShiftStartTime)){
            $afternoonHours = $totalHours;
        }else if(($endtime > $nightShiftStartTime) && ($endtime <= $nightShiftEndTime)) {
            $nightHours = $totalHours;
        }*/

        $GLOBALS['gl_day_hours'] = $GLOBALS['gl_day_hours'] + $totalHours;
        $GLOBALS['gl_early_morning_hours'] = $GLOBALS['gl_early_morning_hours'] + $earlyMorningHours;
        $GLOBALS['gl_afternoon_hours'] = $GLOBALS['gl_afternoon_hours'] + $afternoonHours;
        $GLOBALS['gl_night_hours'] = $GLOBALS['gl_night_hours'] + $nightHours;
        $GLOBALS['gl_saturday_hours'] = $GLOBALS['gl_saturday_hours'] + $saturdayHours;
        $GLOBALS['gl_sunday_hours'] = $GLOBALS['gl_sunday_hours'] + $sundayHours;

        return $row = $row . '<td class="ordinary"><input type="hidden" name="ordinaryHrs[]" value="' . $totalHours . '" class="ordHrs"/>' . number_format($totalHours, 2) . '</td><td class="earlymorning">' . number_format($earlyMorningHours, 2) . '</td><td class="afternoon">' . number_format($afternoonHours, 2) . '</td><td class="night">' . number_format($nightHours, 2) . '</td><td class="sat">' . number_format($saturdayHours, 2) . '</td><td class="sun">' . number_format($sundayHours, 2) . '</td><td class="holiday"><input type="hidden" name="holidayHrs[]" value="" class="holHrs"/></td><td class="overtime"><input type="hidden" name="overtimeHrs[]" value="" class="ovrHrs"/></td><td class="doubletime"><input type="hidden" name="doubletimeHrs[]" value="" class="dblHrs"/></td><td class="satovrtime"></td><td class="sunovrtime"></td><td class="povrtime"></td>';
    }
}

function getTimeSheetBulkData($mysqli, $clientid, $candidateId, $positionid, $jobCode, $payRule, $startDate, $endDate)
{
    if (empty($candidateId)) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.jobCode,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs,
                                  timesheet.weekendingDate                                  
                                FROM
                                  timesheet
                                WHERE
                                  timesheet.clientId = ? AND 
                                  timesheet.positionId = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ? ORDER BY timesheet.candidateId,timesheet.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iiss", $clientid, $positionid, $startDate, $endDate) or die($mysqli->error);
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftDate, $shiftDay, $candidateId, $clientId, $positionId, $jobCode, $shiftStart, $shiftEnd, $workBreak, $wrkHrs, $weekendingDate) or die($mysqli->error);

    $canMatch = '';
    $k = 0;
    $len = $sql->num_rows;
    $payR = '';
    $row = '';
    while ($sql->fetch()) {
        if (empty($canMatch)) {
            $canMatch = $candidateId;
        }
        $row = $row . '<tr><td>' . $candidateId . '(' . getCandidateFirstNameByCandidateId($mysqli, $candidateId) . ' ' . getCandidateLastNameByCandidateId($mysqli, $candidateId) . ')</td><td><input type="hidden" name="shiftId[]" value="' . $shiftId . '" class="shid"/><input type="hidden" name="shiftDay[]" value="' . $shiftDay . '" class="shday"/>' . $shiftDay . '</td>';
        $row = $row . '<td><input type="hidden" name="shiftDate[]" value="' . $shiftDate . '" class="shdate"/><input type="hidden" name="candidateId[]" value="' . $candidateId . '" class="canid"/><input type="hidden" name="clid[]" value="' . $clientId . '" class="clid"/><input type="hidden" name="posid[]" value="' . $positionId . '" class="posid"/><input type="hidden" name="jobCode[]" value="' . $jobCode . '" class="jobCode"/>' . $shiftDate . '</td>';
        $row = $row . '<td><input type="hidden" name="shiftStart[]" class="shStart" value="' . $shiftStart . '" size="5"/>' . $shiftStart . '</td>';
        $row = $row . '<td><input type="hidden" name="workBreak[]" class="break" value="' . $workBreak . '" size="3"/>' . $workBreak . '</td>';
        $row = $row . '<td><input type="hidden" name="shiftEnd[]" class="shEnd" value="' . $shiftEnd . '" size="5"/>' . $shiftEnd . '</td>';
        $row = $row . '<td><span class="totalHrs"></span><input type="hidden" name="wrkhrs[]" class="hrs" value="' . $wrkHrs . '" size="5"/>' . $wrkHrs . '</td>';
        $row = $row . calculateTimeSheet($mysqli, $shiftDay, $shiftDate, $shiftStart, $shiftEnd, $workBreak, $jobCode, $payRule);
        $row = $row . '<td><input type="hidden" name="wkendingDate[]" class="wkendDate" value="' . $weekendingDate . '"/>' . $weekendingDate . '</td></tr>';

        if ($canMatch != $candidateId) {
            $payR = payruleProcessing($mysqli, $clientid, $candidateId, $positionid, $jobCode, $payRule, $startDate, $endDate);
            $canMatch = $candidateId;
        }
        //last iteration
        if ($k == $len - 1) {
            $payR = payruleProcessing($mysqli, $clientid, $candidateId, $positionid, $jobCode, $payRule, $startDate, $endDate);
        }
        $k++;
    }
    return $row . $payR;
}

function getPayrollNameByJobCode($mysqli, $jobCode)
{
    $sql = $mysqli->prepare("SELECT payrollName FROM job_detail WHERE jobCode = ?") or die($mysqli->error);
    $sql->bind_param("s", $jobCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payrollName;
    } else {
        return null;
    }
}

// payrules.....
function getAverageNormalHours($mysqli, $jbCode)
{
    $sql = $mysqli->prepare("SELECT avgNormalHrs FROM payrule WHERE jobCode = ?") or die($mysqli->error);
    $sql->bind_param("s", $jbCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->avgNormalHrs;
    } else {
        return null;
    }
}

function text_truncate($textString, $length)
{
    if (strlen($textString) <= $length) {
        return $textString;
    } else {
        $truncatedString = substr($textString, 0, $length);
        return $truncatedString;
    }
}

function payruleProcessing($mysqli, $clientid, $candidateId, $positionid, $jobCode, $payRule, $startDate, $endDate, $avgTotal)
{
    if (empty($candidateId)) {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs                                  
                                FROM
                                  timesheet
                                WHERE
                                  timesheet.clientId = ? AND 
                                  timesheet.positionId = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ? ORDER BY timesheet.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iiss", $clientid, $positionid, $startDate, $endDate) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT 
                                  timesheet.shiftId,
                                  timesheet.shiftDate,
                                  timesheet.shiftDay,
                                  timesheet.candidateId,
                                  timesheet.clientId,
                                  timesheet.positionId,
                                  timesheet.deptId,
                                  timesheet.shiftStart,
                                  timesheet.shiftEnd,
                                  timesheet.workBreak,
                                  timesheet.wrkHrs                                  
                                FROM
                                  timesheet
                                WHERE
                                  timesheet.clientId = ? AND 
                                  timesheet.candidateId = ? AND
                                  timesheet.positionId = ? AND
                                  timesheet.shiftDate BETWEEN ? AND ? ORDER BY timesheet.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isiss", $clientid, $candidateId, $positionid, $startDate, $endDate) or die($mysqli->error);
    }

    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftDate, $shiftDay, $candidateId, $clientId, $positionId, $deptId, $shiftStart, $shiftEnd, $workBreak, $wrkHrs) or die($mysqli->error);

    /*$minimumHours;
    $avgNormalHours;
    $ordinaryHours;
    $afterHours;
    $mealbreakLimit;*/
    $totalOrdinaryHours = 0;
    $totalEarlyMorningHours = 0;
    $totalAfternoonHours = 0;
    $totalNightHours = 0;
    $totalsaturdayHours = 0;
    $totalsundayHours = 0;
    $totalPublicHolidayHours = 0;
    $totalOvertimeHours = 0;
    $totalPeriodOvertimeHours = 0;
    $totalOvertimeSatHours = 0;
    $totalOvertimeSunHours = 0;
    $totalDoubletimeHours = 0;
    $mealBreakStatus = true;

    $ruleSQL = $mysqli->prepare("SELECT 
                                      payrule.payruleId,
                                      payrule.jobCode,
                                      payrule.payAwrdCode,
                                      payrule.payAwrdDesc,
                                      payrule.avgNormalHrs,
                                      payrule.spreadStart,
                                      payrule.spreadEnd,
                                      payrule.spreadDuration,
                                      payrule.firstEightHours,
                                      payrule.minimumHrs,
                                      payrule.earlyMorningStartTime,
                                      payrule.earlyMorningEndTime,
                                      payrule.dayShiftStartTime,
                                      payrule.dayShiftEndTime,
                                      payrule.afternoonShiftStartTime,
                                      payrule.afternoonShiftEndTime,
                                      payrule.nightShiftStartTime,
                                      payrule.nightShiftEndTime,
                                      payrule.overtime,
                                      payrule.overtimeAfterHrs,
                                      payrule.overtimeSatAfterHrs,
                                      payrule.overtimeSunAfterHrs,
                                      payrule.doubletime,
                                      payrule.saturday,
                                      payrule.sunday,
                                      payrule.publicHoliday,
                                      payrule.overtimeRule,
                                      payrule.mealBreakLimit
                                    FROM
                                      payrule
                                    WHERE
                                      payrule.jobCode = ?") or die($mysqli->error);
    $ruleSQL->bind_param("s", $jobCode) or die($mysqli->error);
    $ruleSQL->execute();
    $ruleSQL->store_result();
    $ruleSQL->bind_result($payruleId, $jobCode, $payAwrdCode, $payAwrdDesc, $avgNormalHrs, $spreadStart, $spreadEnd, $spreadDuration, $firstEightHours, $minimumHrs, $earlyMorningStartTime, $earlyMorningEndTime, $dayShiftStartTime, $dayShiftEndTime, $afternoonShiftStartTime, $afternoonShiftEndTime,
        $nightShiftStartTime, $nightShiftEndTime, $overtime, $overtimeAfterHrs, $overtimeSatAfterHrs, $overtimeSunAfterHrs, $doubletime, $saturday, $sunday, $publicHoliday, $overtimeRule, $mealBreakLimit) or die($mysqli->error);


    while ($ruleSQL->fetch()) {
        $minimumHours = $minimumHrs;
        $avgNormalHours = $avgNormalHrs;
        $ordinaryHoursSpread = $spreadDuration;
        $firstEightHours = $firstEightHours;
        $earlyMorningStart = $earlyMorningStartTime;
        $earlyMorningEnd = $earlyMorningEndTime;
        $dayStart = $dayShiftStartTime;
        $dayEnd = $dayShiftEndTime;
        $afternoonStart = $afternoonShiftStartTime;
        $afternoonEnd = $afternoonShiftEndTime;
        $nightStart = $nightShiftStartTime;
        $nightEnd = $nightShiftEndTime;
        $afterHours = $overtimeAfterHrs;
        $satAfterHours = $overtimeSatAfterHrs;
        $sunAfterHours = $overtimeSunAfterHrs;
        $mealbreakLimit = $mealBreakLimit;
    }

    $k = 0;
    $len = $sql->num_rows;
    $totEM = '';
    $totDay = '';
    $totAft = '';
    $totNight = '';
    $totSat = '';
    $totSun = '';
    $totHol = '';

    while ($sql->fetch()) {

        $shiftEndComp = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate . ' ' . $shiftEnd . ':00')));//strtotime($shiftDate.' '.$shiftEnd.':00');
        $shiftStartComp = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate . ' ' . $shiftStart . ':00')));//strtotime($shiftDate.' '.$shiftStart.':00');

        if ($shiftEndComp < $shiftStartComp) {
            $shiftEndDate = date('Y-m-d', strtotime($shiftDate . ' + 1 day'));
        } else {
            $shiftEndDate = $shiftDate;
        }

        $starttime = strtotime($shiftDate . ' ' . $shiftStart . ':00');
        $endtime = strtotime($shiftEndDate . ' ' . $shiftEnd . ':00');

        /*$dayshiftStartTime = strtotime($shiftDate.' '.$dayStart);//'06:00:00'
        $dayshiftEndTime = strtotime($shiftDate.' '.$dayEnd);//'18:00:00'

        $afternoonShiftStartTime = strtotime($shiftDate.' '.$afternoonStart);//'18:00:00'
        $afternoonShiftEndTime = strtotime($shiftDate.' '.$afternoonEnd);//'23:59:59'

        $nightShiftStartTime = strtotime($shiftDate.' '.$nightStart);//'23:59:59'
        $nightShiftEndTime = strtotime($shiftEndDate.' '.$nightEnd);//'08:00:00'*/

        if ($earlyMorningStart == '00:00:00') {
            $earlyMorningStartTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $earlyMorningStart);
        } else {
            $earlyMorningStartTime = strtotime($shiftDate . ' ' . $earlyMorningStart);
        }
        if ($earlyMorningEnd == '00:00:00') {
            $earlyMorningEndTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $earlyMorningEnd);
        } else {
            $earlyMorningEndTime = strtotime($shiftDate . ' ' . $earlyMorningEnd);
        }
        if ($dayStart == '00:00:00') {
            $dayshiftStartTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $dayStart);
        } else {
            $dayshiftStartTime = strtotime($shiftDate . ' ' . $dayStart);//'06:00:00'
        }
        if ($dayEnd == '00:00:00') {
            $dayshiftEndTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $dayEnd);
        } else {
            $dayshiftEndTime = strtotime($shiftDate . ' ' . $dayEnd);//'18:00:00'
        }
        if ($afternoonStart == '00:00:00') {
            $afternoonShiftStartTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $afternoonStart);
        } else {
            $afternoonShiftStartTime = strtotime($shiftDate . ' ' . $afternoonStart);//'18:00:00'
        }
        if ($afternoonEnd == '00:00:00') {
            $afternoonShiftEndTime = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . $afternoonEnd);
        } else {
            $afternoonShiftEndTime = strtotime($shiftDate . ' ' . $afternoonEnd);//'23:59:59'
        }
        /*if($nightStart == '00:00:00'){
            $nightShiftStartTime = strtotime(date('Y-m-d', strtotime($shiftDate. ' + 1 day')).' '.$nightStart);
        }else{
            $nightShiftStartTime = strtotime($shiftDate.' '.$nightStart);//'23:59:59'
        }*/
        $nightShiftStartTime = strtotime($shiftDate . ' ' . $nightStart);
        /*if($nightEnd == '00:00:00'){
            $nightShiftEndTime = strtotime(date('Y-m-d', strtotime($shiftDate. ' + 1 day')).' '.$nightEnd);
        }else{
            $nightShiftEndTime = strtotime($shiftEndDate.' '.$nightEnd);//'08:00:00'
        }*/
        $nightShiftEndTime = strtotime($shiftEndDate . ' ' . $nightEnd);
        $fromMidnight = strtotime($shiftDate . ' ' . '00:00:00');
        $toMidnight = strtotime(date('Y-m-d', strtotime($shiftDate . ' + 1 day')) . ' ' . '00:00:00');
        $sprdTime = explode(':', $firstEightHours);
        $sprdHours = $sprdTime[0];
        $sprdMinutes = $sprdTime[1];
        $eightHours = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate . ' ' . $shiftStart . ':00' . ' + ' . $sprdHours . ' hour +' . $sprdMinutes . ' minutes')));
        //$eightHours = strtotime(date('Y-m-d H:i:s', strtotime($shiftDate.' '.$shiftStart.':00'. ' + 8 hours')));

        /*$starttime = strtotime($shiftDate . ' ' . $shiftStart . ':00');
        $endtime = strtotime($shiftEndDate . ' ' . $shiftEnd . ':00');
        $diff = $endtime - $starttime;
        $breaks = $workBreak * 60;
        $totalHours = ($diff - $breaks) / 60 / 60;

        $dayshiftStartTime = strtotime($shiftDate . ' ' . '06:00:00');
        $dayshiftEndTime = strtotime($shiftDate . ' ' . '18:00:00');

        $afternoonShiftStartTime = strtotime($shiftDate . ' ' . '18:00:00');
        $afternoonShiftEndTime = strtotime($shiftDate . ' ' . '00:00:00');

        $nightShiftStartTime = strtotime($shiftDate . ' ' . '08:00:00');
        $nightShiftEndTime = strtotime($shiftDate . ' ' . '00:00:00');*/

        $diff = $endtime - $starttime;
        $breaks = $workBreak * 60;
        $totalHours = ($diff - $breaks) / 60 / 60;


        if ($totalHours > $minimumHours) {

            if (isPublicHoliday($mysqli, $shiftDate, $deptId)) {

                $publicHolidayHours = $totalHours;
                //$totalPublicHolidayHours = $totalPublicHolidayHours + $publicHolidayHours;

                if ($publicHolidayHours >= $ordinaryHoursSpread) {
                    $publicHolidayHours = $ordinaryHoursSpread;
                    $extraHrs = ($totalHours - $ordinaryHoursSpread);

                    if ($extraHrs <= $afterHours) {
                        $totalPublicHolidayHours = $totalPublicHolidayHours + $publicHolidayHours;
                        $totalOvertimeHours = $totalOvertimeHours + $extraHrs;
                    } else if ($extraHrs > $afterHours) {
                        $remainingHours = $extraHrs - $afterHours;
                        $totalPublicHolidayHours = $totalPublicHolidayHours + $publicHolidayHours;
                        $totalOvertimeHours = $totalOvertimeHours + $afterHours;
                        $totalDoubletimeHours = $totalDoubletimeHours + $remainingHours;
                        $dblArray[] = array('holiday' => $totalDoubletimeHours, 'em' => '', 'day' => '', 'afternoon' => '', 'night' => '', 'saturday' => '', 'sunday' => '');
                    }
                } else {
                    $publicHolidayHours = $totalHours;
                    $totalPublicHolidayHours = $totalPublicHolidayHours + $publicHolidayHours;
                    //$publicHolidayHours = $publicHolidayHours;
                }

            } else {
                if (isWeekend($shiftDate) == 'weekday') {
                    // Mon - Fri
                    // more than 8 hours worked
                    if ($totalHours >= $ordinaryHoursSpread) {
                        /* check earlyMorning/day/night/sat/sun shift */
                        /*if(($starttime > $nightShiftStartTime) && ($starttime < $earlyMorningStart)){

                                    $nightHours = $totalHours;
                                    if ($nightHours >= $ordinaryHoursSpread) {
                                        $nightHours = $ordinaryHoursSpread;
                                        $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    } else {
                                        $nightHours = $nightHours;
                                    }
                                    // check for first 3 hours
                                    if ($extraHrs <= $afterHours) {
                                        $totalNightHours = $totalNightHours + $nightHours;
                                        $totalOvertimeHours = $totalOvertimeHours + $extraHrs;
                                        //more than 3 hours
                                    } else if ($extraHrs > $afterHours) {
                                        //calculate for first 3 hours $afterHours * ?
                                        //$afterHours = 3
                                        //calculate for more than 3 hours
                                        $remainingHours = $extraHrs - $afterHours;
                                        $totalNightHours = $totalNightHours + $nightHours;
                                        $totalOvertimeHours = $totalOvertimeHours + $afterHours;
                                        $totalDoubletimeHours = $totalDoubletimeHours + $remainingHours;
                                    }

                               }else*/
                        if (($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)) {
                            $earlyMorningHours = $totalHours;
                            if ($earlyMorningHours >= $ordinaryHoursSpread) {
                                $earlyMorningHours = $ordinaryHoursSpread;
                                $extraHrs = ($totalHours - $ordinaryHoursSpread);
                            } else {
                                $earlyMorningHours = $earlyMorningHours;
                            }
                            if ($extraHrs <= $afterHours) {
                                $totalEarlyMorningHours = $totalEarlyMorningHours + $earlyMorningHours;
                                $totalOvertimeHours = $totalOvertimeHours + $extraHrs;
                            } else if ($extraHrs > $afterHours) {
                                $remainingHours = $extraHrs - $afterHours;
                                $totalEarlyMorningHours = $totalEarlyMorningHours + $earlyMorningHours;
                                $totalOvertimeHours = $totalOvertimeHours + $afterHours;
                                $totalDoubletimeHours = $totalDoubletimeHours + $remainingHours;
                            }
                        } else if (($starttime >= $dayshiftStartTime) && ($eightHours <= $dayshiftEndTime)) {// && ($endtime<=$dayshiftEndTime)
                            $dayHours = $totalHours;
                            if ($dayHours >= $ordinaryHoursSpread) {
                                $dayHours = $ordinaryHoursSpread;
                                $extraHrs = ($totalHours - $ordinaryHoursSpread);
                            } else {
                                $dayHours = $dayHours;
                            }
                            // check for first 3 hours
                            if ($extraHrs <= $afterHours) {
                                $totalOrdinaryHours = $totalOrdinaryHours + $dayHours;
                                $totalOvertimeHours = $totalOvertimeHours + $extraHrs;
                                //more than 3 hours
                            } else if ($extraHrs > $afterHours) {
                                //calculate for first 3 hours $afterHours * ?
                                //$afterHours = 3
                                //calculate for more than 3 hours
                                $remainingHours = $extraHrs - $afterHours;
                                $totalOrdinaryHours = $totalOrdinaryHours + $dayHours;
                                //$totalOvertimeHours = $totalOvertimeHours + $afterHours;
                                $totalDoubletimeHours = $totalDoubletimeHours + $remainingHours;
                            }
                        } else if (($endtime > $afternoonShiftStartTime) && ($eightHours >= $afternoonShiftStartTime) && ($eightHours <= $afternoonShiftEndTime) && ($endtime >= $afternoonShiftStartTime)) {// && ($endtime <= $afternoonShiftEndTime)
                            // Afternoon Shift

                            $afternoonHours = $totalHours;
                            if ($afternoonHours >= $ordinaryHoursSpread) {
                                $afternoonHours = $ordinaryHoursSpread;
                                $extraHrs = ($totalHours - $ordinaryHoursSpread);
                            } else {
                                $afternoonHours = $afternoonHours;
                            }
                            // check for first 3 hours
                            if ($extraHrs <= $afterHours) {
                                $totalAfternoonHours = $totalAfternoonHours + $afternoonHours;
                                $totalOvertimeHours = $totalOvertimeHours + $extraHrs;
                                //more than 3 hours
                            } else if ($extraHrs > $afterHours) {
                                //calculate for first 3 hours $afterHours * ?
                                //$afterHours = 3
                                //calculate for more than 3 hours
                                $remainingHours = $extraHrs - $afterHours;
                                $totalAfternoonHours = $totalAfternoonHours + $afternoonHours;
                                $totalOvertimeHours = $totalOvertimeHours + $afterHours;
                                $totalDoubletimeHours = $totalDoubletimeHours + $remainingHours;
                            }
                        } else if (($endtime > $nightShiftStartTime) && ($eightHours > $nightShiftStartTime)) {
                            // Night Shift
                            //if(($endtime > $nightShiftStartTime) && ($endtime > $afternoonShiftEndTime) && ($endtime <= $nightShiftEndTime)&& ($eightHours > $nightShiftStartTime)){

                            /*$nightHours = $totalHours;
                                    $avgHours = $totalOrdinaryHours+$totalEarlyMorningHours+$totalAfternoonHours+$totalNightHours+$nightHours;
                                    $totalNightHours = $totalNightHours + $nightHours;
                                    if ($afterHours == '0') {
                                        $nightHoursForAvg = $avgNormalHours - ($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours);
                                        $extraHours = $nightHours - $nightHoursForAvg;
                                        $totalOvertimeHours =  $totalOvertimeHours + $extraHours;
                                    }else if($avgHours > $avgNormalHours) {
                                        $nightHoursForAvg = $avgNormalHours - ($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours);
                                        $extraHours = $nightHours - $nightHoursForAvg;
                                        if($extraHours <= $afterHours){
                                            $totalOvertimeHours =  $totalOvertimeHours + $extraHours;
                                        }else if($extraHours > $afterHours){
                                            $remainingExtraHours = $extraHours - $afterHours;
                                            $totalOvertimeHours = $totalOvertimeHours + $afterHours;
                                            $totalDoubletimeHours = $totalDoubletimeHours + $remainingExtraHours;
                                        }
                                    }*/
                            $nightHours = $totalHours;
                            $avgHours = $totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours;
                            $avgMatch = (($avgNormalHours - $avgHours) + ($avgHours));

                            if ($avgMatch == $avgNormalHours) {
                                $dbltimeHours = $ordinaryHoursSpread - ($avgNormalHours - $avgHours);
                                $nightHours = ($avgNormalHours - $avgHours);
                                if ($nightHours >= $ordinaryHoursSpread) {
                                    $nightHours = $ordinaryHoursSpread;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    if ($extraHrs <= $afterHours) {
                                        $totalNightHours = $totalNightHours + $nightHours;
                                        $totalOvertimeHours = $totalOvertimeHours + $extraHrs;
                                    } else if ($extraHrs > $afterHours) {
                                        $remainingHours = $extraHrs - $afterHours;
                                        $totalNightHours = $totalNightHours + $nightHours;
                                        $totalOvertimeHours = $totalOvertimeHours + $afterHours;
                                        $totalDoubletimeHours = $totalDoubletimeHours + $remainingHours;
                                    }
                                } else {
                                    $totalNightHours = $totalNightHours + $nightHours;
                                    $totalOvertimeHours = $totalOvertimeHours + $afterHours;
                                    $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    $totalDoubletimeHours = $totalDoubletimeHours + $extraHrs;
                                }
                            }


                            /*else{
                                        if ($nightHours >= $ordinaryHoursSpread) {
                                            $nightHours = $ordinaryHoursSpread;
                                            $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                            if ($afterHours == '0') {
                                                $totalNightHours = $totalNightHours + $nightHours;
                                            } else if ($extraHrs <= $afterHours) {
                                                $totalNightHours = $totalNightHours + $nightHours;
                                                $totalOvertimeHours = $totalOvertimeHours + $extraHrs;
                                            } else if ($extraHrs > $afterHours) {
                                                $remainingHours = $extraHrs - $afterHours;
                                                $totalNightHours = $totalNightHours + $nightHours;
                                                $totalOvertimeHours = $totalOvertimeHours + $afterHours;
                                                $totalDoubletimeHours = $totalDoubletimeHours + $remainingHours;
                                            }
                                        } else {
                                            $nightHours = $totalHours;
                                        }
                                    }*/
                        }
                    } else if ($totalHours < $ordinaryHoursSpread) {
                        /* check day/night/sat/sun shift */
                        //if(($starttime >= $dayshiftStartTime) && ($eightHours <= $dayshiftEndTime) && ($endtime<=$dayshiftEndTime)){

                        if (($starttime > $nightShiftStartTime) && ($starttime < $earlyMorningStart)) {
                            $nightHours = $totalHours;
                            $totalNightHours = $totalNightHours + $nightHours;
                        } else if (($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)) {
                            // Early Morning
                            $earlyMorningHours = $totalHours;
                            $totalEarlyMorningHours = $totalEarlyMorningHours + $earlyMorningHours;
                        } else if (($starttime >= $dayshiftStartTime) && ($endtime <= $dayshiftEndTime)) { //&& ($eightHours <= $dayshiftEndTime)//&& ($eightHours <= $dayshiftEndTime)//if(($starttime >= $dayshiftStartTime) && ($endtime <= $dayshiftEndTime)){
                            // Day Shift
                            $dayHours = $totalHours;
                            $totalOrdinaryHours = $totalOrdinaryHours + $dayHours;
                        } else if (($endtime > $afternoonShiftStartTime) && ($endtime <= $afternoonShiftEndTime) && ($endtime >= $afternoonShiftStartTime)) {//if(($endtime > $afternoonShiftStartTime) && ($endtime == $afternoonShiftEndTime || $endtime < $afternoonShiftEndTime)&& ($endtime >= $afternoonShiftStartTime)){
                            // Afternoon Shift
                            $afternoonHours = $totalHours;
                            $totalAfternoonHours = $totalAfternoonHours + $afternoonHours;
                        } else if (($endtime > $nightShiftStartTime)) { // && ($eightHours > $nightShiftStartTime) //if(($endtime > $nightShiftStartTime)  && ($endtime <= $nightShiftEndTime)){
                            // Night Shift
                            $nightHours = $totalHours;
                            $totalNightHours = $totalNightHours + $nightHours;
                        }
                    }
                } else {
                    if (isPublicHoliday($mysqli, $shiftDate, $deptId)) {
                        $publicHolidayHours = $totalHours;
                    } else if ($shiftDay == 'Sat') {
                        //$extraHrs = 0;
                        if ($avgTotal > $avgNormalHours) {
                            $difference = $avgTotal - $avgNormalHours;
                            $totalHours = $difference;

                            $satHours = $totalHours;
                            $avgHours = $totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours + $satHours;
                            if ($satAfterHours == '0') {
                                $saturdayHoursForAvg = $avgNormalHours - ($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours);
                                $extraHours = $satHours - $saturdayHoursForAvg;
                                $totalOvertimeHours = $totalOvertimeHours + $extraHours;
                            } else if ($avgHours > $avgNormalHours) {
                                $saturdayHoursForAvg = $avgNormalHours - ($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours);
                                $extraHours = $satHours - $saturdayHoursForAvg;
                                if ($extraHours <= $satAfterHours) {
                                    $totalOvertimeHours = $totalOvertimeHours + $extraHours;
                                } else if ($extraHours > $satAfterHours) {
                                    $remainingExtraHours = $extraHours - $satAfterHours;
                                    $totalOvertimeHours = $totalOvertimeHours + $satAfterHours;
                                    $totalDoubletimeHours = $totalDoubletimeHours + $remainingExtraHours;
                                }
                            }
                        } else {
                            if ($totalHours < $ordinaryHoursSpread) {
                                $satHours = $totalHours;
                                $totalsaturdayHours = $totalsaturdayHours + $satHours;
                            } else {
                                $satHours = $totalHours;
                                $avgHours = $totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours + $satHours;
                                $totalsaturdayHours = $totalsaturdayHours + $satHours;
                                if ($satAfterHours == '0') {
                                    $saturdayHoursForAvg = $avgNormalHours - ($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours);
                                    $extraHours = $satHours - $saturdayHoursForAvg;
                                    $totalOvertimeHours = $totalOvertimeHours + $extraHours;
                                } else if ($avgHours > $avgNormalHours) {
                                    $saturdayHoursForAvg = $avgNormalHours - ($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours);
                                    $extraHours = $satHours - $saturdayHoursForAvg;
                                    if ($extraHours <= $satAfterHours) {
                                        $totalOvertimeHours = $totalOvertimeHours + $extraHours;
                                    } else if ($extraHours > $satAfterHours) {
                                        $remainingExtraHours = $extraHours - $satAfterHours;
                                        $totalOvertimeHours = $totalOvertimeHours + $satAfterHours;
                                        $totalDoubletimeHours = $totalDoubletimeHours + $remainingExtraHours;
                                    }
                                }
                            }
                        }
                        /*if ($satAfterHours == '0') {
                                    $totalsaturdayHours = $totalsaturdayHours + $satHours;
                                }else if ($extraHrs <= $satAfterHours) {
                                    $totalsaturdayHours = $totalsaturdayHours + $satHours;
                                    $totalOvertimeHours = $satHours; //$totalOvertimeHours + $extraHrs;
                                } else if ($extraHrs > $satAfterHours) {
                                    $remainingHours = $extraHrs - $satAfterHours;
                                    $totalsaturdayHours = $totalsaturdayHours + $satHours;
                                    $totalOvertimeHours = $totalOvertimeHours + $satAfterHours;
                                    $totalDoubletimeHours = $totalDoubletimeHours + $remainingHours;
                                }*/
                        /*if ($starttime >= $fromMidnight && $endtime <= $toMidnight) {
                                    $totalOvertimeHours = $totalOvertimeHours + $totalHours;
                                    $totalsaturdayHours = $totalsaturdayHours + $totalHours;
                                }*/
                    } else if ($shiftDay == 'Sun') {
                        /*if ($starttime >= $fromMidnight && $endtime <= $toMidnight) {
                                    $totalDoubletimeHours = $totalDoubletimeHours + $totalHours;
                                    $totalsundayHours = $totalsundayHours + $totalHours;
                                }*/
                        //$extraHrs = 0;
                        if ($totalHours < $ordinaryHoursSpread) {
                            $sunHours = $totalHours;
                            $totalsundayHours = $totalsundayHours + $sunHours;
                        } else {
                            $sunHours = $totalHours;
                            $avgHours = $totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours + $totalsaturdayHours + $sunHours;
                            $totalsundayHours = $totalsundayHours + $sunHours;
                            if ($avgHours > $avgNormalHours) {
                                $totalDoubletimeHours = $totalDoubletimeHours + $totalsundayHours;
                                $totalsundayHours = 0;
                            } else {
                                if ($sunAfterHours == '0') {
                                    $sunHoursForAvg = $avgNormalHours - ($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours + $totalsaturdayHours);
                                    $extraHours = $sunHours - $sunHoursForAvg;
                                    if ($extraHours > 0) {
                                        $totalOvertimeHours = $totalOvertimeHours + $extraHours;
                                    }
                                } else if ($avgHours > $avgNormalHours) {
                                    $sunHoursForAvg = $avgNormalHours - ($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours + $totalsaturdayHours);
                                    $extraHours = $sunHours - $sunHoursForAvg;
                                    if ($extraHours <= $sunAfterHours) {
                                        $totalOvertimeHours = $totalOvertimeHours + $extraHours;
                                    } else if ($extraHours > $sunAfterHours) {
                                        $remainingExtraHours = $extraHours - $sunAfterHours;
                                        $totalOvertimeHours = $totalOvertimeHours + $sunAfterHours;
                                        $totalDoubletimeHours = $totalDoubletimeHours + $remainingExtraHours;
                                    }
                                }
                            }
                        }
                        /*$sunHours = $totalHours;
                                $avgHours = $totalOrdinaryHours+$totalEarlyMorningHours+$totalAfternoonHours+$totalNightHours+$totalsaturdayHours+$sunHours;
                                $totalsundayHours = $totalsundayHours + $sunHours;
                                if($avgHours > $avgNormalHours) {
                                    $totalDoubletimeHours = $totalDoubletimeHours + $totalsundayHours;
                                    $totalsundayHours = 0;
                                }else {
                                    if ($sunHours >= $ordinaryHoursSpread) {
                                        $sunHours = $ordinaryHoursSpread;
                                        $extraHrs = ($totalHours - $ordinaryHoursSpread);
                                    } else {
                                        $sunHours = $sunHours;
                                    }
                                    if ($sunAfterHours == '0') {
                                        $totalsundayHours = $totalsundayHours + $sunHours;
                                    } else if ($extraHrs <= $sunAfterHours) {
                                        $totalsundayHours = $totalsundayHours + $sunHours;
                                        $totalOvertimeHours = $totalOvertimeHours + $extraHrs;
                                    } else if ($extraHrs > $sunAfterHours) {
                                        $remainingHours = $extraHrs - $sunAfterHours;
                                        $totalsundayHours = $totalsundayHours + $sunHours;
                                        //$totalSunOvertimeHours = $totalSunOvertimeHours + $sunAfterHours;
                                        $totalOvertimeHours = $totalOvertimeHours + $sunAfterHours;
                                        $totalDoubletimeHours = $totalDoubletimeHours + $remainingHours;
                                    }
                                }*/
                    }
                }
            }
        } else if ($totalHours <= $minimumHours) {
            if (isPublicHoliday($mysqli, $shiftDate, $deptId)) {
                $totalPublicHolidayHours = $totalPublicHolidayHours + $minimumHours;
            } else if ($shiftDay == 'Sat') {
                $totalsaturdayHours = $totalsaturdayHours + $minimumHours;
            } else if ($shiftDay == 'Sun') {
                $totalsundayHours = $totalsundayHours + $minimumHours;
            } else if (($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)) {//($starttime >= $earlyMorningStartTime && $starttime <= $earlyMorningEndTime) {
                $totalEarlyMorningHours = $totalEarlyMorningHours + $minimumHours;
            } else if (($starttime >= $dayshiftStartTime) && ($endtime <= $dayshiftEndTime)) {
                $totalOrdinaryHours = $totalOrdinaryHours + $minimumHours;
            } else if (($endtime > $afternoonShiftStartTime) && ($endtime >= $afternoonShiftStartTime)) {//if(($endtime > $afternoonShiftStartTime) && ($endtime == $afternoonShiftEndTime || $endtime < $afternoonShiftEndTime)&& ($endtime >= $afternoonShiftStartTime)) {
                $totalAfternoonHours = $totalAfternoonHours + $minimumHours;
            } else if (($endtime > $nightShiftStartTime) && ($endtime <= $nightShiftEndTime)) {
                $totalNightHours = $totalNightHours + $minimumHours;
            }
        }
        if ($k == $len - 1) {

            if (($starttime >= $earlyMorningStartTime) && ($starttime < $earlyMorningEndTime)) {
                $totEM = 'DEDUCT';
            } else if (($starttime >= $dayshiftStartTime) && ($endtime <= $dayshiftEndTime)) {
                $totDay = 'DEDUCT';
            } else if (($endtime > $afternoonShiftStartTime) && (($eightHours >= $afternoonShiftStartTime) && ($eightHours <= $afternoonShiftEndTime)) && ($endtime >= $afternoonShiftStartTime)) {
                $totAft = 'DEDUCT';
            } else if (($endtime > $nightShiftStartTime) && ($eightHours > $nightShiftStartTime)) { //($endtime > $nightShiftStartTime && $endtime <= $nightShiftEndTime)
                $totNight = 'DEDUCT';
            } else if ($shiftDay == 'Sat') {
                $totSat = 'DEDUCT';
            } else if ($shiftDay == 'Sun') {
                $totSun = 'DEDUCT';
            } else if (isPublicHoliday($mysqli, $shiftDate, $deptId)) {
                $totHol = 'DEDUCT';
            }
        }
        $k++;
    }
    // end of while
    //$ordinarytotal = $totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours + $totalsaturdayHours + $totalsundayHours + $totalPublicHolidayHours;

    //if($ordinarytotal > $avgNormalHours){
    //$exceedingHoursForOvertime = $ordinarytotal - $avgNormalHours;
    /*$totalOvertimeHours = $totalOvertimeHours + $exceedingHoursForOvertime;*/
    // $totalPeriodOvertimeHours = $totalPeriodOvertimeHours + $exceedingHoursForOvertime;
    /*if($totDay == 'DEDUCT'){
            $totalOrdinaryHours = $totalOrdinaryHours - $exceedingHoursForOvertime;
        }else if($totEM == 'DEDUCT'){
            $totalEarlyMorningHours = $totalEarlyMorningHours - $exceedingHoursForOvertime;
        }else if($totAft == 'DEDUCT'){
            $totalAfternoonHours = $totalAfternoonHours - $exceedingHoursForOvertime;
        }else if($totNight == 'DEDUCT'){
            $totalNightHours = $totalNightHours - $exceedingHoursForOvertime;
        }else if($totSat == 'DEDUCT'){
            //$totalsaturdayHours = $totalsaturdayHours - $exceedingHoursForOvertime;
            //$totalSatOvertimeHours = $totalSatOvertimeHours + $exceedingHoursForOvertime;
        }else if($totSun == 'DEDUCT'){
            $totalsundayHours = $totalsundayHours - $exceedingHoursForOvertime;
            //$totalSunOvertimeHours = $totalSunOvertimeHours + $exceedingHoursForOvertime;
        }else if($totHol == 'DEDUCT'){
            $totalPublicHolidayHours = $totalPublicHolidayHours - $exceedingHoursForOvertime;
        }*/

    // }

    if ($totalOrdinaryHours > $avgNormalHours) {
        $exceedingHoursForOvertime = $totalOrdinaryHours - $avgNormalHours;
        //$totalPeriodOvertimeHours = $totalPeriodOvertimeHours + $exceedingHoursForOvertime;
        if ($exceedingHoursForOvertime <= $afterHours) {
            $totalOvertimeHours = $totalOvertimeHours + $exceedingHoursForOvertime;
        } else if ($exceedingHoursForOvertime > $afterHours) {
            $totalOvertimeHours = $totalOvertimeHours + $afterHours;
            $remainingExtraHours = $exceedingHoursForOvertime - $afterHours;
            $totalDoubletimeHours = $totalDoubletimeHours + $remainingExtraHours;
        }
        $totalOrdinaryHours = $totalOrdinaryHours - $exceedingHoursForOvertime;
    } else if (($totalOrdinaryHours + $totalEarlyMorningHours) > $avgNormalHours) {
        $exceedingHoursForOvertime = ($totalOrdinaryHours + $totalEarlyMorningHours) - $avgNormalHours;
        if ($exceedingHoursForOvertime <= $afterHours) {
            $totalOvertimeHours = $totalOvertimeHours + $exceedingHoursForOvertime;
        } else if ($exceedingHoursForOvertime > $afterHours) {
            $totalOvertimeHours = $totalOvertimeHours + $afterHours;
            $remainingExtraHours = $exceedingHoursForOvertime - $afterHours;
            $totalDoubletimeHours = $totalDoubletimeHours + $remainingExtraHours;
        }
        //$totalPeriodOvertimeHours = $totalPeriodOvertimeHours + $exceedingHoursForOvertime;
        $totalEarlyMorningHours = $totalEarlyMorningHours - $exceedingHoursForOvertime;
    } else if (($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours) > $avgNormalHours) {
        $exceedingHoursForOvertime = ($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours) - $avgNormalHours;
        if ($exceedingHoursForOvertime <= $afterHours) {
            $totalOvertimeHours = $totalOvertimeHours + $exceedingHoursForOvertime;
        } else if ($exceedingHoursForOvertime > $afterHours) {
            $totalOvertimeHours = $totalOvertimeHours + $afterHours;
            $remainingExtraHours = $exceedingHoursForOvertime - $afterHours;
            $totalDoubletimeHours = $totalDoubletimeHours + $remainingExtraHours;
        }
        //$totalPeriodOvertimeHours = $totalPeriodOvertimeHours + $exceedingHoursForOvertime;
        $totalAfternoonHours = $totalAfternoonHours - $exceedingHoursForOvertime;
    } else if (($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours) > $avgNormalHours) {
        $exceedingHoursForOvertime = ($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours) - $avgNormalHours;
        if ($exceedingHoursForOvertime <= $afterHours) {
            $totalOvertimeHours = $totalOvertimeHours + $exceedingHoursForOvertime;
        } else if ($exceedingHoursForOvertime > $afterHours) {
            $totalOvertimeHours = $totalOvertimeHours + $afterHours;
            $remainingExtraHours = $exceedingHoursForOvertime - $afterHours;
            $totalDoubletimeHours = $totalDoubletimeHours + $remainingExtraHours;
        }
        //$totalPeriodOvertimeHours = $totalPeriodOvertimeHours + $exceedingHoursForOvertime;
        $totalNightHours = $totalNightHours - $exceedingHoursForOvertime;
    } else if (($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours + $totalsaturdayHours) > $avgNormalHours) {
        $exceedingHoursForOvertime = ($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours + $totalsaturdayHours) - $avgNormalHours;
        if ($satAfterHours <> 0) {
            if ($exceedingHoursForOvertime <= $satAfterHours) {
                $totalOvertimeHours = $totalOvertimeHours + $exceedingHoursForOvertime;
            } else if ($exceedingHoursForOvertime > $satAfterHours) {
                $totalOvertimeHours = $totalOvertimeHours + $satAfterHours;
                $remainingExtraHours = $exceedingHoursForOvertime - $satAfterHours;
                $totalDoubletimeHours = $totalDoubletimeHours + $remainingExtraHours;
            }
        }
        //$totalPeriodOvertimeHours = $totalPeriodOvertimeHours + $exceedingHoursForOvertime;
        //$totalsaturdayHours = $totalsaturdayHours - $exceedingHoursForOvertime;
    } else if (($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours + $totalsaturdayHours + $totalsundayHours) > $avgNormalHours) {
        $exceedingHoursForOvertime = ($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours + $totalsaturdayHours + $totalsundayHours) - $avgNormalHours;
        if ($sunAfterHours != '0') {
            if ($exceedingHoursForOvertime <= $sunAfterHours) {
                $totalOvertimeHours = $totalOvertimeHours + $exceedingHoursForOvertime;
            } else if ($exceedingHoursForOvertime > $sunAfterHours) {
                $totalOvertimeHours = $totalOvertimeHours + $sunAfterHours;
                $remainingExtraHours = $exceedingHoursForOvertime - $sunAfterHours;
                $totalDoubletimeHours = $totalDoubletimeHours + $remainingExtraHours;
            }
        }
        //$totalPeriodOvertimeHours = $totalPeriodOvertimeHours + $exceedingHoursForOvertime;
        $totalsundayHours = $totalsundayHours - $exceedingHoursForOvertime;
    } else if (($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours + $totalsaturdayHours + $totalsundayHours + $totalPublicHolidayHours) > $avgNormalHours) {
        $exceedingHoursForOvertime = ($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours + $totalsaturdayHours + $totalsundayHours + $totalPublicHolidayHours) - $avgNormalHours;
        $totalOvertimeHours = $totalOvertimeHours + $exceedingHoursForOvertime;
        //$totalPeriodOvertimeHours = $totalPeriodOvertimeHours + $exceedingHoursForOvertime;
        $totalPublicHolidayHours = $totalPublicHolidayHours - $exceedingHoursForOvertime;
    }
    $totalForPeriodOvertime = ($totalOrdinaryHours + $totalEarlyMorningHours + $totalAfternoonHours + $totalNightHours + $totalsaturdayHours + $totalsundayHours + $totalPublicHolidayHours);
    if ($totalForPeriodOvertime > $avgNormalHours) {
        $totalPeriodOvertimeHours = $totalForPeriodOvertime - $avgNormalHours;
    } else {
        $totalPeriodOvertimeHours = 0;
    }
    /*if($totalOrdinaryHours > $avgNormalHours){
        $exceedingHoursForOvertime = $totalOrdinaryHours - $avgNormalHoursForOvertime;
    }*/
    /*if($mealBreakStatus){*/
    return '<tr class="totalRow" data-exhrs="' . $exceedingHoursForOvertime . '"><td colspan="8" style="text-align: left;">Totals' . $breakingPoint . '</td><td class="timeTotals"><input type="hidden" name="startDate" id="startDate" value="' . $startDate . '"/><input type="hidden" name="endDate" id="endDate" value="' . $endDate . '"/><input type="hidden" name="ordTotal" value="' . $totalOrdinaryHours . '" class="ordTotal"/>' . number_format($totalOrdinaryHours, 2) . '</td><td class="earlyMorningTotal"><input type="hidden" name="earlyMorningTotal" value="' . $totalEarlyMorningHours . '" class="earlyMorningTotal"/> ' . number_format($totalEarlyMorningHours, 2) . '</td><td class="afternoonTotal"><input type="hidden" name="aftTotal" value="' . $totalAfternoonHours . '" class="aftTotal"/>' . number_format($totalAfternoonHours, 2) . '</td><td class="nightTotal"><input type="hidden" name="ngtTotal" value="' . $totalNightHours . '" class="ngtTotal"/> ' . number_format($totalNightHours, 2) . '</td><td class="satTotal"><input type="hidden" name="saturdayTotal" value="' . $totalsaturdayHours . '" class="saturdayTotal"/>' . number_format($totalsaturdayHours, 2) . '</td><td class="sunTotal"><input type="hidden" name="sundayTotal" value="' . $totalsundayHours . '" class="sundayTotal"/>' . number_format($totalsundayHours, 2) . '</td><td class="timeTotals"><input type="hidden" name="hldTotal" value="' . $totalPublicHolidayHours . '" class="hldTotal"/>' . number_format($totalPublicHolidayHours, 2) . '</td><td class="timeTotals"><input type="hidden" name="ovtTotal" value="' . $totalOvertimeHours . '" class="ovtTotal"/>' . number_format($totalOvertimeHours, 2) . '</td><td class="timeTotals"><input type="hidden" name="dblTotal" value="' . $totalDoubletimeHours . '" class="dblTotal"/>' . number_format($totalDoubletimeHours, 2) . '</td><td class="timeTotals"><input type="hidden" name="satovtTotal" value="' . $totalSatOvertimeHours . '" class="satovtTotal"/>' . number_format($totalSatOvertimeHours, 2) . '</td><td class="timeTotals"><input type="hidden" name="sunovtTotal" value="' . $totalSunOvertimeHours . '" class="sunovtTotal"/>' . number_format($totalSunOvertimeHours, 2) . '</td><td class="timeTotals"><input type="hidden" name="povtTotal" value="' . $totalPeriodOvertimeHours . '" class="povtTotal"/>' . number_format($totalPeriodOvertimeHours, 2) . '</td><td data-empid="' . $candidateId . '" data-startdate="' . $startDate . '" data-enddate="' . $endDate . '" data-ordtotal="' . number_format($totalOrdinaryHours, 2) . '" data-emgtotal="' . number_format($totalEarlyMorningHours, 2) . '" data-afttotal="' . number_format($totalAfternoonHours, 2) . '" data-nighttotal="' . number_format($totalNightHours, 2) . '" data-ovttotal="' . number_format($totalOvertimeHours, 2) . '" data-dbltotal="' . number_format($totalDoubletimeHours, 2) . '" data-satovttotal="' . number_format($totalSatOvertimeHours, 2) . '" data-sunovttotal="' . number_format($totalSunOvertimeHours, 2) . '" data-povttotal="' . number_format($totalPeriodOvertimeHours, 2) . '" data-sattotal="' . number_format($totalsaturdayHours, 2) . '" data-suntotal="' . number_format($totalsundayHours, 2) . '" data-holtotal="' . number_format($totalPublicHolidayHours, 2) . '">&nbsp;<button type="button" name="saveTotalBtn" id="saveTotalBtn" class="saveTotalBtn pull-right btn btn-warning btn-sm"><i class="glyphicon glyphicon-file fa fa-save"></i>&nbsp; Save</button></td></tr>';
    /*}*/
}

function validateTimeSheetTotals($mysqli, $clientid, $positionid, $deptId, $candidateId, $startDate, $endDate, $wkendDate)
{
    try {
        /*if(empty($department)){*/
        $sqlchk = $mysqli->prepare("SELECT totId FROM timesheet_totals WHERE clientId = ? AND positionId = ? AND deptId = ? AND candidateId = ? AND startDate = ? AND endDate = ? AND wkendDate = ?") or die ($mysqli->error);
        $sqlchk->bind_param("iiissss", $clientid, $positionid, $deptId, $candidateId, $startDate, $endDate, $wkendDate) or die($mysqli->error);
        /*}else {
            $sqlchk = $mysqli->prepare("SELECT totId FROM timesheet_totals WHERE clientId = ? AND positionId = ? AND deptId = ? AND candidateId = ? AND startDate = ? AND endDate = ? AND wkendDate = ?") or die ($mysqli->error);
            $sqlchk->bind_param("iiissss", $clientid, $positionid, $department, $candidateId, $startDate, $endDate, $wkendDate) or die($mysqli->error);
        }*/
        $sqlchk->execute();
        $sqlchk->store_result();
        $sqlchk->fetch();
        $num_of_rows = $sqlchk->num_rows;
        if ($num_of_rows > 0) {
            return true;
        } else {
            return false;
        }
    } catch (Exception $e) {
        $e->getMessage();
    }
}

function getClientIdByClientCode($mysqli, $clientCode)
{
    $sql = $mysqli->prepare("SELECT clientId FROM client WHERE clientCode = ?") or die($mysqli->error);
    $sql->bind_param("s", $clientCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->clientId;
    } else {
        return null;
    }
}

function getJobCodeByProfitCentreId($mysqli, $profitCentre)
{
    $sql = $mysqli->prepare("SELECT jobCode FROM job_detail WHERE profitCentre = ?") or die($mysqli->error);
    $sql->bind_param("i", $profitCentre) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->jobCode;
    } else {
        return null;
    }
}

function getTimeSheetTotals($mysqli, $weekendingDate, $empId, $jbCode, $profitCentre, $clientCode)
{

    $clId = getClientIdByJobCode($mysqli, $jbCode);
    $posId = getPositionIdByJobCode($mysqli, $jbCode);
    $clientid = getClientIdByClientCode($mysqli, $clientCode);
    $pJobCode = getJobCodeByProfitCentreId($mysqli, $profitCentre);

    if (!empty($empId)) {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.deptId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.earlyMorningTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client,
                                  candidate.firstName
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                  INNER JOIN candidate ON(timesheet_totals.candidateId = candidate.candidateId)                                                
                                WHERE
                                  timesheet_totals.candidateId = ?
                                AND  
                                  timesheet_totals.wkendDate = ?
                                ORDER BY client.client,timesheet_totals.positionId,candidate.firstName") or die($mysqli->error);
        $sql->bind_param("ss", $empId, $weekendingDate) or die($mysqli->error);
    } elseif (!empty($jbCode)) {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.deptId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client,
                                  candidate.firstName
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                  INNER JOIN candidate ON(timesheet_totals.candidateId = candidate.candidateId)
                                WHERE
                                  timesheet_totals.jobCode = ?
                                AND
                                  timesheet_totals.wkendDate = ?
                                ORDER BY  client.client,timesheet_totals.positionId,candidate.firstName") or die($mysqli->error);
        $sql->bind_param("ss", $jbCode, $weekendingDate) or die($mysqli->error);
    } elseif (!empty($clientid)) {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.deptId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client,
                                  candidate.firstName
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                  INNER JOIN candidate ON(timesheet_totals.candidateId = candidate.candidateId)
                                WHERE
                                  timesheet_totals.clientId = ?
                                AND
                                  timesheet_totals.wkendDate = ?
                                ORDER BY  client.client,timesheet_totals.positionId,candidate.firstName") or die($mysqli->error);
        $sql->bind_param("is", $clientid, $weekendingDate) or die($mysqli->error);
    } elseif (!empty($profitCentre)) {
        $sql = $mysqli->prepare("SELECT
                                      timesheet_totals.clientId,
                                      timesheet_totals.positionId,
                                      timesheet_totals.deptId,
                                      timesheet_totals.candidateId,
                                      timesheet_totals.jobcode,
                                      timesheet_totals.emgTotal,
                                      timesheet_totals.ordTotal,
                                      timesheet_totals.aftTotal,
                                      timesheet_totals.nightTotal,
                                      timesheet_totals.rdoTotal,
                                      timesheet_totals.satTotal,
                                      timesheet_totals.sunTotal,
                                      timesheet_totals.ovtTotal,
                                      timesheet_totals.dblTotal,
                                      timesheet_totals.hldTotal,
                                      timesheet_totals.hol_total,
                                      timesheet_totals.satovtTotal,
                                      timesheet_totals.sunovtTotal,
                                      timesheet_totals.povtTotal,
                                      timesheet_totals.startDate,
                                      timesheet_totals.endDate,
                                      timesheet_totals.wkendDate,
                                      client.client,
                                      candidate.firstName
                                    FROM
                                      job_detail
                                      INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                      INNER JOIN timesheet_totals ON (job_detail.jobCode = timesheet_totals.jobCode)
                                      INNER JOIN candidate ON(timesheet_totals.candidateId = candidate.candidateId)
                                    WHERE
                                      timesheet_totals.wkendDate = ? AND 
                                      job_detail.profitCentre = ?
                                    ORDER BY
                                      client.client,
                                      timesheet_totals.positionId,candidate.firstName") or die($mysqli->error);
        $sql->bind_param("si", $weekendingDate, $profitCentre) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.deptId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client,
                                  candidate.firstName
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                  INNER JOIN candidate ON (timesheet_totals.candidateId = candidate.candidateId)
                                WHERE
                                  timesheet_totals.wkendDate = ?
                                ORDER BY  
                                  client.client,
                                  timesheet_totals.positionId,candidate.firstName") or die($mysqli->error);
        $sql->bind_param("s", $weekendingDate) or die($mysqli->error);
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($clientId, $positionId, $deptId, $candidateId, $jobCode, $emgTotal, $ordTotal, $aftTotal, $nightTotal, $rdoTotal, $satTotal, $sunTotal, $ovtTotal, $dblTotal, $hldTotal, $hol_total, $satovtTotal, $sunovtTotal, $povtTotal, $startDate, $endDate, $wkendDate, $client, $firstName) or die($mysqli->error);

    $totalsArray = array();
    $canId = '';
    while ($sql->fetch()) {
        $row = array('clientId' => $clientId, 'positionId' => $positionId, 'deptId' => $deptId, 'candidateId' => $candidateId, 'jobcode' => $jobCode, 'emgTotal' => $emgTotal, 'ordTotal' => $ordTotal, 'aftTotal' => $aftTotal, 'nightTotal' => $nightTotal, 'rdoTotal' => $rdoTotal, 'hldTotal' => $hldTotal, 'hol_total' => $hol_total, 'satTotal' => $satTotal, 'sunTotal' => $sunTotal, 'ovtTotal' => $ovtTotal, 'dblTotal' => $dblTotal, 'satovtTotal' => $satovtTotal, 'sunovtTotal' => $sunovtTotal, 'povtTotal' => $povtTotal, 'startDate' => $startDate, 'endDate' => $endDate, 'wkendDate' => $wkendDate);
        $totalsArray[] = $row;
    }
    return $totalsArray;
}

function getNumberOfCandidatesPerClient($mysqli, $fromDate, $toDate, $clientId)
{
    $sql = $mysqli->prepare("SELECT
                                 DISTINCT
                                  timesheet_totals.candidateId
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.wkendDate BETWEEN ? AND ? AND
                                  timesheet_totals.clientId = ?") or die($mysqli->error);
    $sql->bind_param("sss", $fromDate, $toDate, $clientId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->fetch();
    $num_of_rows = $sql->num_rows;
    return $num_of_rows;
}

function getClientPayrollTax($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT payrolltax FROM client WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payrolltax;
    } else {
        return null;
    }
}

function getClientWorkcover($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT workcover FROM client WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->workcover;
    } else {
        return null;
    }
}

function calculatePayrollTaxAmount($payAmount, $superAmount, $payrolltax)
{
    return (($payAmount + $superAmount) * ($payrolltax / 100));
}

function calculateWorkCoverAmount($payAmount, $superAmount, $workcover)
{
    return (($payAmount + $superAmount) * ($workcover / 100));
}

function getClientSummaryData($mysqli, $fromDate, $toDate)
{
    $status = 1;
    $sql = $mysqli->prepare("SELECT 
                                  client_summary.clientId,
                                  client_summary.payUnits,
                                  client_summary.payAmount,
                                  client_summary.billUnits,
                                  client_summary.billAmount,
                                  client_summary.tax,
                                  client_summary.net,
                                  client_summary.gross,
                                  client_summary.superUnits,
                                  client_summary.superAmount,
                                  client_summary.weekendingDate,
                                  client.client,
                                  client.wic
                                FROM
                                  client_summary
                                INNER JOIN client ON (client_summary.clientId = client.clientId)  
                                WHERE
                                  client_summary.weekendingDate BETWEEN ? AND ? AND 
                                  client_summary.status = ?
                                ORDER BY
                                  client.client") or die($mysqli->error);
    $sql->bind_param("ssi", $fromDate, $toDate, $status) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($clientId, $payUnits, $payAmount, $billUnits, $billAmount, $tax, $net, $gross, $superUnits, $superAmount, $weekendingDate, $client, $wic) or die($mysqli->error);
    $summaryArray = array();
    while ($sql->fetch()) {
        $summaryArray[] = array('clientId' => $clientId, 'payUnits' => $payUnits, 'payAmount' => $payAmount, 'billUnits' => $billUnits, 'billAmount' => $billAmount, 'tax' => $tax, 'net' => $net, 'gross' => $gross, 'superUnits' => $superUnits, 'superAmount' => $superAmount, 'weekendingDate' => $weekendingDate, 'wic' => $wic);
    }
    return $summaryArray;
}

function getTimeSheetTotalsTest($mysqli, $weekendingDate, $weekendingEndDate, $empId, $jbCode, $profitCentre, $clientCode)
{

    $clId = getClientIdByJobCode($mysqli, $jbCode);
    $posId = getPositionIdByJobCode($mysqli, $jbCode);
    $clientid = getClientIdByClientCode($mysqli, $clientCode);
    $pJobCode = getJobCodeByProfitCentreId($mysqli, $profitCentre);

    $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.wkendDate BETWEEN ? AND ?
                                ORDER BY  
                                  client.client,
                                  timesheet_totals.positionId,timesheet_totals.candidateId") or die($mysqli->error);
    $sql->bind_param("ss", $weekendingDate, $weekendingEndDate) or die($mysqli->error);

    $sql->execute();
    $sql->store_result();
    $sql->bind_result($clientId, $positionId, $candidateId, $jobCode, $emgTotal, $ordTotal, $aftTotal, $nightTotal, $rdoTotal, $satTotal, $sunTotal, $ovtTotal, $dblTotal, $hldTotal, $hol_total, $satovtTotal, $sunovtTotal, $povtTotal, $startDate, $endDate, $wkendDate, $client) or die($mysqli->error);

    $totalsArray = array();
    while ($sql->fetch()) {
        $totalsArray[] = array('clientId' => $clientId, 'positionId' => $positionId, 'candidateId' => $candidateId, 'jobcode' => $jobCode, 'emgTotal' => $emgTotal, 'ordTotal' => $ordTotal, 'aftTotal' => $aftTotal, 'nightTotal' => $nightTotal, 'rdoTotal' => $rdoTotal, 'hldTotal' => $hldTotal, 'hol_total' => $hol_total, 'satTotal' => $satTotal, 'sunTotal' => $sunTotal, 'ovtTotal' => $ovtTotal, 'dblTotal' => $dblTotal, 'satovtTotal' => $satovtTotal, 'sunovtTotal' => $sunovtTotal, 'povtTotal' => $povtTotal, 'startDate' => $startDate, 'endDate' => $endDate, 'wkendDate' => $wkendDate);
    }
    return $totalsArray;
}

function getTimeSheetTotalsForYearlyReport($mysqli, $weekendingDate, $empId, $jbCode, $profitCentre, $clientCode)
{

    $clId = getClientIdByJobCode($mysqli, $jbCode);
    $posId = getPositionIdByJobCode($mysqli, $jbCode);
    $clientid = getClientIdByClientCode($mysqli, $clientCode);
    $pJobCode = getJobCodeByProfitCentreId($mysqli, $profitCentre);

    if (!empty($empId)) {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.earlyMorningTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.candidateId = ?
                                AND  
                                  timesheet_totals.wkendDate = ?
                                ORDER BY client.client,timesheet_totals.positionId,timesheet_totals.candidateId") or die($mysqli->error);
        $sql->bind_param("ss", $empId, $weekendingDate) or die($mysqli->error);
    } elseif (!empty($jbCode)) {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.jobCode = ?
                                AND
                                  timesheet_totals.wkendDate = ?
                                ORDER BY  client.client,timesheet_totals.positionId,timesheet_totals.candidateId") or die($mysqli->error);
        $sql->bind_param("ss", $jbCode, $weekendingDate) or die($mysqli->error);
    } elseif (!empty($clientid)) {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.clientId = ?
                                AND
                                  timesheet_totals.wkendDate = ?
                                ORDER BY  client.client,timesheet_totals.positionId,timesheet_totals.candidateId") or die($mysqli->error);
        $sql->bind_param("is", $clientid, $weekendingDate) or die($mysqli->error);
    } elseif (!empty($profitCentre)) {
        $sql = $mysqli->prepare("SELECT
                                      timesheet_totals.clientId,
                                      timesheet_totals.positionId,
                                      timesheet_totals.candidateId,
                                      timesheet_totals.jobcode,
                                      timesheet_totals.emgTotal,
                                      timesheet_totals.ordTotal,
                                      timesheet_totals.aftTotal,
                                      timesheet_totals.nightTotal,
                                      timesheet_totals.rdoTotal,
                                      timesheet_totals.satTotal,
                                      timesheet_totals.sunTotal,
                                      timesheet_totals.ovtTotal,
                                      timesheet_totals.dblTotal,
                                      timesheet_totals.hldTotal,
                                      timesheet_totals.hol_total,
                                      timesheet_totals.satovtTotal,
                                      timesheet_totals.sunovtTotal,
                                      timesheet_totals.povtTotal,
                                      timesheet_totals.startDate,
                                      timesheet_totals.endDate,
                                      timesheet_totals.wkendDate,
                                      client.client
                                    FROM
                                      job_detail
                                      INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                      INNER JOIN timesheet_totals ON (job_detail.jobCode = timesheet_totals.jobCode)
                                    WHERE
                                      timesheet_totals.wkendDate = ? AND
                                      job_detail.profitCentre = ?
                                    ORDER BY
                                      client.client,
                                      timesheet_totals.positionId,timesheet_totals.candidateId") or die($mysqli->error);
        $sql->bind_param("si", $weekendingDate, $profitCentre) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.wkendDate = ?
                                ORDER BY  
                                  client.client,
                                  timesheet_totals.positionId,timesheet_totals.candidateId") or die($mysqli->error);
        $sql->bind_param("s", $weekendingDate) or die($mysqli->error);
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($clientId, $positionId, $candidateId, $jobCode, $emgTotal, $ordTotal, $aftTotal, $nightTotal, $rdoTotal, $satTotal, $sunTotal, $ovtTotal, $dblTotal, $hldTotal, $hol_total, $satovtTotal, $sunovtTotal, $povtTotal, $startDate, $endDate, $wkendDate, $client) or die($mysqli->error);

    $totalsArray = array();
    while ($sql->fetch()) {
        $totalsArray[] = array('clientId' => $clientId, 'positionId' => $positionId, 'candidateId' => $candidateId, 'jobcode' => $jobCode, 'emgTotal' => $emgTotal, 'ordTotal' => $ordTotal, 'aftTotal' => $aftTotal, 'nightTotal' => $nightTotal, 'rdoTotal' => $rdoTotal, 'hldTotal' => $hldTotal, 'hol_total' => $hol_total, 'satTotal' => $satTotal, 'sunTotal' => $sunTotal, 'ovtTotal' => $ovtTotal, 'dblTotal' => $dblTotal, 'satovtTotal' => $satovtTotal, 'sunovtTotal' => $sunovtTotal, 'povtTotal' => $povtTotal, 'startDate' => $startDate, 'endDate' => $endDate, 'wkendDate' => $wkendDate);
    }
    return $totalsArray;
}

function getTimeSheetTotalsForAuditRangeReport($mysqli, $weekendingStartDate, $weekendingFinishDate, $empId, $jbCode, $profitCentre, $clientid)
{

    $clId = getClientIdByJobCode($mysqli, $jbCode);
    $posId = getPositionIdByJobCode($mysqli, $jbCode);
    $pJobCode = getJobCodeByProfitCentreId($mysqli, $profitCentre);

    if (!empty($empId)) {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.earlyMorningTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.candidateId = ?
                                AND  
                                  timesheet_totals.wkendDate BETWEEN ? AND ?
                                ORDER BY client.client,timesheet_totals.positionId,timesheet_totals.candidateId") or die($mysqli->error);
        $sql->bind_param("sss", $empId, $weekendingStartDate, $weekendingFinishDate) or die($mysqli->error);
    } else if (!empty($jbCode)) {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.jobCode = ?
                                AND
                                  timesheet_totals.wkendDate BETWEEN ? AND ?
                                ORDER BY  client.client,timesheet_totals.positionId,timesheet_totals.candidateId") or die($mysqli->error);
        $sql->bind_param("sss", $jbCode, $weekendingStartDate, $weekendingFinishDate) or die($mysqli->error);
    } else if (!empty($clientid) && ($clientid != All)) {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.clientId = ?
                                AND
                                  timesheet_totals.wkendDate BETWEEN ? AND ?
                                ORDER BY  client.client,timesheet_totals.positionId,timesheet_totals.candidateId") or die($mysqli->error);
        $sql->bind_param("iss", $clientid, $weekendingStartDate, $weekendingFinishDate) or die($mysqli->error);
    } else if (!empty($profitCentre) && ($profitCentre <> 0)) {
        $sql = $mysqli->prepare("SELECT
                                      timesheet_totals.clientId,
                                      timesheet_totals.positionId,
                                      timesheet_totals.candidateId,
                                      timesheet_totals.jobcode,
                                      timesheet_totals.emgTotal,
                                      timesheet_totals.ordTotal,
                                      timesheet_totals.aftTotal,
                                      timesheet_totals.nightTotal,
                                      timesheet_totals.rdoTotal,
                                      timesheet_totals.satTotal,
                                      timesheet_totals.sunTotal,
                                      timesheet_totals.ovtTotal,
                                      timesheet_totals.dblTotal,
                                      timesheet_totals.hldTotal,
                                      timesheet_totals.hol_total,
                                      timesheet_totals.satovtTotal,
                                      timesheet_totals.sunovtTotal,
                                      timesheet_totals.povtTotal,
                                      timesheet_totals.startDate,
                                      timesheet_totals.endDate,
                                      timesheet_totals.wkendDate,
                                      client.client
                                    FROM
                                      job_detail
                                      INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                      INNER JOIN timesheet_totals ON (job_detail.jobCode = timesheet_totals.jobCode)
                                    WHERE
                                      timesheet_totals.wkendDate BETWEEN ? AND ? AND
                                      job_detail.profitCentre = ?
                                    ORDER BY
                                      client.client,
                                      timesheet_totals.positionId,timesheet_totals.candidateId") or die($mysqli->error);
        $sql->bind_param("ssi", $weekendingStartDate, $weekendingFinishDate, $profitCentre) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.wkendDate BETWEEN ? AND ?
                                ORDER BY  
                                  client.client,
                                  timesheet_totals.positionId,timesheet_totals.candidateId") or die($mysqli->error);
        $sql->bind_param("ss", $weekendingStartDate, $weekendingFinishDate) or die($mysqli->error);
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($clientId, $positionId, $candidateId, $jobCode, $emgTotal, $ordTotal, $aftTotal, $nightTotal, $rdoTotal, $satTotal, $sunTotal, $ovtTotal, $dblTotal, $hldTotal, $hol_total, $satovtTotal, $sunovtTotal, $povtTotal, $startDate, $endDate, $wkendDate, $client);

    $totalsArray = array();
    while ($sql->fetch()) {
        $totalsArray[] = array('clientId' => $clientId, 'positionId' => $positionId, 'candidateId' => $candidateId, 'jobcode' => $jobCode, 'emgTotal' => $emgTotal, 'ordTotal' => $ordTotal, 'aftTotal' => $aftTotal, 'nightTotal' => $nightTotal, 'rdoTotal' => $rdoTotal, 'hldTotal' => $hldTotal, 'hol_total' => $hol_total, 'satTotal' => $satTotal, 'sunTotal' => $sunTotal, 'ovtTotal' => $ovtTotal, 'dblTotal' => $dblTotal, 'satovtTotal' => $satovtTotal, 'sunovtTotal' => $sunovtTotal, 'povtTotal' => $povtTotal, 'startDate' => $startDate, 'endDate' => $endDate, 'wkendDate' => $wkendDate);
    }
    return $totalsArray;
}

function getTimeSheetDataForPayrollValidation($mysqli, $weekendingDate)
{
    $sql = $mysqli->prepare("SELECT
                                  DISTINCT timesheet_totals.candidateId
                                FROM
                                  timesheet_totals
                                WHERE
                                  timesheet_totals.wkendDate = ?
                                ORDER BY  
                                  timesheet_totals.candidateId") or die($mysqli->error);
    $sql->bind_param("s", $weekendingDate) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($candidateId);
    $dataArray = array();
    while ($sql->fetch()) {
        $tfn = getCandidateTFN($mysqli, $candidateId);
        $superMemberNo = getCandidateSuperMemberNo($mysqli, $candidateId);
        $superFund = checkSuperFundAssigning($mysqli, $candidateId);
        $taxcode = getEmployeeTaxCode($mysqli, $candidateId);
        $internalPoliceClearanceCheck = validateFinanceCheckType($mysqli, $candidateId, 1);
        $externalPoliceCheck = validateFinanceCheckType($mysqli, $candidateId, 2);
        $externalPoliceCheckReceipt = validateFinanceCheckType($mysqli, $candidateId, 3);
        $policeCheckStatus = '';
        if (empty($tfn)) {
            $tfn = '<span  style="background-color: rosybrown">TFN Not Found</span>';
        }
        if (empty($superMemberNo)) {
            $superMemberNo = '<span  style="background-color: rosybrown">Super Member Number Not Found</span>';
        }
        if (empty($superFund)) {
            $superFund = '<span  style="background-color: rosybrown">Super Fund Not Assigned</span>';
        }
        if (empty($taxcode)) {
            $taxcode = '<span  style="background-color: rosybrown">Taxcode Not Assigned</span>';;
        }
        //$policeCheckStatus = $internalPoliceClearanceCheck;
        $dataArray[] = array('candidateId' => $candidateId, 'tfn' => $tfn, 'superMemberNo' => $superMemberNo, 'superFundCheck' => $superFund, 'taxcode' => $taxcode, 'internalPoliceCheckStatus' => $internalPoliceClearanceCheck, 'externalPoliceCheckStatus' => $externalPoliceCheck, 'externalPoliceCheckReceiptStatus' => $externalPoliceCheckReceipt);
    }
    return $dataArray;
}

function getTimeSheetTotalsForPayroll($mysqli, $weekendingDate, $empId, $jbCode, $profitCentre, $clientCode)
{

    $clId = getClientIdByJobCode($mysqli, $jbCode);
    $posId = getPositionIdByJobCode($mysqli, $jbCode);
    $clientid = getClientIdByClientCode($mysqli, $clientCode);
    $pJobCode = getJobCodeByProfitCentreId($mysqli, $profitCentre);

    if (!empty($empId)) {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.totId,
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  timesheet_totals.deptId,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.candidateId = ?
                                AND  
                                  timesheet_totals.wkendDate = ?
                                ORDER BY timesheet_totals.candidateId,client.client,timesheet_totals.positionId") or die($mysqli->error);
        $sql->bind_param("ss", $empId, $weekendingDate) or die($mysqli->error);
    } else if (!empty($jbCode)) {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.totId,
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  timesheet_totals.deptId,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.jobCode = ?
                                AND
                                  timesheet_totals.wkendDate = ?
                                ORDER BY timesheet_totals.candidateId,client.client,timesheet_totals.positionId") or die($mysqli->error);
        $sql->bind_param("ss", $jbCode, $weekendingDate) or die($mysqli->error);
    } else if (!empty($clientid)) {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.totId,
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  timesheet_totals.deptId,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.clientId = ?
                                AND
                                  timesheet_totals.wkendDate = ?
                                ORDER BY timesheet_totals.candidateId,client.client,timesheet_totals.positionId") or die($mysqli->error);
        $sql->bind_param("is", $clientid, $weekendingDate) or die($mysqli->error);
    } else if (!empty($profitCentre) && ($profitCentre <> 0)) {
        $sql = $mysqli->prepare("SELECT
                                      timesheet_totals.totId,
                                      timesheet_totals.clientId,
                                      timesheet_totals.positionId,
                                      timesheet_totals.candidateId,
                                      timesheet_totals.jobcode,
                                      timesheet_totals.emgTotal,
                                      timesheet_totals.ordTotal,
                                      timesheet_totals.aftTotal,
                                      timesheet_totals.nightTotal,
                                      timesheet_totals.rdoTotal,
                                      timesheet_totals.satTotal,
                                      timesheet_totals.sunTotal,
                                      timesheet_totals.ovtTotal,
                                      timesheet_totals.dblTotal,
                                      timesheet_totals.hldTotal,
                                      timesheet_totals.hol_total,
                                      timesheet_totals.satovtTotal,
                                      timesheet_totals.sunovtTotal,
                                      timesheet_totals.povtTotal,
                                      timesheet_totals.startDate,
                                      timesheet_totals.endDate,
                                      timesheet_totals.wkendDate,
                                      timesheet_totals.deptId,
                                      client.client
                                    FROM
                                      job_detail
                                      INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                      INNER JOIN timesheet_totals ON (job_detail.jobCode = timesheet_totals.jobCode)
                                    WHERE
                                      timesheet_totals.wkendDate = ? AND 
                                      job_detail.profitCentre = ?
                                    ORDER BY
                                      timesheet_totals.candidateId,
                                      client.client,
                                      timesheet_totals.positionId") or die($mysqli->error);
        $sql->bind_param("si", $weekendingDate, $profitCentre) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.totId,
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.jobcode,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  timesheet_totals.deptId,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.wkendDate = ?
                                ORDER BY  
                                  timesheet_totals.candidateId,
                                  client.client,
                                  timesheet_totals.positionId") or die($mysqli->error);
        $sql->bind_param("s", $weekendingDate) or die($mysqli->error);
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($totId, $clientId, $positionId, $candidateId, $jobCode, $emgTotal, $ordTotal, $aftTotal, $nightTotal, $rdoTotal, $satTotal, $sunTotal, $ovtTotal, $dblTotal, $hldTotal, $hol_total, $satovtTotal, $sunovtTotal, $povtTotal, $startDate, $endDate, $wkendDate, $deptId, $client);

    $totalsArray = array();
    while ($sql->fetch()) {
        $totalsArray[] = array('totId' => $totId, 'clientId' => $clientId, 'positionId' => $positionId, 'candidateId' => $candidateId, 'jobcode' => $jobCode, 'emgTotal' => $emgTotal, 'ordTotal' => $ordTotal, 'aftTotal' => $aftTotal, 'nightTotal' => $nightTotal, 'rdoTotal' => $rdoTotal, 'hldTotal' => $hldTotal, 'hol_total' => $hol_total, 'satTotal' => $satTotal, 'sunTotal' => $sunTotal, 'ovtTotal' => $ovtTotal, 'dblTotal' => $dblTotal, 'satovtTotal' => $satovtTotal, 'sunovtTotal' => $sunovtTotal, 'povtTotal' => $povtTotal, 'startDate' => $startDate, 'endDate' => $endDate, 'wkendDate' => $wkendDate, 'deptId' => $deptId);
    }
    return $totalsArray;
}

function getPayCatCode($mysqli, $payCategory)
{
    $sql = $mysqli->prepare("SELECT payCatCode FROM paycategory WHERE payCategory = ?") or die($mysqli->error);
    $sql->bind_param("s", $payCategory) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payCatCode;
    } else {
        return null;
    }
}

function getPayRate($mysqli, $clientId, $positionId, $payCatCode, $jobCode)
{
    $sql = $mysqli->prepare("SELECT payRate FROM ratecard WHERE clientId = ? AND positionId = ? AND payCatCode = ? AND jobCode = ?") or die($mysqli->error);
    $sql->bind_param("iiss", $clientId, $positionId, $payCatCode, $jobCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payRate;
    } else {
        return null;
    }
}

function getPayRateByYear($mysqli, $clientId, $positionId, $payCatCode, $jobCode, $rateYear)
{
    $sql = $mysqli->prepare("SELECT payRate FROM ratecard_snapshot WHERE clientId = ? AND positionId = ? AND payCatCode = ? AND jobCode = ? AND rateCardYear = ?") or die($mysqli->error);
    $sql->bind_param("iisss", $clientId, $positionId, $payCatCode, $jobCode, $rateYear) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payRate;
    } else {
        return null;
    }
}

function getChargeRate($mysqli, $clientId, $positionId, $payCatCode, $jobCode)
{
    $sql = $mysqli->prepare("SELECT chargeRate FROM ratecard WHERE clientId = ? AND positionId = ? AND payCatCode = ? AND jobCode = ?") or die($mysqli->error);
    $sql->bind_param("iiss", $clientId, $positionId, $payCatCode, $jobCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->chargeRate;
    } else {
        return null;
    }
}

function getChargeRateByYear($mysqli, $clientId, $positionId, $payCatCode, $jobCode, $rateYear)
{
    $sql = $mysqli->prepare("SELECT chargeRate FROM ratecard_snapshot WHERE clientId = ? AND positionId = ? AND payCatCode = ? AND jobCode = ? AND rateCardYear = ?") or die($mysqli->error);
    $sql->bind_param("iisss", $clientId, $positionId, $payCatCode, $jobCode, $rateYear) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->chargeRate;
    } else {
        return null;
    }
}

function calculatePayAmount($totalUnits, $payRate)
{
    return floatval($totalUnits) * floatval($payRate);
}

function calculateChargeAmount($totalUnits, $chargeRate)
{
    return floatval($totalUnits) * floatval($chargeRate);
}

function candidateSuperFundTransCode($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT transCode FROM candidate_superfund WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->transCode;
    } else {
        return null;
    }
}

function getSuperFundDefaultPercentage($mysqli, $transCode)
{
    $sql = $mysqli->prepare("SELECT defaultPercent FROM transactioncode WHERE transCode = ?") or die($mysqli->error);
    $sql->bind_param("i", $transCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->defaultPercent;
    } else {
        return null;
    }
}

function transCodeCheck($mysqli, $transCode, $transCodeType)
{
    $sqlchk = $mysqli->prepare("SELECT transCode FROM transactioncode WHERE transCode = ? AND transCodeType = ?") or die ($mysqli->error);
    $sqlchk->bind_param("ii", $transCode, $transCodeType) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function createPayCategoryArray($mysqli)
{
    $sql = $mysqli->prepare("SELECT payCategory FROM paycategory") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($payCategory);
    $catArray = array();
    while ($sql->fetch()) {
        $catArray[$payCategory] = array('transCode' => '', 'amount' => 0);
    }
    return $catArray;
}

function createTransCodeArray($mysqli)
{
    $sql = $mysqli->prepare("SELECT transCode FROM transactioncode") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($transCode);
    $transArray = array();
    while ($sql->fetch()) {
        $transArray[$transCode] = array('units' => 0, 'payAmount' => 0);
    }
    return $transArray;
}

function createUnitPayArray($mysqli)
{
    $sql = $mysqli->prepare("SELECT transCode FROM transactioncode") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($transCode);
    $unitPayArray = array();
    while ($sql->fetch()) {
        $unitPayArray[$transCode] = array('code' => '', 'desc' => '', 'units' => 0, 'amount' => 0);
    }
    return $unitPayArray;
}

function updateTimesheetTotals($mysqli, $totId, $clientId, $positionId, $jobCode, $earlyMorningTotal, $ordTotal, $aftTotal, $nightTotal, $rdoTotal, $satTotal, $sunTotal, $ovtTotal, $dblTotal, $hldTotal, $hol_total, $satovtTotal, $sunovtTotal, $povtTotal, $startDate, $endDate, $candidateId, $wkendDate)
{
    if (empty($totId)) {
        if (!validateTimeSheetTotals($mysqli, $clientId, $positionId, $candidateId, $startDate, $endDate, $wkendDate)) {
            $ins = $mysqli->prepare("INSERT INTO timesheet_totals(clientId,positionId,jobCode,candidateId,emgTotal,ordTotal,aftTotal,nightTotal,rdoTotal,satTotal,sunTotal,ovtTotal,dblTotal,hldTotal,hol_total,satovtTotal,sunovtTotal,povtTotal,startDate,endDate,wkendDate)VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
            $ins->bind_param("iisssssssssssssssssss", $clientId, $positionId, $jobCode, $candidateId, $earlyMorningTotal, $ordTotal, $aftTotal, $nightTotal, $rdoTotal, $satTotal, $sunTotal, $ovtTotal, $dblTotal, $hldTotal, $hol_total, $satovtTotal, $sunovtTotal, $povtTotal, $startDate, $endDate, $wkendDate) or die($mysqli->error);
            $ins->execute();
            $nrows = $ins->affected_rows;
            if ($nrows > 0) {
                $ins->free_result();
                $statusCheck = 'inserted';
            } else {
                $statusCheck = $mysqli->error;
            }
        }
    } else {
        $statusCheck = '';
        $up = $mysqli->prepare("UPDATE timesheet_totals
                                  SET 
                                      emgTotal = ?,
                                      ordTotal = ?,
                                      aftTotal = ?,
                                      nightTotal = ?,
                                      rdoTotal = ?,
                                      satTotal = ?,
                                      sunTotal = ?,
                                      ovtTotal = ?,
                                      dblTotal = ?,
                                      hldTotal = ?,
                                      hol_total = ?,
                                      satovtTotal = ?,
                                      sunovtTotal = ?,
                                      povtTotal = ?
                                WHERE clientId = ?
                                AND positionId = ?
                                AND candidateId = ?
                                AND startDate = ?
                                AND endDate = ?
                                AND wkendDate = ?
                                AND totId = ?") or die($mysqli->error);
        $up->bind_param("ssssssssssssssiissssi", $earlyMorningTotal, $ordTotal, $aftTotal, $nightTotal, $rdoTotal, $satTotal, $sunTotal, $ovtTotal, $dblTotal, $hldTotal, $hol_total, $satovtTotal, $sunovtTotal, $povtTotal, $clientId, $positionId, $candidateId, $startDate, $endDate, $wkendDate, $totId) or die($mysqli->error);
        $up->execute();
        $affectedRows = $up->affected_rows;
        if ($affectedRows > 0) {
            $statusCheck = 'updated';
        } else {
            $statusCheck = $mysqli->error;
        }
        return $statusCheck;
    }
}

function updateDepartmentWithTimesheetTotals($mysqli, $clientId, $positionId, $empId, $workDate, $weekendingDate, $department, $jobCode)
{
    if (!validateTimesheetDepartment($mysqli, $clientId, $positionId, $empId, $workDate, $weekendingDate, $jobCode)) {
        $ins = $mysqli->prepare("INSERT INTO timesheet_department(clientId,positionId,empId,workDate,weekendingDate,deptId,jobCode)VALUES(?,?,?,?,?,?,?)") or die($mysqli->error);
        $ins->bind_param("iisssis", $clientId, $positionId, $empId, $workDate, $weekendingDate, $department, $jobCode) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows > 0) {
            $ins->free_result();
            $statusCheck = 'inserted';
        } else {
            $statusCheck = $mysqli->error;
        }
    } else {
        $statusCheck = '';
        $up = $mysqli->prepare("UPDATE timesheet_department
                                  SET 
                                      deptId = ?
                                WHERE clientId = ?
                                AND positionId = ?
                                AND empId = ?
                                AND workDate = ?
                                AND weekendingDate = ?
                                AND jobCode = ?") or die($mysqli->error);
        $up->bind_param("iiissss", $department, $clientId, $positionId, $empId, $workDate, $weekendingDate, $jobCode) or die($mysqli->error);
        $up->execute();
        $affectedRows = $up->affected_rows;
        if ($affectedRows > 0) {
            $statusCheck = 'updated';
        } else {
            $statusCheck = $mysqli->error;
        }
    }
    return $statusCheck;
}

function validateTimesheetDepartment($mysqli, $clientId, $positionId, $empId, $workDate, $weekendingDate, $jobCode)
{
    $sqlchk = $mysqli->prepare("SELECT clientId FROM timesheet_department WHERE clientId = ? AND positionId = ? AND empId = ? AND workDate = ? AND weekendingDate = ? AND jobCode = ?") or die ($mysqli->error);
    $sqlchk->bind_param("iissss", $clientId, $positionId, $empId, $workDate, $weekendingDate, $jobCode) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function getTimesheetTotalByEmployee($mysqli, $clientId, $positionId, $jobCode, $empId, $startDate, $endDate, $weekendingDate)
{
    $sql = $mysqli->prepare("SELECT totId,
                                      candidateId,
                                      deptId,
                                      emgTotal,
                                      ordTotal,
                                      aftTotal,
                                      nightTotal,
                                      rdoTotal,
                                      satTotal,
                                      sunTotal,
                                      ovtTotal,
                                      dblTotal,
                                      hldTotal,
                                      hol_total,
                                      satovtTotal,
                                      sunovtTotal,
                                      povtTotal 
                            FROM timesheet_totals
                            WHERE clientId = ?
                            AND positionId = ?
                            AND jobCode = ?
                            AND candidateId = ? 
                            AND startDate = ?
                            AND endDate = ?
                            AND wkendDate = ?") or die($mysqli->error);
    $sql->bind_param("iisssss", $clientId, $positionId, $jobCode, $empId, $startDate, $endDate, $weekendingDate) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($totId, $candidateId, $deptId, $emgTotal, $ordTotal, $aftTotal, $nightTotal, $rdoTotal, $satTotal, $sunTotal, $ovtTotal, $dblTotal, $hldTotal, $hol_total, $satovtTotal, $sunovtTotal, $povtTotal) or die($mysqli->error);
    $count = 0;
    $num_of_rows = $sql->num_rows;
    while ($sql->fetch()) {
        $count++;
        $row = $row . '<tr><td><input type="text" name="candidateId' . $count . '" id="candidateId' . $count . '" value="' . $candidateId . '" readonly/><input type="hidden" name="totId' . $count . '" id="totId' . $count . '" class="totId' . $count . '" value="' . $totId . '"/></td>
                                    <td><input type="text" name="emTotal' . $count . '" class="emTotal' . $count . '" value="' . $emgTotal . '" size="5"/></td>
                                    <td><input type="text" name="ordTotal' . $count . '" class="ordTotal' . $count . '" value="' . $ordTotal . '" size="5"/></td>
                                    <td><input type="text" name="aftTotal' . $count . '" class="aftTotal' . $count . '" value="' . $aftTotal . '" size="5"/></td>
                                    <td><input type="text" name="nightTotal' . $count . '" class="nightTotal' . $count . '" value="' . $nightTotal . '" size="5"/></td>
                                    <td><input type="text" name="rdoTotal' . $count . '" class="rdoTotal' . $count . '" value="' . $rdoTotal . '" size="5"/></td>
                                    <td><input type="text" name="satTotal' . $count . '" class="satTotal' . $count . '" value="' . $satTotal . '" size="5"/></td>
                                    <td><input type="text" name="sunTotal' . $count . '" class="sunTotal' . $count . '" value="' . $sunTotal . '" size="5"/></td>
                                    <td><input type="text" name="ovtTotal' . $count . '" class="ovtTotal' . $count . '" value="' . $ovtTotal . '" size="5"/></td>
                                    <td><input type="text" name="dblTotal' . $count . '" class="dblTotal' . $count . '" value="' . $dblTotal . '" size="5"/></td>
                                    <td><input type="text" name="holTotal' . $count . '" class="holTotal' . $count . '" value="' . $hldTotal . '" size="5"/></td>
                                    <td><input type="text" name="hol_total' . $count . '" class="hol_total' . $count . '" value="' . $hol_total . '" size="5"/></td>
                                    <td><input type="text" name="satOvertimeTotal' . $count . '" class="satOvertimeTotal' . $count . '" value="' . $satovtTotal . '" size="5"/></td>
                                    <td><input type="text" name="sunOvertimeTotal' . $count . '" class="sunOvertimeTotal' . $count . '" value="' . $sunovtTotal . '" size="5"/></td>
                                    <td><input type="text" name="periodOvertimeTotal' . $count . '" class="periodOvertimeTotal' . $count . '" value="' . $povtTotal . '" size="5"/></td>';
        /* $row = $row.'<td><select name="department'.$count.'" id="department'.$count.'"  class="department pull-left" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%">';
        $row = $row.getClientDepartmentListTimesheetTotals($mysqli,$clientId,$deptId);
        $row = $row.'</select><i></i></td>';*/
        $row = $row . '<td><button type="submit" name="updateTotalEntryBtn' . $count . '" id="updateTotalEntryBtn' . $count . '"  class="updateTotalEntryBtn btn btn-sm btn-default"><i class="glyphicon glyphicon-pencil"></i> Update</button></td></tr>';
    }
    /*if($num_of_rows<5){
        while($count<5){
            $count++;
            $row = $row.'<tr><td><input type="text" name="candidateId'.$count.'" id="candidateId'.$count.'" value="'.$candidateId.'" readonly/>
            <input type="hidden" name="totId'.$count.'" id="totId'.$count.'" class="totId'.$count.'" value=""/></td>
                                    <td><input type="text" name="emTotal'.$count.'" class="emTotal'.$count.'" value="" size="5"/></td>
                                    <td><input type="text" name="ordTotal'.$count.'" class="ordTotal'.$count.'" value="" size="5"/></td>
                                    <td><input type="text" name="aftTotal'.$count.'" class="aftTotal'.$count.'" value="" size="5"/></td>
                                    <td><input type="text" name="nightTotal'.$count.'" class="nightTotal'.$count.'" value="" size="5"/></td>
                                    <td><input type="text" name="rdoTotal'.$count.'" class="rdoTotal'.$count.'" value="" size="5"/></td>
                                    <td><input type="text" name="satTotal'.$count.'" class="satTotal'.$count.'" value="" size="5"/></td>
                                    <td><input type="text" name="sunTotal'.$count.'" class="sunTotal'.$count.'" value="" size="5"/></td>
                                    <td><input type="text" name="ovtTotal'.$count.'" class="ovtTotal'.$count.'" value="" size="5"/></td>
                                    <td><input type="text" name="dblTotal'.$count.'" class="dblTotal'.$count.'" value="" size="5"/></td>
                                    <td><input type="text" name="holTotal'.$count.'" class="holTotal'.$count.'" value="" size="5"/></td>
                                    <td><input type="text" name="hol_total'.$count.'" class="hol_total'.$count.'" value="" size="5"/></td>
                                    <td><input type="text" name="satOvertimeTotal'.$count.'" class="satOvertimeTotal'.$count.'" value="" size="5"/></td>
                                    <td><input type="text" name="sunOvertimeTotal'.$count.'" class="sunOvertimeTotal'.$count.'" value="" size="5"/></td>
                                    <td><input type="text" name="periodOvertimeTotal'.$count.'" class="periodOvertimeTotal'.$count.'" value="" size="5"/></td>
                                    <td>';
            $row = $row.'<select name="department'.$count.'" id="department'.$count.'"  class="department pull-left" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%">';
            $row = $row.getClientDepartmentListTimesheetTotals($mysqli,$clientId,'');
            $row = $row.'</select><i></i></td><td><button type="submit" name="updateTotalEntryBtn'.$count.'" id="updateTotalEntryBtn'.$count.'"  class="updateTotalEntryBtn btn btn-sm btn-default"><i class="glyphicon glyphicon-pencil"></i> Update</button></td></tr>';

        }
    }*/
    return $row;
}

function getClientDepartmentListTimesheetTotals($mysqli, $clientId, $deptid)
{
    $select = $mysqli->prepare("SELECT deptId,stateId,department FROM department WHERE clientId = ? ORDER BY department ASC ") or die($mysqli->error);
    $select->bind_param("i", $clientId) or die($mysqli->error);
    $select->execute();
    $select->store_result();
    $select->bind_result($deptId, $stateId, $department) or die($mysqli->error);
    $opt = '';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $deptId . '"';
        if (empty($deptid)) {
            $opt = $opt . '';
        } else {
            if ($deptId == $deptid) {
                $opt = $opt . ' selected';
            } else {
                $opt = $opt . '';
            }
        }
        $opt = $opt . '>' . getStateById($mysqli, $stateId) . ' ' . $department . '</option>';
    }
    return $opt;
}

function saveTimeSheetCalculation($mysqli, $clientId, $positionId, $deptId, $jobCode, $earlyMorningTotal, $ordTotal, $aftTotal, $nightTotal, $rdoTotal, $satTotal, $sunTotal, $ovtTotal, $dblTotal, $hldTotal, $hol_total, $satovtTotal, $sunovtTotal, $povtTotal, $startDate, $endDate, $candidateId, $wkendDate)
{
    $statusCheck = null;
    if (!validateTimeSheetTotals($mysqli, $clientId, $positionId, $deptId, $candidateId, $startDate, $endDate, $wkendDate)) {
        $ins = $mysqli->prepare("INSERT INTO timesheet_totals(clientId,positionId,deptId,jobCode,candidateId,emgTotal,ordTotal,aftTotal,nightTotal,rdoTotal,satTotal,sunTotal,ovtTotal,dblTotal,hldTotal,hol_total,satovtTotal,sunovtTotal,povtTotal,startDate,endDate,wkendDate)VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
        $ins->bind_param("iiisssssssssssssssssss", $clientId, $positionId, $deptId, $jobCode, $candidateId, $earlyMorningTotal, $ordTotal, $aftTotal, $nightTotal, $rdoTotal, $satTotal, $sunTotal, $ovtTotal, $dblTotal, $hldTotal, $hol_total, $satovtTotal, $sunovtTotal, $povtTotal, $startDate, $endDate, $wkendDate) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows > 0) {
            $ins->free_result();
            $statusCheck = 'inserted';
        } else {
            $statusCheck = $mysqli->error;
        }
    } else {
        $up = $mysqli->prepare("UPDATE timesheet_totals 
                                  SET emgTotal = ?,
                                      ordTotal = ?,
                                      aftTotal = ?,
                                      nightTotal = ?,
                                      rdoTotal = ?,
                                      satTotal = ?,
                                      sunTotal = ?,
                                      ovtTotal = ?,
                                      dblTotal = ?,
                                      hldTotal = ?,
                                      hol_total = ?,
                                      satovtTotal = ?,
                                      sunovtTotal = ?,
                                      povtTotal = ?
                                WHERE clientId = ?
                                AND positionId = ?
                                AND deptId = ?  
                                AND candidateId = ?
                                AND startDate = ?
                                AND endDate = ?
                                AND wkendDate = ?") or die($mysqli->error);
        $up->bind_param("ssssssssssssssiiissss", $earlyMorningTotal, $ordTotal, $aftTotal, $nightTotal, $rdoTotal, $satTotal, $sunTotal, $ovtTotal, $dblTotal, $hldTotal, $hol_total, $satovtTotal, $sunovtTotal, $povtTotal, $clientId, $positionId, $deptId, $candidateId, $startDate, $endDate, $wkendDate) or die($mysqli->error);
        if ($up->execute()) {
            $affectedRows = $up->affected_rows;
            $statusCheck = 'updated';
        } else {
            $statusCheck = $mysqli->error;
        }
    }
    return $statusCheck;
}

function validatePayrule($mysqli, $jobCode)
{
    $sqlChk = $mysqli->prepare("SELECT jobCode FROM payrule WHERE jobCode = ?") or die($mysqli->error);
    $sqlChk->bind_param("s", $jobCode) or die($mysqli->error);
    $sqlChk->execute();
    $sqlChk->store_result();
    $sqlChk->fetch();
    $num_of_rows = $sqlChk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function savePayrule($mysqli, $jobCode, $payAwdCode, $payAwdCodeDesc, $avgNormalHrs, $spreadStart, $spreadEnd, $spreadDuration, $firstEightHours, $minimumHrs, $overtimeAfterHrs, $overtimeSatAfterHrs, $overtimeSunAfterHrs, $earlyMorningShiftStartTime, $earlyMorningShiftEndTime, $dayShiftStartTime, $dayShiftEndTime, $afternoonShiftStartTime, $afternoonShiftEndTime, $nightShiftStartTime, $nightShiftEndTime)
{

    if (validatePayrule($mysqli, $jobCode)) {
        $up = $mysqli->prepare("UPDATE
                                  payrule
                                SET
                                  payAwrdCode = ?,
                                  payAwrdDesc = ?,
                                  avgNormalHrs = ?,
                                  spreadStart = ?,
                                  spreadEnd = ?,
                                  spreadDuration = ?,
                                  firstEightHours = ?,
                                  minimumHrs = ?,
                                  earlyMorningStartTime = ?,
                                  earlyMorningEndTime = ?,
                                  dayShiftStartTime = ?,
                                  dayShiftEndTime = ?,
                                  afternoonShiftStartTime = ?,
                                  afternoonShiftEndTime = ?,
                                  nightShiftStartTime = ?,
                                  nightShiftEndTime = ?,
                                  overtimeAfterHrs = ?,
                                  overtimeSatAfterHrs = ?,
                                  overtimeSunAfterHrs = ?
                                WHERE
                                  payrule.jobCode = ?") or die($mysqli->error);
        $up->bind_param("ssssssssssssssssssss", $payAwdCode, $payAwdCodeDesc, $avgNormalHrs, $spreadStart, $spreadEnd, $spreadDuration, $firstEightHours, $minimumHrs, $earlyMorningShiftStartTime, $earlyMorningShiftEndTime, $dayShiftStartTime, $dayShiftEndTime, $afternoonShiftStartTime, $afternoonShiftEndTime, $nightShiftStartTime, $nightShiftEndTime, $overtimeAfterHrs, $overtimeSatAfterHrs, $overtimeSunAfterHrs, $jobCode) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            $up->free_result();
            $statusCheck = 'updated';
        } else {
            $statusCheck = $mysqli->error;
        }
    } else {
        $ins = $mysqli->prepare("INSERT INTO payrule(
                                          jobCode,
                                          payAwrdCode,
                                          payAwrdDesc,
                                          avgNormalHrs,
                                          spreadStart,
                                          spreadEnd,
                                          spreadDuration,
                                          firstEightHours,
                                          minimumHrs,
                                          earlyMorningStartTime,
                                          earlyMorningEndTime,
                                          dayShiftStartTime,
                                          dayShiftEndTime,
                                          afternoonShiftStartTime,
                                          afternoonShiftEndTime,
                                          nightShiftStartTime,
                                          nightShiftEndTime,
                                          overtimeAfterHrs,
                                          overtimeSatAfterHrs,
                                          overtimeSunAfterHrs)
                                        VALUES(
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?)") or die($mysqli->error);
        $ins->bind_param("ssssssssssssssssssss", $jobCode, $payAwdCode, $payAwdCodeDesc, $avgNormalHrs, $spreadStart, $spreadEnd, $spreadDuration, $firstEightHours, $minimumHrs, $earlyMorningShiftStartTime, $earlyMorningShiftEndTime, $dayShiftStartTime, $dayShiftEndTime, $afternoonShiftStartTime, $afternoonShiftEndTime, $nightShiftStartTime, $nightShiftEndTime, $overtimeAfterHrs, $overtimeSatAfterHrs, $overtimeSunAfterHrs) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows > 0) {
            $ins->free_result();
            $statusCheck = 'inserted';
        } else {
            $statusCheck = $mysqli->error;
        }
    }
    return $statusCheck;
}

function getClientIdByJobCode($mysqli, $jobCode)
{
    $sql = $mysqli->prepare("SELECT clientId FROM jobcode WHERE jobCode = ?") or die($mysqli->error);
    $sql->bind_param("s", $jobCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->clientId;
    } else {
        return null;
    }
}

function getPositionIdByJobCode($mysqli, $jobCode)
{
    $sql = $mysqli->prepare("SELECT positionId FROM jobcode WHERE jobCode = ?") or die($mysqli->error);
    $sql->bind_param("s", $jobCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->positionId;
    } else {
        return null;
    }
}

function getDepartmentIdByJobCode($mysqli, $jobCode)
{
    $sql = $mysqli->prepare("SELECT deptId FROM jobcode WHERE jobCode = ?") or die($mysqli->error);
    $sql->bind_param("s", $jobCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->deptId;
    } else {
        return null;
    }
}

function listOfPayrules($mysqli)
{
    $query = $mysqli->prepare("SELECT 
                                      payrule.payruleId,
                                      payrule.jobCode,
                                      payrule.payAwrdCode,
                                      payrule.payAwrdDesc,
                                      payrule.avgNormalHrs,
                                      payrule.spreadStart,
                                      payrule.spreadEnd,
                                      payrule.spreadDuration,
                                      payrule.firstEightHours,
                                      payrule.minimumHrs,
                                      payrule.earlyMorningStartTime,
                                      payrule.earlyMorningEndTime,
                                      payrule.dayShiftStartTime,
                                      payrule.dayShiftEndTime,
                                      payrule.afternoonShiftStartTime,
                                      payrule.afternoonShiftEndTime,
                                      payrule.nightShiftStartTime,
                                      payrule.nightShiftEndTime,
                                      payrule.overtime,
                                      payrule.overtimeAfterHrs,
                                      payrule.overtimeSatAfterHrs,
                                      payrule.overtimeSunAfterHrs,
                                      payrule.doubletime,
                                      payrule.saturday,
                                      payrule.sunday,
                                      payrule.publicHoliday,
                                      payrule.overtimeRule,
                                      payrule.mealBreakLimit
                                    FROM
                                      payrule") or die($mysqli->error);
    $query->execute();
    $query->store_result();
    $query->bind_result($payruleId,
        $jobCode,
        $payAwrdCode,
        $payAwrdDesc,
        $avgNormalHrs,
        $spreadStart,
        $spreadEnd,
        $spreadDuration,
        $firstEightHours,
        $minimumHrs,
        $earlyMorningStartTime,
        $earlyMorningEndTime,
        $dayShiftStartTime,
        $dayShiftEndTime,
        $afternoonShiftStartTime,
        $afternoonShiftEndTime,
        $nightShiftStartTime,
        $nightShiftEndTime,
        $overtime,
        $overtimeAfterHrs,
        $overtimeSatAfterHrs,
        $overtimeSunAfterHrs,
        $doubletime,
        $saturday,
        $sunday,
        $publicHoliday,
        $overtimeRule,
        $mealBreakLimit) or die($mysqli->error);
    $row = '';
    while ($query->fetch()) {
        $row = $row . '<tr><td>' . $payAwrdCode . '</td><td>' . $payAwrdDesc . '</td><td>' . $jobCode . '</td><td data-jobcode="' . $jobCode . '" data-clientid="' . getClientIdByJobCode($mysqli, $jobCode) . '" data-positionid="' . getPositionIdByJobCode($mysqli, $jobCode) . '" data-payaward="' . $payAwrdCode . '" data-payawarddesc="' . $payAwrdDesc . '" data-avghrs="' . $avgNormalHrs . '" data-spreadstart="' . $spreadStart . '" data-spreadend="' . $spreadEnd . '" data-spreadduration="' . $spreadDuration . '" data-firsteighthours="' . $firstEightHours . '" data-minimumhrs="' . $minimumHrs . '" data-earlystart="' . $earlyMorningStartTime . '" data-earlyend="' . $earlyMorningEndTime . '" data-daystart="' . $dayShiftStartTime . '" data-dayend="' . $dayShiftEndTime . '" data-aftstart="' . $afternoonShiftStartTime . '" data-aftend="' . $afternoonShiftEndTime . '" data-nightstart="' . $nightShiftStartTime . '" data-nightend="' . $nightShiftEndTime . '" data-ovtsatafthrs="' . $overtimeSatAfterHrs . '" data-ovtsunafthrs="' . $overtimeSunAfterHrs . '" data-ovtafthrs="' . $overtimeAfterHrs . '"><button type="button" name="editPayruleBtn" id="editPayruleBtn" value="edit" class="editPayruleBtn btn btn-default btn-sm"><i class="glyphicon glyphicon-pencil"></i>Edit</button></td></tr>';
    }
    return $row;
}

function updatePayrunDetails($mysqli, $payrunId, $status)
{
    $up = $mysqli->prepare("UPDATE payrundetails SET status = ? WHERE payrunId = ?") or die($mysqli->error);
    $up->bind_param("si", $status, $payrunId) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    if ($nrows == '1') {
        $up->free_result();
        return true;
    } else {
        $up->free_result();
        return false;
    }
}

function getTransCodeTypesForDropDown($mysqli)
{
    $select = $mysqli->prepare("SELECT transCodeTypeId,transCodeType FROM transactioncodetype ORDER BY transCodeType ASC ") or die($mysqli->error);
    $select->execute();
    $select->bind_result($transCodeTypeId, $transCodeType) or die($mysqli->error);
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $transCodeTypeId . '">' . $transCodeType . '</option>';
    }
    return $opt;
}

function validateTransactionCode($mysqli, $transCode)
{
    $sqlchk = $mysqli->prepare("SELECT transCode FROM transactioncode WHERE transCode = ?") or die ($mysqli->error);
    $sqlchk->bind_param("i", $transCode) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function updateTransactionCodeDetails($mysqli, $transCode, $transCodeDesc, $transCodeType, $taxorder, $payslipOrder, $groupCertFormat, $printOnPaySlip, $printOnReports, $defaultPercent, $defaultAmount, $addUnitsAsHours, $autoReduceCode, $autoBillPercent, $autoBillCode, $superfundABN, $superfundSPINID, $usi, $product_name)
{
    if (!validateTransactionCode($mysqli, $transCode)) {
        $ins = $mysqli->prepare("INSERT INTO transactioncode(
                                              transCode,
                                              transCodeDesc,
                                              transCodeType,
                                              taxorder,
                                              payslipOrder,
                                              groupCertFormat,
                                              printOnPaySlip,
                                              printOnReports,
                                              defaultPercent,
                                              defaultAmount,
                                              addUnitsAsHours,
                                              autoReduceCode,
                                              autoBillPercent,
                                              autoBillCode,
                                              superfundABN,
                                              superfundSPINID,
                                              usi,
                                              product_name)
                                            VALUES(
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?)") or die($mysqli->error);
        $ins->bind_param("isisssssssssssssss", $transCode, $transCodeDesc, $transCodeType, $taxorder, $payslipOrder, $groupCertFormat, $printOnPaySlip, $printOnReports, $defaultPercent, $defaultAmount, $addUnitsAsHours, $autoReduceCode, $autoBillPercent, $autoBillCode, $superfundABN, $superfundSPINID, $usi, $product_name) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows > 0) {
            $ins->free_result();
            $statusCheck = 'inserted';
        } else {
            $statusCheck = $mysqli->error;
        }
    } else {
        $up = $mysqli->prepare("UPDATE transactioncode
                                    SET
                                      transCodeDesc = ?,
                                      transCodeType = ?,
                                      taxorder = ?,
                                      payslipOrder = ?,
                                      groupCertFormat = ?,
                                      printOnPaySlip = ?,
                                      printOnReports = ?,
                                      defaultPercent = ?,
                                      defaultAmount = ?,
                                      addUnitsAsHours = ?,
                                      autoReduceCode = ?,
                                      autoBillPercent = ?,
                                      autoBillCode = ?,
                                      superfundABN = ?,
                                      superfundSPINID = ?,
                                      usi = ?,
                                      product_name = ?
                                    WHERE transCode = ?") or die($mysqli->error);
        $up->bind_param("sisssssssssssssssi", $transCodeDesc, $transCodeType, $taxorder, $payslipOrder, $groupCertFormat, $printOnPaySlip, $printOnReports, $defaultPercent, $defaultAmount, $addUnitsAsHours, $autoReduceCode, $autoBillPercent, $autoBillCode, $superfundABN, $superfundSPINID, $usi, $product_name, $transCode) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow == '1') {
            $up->free_result();
            $statusCheck = 'updated';
        } else {
            $statusCheck = $mysqli->error;
        }
    }
    return $statusCheck;
}

function getTransactionCodesForDropdown($mysqli)
{
    $query = $mysqli->prepare("SELECT 
                                  transCode,
                                  transCodeDesc
                                FROM
                                  transactioncode") or die($mysqli->error);
    $query->execute();
    $query->store_result();
    $query->bind_result($transCode, $transCodeDesc) or die($mysqli->error);
    while ($query->fetch()) {
        $opt = $opt . '<option value="' . $transCode . '">' . $transCodeDesc . '</option>';
    }
    return $opt;
}

function validateTimesheetDetail($mysqli, $candidateId, $transCode, $jobCode, $weekendingDate)
{
    $sqlchk = $mysqli->prepare("SELECT transCode FROM timesheetdetail WHERE transCode = ? AND candidateId = ? AND jobCode = ? AND weekendingDate = ?") or die ($mysqli->error);
    $sqlchk->bind_param("isss", $transCode, $candidateId, $jobCode, $weekendingDate) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function superCheck($mysqli, $canId, $jbCode, $wkDate, $superDesc)
{
    $sql = $mysqli->prepare("SELECT transCode FROM timesheetdetail WHERE candidateId = ? AND jobCode = ? AND weekendingDate = ?") or die($mysqli->error);
    $sql->bind_param("sss", $canId, $jbCode, $wkDate) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($transCode) or die($mysqli->error);
    $status = 'NONE';
    while ($sql->fetch()) {
        $trDesc = getTransCodeDescByTransCode($mysqli, $transCode);
        if ($trDesc == $superDesc) {
            $status = $superDesc;
            break;
        }
    }
    return $status;
}

function getTimesheetDetail($mysqli, $canId, $jbCode, $wkDate)
{
    $sql = $mysqli->prepare("SELECT transCode,candidateId,jobCode,weekendingDate,clientId,positionId,transCodeAmount FROM timesheetdetail WHERE candidateId = ? AND jobCode = ? AND weekendingDate = ?") or die($mysqli->error);
    $sql->bind_param("sss", $canId, $jbCode, $wkDate) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($transCode, $candidateId, $jobCode, $weekendingDate, $clientId, $positionId, $transCodeAmount) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>' . $transCode . '</td><td>' . getTransCodeDescByTransCode($mysqli, $transCode) . '</td><td>' . $transCodeAmount . '</td><td data-jobcode="' . $jobCode . '" data-transcode="' . $transCode . '" data-candidateid="' . $candidateId . '" data-wkdate="' . $weekendingDate . '" data-transCodeAmt="' . $transCodeAmount . '"><button type="button" name="removeBtn" id="removeBtn" class="removeBtn btn btn-danger btn-sm"><i class="glyphicon glyphicon-trash"></i></button></td></tr>';
    }
    return $row;
}

function removeTimesheetDetail($mysqli, $transCode, $candidateId, $jobCode, $weekendingDate)
{
    $del = $mysqli->prepare("DELETE FROM timesheetdetail WHERE transCode = ? AND candidateId = ? AND jobCode = ? AND weekendingDate = ?") or die($mysqli->error);
    $del->bind_param("isss", $transCode, $candidateId, $jobCode, $weekendingDate) or die($mysqli->error);
    $del->execute();
    $del->free_result();
    return true;
}

function saveTimesheetDetail($mysqli, $candidateId, $transCode, $jobCode, $weekendingDate, $clientId, $positionId, $transCodeAmount)
{
    $statusCheck = '';
    if (!validateTimesheetDetail($mysqli, $candidateId, $transCode, $jobCode, $weekendingDate)) {
        $ins = $mysqli->prepare("INSERT INTO timesheetdetail(transCode,candidateId,jobCode,weekendingDate,clientId,positionId,transCodeAmount) VALUES (?,?,?,?,?,?,?)") or die($mysqli->error);
        $ins->bind_param("isssiis", $transCode, $candidateId, $jobCode, $weekendingDate, $clientId, $positionId, $transCodeAmount) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows > 0) {
            $ins->free_result();
            $statusCheck = 'inserted';
        } else {
            $statusCheck = 'error';
        }
        return $statusCheck;
    } else {
        return $statusCheck = 'exists';
    }
}

function getTransCodeList($mysqli)
{
    $query = $mysqli->prepare("SELECT 
                                  transCode,
                                  transCodeDesc,
                                  transCodeType,
                                  taxorder,
                                  payslipOrder,
                                  groupCertFormat,
                                  printOnPaySlip,
                                  printOnReports,
                                  defaultPercent,
                                  defaultAmount,
                                  addUnitsAsHours,
                                  autoReduceCode,
                                  autoBillPercent,
                                  autoBillCode,
                                  superfundABN,
                                  superfundSPINID,
                                  usi,
                                  product_name
                                FROM
                                  transactioncode") or die($mysqli->error);
    $query->execute();
    $query->store_result();
    $query->bind_result($transCode, $transCodeDesc, $transCodeType, $taxorder, $payslipOrder, $groupCertFormat, $printOnPaySlip, $printOnReports, $defaultPercent, $defaultAmount, $addUnitsAsHours, $autoReduceCode, $autoBillPercent, $autoBillCode, $superfundABN, $superfundSPINID, $usi, $product_name) or die($mysqli->error);
    $row = '';
    while ($query->fetch()) {
        $row = $row . '<tr><td>' . $transCode . '</td><td>' . $transCodeDesc . '</td><td>' . $product_name . '</td>
                        <td data-transCode="' . $transCode . '" data-transCodeDesc="' . $transCodeDesc . '" data-transCodeType="' . $transCodeType . '" data-taxorder="' . $taxorder . '" data-payslipOrder="' . $payslipOrder . '" data-groupCertFormat="' . $groupCertFormat . '" data-printOnPaySlip="' . $printOnPaySlip . '" data-printOnReports="' . $printOnReports . '" data-defaultPercent="' . $defaultPercent . '" data-defaultAmount="' . $defaultAmount . '" data-addUnitsAsHours="' . $addUnitsAsHours . '" data-autoReduceCode="' . $autoReduceCode . '" data-autoBillPercent="' . $autoBillPercent . '" data-autoBillCode="' . $autoBillCode . '" data-superfundABN="' . $superfundABN . '" data-superfundSPINID="' . $superfundSPINID . '" data-usi="' . $usi . '" data-product_name="' . $product_name . '"><button type="button" name="editTransCodeBtn" id="editTransCodeBtn" value="edit" class="editTransCodeBtn btn btn-default btn-sm"><i class="glyphicon glyphicon-pencil"></i>Edit</button><button type="button" name="removeTransCodeBtn" id="removeTransCodeBtn" value="edit" class="removeTransCodeBtn btn btn-danger btn-sm"><i class="glyphicon glyphicon-trash"></i>Remove</button></td></tr>';
    }
    return $row;
}

function removeTransactionCode($mysqli, $transCode)
{
    $del = $mysqli->prepare("DELETE FROM transactioncode WHERE transCode = ?") or die($mysqli->error);
    $del->bind_param("i", $transCode) or die($mysqli->error);
    $del->execute();
    $nr = $del->affected_rows;
    if ($nr > 0) {
        $del->free_result();
        return getTransCodeList($mysqli);
    } else {
        $del->free_result();
        return getTransCodeList($mysqli);
    }
}

function getTransCodeDescByTransCode($mysqli, $transCode)
{
    $sql = $mysqli->prepare("SELECT transCodeDesc FROM transactioncode WHERE transCode = ? ORDER BY transCodeDesc ASC") or die($mysqli->error);
    $sql->bind_param("s", $transCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->transCodeDesc;
    } else {
        return null;
    }
}

function getTransCodeDescProductNameByTransCode($mysqli, $transCode)
{
    $sql = $mysqli->prepare("SELECT transCodeDesc, product_name FROM transactioncode WHERE transCode = ? ORDER BY transCodeDesc ASC") or die($mysqli->error);
    $sql->bind_param("s", $transCode) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($transCodeDesc, $product_name) or die($mysqli->error);
    $string = '';
    while ($sql->fetch()) {
        $string = $string . $transCodeDesc . '-' . $product_name;
    }
    return $string;
}

function listAssignedSuperFund($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT candidateId,transCode FROM candidate_superfund WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId, $transCode) or die($mysqli->error);
    $sql->store_result();
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>' . getTransCodeDescProductNameByTransCode($mysqli, $transCode) . '</td><td data-candid="' . $candidateId . '" data-transCode="' . $transCode . '"><button type="button" name="removeSuperFundBtn" id="removeSuperFundBtn" value="remove" class="removeSuperFundBtn btn btn-danger btn-sm"><i class="glyphicon glyphicon-trash"></i>&nbsp;Remove</button></td></tr>';
    }
    return $row;
}

function removeSuperFundAlocation($mysqli, $candidateId, $transCode)
{
    $del = $mysqli->prepare("DELETE FROM candidate_superfund WHERE candidateId = ? AND transCode = ?") or die($mysqli->error);
    $del->bind_param("si", $candidateId, $transCode) or die($mysqli->error);
    $del->execute();
    $nr = $del->affected_rows;
    if ($nr > 0) {
        $del->free_result();
        return listAssignedSuperFund($mysqli, $candidateId);
    } else {
        $del->free_result();
        return listAssignedSuperFund($mysqli, $candidateId);
    }
}

function processSuperMemberInformation($mysqli, $candidateId, $superFundName, $memberNo,$superUSI)
{
    $up = $mysqli->prepare("UPDATE candidate SET superFundName = ?, superMemberNo = ?, superUSINo = ? WHERE candidateId = ?") or die($mysqli->error);
    $up->bind_param("ssss", $superFundName,$memberNo, $superUSI, $candidateId) or die($mysqli->error);
    $up->execute();
    $nrow = $up->affected_rows;
    if ($nrow == '1') {
        $up->free_result();
        $statusCheck = 'updated';
    } else {
        $statusCheck = $mysqli->error;
    }
    return $statusCheck;
}

function getCandidateSuperMemberInformation($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT superFundName, superMemberNo, superUSINo FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($superFundName, $superMemberNo, $superUSINo) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    while ($sql->fetch()) {
        if(!empty($superMemberNo)) {
            $dataArray[] = array('superFundName' => $superFundName, 'superMemberNo' => $superMemberNo, 'superUSINo' => $superUSINo);
        }else{
            $dataArray = array();
        }
    }
    return $dataArray;
}

function checkSuperFundAssigning($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT transCode FROM candidate_superfund WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->transCode;
    } else {
        return null;
    }
}

function assignSuperFundToCandidate($mysqli, $candidateId, $transCode)
{
    $chk = $mysqli->prepare("SELECT candidateId FROM candidate_superfund WHERE candidateId = ? AND transCode = ?") or die($mysqli->error);
    $chk->bind_param("si", $candidateId, $transCode) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        return listAssignedSuperFund($mysqli, $candidateId, $transCode);
    } else {
        $stmt = $mysqli->prepare("INSERT INTO candidate_superfund(candidateId,transCode) VALUES(?,?)") or die($mysqli->error);
        $stmt->bind_param("si", $candidateId, $transCode) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            $stmt->free_result();
            return listAssignedSuperFund($mysqli, $candidateId);
        } else {
            $stmt->free_result();
            return listAssignedSuperFund($mysqli, $candidateId);
        }
    }
}

function getAssignedCarPool($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT carPoolId FROM employee_carpool WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return getCarPoolById($mysqli, $obj->carPoolId);
    } else {
        return null;
    }
}

function getCarPoolById($mysqli, $carPoolId)
{
    $sql = $mysqli->prepare("SELECT carPoolCode FROM carpool WHERE id = ?") or die($mysqli->error);
    $sql->bind_param("i", $carPoolId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($carPoolCode) or die($mysqli->error);
    $sql->store_result();
    $carPoolCde = '';
    if ($sql->num_rows > 0) {
        while ($sql->fetch()) {
            $carPoolCde = $carPoolCode;
        }

    }
    return $carPoolCde;
}

function listAssignedCarPool($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT candidateId,carPoolId,empPoolId FROM employee_carpool WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId, $carPoolId, $empPoolId) or die($mysqli->error);
    $sql->store_result();
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>' . getCarPoolById($mysqli, $carPoolId) . '</td><td data-candid="' . $candidateId . '" data-emppoolid="' . $empPoolId . '"><button type="button" name="removeCarPoolBtn" id="removeCarPoolBtn" value="remove" class="removeCarPoolBtn btn btn-danger btn-sm"><i class="glyphicon glyphicon-trash"></i>&nbsp;Remove</button></td></tr>';
    }
    return $row;
}

function getVisaTypeById($mysqli, $visaTypeId)
{
    $sql = $mysqli->prepare("SELECT visaType FROM visatype WHERE id = ?") or die($mysqli->error);
    $sql->bind_param("i", $visaTypeId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->visaType;
    } else {
        return null;
    }
}

function listAssignedVisaType($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT candidateId,visaTypeId,empVisaTypeId,expiryDate FROM employee_visatype WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId, $visaTypeId, $empVisaTypeId, $expiryDate) or die($mysqli->error);
    $sql->store_result();
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>' . getVisaTypeById($mysqli, $visaTypeId) . '</td>
<td>';
        if($visaTypeId > 1) {
            $row = $row . '<label>' . $expiryDate . '</label>
<input type="text" name="visaExpiryDate" id="visaExpiryDate" value=""/>
<button id="visaExpBtn" name="visaExpBtn" class="btn btn-default btn-circle"><i class="glyphicon glyphicon-ok"></i>&nbsp;</button>';
        }
        $row = $row . '</td>
<td data-candid="' . $candidateId . '" data-empvisatypeid="' . $empVisaTypeId . '"><button type="button" name="removeVisaTypeBtn" id="removeVisaTypeBtn" value="remove" class="removeVisaTypeBtn btn btn-danger btn-sm"><i class="glyphicon glyphicon-trash"></i>&nbsp;Remove</button></td></tr>';
    }
    return $row;
}

function addCandidateVisaTypeAndExpiry($mysqli, $candidateId, $visaTypeId, $expDate)
{
    $chk = $mysqli->prepare("SELECT candidateId FROM employee_visatype WHERE candidateId = ?") or die($mysqli->error);
    $chk->bind_param("s", $candidateId) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        updateEmployeeVisaType($mysqli, $visaTypeId, $expDate);
    } else {
        /*if(!empty($expDate)) {*/
            $stmt = $mysqli->prepare("INSERT INTO employee_visatype(candidateId,visaTypeId,expiryDate) VALUES(?,?,?)") or die($mysqli->error);
            $stmt->bind_param("sis", $candidateId, $visaTypeId, $expDate) or die($mysqli->error);
        /*}else{
            $stmt = $mysqli->prepare("INSERT INTO employee_visatype(candidateId,visaTypeId) VALUES(?,?)") or die($mysqli->error);
            $stmt->bind_param("si", $candidateId, $visaTypeId) or die($mysqli->error);
        }*/
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'added';
        } else {
            return 'Employee visa type adding error '.$mysqli->error;
        }
    }
}

function assignVisaTypeToCandidate($mysqli, $candidateId, $visaTypeId)
{
    $chk = $mysqli->prepare("SELECT candidateId FROM employee_visatype WHERE candidateId = ?") or die($mysqli->error);
    $chk->bind_param("s", $candidateId) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        return listAssignedVisaType($mysqli, $candidateId);
    } else {
        $stmt = $mysqli->prepare("INSERT INTO employee_visatype(candidateId,visaTypeId) VALUES(?,?)") or die($mysqli->error);
        $stmt->bind_param("si", $candidateId, $visaTypeId) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            $stmt->free_result();
            return listAssignedVisaType($mysqli, $candidateId);
        } else {
            $stmt->free_result();
            return listAssignedVisaType($mysqli, $candidateId);
        }
    }
}

function updateEmployeeVisaType($mysqli, $empVisaTypeId, $visaExpDate)
{
    $up = $mysqli->prepare("UPDATE employee_visatype
                                    SET
                                      expiryDate = ?
                                    WHERE empVisaTypeId = ?") or die($mysqli->error);
    $up->bind_param("si", $visaExpDate, $empVisaTypeId) or die($mysqli->error);
    $up->execute();
    $nrow = $up->affected_rows;
    if ($nrow == '1') {
        $up->free_result();
        $statusCheck = 'updated';
    } else {
        $statusCheck = $mysqli->error;
    }
    return $statusCheck;
}

function removeVisaTypeAllocation($mysqli, $candidateId, $empVisaTypeId)
{
    $del = $mysqli->prepare("DELETE FROM employee_visatype WHERE candidateId = ? AND empVisaTypeId = ?") or die($mysqli->error);
    $del->bind_param("si", $candidateId, $empVisaTypeId) or die($mysqli->error);
    $del->execute();
    $nr = $del->affected_rows;
    if ($nr > 0) {
        $del->free_result();
        return listAssignedVisaType($mysqli, $candidateId);
    } else {
        $del->free_result();
        return listAssignedVisaType($mysqli, $candidateId);
    }
}

function assignCarPoolToCandidate($mysqli, $candidateId, $carPoolId)
{
    $chk = $mysqli->prepare("SELECT candidateId FROM employee_carpool WHERE candidateId = ?") or die($mysqli->error);
    $chk->bind_param("s", $candidateId) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        return listAssignedCarPool($mysqli, $candidateId);
    } else {
        $stmt = $mysqli->prepare("INSERT INTO employee_carpool(candidateId,carPoolId) VALUES(?,?)") or die($mysqli->error);
        $stmt->bind_param("si", $candidateId, $carPoolId) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            $stmt->free_result();
            return listAssignedCarPool($mysqli, $candidateId);
        } else {
            $stmt->free_result();
            return listAssignedCarPool($mysqli, $candidateId);
        }
    }
}

function removeCarPoolAllocation($mysqli, $candidateId, $empPoolId)
{
    $del = $mysqli->prepare("DELETE FROM employee_carpool WHERE candidateId = ? AND empPoolId = ?") or die($mysqli->error);
    $del->bind_param("si", $candidateId, $empPoolId) or die($mysqli->error);
    $del->execute();
    $nr = $del->affected_rows;
    if ($nr > 0) {
        $del->free_result();
        return listAssignedCarPool($mysqli, $candidateId);
    } else {
        $del->free_result();
        return listAssignedCarPool($mysqli, $candidateId);
    }
}

function getSuperFundTypes($mysqli)
{
    $query = $mysqli->prepare("SELECT 
  transactioncode.transCode,
  transactioncode.transCodeDesc,
  transactioncode.product_name
FROM
  transactioncode
  INNER JOIN transactioncodetype ON (transactioncode.transCodeType = transactioncodetype.transCodeTypeId)
WHERE
  transactioncodetype.transCodeType = 'Super Levy'") or die($mysqli->error);
    $query->execute();
    $query->store_result();
    $query->bind_result($transCode, $transCodeDesc, $product_name) or die($mysqli->error);
    $opt = '<option selected="selected" value="None">Select Super Fund</option>';
    while ($query->fetch()) {
        $opt = $opt . '<option value="' . $transCode . '">' . $transCodeDesc . ' - ' . $product_name . '</option>';
    }
    return $opt;
}

function getCarPoolTypes($mysqli)
{
    $query = $mysqli->prepare("SELECT id, carPoolCode FROM carpool") or die($mysqli->error);
    $query->execute();
    $query->store_result();
    $query->bind_result($id, $carPoolCode) or die($mysqli->error);
    $opt = '<option selected="selected" value="None">Select Car Pool</option>';
    while ($query->fetch()) {
        $opt = $opt . '<option value="' . $id . '">' . $carPoolCode . '</option>';
    }
    return $opt;
}

function getVisaTypes($mysqli)
{
    $query = $mysqli->prepare("SELECT id, visaType FROM visatype") or die($mysqli->error);
    $query->execute();
    $query->store_result();
    $query->bind_result($id, $visaType) or die($mysqli->error);
    $opt = '<option selected="selected" value="None">Select Visa Type</option>';
    while ($query->fetch()) {
        $opt = $opt . '<option value="' . $id . '">' . $visaType . '</option>';
    }
    return $opt;
}

/* End of Payroll Functions */
/* Tax Functions */
function validateTaxCode($mysqli, $taxCode)
{
    $sqlchk = $mysqli->prepare("SELECT taxcode FROM taxcode WHERE taxcode = ?") or die ($mysqli->error);
    $sqlchk->bind_param("i", $taxCode) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function updateTaxCode($mysqli, $taxCode, $taxCodeDesc)
{
    if (!validateTaxCode($mysqli, $taxCode)) {
        $ins = $mysqli->prepare("INSERT INTO taxcode(
                                          taxcode,
                                          taxcodeDesc)
                                        VALUES(
                                          ?,
                                          ?)") or die($mysqli->error);
        $ins->bind_param("is", $taxCode, $taxCodeDesc) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows > 0) {
            $ins->free_result();
            $statusCheck = 'inserted';
        } else {
            $statusCheck = $mysqli->error;
        }
        return $statusCheck;
    } else {
        $up = $mysqli->prepare("UPDATE taxcode
                                        SET
                                          taxcodeDesc = ?
                                        WHERE
                                          taxcode = ?") or die($mysqli->error);
        $up->bind_param("si", $taxCodeDesc, $taxCode) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow == '1') {
            $up->free_result();
            $statusCheck = 'updated';
        } else {
            $statusCheck = $mysqli->error;
        }
        return $statusCheck;
    }
}

function validateScaleRate($mysqli, $taxCode, $lessThan)
{
    $sqlchk = $mysqli->prepare("SELECT taxcode FROM weekly_scale WHERE taxcode = ? AND lessThan = ?") or die ($mysqli->error);
    $sqlchk->bind_param("is", $taxCode, $lessThan) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function addWeeklyScaleRates($mysqli, $taxCode, $lessThan, $rate, $adj)
{
    $ins = $mysqli->prepare("INSERT INTO weekly_scale(
                                          taxcode,
                                          lessThan,
                                          rate,
                                          adjustment,
                                          rateDate)
                                        VALUES(
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          NOW())") or die($mysqli->error);
    $ins->bind_param("isss", $taxCode, $lessThan, $rate, $adj) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows > 0) {
        $ins->free_result();
        $statusCheck = 'inserted';
    } else {
        $statusCheck = $mysqli->error;
    }
    return $statusCheck;
}

function updateWeeklyScaleRates($mysqli, $taxCode, $lessThan, $rate, $adj)
{
    if (validateScaleRate($mysqli, $taxCode, $lessThan)) {
        $up = $mysqli->prepare("UPDATE weekly_scale
                                        SET
                                          rate = ?,
                                          adjustment = ?,
                                          rateDate = NOW()
                                        WHERE
                                          taxcode = ?
                                        AND
                                          lessThan = ?") or die($mysqli->error);
        $up->bind_param("ssis", $rate, $adj, $taxCode, $lessThan) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow == '1') {
            $up->free_result();
            $statusCheck = 'updated';
        } else {
            $statusCheck = $mysqli->error;
        }
        return $statusCheck;
    } else {
        return addWeeklyScaleRates($mysqli, $taxCode, $lessThan, $rate, $adj);
    }
}

function getTaxCodeDescriptionByCode($mysqli, $taxCode)
{
    $sql = $mysqli->prepare("SELECT taxcodeDesc FROM taxcode WHERE taxcode = ?") or die($mysqli->error);
    $sql->bind_param("i", $taxCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->taxcodeDesc;
    } else {
        return null;
    }
}

function getTaxWeeklyScale($mysqli, $taxCode, $taxCodeDesc)
{
    $row = '<fieldset>
                <div class="row">
                    <section class="col col-3">
                    <div class="pull-left">
                        <label for="taxCode" class="input">Tax Code:
                            <input type="text" name="taxCode" id="taxCode" value="' . $taxCode . '" class="input"/>
                        </label>
                        </div>
                        <div class="pull-left"><label for="chkBtn"><div>&nbsp;</div>
                            <input tabindex="1" type="button" name="chkBtn" id="chkBtn" class="chkBtn btn btn-primary btn-square btn-sm" value="Check Tax Scale"/>
                        </label>
                        </div>
                    </section>
                </div>
                <br/>
                <div class="row">
                    <section class="col col-3">
                        <label for="taxCodeDesc" class="input" style="width: 350px;">TaxCode Description:
                            <input type="text" name="taxCodeDesc" id="taxCodeDesc" value="' . $taxCodeDesc . '" class="input"/>
                        </label>
                    </section>
                </div>
            </fieldset>
            <fieldset>
                <legend>Weekly Scale</legend>';

    $sql = $mysqli->prepare("SELECT weekly_scale.lessThan,
                                  weekly_scale.rate,
                                  weekly_scale.adjustment,
                                  weekly_scale.rateDate
                                FROM
                                  taxcode
                                  INNER JOIN weekly_scale ON (taxcode.taxcode = weekly_scale.taxcode)
                                WHERE weekly_scale.taxcode = ?
                                ORDER BY weekly_scale.lessThan ASC") or die ($mysqli->error);
    $sql->bind_param("i", $taxCode) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($lessThan, $rate, $adjustment, $rateDate) or die($mysqli->error);
    $sql->store_result();
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<div class="row">
                        <section class="col col-3">
                            <label for="" class="input">Less Than
                                <input type="text" name="lessThan[]" value="' . $lessThan . '" class="input"/>
                            </label>
                        </section>
                        <section class="col col-3">
                            <label for="" class="input">Rate
                                <input type="text" name="rate[]" value="' . $rate . '" class="input"/>
                            </label>
                        </section>
                        <section class="col col-3">
                            <label for="" class="input">Adjustment
                                <input type="text" name="adj[]" value="' . $adjustment . '" class="input"/>
                            </label>
                        </section>
                    </div>
                    <br/>';
    }
    return $row = $row . '</fieldset>';
}

function getTaxFormulaTypes($mysqli)
{
    $query = $mysqli->prepare("SELECT 
                                  taxcode,
                                  taxcodeDesc
                                FROM
                                  taxcode") or die($mysqli->error);
    $query->execute();
    $query->store_result();
    $query->bind_result($taxcode, $taxcodeDesc) or die($mysqli->error);
    $opt = '<option selected="selected" value="None">Select Tax Code</option>';
    while ($query->fetch()) {
        $opt = $opt . '<option value="' . $taxcode . '">' . $taxcodeDesc . '</option>';
    }
    return $opt;
}

function listAssignedTaxCodes($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT candidateId, taxcode FROM candidate_taxcode WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId, $taxcode) or die($mysqli->error);
    $sql->store_result();
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td class="text-center">' . getTaxCodeDescriptionByCode($mysqli, $taxcode) . '</td><td class="text-center" data-candid="' . $candidateId . '" data-taxcode="' . $taxcode . '"><button type="button" name="removeTaxCodeBtn" id="removeTaxCodeBtn" value="remove" class="removeTaxCodeBtn btn btn-danger btn-sm"><i class="glyphicon glyphicon-trash"></i>&nbsp;Remove</button></td></tr>';
    }
    return $row;
}

function getEmployeeStatus($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT empStatus FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->empStatus;
    } else {
        return null;
    }
}

function getClientStatus($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT clientStatus FROM client WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->clientStatus;
    } else {
        return null;
    }
}

function getAuditStatus($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT auditStatus FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        $auditStatus = $obj->auditStatus;
    } else {
        $auditStatus = null;
    }
    if ($auditStatus == '1') {
        return 'AUDIT COMPLETE';
    } else {
        return 'AUDIT INCOMPLETE';
    }
}

function getOHSViewedStatus($mysqli, $canId, $stateId, $deptId, $clientId)
{
    $sql = $mysqli->prepare("SELECT ohsCheckStatus FROM employee_allocation WHERE candidateId = ? AND stateId = ? AND deptId = ? AND clientId = ?") or die($mysqli->error);
    $sql->bind_param("siii", $canId, $stateId, $deptId, $clientId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->ohsCheckStatus;
    } else {
        return null;
    }
}

/*function getOHSViewedBy($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT ohsCheckedBy,ohsCheckedTime FROM employee_allocation WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($ohsCheckedBy,$ohsCheckedTime)or die($mysqli->error);
    $sql->store_result();
    $text = '';
    while($sql->fetch()){
        if(!empty($ohsCheckedBy)) {
            $text = $text .'by '. $ohsCheckedBy . ' at ' . $ohsCheckedTime;
        }
    }
    return $text;
}*/
function updateOHSViewedStatus($mysqli, $canId, $stateId, $deptId, $clientId, $status, $checkedBy)
{
    $up = $mysqli->prepare("UPDATE employee_allocation SET ohsCheckStatus = ?, ohsCheckedBy = ?, ohsCheckedTime = NOW() WHERE candidateId = ? AND stateId = ? AND deptId = ? AND clientId = ?") or die($mysqli->error);
    $up->bind_param("sssiii", $status, $checkedBy, $canId, $stateId, $deptId, $clientId) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    $status = '';
    if ($nrows == '1') {
        $status = getOHSViewedStatus($mysqli, $canId, $stateId, $deptId, $clientId);
    }
    return $status;
}

function getClientAuditStatus($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT auditStatus FROM client WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        $auditStatus = $obj->auditStatus;
    } else {
        $auditStatus = null;
    }
    if ($auditStatus == '1') {
        return 'AUDIT COMPLETE';
    } else {
        return 'AUDIT INCOMPLETE';
    }
}

function updateEmployeeStatus($mysqli, $canId, $status, $activate_note)
{
    if($status == 'INACTIVE'){
        $api_token = '';
        $up = $mysqli->prepare("UPDATE candidate SET empStatus = ?, active_inactive_reason = ?, api_token = ? WHERE candidateId = ?") or die($mysqli->error);
        $up->bind_param("ssss", $status,$activate_note,$api_token, $canId) or die($mysqli->error);
        $up->execute();
        $up->free_result();
        $uid = '';
        /*$uid_update = $mysqli->prepare("UPDATE uid_container SET uid = ? WHERE candidateId = ?") or die($mysqli->error);
        $uid_update->bind_param("ss", $uid, $canId) or die($mysqli->error);
        $uid_update->execute();*/
        $uid_delete = $mysqli->prepare("DELETE FROM uid_container WHERE candidateId = ?") or die($mysqli->error);
        $uid_delete->bind_param("s", $canId) or die($mysqli->error);
        $uid_delete->execute();
    }else {
        $up = $mysqli->prepare("UPDATE candidate SET empStatus = ?, active_inactive_reason = ? WHERE candidateId = ?") or die($mysqli->error);
        $up->bind_param("sss", $status, $activate_note, $canId) or die($mysqli->error);
        $up->execute();
    }
    return getEmployeeStatus($mysqli, $canId);
}

function updateClientStatus($mysqli, $clientId, $status, $currentUser)
{
    if ($status == 'ACTIVE') {
        if (getClientAuditStatus($mysqli, $clientId) == 'AUDIT INCOMPLETE') {
            return getClientStatus($mysqli, $clientId);
        } else {
            $up = $mysqli->prepare("UPDATE client SET clientStatus = ? WHERE clientId = ?") or die($mysqli->error);
            $up->bind_param("si", $status, $clientId) or die($mysqli->error);
            $up->execute();
            $nrows = $up->affected_rows;
            if ($nrows == '1') {
                $client = getClientNameByClientId($mysqli, $clientId);
                $accountsEmail = ACCOUNTS_EMAIL;
                $mailSubject = DOMAIN_NAME . ' - payroll client status update - ' . $client;
                $mailBody = '<span style="font-family:Arial, Verdana, Geneva, sans-serif; font-size:12pt;">Client ' . $client . ' Activated by ' . $currentUser . '</span>';
                $from = DEFAULT_EMAIL;
                $fromName = DOMAIN_NAME;
                generateNotification($accountsEmail, '', '', $mailSubject, $from, $fromName, $mailBody, '', '');
                return getClientStatus($mysqli, $clientId);
            } else {
                return getClientStatus($mysqli, $clientId);
            }
        }
    } else {
        $up = $mysqli->prepare("UPDATE client SET clientStatus = ? WHERE clientId = ?") or die($mysqli->error);
        $up->bind_param("si", $status, $clientId) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows == '1') {
            return getClientStatus($mysqli, $clientId);
        } else {
            return getClientStatus($mysqli, $clientId);
        }
    }
}

function updateAuditStatus($mysqli, $canId, $auditStatus, $chUser)
{
    if ($auditStatus == 'AUDIT COMPLETE') {
        $auditStatus = 1;
    } else {
        $auditStatus = 0;
    }
    $up = $mysqli->prepare("UPDATE candidate SET auditStatus = ? WHERE candidateId = ?") or die($mysqli->error);
    $up->bind_param("is", $auditStatus, $canId) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    if ($nrows == '1') {
        if (updateAuditLog($mysqli, $canId, $auditStatus, $chUser)) {
            return getAuditStatus($mysqli, $canId);
        } else {
            return getAuditStatus($mysqli, $canId);
        }
    } else {
        return getAuditStatus($mysqli, $canId);//return 'failure'.$nrows.$mysqli->error;
    }
}

function updateClientAuditStatus($mysqli, $clientId, $auditStatus, $chUser)
{
    $clientStatus = 'INACTIVE';
    if ($auditStatus == 'AUDIT COMPLETE') {
        $auditStatus = 1;
    } else {
        $auditStatus = 0;
    }
    $up = $mysqli->prepare("UPDATE client SET auditStatus = ?, clientStatus = ? WHERE clientId = ?") or die($mysqli->error);
    $up->bind_param("iss", $auditStatus, $clientStatus, $clientId) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    if ($nrows == '1') {
        if (updateClientAuditLog($mysqli, $clientId, $auditStatus, $chUser)) {
            return getClientAuditStatus($mysqli, $clientId);
        } else {
            return getClientAuditStatus($mysqli, $clientId);
        }
    } else {
        return getClientAuditStatus($mysqli, $clientId);
    }
}

function getActivateInactivateReason($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT active_inactive_reason FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->active_inactive_reason;
    } else {
        return null;
    }
}

function getLastAuditedPerson($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT chandlerUser,auditedTime,auditStatus FROM auditlog WHERE candidateId = ? ORDER BY auditedTime DESC LIMIT 0,1") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($chandlerUser, $auditedTime, $auditStatus) or die($mysqli->error);
    $sql->store_result();
    $text = '';
    try {
        while ($sql->fetch()) {
            $text = $chandlerUser . '@' . $auditStatus . '@' . $auditedTime;
        }
        return $text;
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function getClientLastAuditedPerson($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT chandlerUser,auditedTime,auditStatus FROM client_auditlog WHERE clientId = ? ORDER BY auditedTime DESC LIMIT 0,1") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($chandlerUser, $auditedTime, $auditStatus) or die($mysqli->error);
    $sql->store_result();
    $text = '';
    try {
        while ($sql->fetch()) {
            $text = $chandlerUser . '@' . $auditStatus . '@' . $auditedTime;
        }
        return $text;
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function updateAuditLog($mysqli, $canId, $auditStatus, $chUser)
{
    $ins = $mysqli->prepare("INSERT INTO auditlog(candidateId,auditStatus,chandlerUser)VALUES(?,?,?)") or die($mysqli->error);
    $ins->bind_param("sis", $canId, $auditStatus, $chUser) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return false;
    }
}

function updateClientAuditLog($mysqli, $clientId, $auditStatus, $chUser)
{
    $ins = $mysqli->prepare("INSERT INTO client_auditlog(clientId,auditStatus,chandlerUser)VALUES(?,?,?)") or die($mysqli->error);
    $ins->bind_param("iis", $clientId, $auditStatus, $chUser) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return false;
    }
}

function assignTaxCodeToCandidate($mysqli, $candidateId, $taxcode)
{
    $chk = $mysqli->prepare("SELECT candidateId FROM candidate_taxcode WHERE candidateId = ? AND taxcode = ?") or die($mysqli->error);
    $chk->bind_param("si", $candidateId, $taxcode) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        return listAssignedTaxCodes($mysqli, $candidateId);
    } else {
        $stmt = $mysqli->prepare("INSERT INTO candidate_taxcode(candidateId,taxcode) VALUES(?,?)") or die($mysqli->error);
        $stmt->bind_param("si", $candidateId, $taxcode) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            $stmt->free_result();
            return listAssignedTaxCodes($mysqli, $candidateId);
        } else {
            $stmt->free_result();
            return listAssignedTaxCodes($mysqli, $candidateId);
        }
    }
}

function removeTaxCodeAlocation($mysqli, $candidateId, $taxcode)
{
    $del = $mysqli->prepare("DELETE FROM candidate_taxcode WHERE candidateId = ? AND taxcode = ?") or die($mysqli->error);
    $del->bind_param("si", $candidateId, $taxcode) or die($mysqli->error);
    $del->execute();
    $nr = $del->affected_rows;
    if ($nr > 0) {
        return listAssignedTaxCodes($mysqli, $candidateId);
    } else {
        return listAssignedTaxCodes($mysqli, $candidateId);
    }

}

function validateTFNAuditCheck($mysqli, $tfn, $canId)
{
    if (!empty($tfn)) {
        $sqlchk = $mysqli->prepare("SELECT candidateId FROM candidate WHERE tfn = ?") or die ($mysqli->error);
        $sqlchk->bind_param("i", $tfn) or die($mysqli->error);
        $sqlchk->execute();
        $sqlchk->bind_result($candidateId) or die($mysqli->error);
        $sqlchk->store_result();
        //$sqlchk->fetch();
        //$num_of_rows = $sqlchk->num_rows;
        $list = '';
        //if ($num_of_rows > 1) {
        while ($sqlchk->fetch()) {
            if ($canId != $candidateId) {
                $list = $list . 'Duplicate TFN found in ' . $candidateId . '<br>';
            }
        }
        if (empty($list)) {
            return 'Duplicates not found';
        } else {
            return $list;
        }
        /*} else {
            return 'No duplicates found';
        }*/
    } else {
        return 'Duplicates not found';
    }
}

function validateTFN($mysqli, $tfn)
{
    $sqlchk = $mysqli->prepare("SELECT tfn FROM candidate WHERE tfn = ?") or die ($mysqli->error);
    $sqlchk->bind_param("i", $tfn) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function updateCandidateTFN($mysqli, $candidateId, $tfn)
{
    if (!validateTFN($mysqli, $tfn)) {
        $stmt = $mysqli->prepare("UPDATE candidate SET tfn = ? WHERE candidateId = ?") or die($mysqli->error);
        $stmt->bind_param("is", $tfn, $candidateId) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            $stmt->free_result();
            return getCandidateTFN($mysqli, $candidateId);
        } else {
            $stmt->free_result();
            return getCandidateTFN($mysqli, $candidateId);
        }
    } else {
        return 'Error TFN number exists in system !';
    }
}

function getCandidateTFN($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT tfn FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->tfn;
    } else {
        return null;
    }
}

function getEmployeeTaxCode($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT taxcode FROM candidate_taxcode WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->taxcode;
    } else {
        return null;
    }
}

function getTaxTreatmentCode($mysqli, $taxCode)
{
    $sql = $mysqli->prepare("SELECT treatment_code FROM taxcode WHERE taxcode = ?") or die($mysqli->error);
    $sql->bind_param("i", $taxCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->treatment_code;
    } else {
        return null;
    }
}

function getCalculatedWeeklyPAYG($mysqli, $candidateId, $totalPayable)
{
    $empTaxCode = getEmployeeTaxCode($mysqli, $candidateId);
    return calculateWeeklyPAYGTax($mysqli, $empTaxCode, $totalPayable);
}

function calculateWeeklyPAYGTax($mysqli, $empTaxCode, $totalPayable)
{
    $stmt = $mysqli->prepare("SELECT lessThan,rate,adjustment FROM weekly_scale WHERE taxcode = ? ORDER BY lessThan ASC") or die($mysqli->error);
    $stmt->bind_param("i", $empTaxCode) or die($mysqli->error);
    $stmt->execute();
    $stmt->bind_result($lessThan, $rate, $adjustment) or die($mysqli->error);
    $stmt->store_result();
    $x;
    $a;
    $b;
    $tax;
    $count = $stmt->num_rows;
    while ($stmt->fetch()) {
        if ($lessThan > $totalPayable) {
            $x = $totalPayable;
            $a = $rate;
            $b = $adjustment;
            break;
        }
    }
    return $tax = round(($x * $a) - $b);
}

/*function addDeductionCodes($mysqli,$canId,$trCode,$wkDate){
    $chk = $mysqli->prepare("SELECT candidateId FROM employee_deductioncode WHERE candidateId = ? AND transCode = ? AND weekendingDate = ?") or die($mysqli->error);
    $chk->bind_param("sss", $canId, $trCode, $wkDate) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        return listEmployeeDeductionCodes($mysqli, $canId,$wkDate);
    } else {
        $stmt = $mysqli->prepare("INSERT INTO employee_deductioncode(candidateId,transCode,weekendingDate) VALUES(?,?,?)") or die($mysqli->error);
        $stmt->bind_param("sss", $canId, $trCode, $wkDate) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            $stmt->free_result();
            return listEmployeeDeductionCodes($mysqli, $canId,$wkDate);
        } else {
            $stmt->free_result();
            return listEmployeeDeductionCodes($mysqli, $canId,$wkDate);
        }
    }
}
function removeEmployeeDeductionCode($mysqli,$canId, $wkDate,$id){
    $del = $mysqli->prepare("DELETE FROM employee_deductioncode WHERE id = ?") or die($mysqli->error);
    $del->bind_param("i", $id) or die($mysqli->error);
    $del->execute();
    $nr = $del->affected_rows;
    if ($nr > 0) {
        return listEmployeeDeductionCodes($mysqli, $canId, $wkDate);
    } else {
        return listEmployeeDeductionCodes($mysqli, $canId, $wkDate);
    }
}
function listEmployeeDeductionCodes($mysqli, $canId,$wkDate){
    $chk = $mysqli->prepare("SELECT id,candidateId,transCode,weekendingDate FROM employee_deductioncode WHERE candidateId = ? AND weekendingDate = ?") or die($mysqli->error);
    $chk->bind_param("ss", $canId,$wkDate) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($id,$candidateId,$transCode,$weekendingDate) or die($mysqli->error);
    $chk->store_result();
    $html = '<table class="table table-striped table-bordered table-hover"><tbody>';
    while($chk->fetch()){
        $html = $html.'<tr><td>'.getTransCodeDescByTransCode($mysqli,$transCode).'</td><td class="did" data-canid="'.$candidateId.'" data-wkdate="'.$weekendingDate.'" data-did="'.$id.'"><button type="button" name="removeTransCodeBtn" id="removeTransCodeBtn" class="removeTransCodeBtn pull-right btn btn-danger btn-sm"><i class="glyphicon glyphicon-trash"></i></button></td></tr>';
    }
    return $html = $html.'</tbody></table>';
}*/
function getEmployeeAllowances($mysqli, $candidateId, $weekendingDate, $jobCode)
{
    $transCodeType = 1;//7
    $chk = $mysqli->prepare("SELECT 
  timesheetdetail.transCode,
  transactioncode.transCodeDesc,
  transactioncode.taxorder,
  timesheetdetail.transCodeAmount
FROM
  transactioncode
  INNER JOIN timesheetdetail ON (transactioncode.transCode = timesheetdetail.transCode)
WHERE
  timesheetdetail.candidateId = ? AND 
  timesheetdetail.weekendingDate = ? AND
  transactioncode.transCodeType = ? AND
  timesheetdetail.jobCode = ?") or die($mysqli->error);
    $chk->bind_param("ssis", $candidateId, $weekendingDate, $transCodeType, $jobCode) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($transCode, $transCodeDesc, $taxorder, $transCodeAmount) or die($mysqli->error);
    $chk->store_result();
    $allowanceCodeArray = array();
    while ($chk->fetch()) {
        $allowanceCodeArray[] = array('transCode' => $transCode, 'transCodeDesc' => $transCodeDesc, 'taxorder' => $taxorder, 'transCodeAmount' => $transCodeAmount);
    }
    return $allowanceCodeArray;
}

function getEmployeeDeductions($mysqli, $candidateId, $weekendingDate, $jCode)
{
    $transCodeType = 2;
    $chk = $mysqli->prepare("SELECT 
  timesheetdetail.transCode,
  transactioncode.transCodeDesc,
  transactioncode.taxorder,
  timesheetdetail.transCodeAmount,
  timesheetdetail.jobCode
FROM
  transactioncode
  INNER JOIN timesheetdetail ON (transactioncode.transCode = timesheetdetail.transCode)
WHERE
  timesheetdetail.candidateId = ? AND 
  timesheetdetail.weekendingDate = ? AND
  transactioncode.transCodeType = ? AND
  timesheetdetail.jobCode = ?") or die($mysqli->error);
    /*SELECT
  employee_deductioncode.transCode,
  transactioncode.transCodeDesc,
  transactioncode.defaultAmount
FROM
  transactioncode
  INNER JOIN employee_deductioncode ON (transactioncode.transCode = employee_deductioncode.transCode)
WHERE
  employee_deductioncode.candidateId = ? AND
  employee_deductioncode.weekendingDate = ?*/
    $chk->bind_param("ssis", $candidateId, $weekendingDate, $transCodeType, $jCode) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($transCode, $transCodeDesc, $taxorder, $transCodeAmount, $jobCode) or die($mysqli->error);
    $chk->store_result();
    $deductCodeArray = array();
    while ($chk->fetch()) {
        $deductCodeArray[] = array('transCode' => $transCode, 'transCodeDesc' => $transCodeDesc, 'taxorder' => $taxorder, 'transCodeAmount' => $transCodeAmount, 'jobCode' => $jobCode);
    }
    return $deductCodeArray;
}

/* End of Tax Functions */
function validateProfitCentre($mysqli, $centreName, $clientId, $stateId)
{
    $sqlchk = $mysqli->prepare("SELECT centreName FROM profit_centre WHERE centreName = ? AND clientId = ? AND stateId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("sii", $centreName, $clientId, $stateId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function saveProfitCentre($mysqli, $id, $centreName, $clientId, $address1, $address2, $address3, $stateId, $phone, $manager, $taxCalc, $taxPercentage, $remittanceAddress)
{
    if (empty($id)) {
        if (!validateProfitCentre($mysqli, $centreName, $clientId, $stateId)) {
            $ins = $mysqli->prepare("INSERT INTO
                                          profit_centre(
                                          centreName,
                                          clientId,
                                          address1,
                                          address2,
                                          address3,
                                          stateId,
                                          phone,
                                          manager,
                                          taxCalc,
                                          taxPercentage,
                                          remittanceAddress)
                                        VALUES(
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?)") or die($mysqli->error);
            $ins->bind_param("sisssisssss", $centreName, $clientId, $address1, $address2, $address3, $stateId, $phone, $manager, $taxCalc, $taxPercentage, $remittanceAddress) or die($mysqli->error);
            $ins->execute();
            $nrows = $ins->affected_rows;
            if ($nrows == '1') {
                $ins->free_result();
                return 'Added';
            } else {
                $ins->free_result();
                return 'Error - ' . $mysqli->error;
            }
        }
    } else {
        $stmt = $mysqli->prepare("UPDATE
                                      profit_centre
                                    SET
                                      centreName = ?,
                                      clientId = ?,
                                      address1 = ?,
                                      address2 = ?,
                                      address3 = ?,
                                      stateId = ?,
                                      phone = ?,
                                      manager = ?,
                                      taxCalc = ?,
                                      taxPercentage = ?,
                                      remittanceAddress = ?
                                    WHERE
                                      profit_centre.id = ?") or die($mysqli->error);
        $stmt->bind_param("sisssisssssi", $centreName, $clientId, $address1, $address2, $address3, $stateId, $phone, $manager, $taxCalc, $taxPercentage, $remittanceAddress, $id) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            $stmt->free_result();
            return getProfitCentre($mysqli, $centreName);
        } else {
            $stmt->free_result();
            return getProfitCentre($mysqli, $centreName);
        }
    }
}

function getProfitCentre($mysqli, $centreName)
{
    $stmt = $mysqli->prepare("SELECT 
                                  profit_centre.id,
                                  profit_centre.centreName,
                                  profit_centre.clientId,
                                  profit_centre.address1,
                                  profit_centre.address2,
                                  profit_centre.address3,
                                  profit_centre.stateId,
                                  profit_centre.phone,
                                  profit_centre.manager,
                                  profit_centre.taxCalc,
                                  profit_centre.taxPercentage,
                                  profit_centre.remittanceAddress
                                FROM
                                  profit_centre
                                WHERE
                                  profit_centre.id = ?") or die($mysqli->error);
    $stmt->bind_param("i", $centreName) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->bind_result($id, $centreName, $clientId, $address1, $address2, $address3, $stateId, $phone, $manager, $taxCalc, $taxPercentage,
        $remittanceAddress) or die($mysqli->error);
    while ($stmt->fetch()) {
        $div = $div . '<div class="row">
                        <section class="col col-4">
                            <label for="centreName" class="input">Name:
                                    <input type="hidden" name="centreId" id="centreId" value="' . $id . '" class="pull-left" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%"/>
                                    <input type="text" name="centreName" id="centreName" value="' . $centreName . '" class="pull-left" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%"/>
                            </label>
                        </section>
                        <section class="col col-4">
                            <label for="ecentreName" class="select">Select Centre Name
                                <select name="ecentreName" id="ecentreName" class="select">
                                </select>
                            </label>
                        </section>
                        <section class="col col-4">
                            <label class="input">&nbsp;</label>
                            <button type="button" name="chkBtn" id="chkBtn" class="chkBtn btn btn-primary btn-square btn-sm"><i class="glyphicon glyphicon fa fa-search"></i>&nbsp; Check</button>
                        </section>
                    </div>
                    <div class="row">
                        <section class="col col-4">
                            <label for="clientId" class="select">
                                <select id="clientId" name="clientId" class="select">';
        $sql = $mysqli->prepare("SELECT clientId,client FROM client ORDER BY client ASC") or die($mysqli->error);
        $sql->execute();
        $sql->bind_result($clId, $client) or die($mysqli->error);
        $option = '<option value="All">All</option>';
        while ($sql->fetch()) {
            $option = $option . '<option value="' . $clId . '"';
            if ($clId == $clientId) {
                $option = $option . ' selected';
            }
            $option = $option . '>' . $client . '</option>';
        }
        $div = $div . $option;
        $div = $div . '</select>
                            </label>
                        </section>
                    </div>
                    <div class="row">
                        <section class="col col-4">
                            <label for="address1" class="input">Address 1:
                                <input type="text" name="address1" id="address1" value="' . $address1 . '" class="pull-left" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%"/>
                            </label>
                        </section>
                    </div>
                    <div class="row">
                        <section class="col col-4">
                            <label for="address2" class="input">Address 2:
                                <input type="text" name="address2" id="address2" value="' . $address2 . '" class="pull-left" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%"/>
                            </label>
                        </section>
                    </div>
                    <div class="row">
                        <section class="col col-4">
                            <label for="address3" class="input">Address 3:
                                <input type="text" name="address3" id="address3" value="' . $address2 . '" class="pull-left" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%"/>
                            </label>
                        </section>
                    </div>
                    <div class="row">
                        <section class="col col-4">
                            <label for="state" class="select">State:
                                <select id="stateId" name="stateId" class="select">';
        $sqlSt = $mysqli->prepare("SELECT DISTINCT stateId FROM department WHERE clientId = ?") or die($mysqli->error);
        $sqlSt->bind_param("i", $clientId) or die($mysqli->error);
        $sqlSt->execute();
        $sqlSt->bind_result($stId) or die($mysqli->error);
        $sqlSt->store_result();
        $numRows = $sqlSt->num_rows;
        if ($numRows <> 0) {
            while ($sqlSt->fetch()) {
                $option2 = $option2 . '<option value="' . $stId . '"';
                if ($stId == $stateId) {
                    $option2 = $option2 . 'selected';
                }
                $option2 = $option2 . '>' . getStateById($mysqli, $stId) . '</option>';
            }
        } else {
            $option2 = $option2 . '<option value="0">None</option>';
        }
        $div = $div . $option2;
        $div = $div . '</select>
                            </label>
                        </section>
                        <section class="col col-4">
                            <label for="phone" class="input">Phone:
                                <input type="text" name="phone" id="phone" value="' . $phone . '" class="pull-left" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%"/>
                            </label>
                        </section>
                    </div>
                    <div class="row">
                        <section class="col col-4">
                            <label for="manager" class="input">Manager:
                                <input type="text" name="manager" id="manager" value="' . $manager . '" class="pull-left" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%"/>
                            </label>
                        </section>
                    </div>
                    <div class="row">
                        <section class="col col-4">
                            <label for="taxCalc" class="input">Payroll Tax Calc:
                                <input type="text" name="taxCalc" id="taxCalc" value="' . $taxCalc . '" class="pull-left" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%"/>
                            </label>
                        </section>
                        <section class="col col-4">
                            <label for="taxPercentage" class="input">Payroll Tax %:
                                <input type="text" name="taxPercentage" id="taxPercentage" value="' . $taxPercentage . '" class="pull-left" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%"/>
                            </label>
                        </section>
                    </div>
                    <div class="row">
                        <section class="col col-4">
                            <label for="remittanceAddress">Invoice Remittance Address:
                                <textarea id="remittanceAddress" name="remittanceAddress" rows="10" style="width: 100%" class="textarea">' . $remittanceAddress . '</textarea>
                            </label>
                        </section>
                    </div>
                    <div class="row">
                        <section class="col col-4">
                            <label for="saveBtn">
                                <button type="reset" name="resetBtn" id="resetBtn" class="resetBtn btn btn-primary btn-square btn-sm"><i class="glyphicon glyphicon fa fa-eraser"></i>&nbsp; Reset</button>
                                <button name="saveBtn" id="saveBtn" class="saveBtn btn btn-primary btn-square btn-sm"><i class="glyphicon glyphicon fa fa-save"></i>&nbsp; Save</button>
                            </label>
                        </section>
                    </div>';
    }
    return $div;
}

function getProfitCentres($mysqli)
{
    $sql = $mysqli->prepare("SELECT id, centreName FROM profit_centre") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($id, $centreName) or die($mysqli->error);
    $opt = $opt . '<option value="0">None</option>';
    while ($sql->fetch()) {
        $opt = $opt . '<option value="' . $id . '">' . $centreName . '</option>';
    }
    return $opt;
}

function getPayrollNames($mysqli)
{
    $sql = $mysqli->prepare("SELECT id,payrollName FROM payroll_name_detail") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($id, $payrollName) or die($mysqli->error);
    while ($sql->fetch()) {
        $opt = $opt . '<option value="' . $id . '">' . $payrollName . '</option>';
    }
    return $opt;
}

function getPayrollNameById($mysqli, $id)
{
    $sql = $mysqli->prepare("SELECT payrollName FROM payroll_name_detail WHERE id = ?") or die($mysqli->error);
    $sql->bind_param("i", $id) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payrollName;
    } else {
        return null;
    }
}

/* Payrun and Payslip Functions */
function genPayrunId($mysqli, $payrollName, $invoiceDate)
{
    $sql = $mysqli->prepare("INSERT INTO payrun(payrollName,invoiceDate) VALUES(?,?)") or die($mysqli->error);
    $sql->bind_param("ss", $payrollName, $invoiceDate) or die($mysqli->error);
    $sql->execute();
    return $sql->insert_id;
}

function savePayRun($mysqli, $payRunId, $weekendingDate, $candidateId, $clientId, $positionId, $category, $itemType, $jobCode, $transCode, $units, $rate, $amount, $chargeRate, $chargeAmount, $gross, $net, $paygTax, $deduction, $superAnnuation)
{
    $ins = $mysqli->prepare("INSERT INTO payrundetails(
                                          payrunId,
                                          weekendingDate,
                                          candidateId,
                                          clientId,
                                          positionId,
                                          category,
                                          itemType,
                                          jobCode,
                                          transCode,
                                          units,
                                          rate,
                                          amount,
                                          chargeRate,
                                          chargeAmount,
                                          gross,
                                          net,
                                          paygTax,
                                          deduction,
                                          superAnnuation)
                                        VALUES(
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?)") or die($mysqli->error);
    $ins->bind_param("issiisissssssssssss", $payRunId, $weekendingDate, $candidateId, $clientId, $positionId, $category, $itemType, $jobCode, $transCode, $units, $rate, $amount, $chargeRate, $chargeAmount, $gross, $net, $paygTax, $deduction, $superAnnuation) or die($mysqli->error);
    $ins->execute();
    return $mysqli->error;
}

function getPayrunDataById($mysqli, $runId, $category)
{
    /* $status = 'CLOSED';*/
    $sql = $mysqli->prepare("SELECT 
                              payrundetails.payrunId,
                              payrundetails.weekendingDate,
                              payrundetails.candidateId,
                              payrundetails.net
                            FROM
                              payrundetails
                            WHERE
                              payrundetails.payrunId = ?
                            AND  
                              payrundetails.category = ?
                            ") or die($mysqli->error);//  AND  payrundetails.status != ?
    $sql->bind_param("is", $runId, $category) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($payrunId, $weekendingDate, $candidateId, $net);
    $payrunArray = array();
    while ($sql->fetch()) {
        $payrunArray[] = array('payrunId' => $payrunId, 'weekendingDate' => $weekendingDate, 'candidateId' => $candidateId, 'net' => $net);
    }
    return $payrunArray;
}

function getPayRunDates($mysqli)
{
    $select = $mysqli->prepare("SELECT DISTINCT payrunId,weekendingDate FROM payrundetails ORDER BY payrunId DESC") or die($mysqli->error);
    $select->execute();
    $select->bind_result($payrunId, $weekendingDate) or die($mysqli->error);
    $opt = '';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $payrunId . '|' . $weekendingDate . '">' . $payrunId . ' ' . $weekendingDate . '</option>';
    }
    return $opt;
}

function validatePayReversal($mysqli, $weekendingDate, $payRunId, $candidateId)
{
    $select = $mysqli->prepare("SELECT id FROM payrundetails WHERE candidateId = ? AND weekendingDate = ? AND payrunId = ? AND payReversalDate IS NOT NULL ORDER BY candidateId ASC") or die($mysqli->error);
    $select->bind_param("ssi", $candidateId, $weekendingDate, $payRunId) or die($mysqli->error);
    $select->execute();
    $select->bind_result($id) or die($mysqli->error);
    $select->store_result();
    $numRows = $select->num_rows();
    if ($numRows > 0) {
        return true;
    } else {
        return false;
    }
}

function processPayReversal($mysqli, $weekendingDate, $payRunId, $candidateId, $payReversalDate, $reversedBy)
{
    if (!validatePayReversal($mysqli, $weekendingDate, $payRunId, $candidateId)) {
        $select = $mysqli->prepare("SELECT id,clientId,positionId,category,itemType,jobCode,transCode,units,rate,amount,chargeRate,chargeAmount,gross,net,paygTax,deduction,superAnnuation FROM payrundetails WHERE candidateId = ? AND weekendingDate = ? AND payrunId = ? AND payReversalDate IS NULL ORDER BY candidateId ASC") or die($mysqli->error);
        $select->bind_param("ssi", $candidateId, $weekendingDate, $payRunId) or die($mysqli->error);
        $select->execute();
        $select->bind_result($id, $clientId, $positionId, $category, $itemType, $jobCode, $transCode, $units, $rate, $amount, $chargeRate, $chargeAmount, $gross, $net, $paygTax, $deduction, $superAnnuation) or die($mysqli->error);
        $resultsArray = array();
        while ($select->fetch()) {
            $resultsArray[] = array('id' => $id, 'clientId' => $clientId, 'positionId' => $positionId, 'category' => $category, 'itemType' => $itemType, 'jobCode' => $jobCode, 'transCode' => $transCode, 'units' => $units, 'rate' => $rate, 'amount' => $amount, 'chargeRate' => $chargeRate, 'chargeAmount' => $chargeAmount, 'gross' => $gross, 'net' => $net, 'paygTax' => $paygTax, 'deduction' => $deduction, 'superAnnuation' => $superAnnuation);
        }
        $statusCheck = '';
        if (!empty($resultsArray)) {
            $ins = $mysqli->prepare("INSERT INTO payrundetails(payrunId,
                                              weekendingDate,
                                              candidateId,
                                              clientId,
                                              positionId,
                                              category,
                                              itemType,
                                              jobCode,
                                              transCode,
                                              units,
                                              rate,
                                              amount,
                                              chargeRate,
                                              chargeAmount,
                                              gross,
                                              net,
                                              paygTax,
                                              deduction,
                                              superAnnuation,
                                              payReversalDate,
                                              reversedBy)
                                            VALUES(
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?,
                                              ?)") or die($mysqli->error);
            foreach ($resultsArray as $data) {
                $exClientId = $data['clientId'];
                $exPositionId = $data['positionId'];
                $exCategory = $data['category'];
                $exItemType = $data['itemType'];
                $exJobCode = $data['jobCode'];
                $exTransCode = $data['transCode'];
                $exUnits = $data['units'];
                $exRate = $data['rate'];
                $exAmount = $data['amount'] * -1;
                $exChargeRate = $data['chargeRate'];
                $exChargeAmount = $data['chargeAmount'] * -1;
                $exGross = $data['gross'] * -1;
                $exNet = $data['net'] * -1;
                $exPaygTax = $data['paygTax'] * -1;
                $exDeduction = $data['deduction'] * -1;
                $exSuperAnnuation = $data['superAnnuation'] * -1;

                $ins->bind_param("issiissssssssssssssss", $payRunId, $weekendingDate, $candidateId, $exClientId, $exPositionId, $exCategory, $exItemType, $exJobCode, $exTransCode, $exUnits, $exRate, $exAmount, $exChargeRate, $exChargeAmount, $exGross, $exNet, $exPaygTax, $exDeduction, $exSuperAnnuation, $payReversalDate, $reversedBy) or die($mysqli->error);
                if ($ins->execute()) {
                    $statusCheck = 'updated';
                } else {
                    $statusCheck = $mysqli->error;
                }
            }
            return $statusCheck;
        } else {
            return $statusCheck = 'No records found to update';
        }
    } else {
        return $statusCheck = 'Already reversed';
    }
}

function getPayrunCategorywiseSum($mysqli, $startDate, $endDate, $category, $field)
{
    $chk = $mysqli->prepare("SELECT 
                              SUM(payrundetails.{$field}) AS total
                            FROM
                              payrundetails
                            WHERE
                              payrundetails.weekendingDate BETWEEN ? AND ? AND
                              payrundetails.category = ?
                            GROUP BY
                              payrundetails.category") or die($mysqli->error);
    $chk->bind_param("sss", $startDate, $endDate, $category) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($total) or die($mysqli->error);
    $chk->store_result();
    $dataArray = array();
    while ($chk->fetch()) {
        $dataArray[] = array('category' => $category, 'amount' => $total);
    }
    return $dataArray;
}

function getCategoriesForPayrunDataByDate($mysqli, $startDate, $endDate)
{
    $chk = $mysqli->prepare("SELECT DISTINCT
                              payrundetails.category,
                              payrundetails.itemType
                            FROM
                              payrundetails
                            WHERE
                              payrundetails.weekendingDate BETWEEN ? AND ?
                            ORDER BY
                              payrundetails.itemType ASC") or die($mysqli->error);
    $chk->bind_param("ss", $startDate, $endDate) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($category, $itemType) or die($mysqli->error);
    $chk->store_result();
    $dataArray = array();
    while ($chk->fetch()) {
        $dataArray[] = array('category' => $category);
    }
    return $dataArray;
}

function getTaxOrderBasedOnTransactionCode($mysqli, $transCode)
{
    $sql = $mysqli->prepare("SELECT taxorder FROM transactioncode WHERE transCode = ?") or die($mysqli->error);
    $sql->bind_param("i", $transCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->taxorder;
    } else {
        return null;
    }
}

function getPayrunDataByDates($mysqli, $startDate, $endDate, $clId, $state)
{
    $status = 'CLOSED';
    if ($state != 'None') {
        $chk = $mysqli->prepare("SELECT 
              payrundetails.weekendingDate,
              payrundetails.candidateId,
              payrundetails.clientId,
              payrundetails.category,
              payrundetails.itemType,
              payrundetails.jobCode,
              payrundetails.transCode,
              payrundetails.units,
              payrundetails.rate,
              payrundetails.amount,
              payrundetails.chargeRate,
              payrundetails.chargeAmount,
              payrundetails.gross,
              payrundetails.net,
              payrundetails.paygTax,
              payrundetails.deduction,
              payrundetails.superAnnuation
            FROM
              payrundetails
              INNER JOIN client ON (payrundetails.clientId = client.clientId)
            WHERE
              payrundetails.weekendingDate BETWEEN ? AND ? AND
                    payrundetails.status = ? AND
                    client.state = ?
            ORDER BY
              payrundetails.itemType") or die($mysqli->error);
        $chk->bind_param("ssss", $startDate, $endDate, $status, $state) or die($mysqli->error);
    } elseif (($clId == 'None') || ($clId == 0) || ($clId == '')) {
        $chk = $mysqli->prepare("SELECT 
                              payrundetails.weekendingDate,
                              payrundetails.candidateId,
                              payrundetails.clientId,
                              payrundetails.category,
                              payrundetails.itemType,
                              payrundetails.jobCode,
                              payrundetails.transCode,
                              payrundetails.units,
                              payrundetails.rate,
                              payrundetails.amount,
                              payrundetails.chargeRate,
                              payrundetails.chargeAmount,
                              payrundetails.gross,
                              payrundetails.net,
                              payrundetails.paygTax,
                              payrundetails.deduction,
                              payrundetails.superAnnuation
                            FROM
                              payrundetails
                            WHERE
                              payrundetails.weekendingDate BETWEEN ? AND ? AND
                              payrundetails.status = ?
                            ORDER BY
                              payrundetails.itemType ASC") or die($mysqli->error);
        $chk->bind_param("sss", $startDate, $endDate, $status) or die($mysqli->error);
    } else {
        $chk = $mysqli->prepare("SELECT 
                              payrundetails.weekendingDate,
                              payrundetails.candidateId,
                              payrundetails.clientId,
                              payrundetails.category,
                              payrundetails.itemType,
                              payrundetails.jobCode,
                              payrundetails.transCode,
                              payrundetails.units,
                              payrundetails.rate,
                              payrundetails.amount,
                              payrundetails.chargeRate,
                              payrundetails.chargeAmount,
                              payrundetails.gross,
                              payrundetails.net,
                              payrundetails.paygTax,
                              payrundetails.deduction,
                              payrundetails.superAnnuation
                            FROM
                              payrundetails
                            WHERE
                              payrundetails.weekendingDate BETWEEN ? AND ? AND
                              payrundetails.clientId = ? AND
                              payrundetails.status = ?
                            ORDER BY
                              payrundetails.itemType ASC") or die($mysqli->error);
        $chk->bind_param("ssis", $startDate, $endDate, $clId, $status) or die($mysqli->error);
    }
    $chk->execute();
    $chk->bind_result($weekendingDate, $candidateId, $clientId, $category, $itemType, $jobCode, $transCode, $units, $rate, $amount, $chargeRate, $chargeAmount, $gross, $net, $paygTax, $deduction, $superAnnuation) or die($mysqli->error);
    $chk->store_result();
    $dataArray = array();
    while ($chk->fetch()) {
        $dataArray[] = array('candidateId' => $candidateId, 'weekendingDate' => $weekendingDate, 'clientId' => $clientId, 'category' => $category, 'itemType' => $itemType, 'jobCode' => $jobCode, 'transCode' => $transCode, 'units' => $units, 'rate' => $rate, 'amount' => $amount, 'chargeRate' => $chargeRate, 'chargeAmount' => $chargeAmount, 'gross' => $gross, 'net' => $net, 'paygTax' => $paygTax, 'deduction' => $deduction, 'superAnnuation' => $superAnnuation);
    }
    return $dataArray;
}

function getPayrunDataByDateRange($mysqli, $wkDateStart, $wkDateEnd)
{
    $chk = $mysqli->prepare("SELECT DISTINCT 
                                  payrundetails.candidateId
                                FROM
                                  payrundetails
                                WHERE
                                  payrundetails.weekendingDate BETWEEN ? AND ?
                                ORDER BY
                                  payrundetails.candidateId ASC") or die($mysqli->error);
    $chk->bind_param("ss", $wkDateStart, $wkDateEnd) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($candidateId) or die($mysqli->error);
    $chk->store_result();
    $dataArray = array();
    while ($chk->fetch()) {
        $dataArray[] = array('candidateId' => $candidateId);
    }
    return $dataArray;
}

function getPayrunDataByEmployeeForRange($mysqli, $empId, $wkendDateStart, $wkendDateEnd)
{
    $status = 'CLOSED';
    $chk = $mysqli->prepare("SELECT 
                                  payrundetails.payrunId,
                                  payrundetails.weekendingDate,
                                  payrundetails.candidateId,
                                  payrundetails.clientId,
                                  payrundetails.positionId,
                                  payrundetails.category,
                                  payrundetails.itemType,
                                  payrundetails.jobCode,
                                  payrundetails.transCode,
                                  payrundetails.units,
                                  payrundetails.rate,
                                  payrundetails.amount,
                                  payrundetails.chargeRate,
                                  payrundetails.chargeAmount,
                                  payrundetails.gross,
                                  payrundetails.net,
                                  payrundetails.paygTax,
                                  payrundetails.deduction,
                                  payrundetails.superAnnuation
                                FROM
                                  payrundetails
                                WHERE
                                  payrundetails.candidateId = ?
                                AND  
                                  payrundetails.weekendingDate BETWEEN ? AND ? AND
                                  payrundetails.status = ?
                                ORDER BY
                                  payrundetails.weekendingDate,
                                  payrundetails.candidateId,
                                  payrundetails.itemType ASC") or die($mysqli->error);
    $chk->bind_param("ssss", $empId, $wkendDateStart, $wkendDateEnd, $status) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($payrunId, $weekendingDate, $candidateId, $clientId, $positionId, $category, $itemType, $jobCode, $transCode, $units, $rate, $amount, $chargeRate, $chargeAmount, $gross, $net, $paygTax, $deduction, $superAnnuation) or die($mysqli->error);
    $chk->store_result();
    $dataArray = array();
    while ($chk->fetch()) {
        $dataArray[] = array('payrunId' => $payrunId, 'weekendingDate' => $weekendingDate, 'candidateId' => $candidateId, 'clientId' => $clientId, 'positionId' => $positionId, 'category' => $category, 'itemType' => $itemType, 'jobcode' => $jobCode, 'transCode' => $transCode, 'units' => $units, 'rate' => $rate, 'amount' => $amount, 'chargeRate' => $chargeRate, 'chargeAmount' => $chargeAmount, 'gross' => $gross, 'net' => $net, 'paygTax' => $paygTax, 'deduction' => $deduction, 'super' => $superAnnuation);
    }
    return $dataArray;
}

function getAmendedPayrunDataForPayg($mysqli, $startDate, $endDate)
{
    $status = 'CLOSED';
    $runids = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
    $payrunid = join("','", $runids);
    $chk = $mysqli->prepare("SELECT 
                              payrundetails.weekendingDate,
                              payrundetails.candidateId,
                              payrundetails.clientId,
                              payrundetails.category,
                              payrundetails.itemType,
                              payrundetails.jobCode,
                              payrundetails.transCode,
                              payrundetails.units,
                              payrundetails.rate,
                              payrundetails.amount,
                              payrundetails.chargeRate,
                              payrundetails.chargeAmount,
                              payrundetails.gross,
                              payrundetails.net,
                              payrundetails.paygTax,
                              payrundetails.deduction,
                              payrundetails.superAnnuation
                            FROM
                              payrundetails
                            WHERE
                              payrundetails.weekendingDate BETWEEN ? AND ? AND
                              payrundetails.status = ? AND 
                              payrundetails.payrunId NOT IN (?) AND
                              payrundetails.candidateId IN ('CHERRY0000000042','CHERRY0000000048','CHERRY0000000071','CHERRY0000000072','CHERRY0000000075','CHERRY0000000078','CHERRY0000000095','CHERRY0000000118','CHERRY0000000124','CHERRY0000000143')
                            ORDER BY
                              payrundetails.candidateId,payrundetails.category ASC") or die($mysqli->error);
    $chk->bind_param("sssi", $startDate, $endDate, $status, $payrunid) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($weekendingDate, $candidateId, $clientId, $category, $itemType, $jobCode, $transCode, $units, $rate, $amount, $chargeRate, $chargeAmount, $gross, $net, $paygTax, $deduction, $superAnnuation) or die($mysqli->error);
    $chk->store_result();
    $dataArray = array();
    $numRows = $chk->num_rows;
    while ($chk->fetch()) {
        $dataArray[] = array('candidateId' => $candidateId, 'weekendingDate' => $weekendingDate, 'clientId' => $clientId, 'category' => $category, 'itemType' => $itemType, 'jobCode' => $jobCode, 'transCode' => $transCode, 'units' => $units, 'rate' => $rate, 'amount' => $amount, 'chargeRate' => $chargeRate, 'chargeAmount' => $chargeAmount, 'gross' => $gross, 'net' => $net, 'paygTax' => $paygTax, 'deduction' => $deduction, 'superAnnuation' => $superAnnuation);
    }
    return $dataArray;
}

function getPayrunDataForPayg($mysqli, $startDate, $endDate, $clientId)
{
    $status = 'CLOSED';
    if (($clientId == 'None') || ($clientId == 0) || ($clientId == '')) {
        $chk = $mysqli->prepare("SELECT 
                              payrundetails.weekendingDate,
                              payrundetails.candidateId,
                              payrundetails.clientId,
                              payrundetails.category,
                              payrundetails.itemType,
                              payrundetails.jobCode,
                              payrundetails.transCode,
                              payrundetails.units,
                              payrundetails.rate,
                              payrundetails.amount,
                              payrundetails.chargeRate,
                              payrundetails.chargeAmount,
                              payrundetails.gross,
                              payrundetails.net,
                              payrundetails.paygTax,
                              payrundetails.deduction,
                              payrundetails.superAnnuation
                            FROM
                              payrundetails
                            WHERE
                              payrundetails.weekendingDate BETWEEN ? AND ? AND
                              payrundetails.status = ?
                            ORDER BY
                              payrundetails.candidateId,payrundetails.category ASC") or die($mysqli->error);
        $chk->bind_param("sss", $startDate, $endDate, $status) or die($mysqli->error);
    } else {
        $chk = $mysqli->prepare("SELECT 
                              payrundetails.weekendingDate,
                              payrundetails.candidateId,
                              payrundetails.clientId,
                              payrundetails.category,
                              payrundetails.itemType,
                              payrundetails.jobCode,
                              payrundetails.transCode,
                              payrundetails.units,
                              payrundetails.rate,
                              payrundetails.amount,
                              payrundetails.chargeRate,
                              payrundetails.chargeAmount,
                              payrundetails.gross,
                              payrundetails.net,
                              payrundetails.paygTax,
                              payrundetails.deduction,
                              payrundetails.superAnnuation
                            FROM
                              payrundetails
                            WHERE
                              payrundetails.weekendingDate BETWEEN ? AND ? AND
                              payrundetails.clientId = ?  AND
                              payrundetails.status = ?
                            ORDER BY
                              payrundetails.candidateId,payrundetails.category ASC") or die($mysqli->error);
        $chk->bind_param("ssis", $startDate, $endDate, $clientId, $status) or die($mysqli->error);
    }
    $chk->execute();
    $chk->bind_result($weekendingDate, $candidateId, $clientId, $category, $itemType, $jobCode, $transCode, $units, $rate, $amount, $chargeRate, $chargeAmount, $gross, $net, $paygTax, $deduction, $superAnnuation) or die($mysqli->error);
    $chk->store_result();
    $dataArray = array();
    while ($chk->fetch()) {
        $dataArray[] = array('candidateId' => $candidateId, 'weekendingDate' => $weekendingDate, 'clientId' => $clientId, 'category' => $category, 'itemType' => $itemType, 'jobCode' => $jobCode, 'transCode' => $transCode, 'units' => $units, 'rate' => $rate, 'amount' => $amount, 'chargeRate' => $chargeRate, 'chargeAmount' => $chargeAmount, 'gross' => $gross, 'net' => $net, 'paygTax' => $paygTax, 'deduction' => $deduction, 'superAnnuation' => $superAnnuation);
    }
    return $dataArray;
}

function getPayrunDataForPaygExcel($mysqli, $startDate, $endDate, $clientId)
{
    $status = 'CLOSED';
    $runids = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
    $payrunid = join("','", $runids);
    if (($clientId == 'None') || ($clientId == 0) || ($clientId == '')) {
        $chk = $mysqli->prepare("SELECT 
                              payrundetails.weekendingDate,
                              payrundetails.candidateId,
                              payrundetails.clientId,
                              payrundetails.category,
                              payrundetails.itemType,
                              payrundetails.jobCode,
                              payrundetails.transCode,
                              payrundetails.units,
                              payrundetails.rate,
                              payrundetails.amount,
                              payrundetails.chargeRate,
                              payrundetails.chargeAmount,
                              payrundetails.gross,
                              payrundetails.net,
                              payrundetails.paygTax,
                              payrundetails.deduction,
                              payrundetails.superAnnuation
                            FROM
                              payrundetails
                            WHERE
                              payrundetails.weekendingDate BETWEEN ? AND ? AND
                              payrundetails.status = ?
                            ORDER BY
                              payrundetails.candidateId,payrundetails.category ASC") or die($mysqli->error);
        $chk->bind_param("sss", $startDate, $endDate, $status) or die($mysqli->error);
    } else {
        $chk = $mysqli->prepare("SELECT 
                              payrundetails.weekendingDate,
                              payrundetails.candidateId,
                              payrundetails.clientId,
                              payrundetails.category,
                              payrundetails.itemType,
                              payrundetails.jobCode,
                              payrundetails.transCode,
                              payrundetails.units,
                              payrundetails.rate,
                              payrundetails.amount,
                              payrundetails.chargeRate,
                              payrundetails.chargeAmount,
                              payrundetails.gross,
                              payrundetails.net,
                              payrundetails.paygTax,
                              payrundetails.deduction,
                              payrundetails.superAnnuation
                            FROM
                              payrundetails
                            WHERE
                              payrundetails.weekendingDate BETWEEN ? AND ? AND
                              payrundetails.clientId = ?  AND
                              payrundetails.status = ?
                            ORDER BY
                              payrundetails.candidateId,payrundetails.category ASC") or die($mysqli->error);
        $chk->bind_param("ssis", $startDate, $endDate, $clientId, $status) or die($mysqli->error);
    }
    $chk->execute();
    $chk->bind_result($weekendingDate, $candidateId, $clientId, $category, $itemType, $jobCode, $transCode, $units, $rate, $amount, $chargeRate, $chargeAmount, $gross, $net, $paygTax, $deduction, $superAnnuation) or die($mysqli->error);
    $chk->store_result();
    $dataArray = array();
    while ($chk->fetch()) {
        $dataArray[] = array('candidateId' => $candidateId, 'weekendingDate' => $weekendingDate, 'clientId' => $clientId, 'category' => $category, 'itemType' => $itemType, 'jobCode' => $jobCode, 'transCode' => $transCode, 'units' => $units, 'rate' => $rate, 'amount' => $amount, 'chargeRate' => $chargeRate, 'chargeAmount' => $chargeAmount, 'gross' => $gross, 'net' => $net, 'paygTax' => $paygTax, 'deduction' => $deduction, 'superAnnuation' => $superAnnuation);
    }
    return $dataArray;
}

function getPayrunDataByDate($mysqli, $wkDate, $payrunId)
{
    $chk = $mysqli->prepare("SELECT DISTINCT 
                                  payrundetails.candidateId
                                FROM
                                  payrundetails
                                WHERE
                                  payrundetails.weekendingDate = ?
                                AND
                                  payrundetails.payrunId = ?
                                ORDER BY
                                  payrundetails.candidateId ASC") or die($mysqli->error);
    $chk->bind_param("si", $wkDate, $payrunId) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($candidateId) or die($mysqli->error);
    $chk->store_result();
    $dataArray = array();
    while ($chk->fetch()) {
        $dataArray[] = array('candidateId' => $candidateId);
    }
    return $dataArray;
}

function getPayrunTotalGrossByWeekending($mysqli, $wkendDate, $runId)
{
    $chk = $mysqli->prepare("SELECT                                 
                                  payrundetails.gross
                                FROM
                                  payrundetails
                                WHERE
                                  payrundetails.weekendingDate = ?
                                AND 
                                  payrundetails.payrunId = ?
                                AND  
                                  payrundetails.gross <> 0") or die($mysqli->error);
    $chk->bind_param("si", $wkendDate, $runId) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($gross) or die($mysqli->error);
    $chk->store_result();
    $totalGross = 0;
    while ($chk->fetch()) {
        $totalGross = $totalGross + $gross;
    }
    return $totalGross;
}

function getPayrunTotalPaygTaxByWeekending($mysqli, $wkendDate, $runId)
{
    $chk = $mysqli->prepare("SELECT                                 
                                  payrundetails.paygTax
                                FROM
                                  payrundetails
                                WHERE
                                  payrundetails.weekendingDate = ?
                                AND 
                                  payrundetails.payrunId = ?
                                AND  
                                  payrundetails.paygTax <> 0") or die($mysqli->error);
    $chk->bind_param("si", $wkendDate, $runId) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($paygTax) or die($mysqli->error);
    $chk->store_result();
    $totalPaygTax = 0;
    while ($chk->fetch()) {
        $totalPaygTax = $totalPaygTax + $paygTax;
    }
    return $totalPaygTax;
}

function getPayrunDataByEmployee($mysqli, $empId, $wkendDate, $runId)
{
    $chk = $mysqli->prepare("SELECT 
                                  payrundetails.payrunId,
                                  payrundetails.weekendingDate,
                                  payrundetails.candidateId,
                                  payrundetails.clientId,
                                  payrundetails.positionId,
                                  payrundetails.category,
                                  payrundetails.itemType,
                                  payrundetails.jobCode,
                                  payrundetails.transCode,
                                  payrundetails.units,
                                  payrundetails.rate,
                                  payrundetails.amount,
                                  payrundetails.chargeRate,
                                  payrundetails.chargeAmount,
                                  payrundetails.gross,
                                  payrundetails.net,
                                  payrundetails.paygTax,
                                  payrundetails.deduction,
                                  payrundetails.superAnnuation
                                FROM
                                  payrundetails
                                WHERE
                                  payrundetails.candidateId = ?
                                AND  
                                  payrundetails.weekendingDate = ?
                                AND 
                                  payrundetails.payrunId = ?
                                ORDER BY
                                  payrundetails.weekendingDate,
                                  payrundetails.candidateId,
                                  payrundetails.itemType ASC") or die($mysqli->error);
    $chk->bind_param("ssi", $empId, $wkendDate, $runId) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($payrunId, $weekendingDate, $candidateId, $clientId, $positionId, $category, $itemType, $jobCode, $transCode, $units, $rate, $amount, $chargeRate, $chargeAmount, $gross, $net, $paygTax, $deduction, $superAnnuation) or die($mysqli->error);
    $chk->store_result();
    $dataArray = array();
    while ($chk->fetch()) {
        $dataArray[] = array('payrunId' => $payrunId, 'weekendingDate' => $weekendingDate, 'candidateId' => $candidateId, 'clientId' => $clientId, 'positionId' => $positionId, 'category' => $category, 'itemType' => $itemType, 'jobcode' => $jobCode, 'transCode' => $transCode, 'units' => $units, 'rate' => $rate, 'amount' => $amount, 'chargeRate' => $chargeRate, 'chargeAmount' => $chargeAmount, 'gross' => $gross, 'net' => $net, 'paygTax' => $paygTax, 'deduction' => $deduction, 'super' => $superAnnuation);
    }
    return $dataArray;
}

function savePaySlipPath($mysqli, $empId, $runId, $wkendDate, $filePath, $payDate, $payStartDate, $payEndDate)
{
    $sql = $mysqli->prepare("INSERT INTO payslip_info(candidateId,payrunId,weekendingDate,filePath,payDate,payPeriodStart,payPeriodEnd) VALUES(?,?,?,?,?,?,?)") or die($mysqli->error);
    $sql->bind_param("sisssss", $empId, $runId, $wkendDate, $filePath, $payDate, $payStartDate, $payEndDate) or die($mysqli->error);
    if ($sql->execute()) {
        return true;
    } else {
        return false;
    }
}

function getPayDateByPayrunId($mysqli, $runId)
{
    $sql = $mysqli->prepare("SELECT payDate FROM payslip_info WHERE payrunId = ?") or die($mysqli->error);
    $sql->bind_param("i", $runId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payDate;
    } else {
        return null;
    }
}

function getPayPeriodStartDate($mysqli, $runId)
{
    $sql = $mysqli->prepare("SELECT payPeriodStart FROM payslip_info WHERE payrunId = ?") or die($mysqli->error);
    $sql->bind_param("i", $runId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payPeriodStart;
    } else {
        return null;
    }
}

function getPayPeriodEndDate($mysqli, $runId)
{
    $sql = $mysqli->prepare("SELECT payPeriodEnd FROM payslip_info WHERE payrunId = ?") or die($mysqli->error);
    $sql->bind_param("i", $runId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payPeriodEnd;
    } else {
        return null;
    }
}

function getCandidatePaySlips($mysqli, $canId)
{
    $chk = $mysqli->prepare("SELECT id,payrunId,weekendingDate,filePath FROM payslip_info WHERE candidateId = ? ORDER BY weekendingDate DESC") or die($mysqli->error);
    $chk->bind_param("s", $canId) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($id, $payrunId, $weekendingDate, $filePath) or die($mysqli->error);
    $chk->store_result();
    $row = '';
    while ($chk->fetch()) {
        $row = $row . '<tr id="' . $id . '"><td>' . $payrunId . '</td><td>' . $weekendingDate . '</td><td><a href="' . $filePath . '" target="_blank">View Pay Slip</a></td><td><button class="removePaySlipBtn btn btn-danger">Remove</button></td></tr>';
    }
    return $row;
}

function getPaySlipPath($mysqli, $id)
{
    $sql = $mysqli->prepare("SELECT filePath FROM payslip_info WHERE id = ?") or die($mysqli->error);
    $sql->bind_param("i", $id) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->filePath;
    } else {
        return null;
    }
}

function removePaySlip($mysqli, $removeId)
{
    $filePath = getPaySlipPath($mysqli, $removeId);
    $del = $mysqli->prepare("DELETE FROM payslip_info WHERE id = ?") or die($mysqli->error);
    $del->bind_param("i", $removeId) or die($mysqli->error);
    $del->execute();
    $nr = $del->affected_rows;
    if ($nr > 0) {
        try {
            return unlink('.' . $filePath);
        } catch (Exception $e) {
            return $e->getMessage();
        }
    } else {
        return 'error deleting';
    }
}

function getYearToDateDataSingletouchPhase2($mysqli, $empId, $startDate, $wkendDate)
{
    $status = 'CLOSED';
    $chk = $mysqli->prepare("SELECT 
                                  payrundetails.payrunId,
                                  payrundetails.weekendingDate,
                                  payrundetails.candidateId,
                                  payrundetails.clientId,
                                  payrundetails.positionId,
                                  payrundetails.category,
                                  payrundetails.itemType,
                                  payrundetails.jobCode,
                                  payrundetails.transCode,
                                  payrundetails.units,
                                  payrundetails.rate,
                                  payrundetails.amount,
                                  payrundetails.chargeRate,
                                  payrundetails.chargeAmount,
                                  payrundetails.gross,
                                  payrundetails.net,
                                  payrundetails.paygTax,
                                  payrundetails.deduction,
                                  payrundetails.superAnnuation
                                FROM
                                  payrundetails
                                WHERE
                                  payrundetails.candidateId = ?
                                AND  
                                  payrundetails.weekendingDate BETWEEN ? AND ? AND
                                  payrundetails.status = ?
                                ORDER BY
                                  payrundetails.weekendingDate,
                                  payrundetails.candidateId,
                                  payrundetails.itemType ASC") or die($mysqli->error);
    $chk->bind_param("ssss", $empId, $startDate, $wkendDate, $status) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($payrunId, $weekendingDate, $candidateId, $clientId, $positionId, $category, $itemType, $jobCode, $transCode, $units, $rate, $amount, $chargeRate, $chargeAmount, $gross, $net, $paygTax, $deduction, $superAnnuation) or die($mysqli->error);
    $chk->store_result();
    $dataArray = array();
    $totalUnits = 0;
    $totalGross = 0;
    $allTotalGross = 0;
    $totalTax = 0;
    $totalNet = 0;
    $totalDeduction = 0;
    $totalSuper = 0;
    $superCount = 0;
    $overtime = 0;
    $doubleTime = 0;
    $totalOvertime = 0;
    $totalAllowance = 0;
    $totalCSDeduction = 0;
    $totalSalarySacrifice = 0;
    $runId;
    $wkDate;
    $transCode = candidateSuperFundTransCode($mysqli, $empId);
    while ($chk->fetch()) {

        $totalUnits = $totalUnits + $units;
        $totalGross = $totalGross + $gross;
        $totalTax = $totalTax + $paygTax;
        $totalNet = $totalNet + $net;
        $totalDeduction = $totalDeduction + $deduction;
        /*$super = STPSuperCalculation($mysqli,$empId,$weekendingDate,$transCode);
        $totalSuper = $totalSuper + $super;*/
        $totalSuper = $totalSuper + $superAnnuation;
        if ($itemType == 6) {
            $overtime = $overtime + $amount;
        }
        if ($itemType == 7) {
            $doubleTime = $doubleTime + $amount;
        }
        if ($itemType == 14) {
            $totalAllowance = $totalAllowance + $amount;
        }
        if ($transCode == 1235) {
            $totalSalarySacrifice = $totalSalarySacrifice + $deduction;
        }
        if ($transCode == 16) {
            $totalCSDeduction = $totalCSDeduction + $deduction;
        }
        if ($superAnnuation <> 0) $superCount++;
    }
    $totalOvertime = $overtime + $doubleTime;
    $allTotalGross = $totalGross - $totalOvertime;
    $dataArray[] = array('totalUnits' => $totalUnits, 'totalGross' => $allTotalGross, 'totalTax' => $totalTax, 'totalNet' => $totalNet, 'totalDedcution' => $totalDeduction, 'superCount' => $superCount, 'totalSuper' => $totalSuper, 'totalOvertime' => $totalOvertime, 'totalAllowance' => $totalAllowance, 'totalCSDeduction' => $totalCSDeduction, 'totalSalarySacrifice' => $totalSalarySacrifice);
    return $dataArray;
}

function getYearToDateData($mysqli, $empId, $startDate, $wkendDate)
{
    $status = 'CLOSED';
    $chk = $mysqli->prepare("SELECT 
                                  payrundetails.payrunId,
                                  payrundetails.weekendingDate,
                                  payrundetails.candidateId,
                                  payrundetails.clientId,
                                  payrundetails.positionId,
                                  payrundetails.category,
                                  payrundetails.itemType,
                                  payrundetails.jobCode,
                                  payrundetails.transCode,
                                  payrundetails.units,
                                  payrundetails.rate,
                                  payrundetails.amount,
                                  payrundetails.chargeRate,
                                  payrundetails.chargeAmount,
                                  payrundetails.gross,
                                  payrundetails.net,
                                  payrundetails.paygTax,
                                  payrundetails.deduction,
                                  payrundetails.superAnnuation
                                FROM
                                  payrundetails
                                WHERE
                                  payrundetails.candidateId = ?
                                AND  
                                  payrundetails.weekendingDate BETWEEN ? AND ? AND
                                  payrundetails.status = ?
                                ORDER BY
                                  payrundetails.weekendingDate,
                                  payrundetails.candidateId,
                                  payrundetails.itemType ASC") or die($mysqli->error);
    $chk->bind_param("ssss", $empId, $startDate, $wkendDate, $status) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($payrunId, $weekendingDate, $candidateId, $clientId, $positionId, $category, $itemType, $jobCode, $transCode, $units, $rate, $amount, $chargeRate, $chargeAmount, $gross, $net, $paygTax, $deduction, $superAnnuation) or die($mysqli->error);
    $chk->store_result();
    $dataArray = array();
    $totalUnits = 0;
    $totalGross = 0;
    $allTotalGross = 0;
    $totalTax = 0;
    $totalNet = 0;
    $totalDeduction = 0;
    $totalSuper = 0;
    $superCount = 0;
    $overtime = 0;
    $doubleTime = 0;
    $totalOvertime = 0;
    $totalAllowance = 0;
    $runId;
    $wkDate;
    $transCode = candidateSuperFundTransCode($mysqli, $empId);
    while ($chk->fetch()) {
        /*if(empty($runId) && empty($wkDate)){
            $runId = $payrunId;
            $wkDate = $weekendingDate;
        }
        if(($runId == $payrunId) && ($weekendingDate == $wkDate)) {
            $totalUnits = $totalUnits + $units;
            $totalGross = $totalGross + $gross;
            $totalTax = $totalTax + $paygTax;
            $totalNet = $totalNet + $net;
            $totalDedcution = $totalDedcution + $deduction;
            $totalSuper = $totalSuper + $superAnnuation;
            if ($superAnnuation <> 0) $superCount++;
        }else if(($runId == $payrunId) && ($weekendingDate <> $wkDate)){
            $totalUnits = $totalUnits + $units;
            $totalGross = $totalGross + $gross;
            $totalTax = $totalTax + $paygTax;
            $totalNet = $totalNet + $net;
            $totalDedcution = $totalDedcution + $deduction;
            $totalSuper = $totalSuper + $superAnnuation;
            if ($superAnnuation <> 0) $superCount++;
        }else if(($runId <> $payrunId) && ($weekendingDate <> $wkDate)){
            $totalUnits = $totalUnits + $units;
            $totalGross = $totalGross + $gross;
            $totalTax = $totalTax + $paygTax;
            $totalNet = $totalNet + $net;
            $totalDedcution = $totalDedcution + $deduction;
            $totalSuper = $totalSuper + $superAnnuation;
            if ($superAnnuation <> 0) $superCount++;
            $runId = $payrunId;
            $wkDate = $weekendingDate;
        }*/
        $totalUnits = $totalUnits + $units;
        $totalGross = $totalGross + $gross;
        $totalTax = $totalTax + $paygTax;
        $totalNet = $totalNet + $net;
        $totalDeduction = $totalDeduction + $deduction;
        /*$super = STPSuperCalculation($mysqli,$empId,$weekendingDate,$transCode);
        $totalSuper = $totalSuper + $super;*/
        $totalSuper = $totalSuper + $superAnnuation;

        if ($superAnnuation <> 0) $superCount++;
    }

    $dataArray[] = array('totalUnits' => $totalUnits, 'totalGross' => $totalGross, 'totalTax' => $totalTax, 'totalNet' => $totalNet, 'totalDedcution' => $totalDeduction, 'superCount' => $superCount, 'totalSuper' => $totalSuper);
    return $dataArray;
}

function calculateSuperYearToDate($mysqli, $empId, $startDate, $monthEndDate, $transCode)
{
    $status = 'CLOSED';
    $sql = $mysqli->prepare("SELECT gross FROM payrundetails WHERE candidateId = ? AND weekendingDate BETWEEN ? AND ? AND status = ?") or die($mysqli->error);
    $sql->bind_param("ssss", $empId, $startDate, $monthEndDate, $status) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($gross) or die($mysqli->error);
    $sql->store_result();
    while ($sql->fetch()) {
        $subTotal = $subTotal + $gross;
    }
    $super = 0;
    if ($subTotal >= 450) {
        $super = calculateSuperAnnuation($mysqli, $subTotal, $transCode);
    }
    return $super;
}

function calculateSuperDateRangePaysheet($mysqli, $empId, $startDate, $monthEndDate, $transCode)
{
    $status = 'CLOSED';
    $sql = $mysqli->prepare("SELECT amount FROM payrundetails WHERE candidateId = ? AND weekendingDate BETWEEN ? AND ? AND status = ? AND itemType < 9") or die($mysqli->error);
    $sql->bind_param("ssss", $empId, $startDate, $monthEndDate, $status) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($amount) or die($mysqli->error);
    $sql->store_result();
    while ($sql->fetch()) {
        $subTotal = $subTotal + $amount;
    }
    $super = 0;
    //if($subTotal >= 450){
    $super = calculateSuperAnnuation($mysqli, $subTotal, $transCode);
    //}
    return $super;
}

function calculateMonths($date1, $date2)
{
    /*$d1 = new DateTime('2021-10-31');
$d2 = new DateTime('2021-06-27');
echo $d1->diff($d2)->m + ($d1->diff($d2)->y*12);*/
    $ts1 = strtotime($date1);
    $ts2 = strtotime($date2);

    $year1 = date('Y', $ts1);
    $year2 = date('Y', $ts2);

    $month1 = date('m', $ts1);
    $month2 = date('m', $ts2);

    $diff = (($year2 - $year1) * 12) + ($month2 - $month1);
    return $diff;
}

function STPSuperCalculation($mysqli, $canId, $weekendingDate, $transCode)
{
    $status = 'CLOSED';
    $stDate = date('Y-m-01', strtotime($weekendingDate));
    $enDate = date('Y-m-t', strtotime($weekendingDate));
    $subTotal = 0;
    $sql = $mysqli->prepare("SELECT gross FROM payrundetails WHERE candidateId = ? AND weekendingDate BETWEEN ? AND ? AND status = ?") or die($mysqli->error);
    $sql->bind_param("ssss", $canId, $stDate, $enDate, $status) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($gross) or die($mysqli->error);
    $sql->store_result();
    while ($sql->fetch()) {
        $subTotal = $subTotal + $gross;
    }
    $super = 0;
    if ($subTotal >= 450) {
        $super = calculateSuperAnnuation($mysqli, $subTotal, $transCode);
    }
    return $super;
}

function calculateSuperAnnuation($mysqli, $payTotal, $transCode)
{
    /*if($payTotal >= 450) {*/
    $superPercentage = getSuperFundDefaultPercentage($mysqli, $transCode);
    return $superAnnuation = $payTotal * $superPercentage;
    /*}else{
        return number_format(0,2);
    }*/
}

function getPayrunTotalGrossForDateRange($mysqli, $wkendDateStart, $wkendDateEnd)
{
    $status = 'CLOSED';
    $chk = $mysqli->prepare("SELECT                                 
                                  payrundetails.gross
                                FROM
                                  payrundetails
                                WHERE
                                  payrundetails.weekendingDate BETWEEN ? AND ? AND
                                  payrundetails.status = ?             
                                AND  
                                  payrundetails.gross <> 0") or die($mysqli->error);
    $chk->bind_param("sss", $wkendDateStart, $wkendDateEnd, $status) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($gross) or die($mysqli->error);
    $chk->store_result();
    $totalGross = 0;
    while ($chk->fetch()) {
        $totalGross = $totalGross + $gross;
    }
    return $totalGross;
}

function getPayrunTotalChildSupportDateRange($mysqli, $wkendDateStart, $wkendDateEnd, $transCode)
{
    $status = 'CLOSED';
    $chk = $mysqli->prepare("SELECT                                 
                                  payrundetails.deduction
                                FROM
                                  payrundetails
                                WHERE
                                  payrundetails.weekendingDate BETWEEN ? AND ? AND
                                  payrundetails.status = ?             
                                AND  
                                  payrundetails.transCode = ?") or die($mysqli->error);
    $chk->bind_param("sssi", $wkendDateStart, $wkendDateEnd, $status, $transCode) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($deduction) or die($mysqli->error);
    $chk->store_result();
    $totalDeduction = 0;
    while ($chk->fetch()) {
        $totalDeduction = $totalDeduction + $deduction;
    }
    return $totalDeduction;
}

function getPayrunTotalPaygTaxByDateRange($mysqli, $wkendDateStart, $wkendDateEnd)
{
    $status = 'CLOSED';
    $chk = $mysqli->prepare("SELECT                                 
                                  payrundetails.paygTax
                                FROM
                                  payrundetails
                                WHERE
                                  payrundetails.weekendingDate BETWEEN ? AND ? AND
                                  payrundetails.status = ?
                                AND  
                                  payrundetails.paygTax <> 0") or die($mysqli->error);
    $chk->bind_param("sss", $wkendDateStart, $wkendDateEnd, $status) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($paygTax) or die($mysqli->error);
    $chk->store_result();
    $totalPaygTax = 0;
    while ($chk->fetch()) {
        $totalPaygTax = $totalPaygTax + $paygTax;
    }
    return $totalPaygTax;
}

function validatePayrollName($mysqli, $payrollName)
{
    $sqlchk = $mysqli->prepare("SELECT payrollName FROM payroll_name_detail WHERE payrollName = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $payrollName) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function getPayrollNamesForDropdown($mysqli)
{
    $sql = $mysqli->prepare("SELECT id,payrollName FROM payroll_name_detail") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($id, $payrollName) or die($mysqli->error);
    $opt = '<option value="0">Select Name</option>';
    while ($sql->fetch()) {
        $opt = $opt . '<option value="' . $id . '">' . $payrollName . '</option>';
    }
    return $opt;
}

function getPayrollDetailsById($mysqli, $id)
{
    $sql = $mysqli->prepare("SELECT id,payrollName, profitCentre, yearStartDate,yearEndDate,frequency,periodEndDay,payslipMessage FROM payroll_name_detail WHERE id = ?") or die($mysqli->error);
    $sql->bind_param("i", $id) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($id, $payrollName, $profitCentre, $yearStartDate, $yearEndDate, $frequency, $periodEndDay, $payslipMessage) or die($mysqli->error);
    $resultArray = array();
    while ($sql->fetch()) {
        $resultArray[] = array('id' => $id, 'payrollName' => $payrollName, 'yearStartDate' => $yearStartDate, 'yearEndDate' => $yearEndDate, 'frequency' => $frequency, 'periodEndDay' => $periodEndDay, 'payslipMessage' => $payslipMessage);
    }
    return json_encode($resultArray);
}

function savePayrollNameDetails($mysqli, $payrollName, $profitCentre, $yearStartDate, $yearEndDate, $frequency, $periodEndDay, $payslipmsg, $id)
{
    if (!validatePayrollName($mysqli, $payrollName)) {
        $ins = $mysqli->prepare("INSERT INTO payroll_name_detail(payrollName, profitCentre, yearStartDate,yearEndDate,frequency,periodEndDay,payslipMessage) VALUES(?,?,?,?,?,?,?)") or die($mysqli->error);
        $ins->bind_param("sssssss", $payrollName, $profitCentre, $yearStartDate, $yearEndDate, $frequency, $periodEndDay, $payslipmsg) or die($mysqli->error);
        $ins->execute();
        $nrow = $ins->affected_rows;
        if ($nrow == '1') {
            $ins->free_result();
            $statusCheck = 'inserted';
        } else {
            $statusCheck = $mysqli->error;
        }
        return $statusCheck;
    } else {
        if (isset($id)) {
            $up = $mysqli->prepare("UPDATE payroll_name_detail
                                        SET
                                          payrollName = ?,
                                          profitCentre = ?,
                                          yearStartDate = ?,
                                          yearEndDate = ?,
                                          frequency = ?,
                                          periodEndDay = ?,
                                          payslipMessage = ?
                                          WHERE id = ?") or die($mysqli->error);
            $up->bind_param("sssssssi", $payrollName, $profitCentre, $yearStartDate, $yearEndDate, $frequency, $periodEndDay, $payslipmsg, $id) or die($mysqli->error);
            $up->execute();
            $nrow = $up->affected_rows;
            if ($nrow == '1') {
                $up->free_result();
                $statusCheck = 'updated';
            } else {
                $statusCheck = $mysqli->error;
            }
            return $statusCheck;
        }
    }
}

function getPaySlipMessage($mysqli, $payrollName)
{
    $sql = $mysqli->prepare("SELECT payslipMessage FROM payroll_name_detail WHERE payrollName = ?") or die($mysqli->error);
    $sql->bind_param("s", $payrollName) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payslipMessage;
    } else {
        return null;
    }
}

function generatePaySlipEmail($empEmail, $empFirstName, $paySlipDate, $filePath)
{

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->clearReplyTos();
    $mail->addReplyTo(DEFAULT_EMAIL, 'Reply-To');
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME . ' -  Pay Slip');
    $subject = DOMAIN_NAME . ' PAY SLIP';
    $mail->AddAddress($empEmail);
    $mail->Subject = $subject;
    $mail->AddAttachment($filePath);
    $mail->IsHTML(true);
    $temp_text = '<br/><br/>';
    $body = $temp_text . 'Thank you ' . $empFirstName . ' for a job well done. Your payslip for the payment dated ' . $paySlipDate . ' is attached. 
<br/>
<br/> 
<br/>
Regards ' . DOMAIN_NAME . ' Payroll Keep up to date with ' . DOMAIN_NAME . ' News, events and Job Opportunities, through our social media pages! Please Like ' . DOMAIN_NAME . ' on Facebook:
<br/>
<br/><br/>';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return $empFirstName . ' ' . $empEmail . ' Sent <br>';
    } else {
        return $empFirstName . ' ' . $empEmail . ' Failed <br>';
    }
}

function removePAYGMailList($mysqli)
{
    $del = $mysqli->prepare("DELETE FROM paygmaillist") or die($mysqli->error);
    $del->execute();
}

function updatePAYGEmailList($mysqli, $empId, $email, $filePathPDF)
{
    $ins = $mysqli->prepare("INSERT INTO paygmaillist(empId,email,filepath) VALUES(?,?,?)") or die($mysqli->error);
    $ins->bind_param("sss", $empId, $email, $filePathPDF) or die($mysqli->error);
    $ins->execute();
}

function updatePAYGEMPDUPEFileList($mysqli, $empdupeFile)
{
    $sql = $mysqli->prepare("INSERT INTO empdupe_list(filePath,fileDate) VALUES(?,NOW())") or die($mysqli->error);
    $sql->bind_param("s", $empdupeFile) or die($mysqli->error);
    if ($sql->execute()) {
        return true;
    } else {
        return false;
    }
}

function getPAYGEmailList($mysqli)
{
    $sql = $mysqli->prepare("SELECT 
  paygmaillist.id,
  paygmaillist.empId,
  paygmaillist.filePath,
  candidate.firstName,
  candidate.lastName,
  paygmaillist.email
FROM
  paygmaillist
  INNER JOIN candidate ON (paygmaillist.empId = candidate.candidateId)") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($id, $empId, $filePath, $firstName, $lastName, $email) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $row = '';
    if ($num_of_rows > 0) {
        $row = $row . '<button name="sendAllMailBtn" id="sendAllMailBtn" class="sendAllMailBtn btn btn-success btn-default btn-sm"><i class="glyphicon glyphicon fa fa-arrow-right"></i>Send All</button>';
        while ($sql->fetch()) {
            $row = $row . '<tr><td>' . $empId . '</td><td>' . $firstName . '&nbsp;' . $lastName . '</td><td>' . $email . '</td><td><a href=".' . $filePath . '" target="_blank">Download Summary</a></td><td data-id="' . $id . '" data-empid="' . $empId . '" data-email="' . $email . '" data-path="' . $filePath . '"><button name="sendMailBtn" id="sendMailBtn" class="sendMailBtn btn btn-success btn-default btn-sm"><i class="glyphicon glyphicon fa fa-arrow-right"></i>Send</button></td></tr>';
        }
        return $row;
    }
}

function getEMPDUPEFileList($mysqli)
{
    $chk = $mysqli->prepare("SELECT filePath,fileDate
                            FROM
                              empdupe_list
                            ORDER BY
                              fileDate DESC") or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($filePath, $fileDate) or die($mysqli->error);
    $chk->store_result();
    $link = '';
    while ($chk->fetch()) {
        $link = $link . '<a href="' . $filePath . '" target="_blank">' . $fileDate . '</a>';
    }
    return $link;
}

function generatePaygEmail($empId, $empEmail, $filePath)
{
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, ' PAYG SUMMARY');
    $subject = DOMAIN_NAME . ' - PAYG SUMMARY -' . $empId;
    $mail->AddAddress($empEmail);
    $mail->Subject = $subject;
    $mail->AddAttachment($filePath);
    $mail->IsHTML(true);
    $body = '<div><br/><br/>';
    $mail->Body = $body;
    $mail->send();

    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function sendMarketingEmail($email, $emailBody)
{
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME . ' vacancies');
    $subject = DOMAIN_NAME . ' JOB ALERT';
    $mail->AddAddress($email);
    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = $emailBody . '<br/><br/>';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "Mail Sent to " . $email;
    } else {
        return "Sending failed for " . $email;
    }
}

function getEmployeeBankAccountRows($mysqli, $canId)
{
    $chk = $mysqli->prepare("SELECT bankName,accountName,accountNumber,bsb FROM employee_bank_account WHERE candidateId = ?") or die($mysqli->error);
    $chk->bind_param("s", $canId) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($bankName,$accountName, $accountNumber, $bsb) or die($mysqli->error);
    $chk->store_result();
    $accountArray = array();
    $row = '';
    while ($chk->fetch()) {
        $row = $row . '<tr id="ex_bank_info"><td class="text-center">'.$bankName.'</td><td class="text-center">' . $accountName . '</td><td class="text-center">' . $accountNumber . '</td><td class="text-center">' . $bsb . '</td></tr>';
    }
    return $row;
}

function getEmployeeBankAccount($mysqli, $canId)
{
    $chk = $mysqli->prepare("SELECT bank_name,accountName,accountNumber,bsb FROM employee_bank_account WHERE candidateId = ?") or die($mysqli->error);
    $chk->bind_param("s", $canId) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($bank_name,$accountName, $accountNumber, $bsb) or die($mysqli->error);
    $chk->store_result();
    $accountArray = array();
    while ($chk->fetch()) {
        $accountArray[] = array('bank_name'=>$bank_name,'accountName' => $accountName, 'accountNumber' => $accountNumber, 'bsb' => $bsb);
    }
    return $accountArray;
}

function validateBankAccount($mysqli, $candidateId)
{
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM employee_bank_account WHERE candidateId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $candidateId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateBankBSB($bsb)
{
    $bsbRegex = '/^[\d]{3}-[\d]{3}$/';
    if (!preg_match($bsbRegex, $bsb)) {
        return false;
    } else {
        return true;
    }
}

function updateBankAccount($mysqli, $canId, $bankName,$accountName, $accountNumber, $bsb)
{
    if (!validateBankAccount($mysqli, $canId)) {
        $ins = $mysqli->prepare("INSERT INTO employee_bank_account(candidateId,bankName,accountName,accountNumber,bsb)VALUES(?,?,?,?,?)") or die($mysqli->error);
        $ins->bind_param("sssss", $canId, $bankName,$accountName, $accountNumber, $bsb) or die($mysqli->error);
        $ins->execute();
        $statusCheck = getEmployeeBankAccountRows($mysqli, $canId);
    } else {
        $up = $mysqli->prepare("UPDATE employee_bank_account
                                            SET
                                              accountName = ?,
                                              accountNumber = ?,
                                              bsb = ?
                                              WHERE candidateId = ?") or die($mysqli->error);
        $up->bind_param("ssss", $accountName, $accountNumber, $bsb, $canId) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow == '1') {
            $up->free_result();
            $statusCheck = getEmployeeBankAccountRows($mysqli, $canId);
        } else {
            $statusCheck = 'Error updating bank account information';
        }
    }
    return $statusCheck;
}

function validateCompanyBankAccount($mysqli, $accountName, $accountNumber)
{
    $sqlchk = $mysqli->prepare("SELECT accountName FROM companybankaccount WHERE accountName = ? AND accountNumber = ?") or die ($mysqli->error);
    $sqlchk->bind_param("ss", $accountName, $accountNumber) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function addCompanyBankAccount($mysqli, $accountName, $accountNumber, $bsb, $userName, $userCode, $tradeCode, $companyId)
{
    try {
        if (!validateCompanyBankAccount($mysqli, $accountName, $accountNumber)) {
            $ins = $mysqli->prepare("INSERT INTO companybankaccount(companyId,accountName,accountNumber,bsb,userName,userCode,tradeCode)VALUES(?,?,?,?,?,?,?)") or die($mysqli->error);
            $ins->bind_param("issssss", $companyId, $accountName, $accountNumber, $bsb, $userName, $userCode, $tradeCode) or die($mysqli->error);
            $ins->execute();
            $statusCheck = getCompanyBankAccountRows($mysqli);
        } else {
            $statusCheck = getCompanyBankAccountRows($mysqli);
        }
        return $statusCheck;
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function getCompanyBankAccountRows($mysqli)
{
    $chk = $mysqli->prepare("SELECT accId,companyId,accountName,accountNumber,bsb,userName,userCode,tradeCode FROM companybankaccount") or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($accId, $companyId, $accountName, $accountNumber, $bsb, $userName, $userCode, $tradeCode) or die($mysqli->error);
    $chk->store_result();
    $row = '';
    while ($chk->fetch()) {
        $row = $row . '<tr><td>' . getCompanyNameById($mysqli, $companyId) . '</td><td>' . $accountName . '</td><td>' . $accountNumber . '</td><td>' . $bsb . '</td><td>' . $userName . '</td><td>' . $userCode . '</td><td>' . $tradeCode . '</td><td class="coAcc" data-accId="' . $accId . '" data-accountName="' . $accountName . '" data-accountNumber="' . $accountNumber . '" data-bsb="' . $bsb . '" data-userName="' . $userName . '" data-userCode="' . $userCode . '" data-tradeCode="' . $tradeCode . '"><button type="button" name="editBtn" id="editBtn" class="editBtn pull-right btn btn-default btn-sm"><i class="glyphicon glyphicon-pencil"></i></button><button type="button" name="deleteBtn" id="deleteBtn" class="deleteBtn pull-right btn btn-danger btn-sm"><i class="glyphicon glyphicon-trash"></i></button></td></tr>';
    }
    return $row;
}

function updateCompanyBankAccount($mysqli, $accountName, $accountNumber, $bsb, $userName, $userCode, $tradeCode, $accId)
{
    if (!empty($accId)) {
        $up = $mysqli->prepare("UPDATE companybankaccount
                                            SET
                                              accountName = ?,
                                              accountNumber = ?,
                                              bsb = ?,
                                              userName = ?,
                                              userCode = ?,
                                              tradeCode = ?
                                              WHERE accId = ?") or die($mysqli->error);
        $up->bind_param("sissssi", $accountName, $accountNumber, $bsb, $userName, $userCode, $tradeCode, $accId) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow == '1') {
            $up->free_result();
            $statusCheck = getCompanyBankAccountRows($mysqli);
        } else {
            $statusCheck = $mysqli->error;
        }
        return $statusCheck;
    }
}

function deleteCompanyBankAccount($mysqli, $accId)
{
    $del = $mysqli->prepare("DELETE FROM companybankaccount WHERE accId = ?") or die($mysqli->error);
    $del->bind_param("i", $accId) or die($mysqli->error);
    $del->execute();
    $nr = $del->affected_rows;
    if ($nr > 0) {
        return getCompanyBankAccountRows($mysqli);
    } else {
        return getCompanyBankAccountRows($mysqli);
    }
}

function validateCorporateBankAccount($mysqli, $accountName, $accountNumber)
{
    $sqlchk = $mysqli->prepare("SELECT accountName FROM corporate_bank_account WHERE accountName = ? AND accountNumber = ?") or die ($mysqli->error);
    $sqlchk->bind_param("ss", $accountName, $accountNumber) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function addCorporateBankAccount($mysqli, $accountName, $accountNumber, $bsb, $userName, $userCode, $tradeCode)
{
    if (!validateCorporateBankAccount($mysqli, $accountName, $accountNumber)) {
        $ins = $mysqli->prepare("INSERT INTO corporate_bank_account(accountName,accountNumber,bsb,userName,userCode,tradeCode)VALUES(?,?,?,?,?,?)") or die($mysqli->error);
        $ins->bind_param("ssssss", $accountName, $accountNumber, $bsb, $userName, $userCode, $tradeCode) or die($mysqli->error);
        $ins->execute();
        $statusCheck = getCorporateBankAccountRows($mysqli);
    }
    return $statusCheck;
}

function updateCorporateBankAccount($mysqli, $accountName, $accountNumber, $bsb, $userName, $userCode, $tradeCode, $accId)
{
    if (!empty($accId)) {
        $up = $mysqli->prepare("UPDATE corporate_bank_account
                                            SET
                                              accountName = ?,
                                              accountNumber = ?,
                                              bsb = ?,
                                              userName = ?,
                                              userCode = ?,
                                              tradeCode = ?
                                              WHERE accId = ?") or die($mysqli->error);
        $up->bind_param("sissssi", $accountName, $accountNumber, $bsb, $userName, $userCode, $tradeCode, $accId) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow == '1') {
            $up->free_result();
            $statusCheck = getCorporateBankAccountRows($mysqli);
        } else {
            $statusCheck = $mysqli->error;
        }
        return $statusCheck;
    }
}

function getCorporateBankAccountRows($mysqli)
{
    $chk = $mysqli->prepare("SELECT accId,accountName,accountNumber,bsb,userName,userCode,tradeCode FROM corporate_bank_account") or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($accId, $accountName, $accountNumber, $bsb, $userName, $userCode, $tradeCode) or die($mysqli->error);
    $chk->store_result();
    $row = '';
    while ($chk->fetch()) {
        $row = $row . '<tr><td>' . $accountName . '</td><td>' . $accountNumber . '</td><td>' . $bsb . '</td><td>' . $userName . '</td><td>' . $userCode . '</td><td>' . $tradeCode . '</td><td class="coAcc" data-accId="' . $accId . '" data-accountName="' . $accountName . '" data-accountNumber="' . $accountNumber . '" data-bsb="' . $bsb . '" data-userName="' . $userName . '" data-userCode="' . $userCode . '" data-tradeCode="' . $tradeCode . '"><button type="button" name="editBtn" id="editBtn" class="editBtn pull-right btn btn-default btn-sm"><i class="glyphicon glyphicon-pencil"></i></button><button type="button" name="deleteBtn" id="deleteBtn" class="deleteBtn pull-right btn btn-danger btn-sm"><i class="glyphicon glyphicon-trash"></i></button></td></tr>';
    }
    return $row;
}

function getCorporateBankAccountDetails($mysqli, $acId)
{
    $chk = $mysqli->prepare("SELECT accId,accountName,accountNumber,bsb,userName,userCode,tradeCode FROM corporate_bank_account WHERE accId = ?") or die($mysqli->error);
    $chk->bind_param("i", $acId) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($accId, $accountName, $accountNumber, $bsb, $userName, $userCode, $tradeCode) or die($mysqli->error);
    $chk->store_result();
    $payrunArray = array();
    while ($chk->fetch()) {
        $payrunArray[] = array('accountName' => $accountName, 'accountNumber' => $accountNumber, 'bsb' => $bsb, 'userName' => $userName, 'userCode' => $userCode, 'tradeCode' => $tradeCode);
    }
    return $payrunArray;
}

function getCorporateBankAccountById($mysqli, $corporateBankAccount)
{
    $sql = $mysqli->prepare("SELECT accountName FROM corporate_bank_account WHERE accId = ?") or die($mysqli->error);
    $sql->bind_param("i", $corporateBankAccount) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->accountName;
    } else {
        return null;
    }
}

function getCorporateBankAccountBSBId($mysqli, $corporateBankAccount)
{
    $sql = $mysqli->prepare("SELECT bsb FROM corporate_bank_account WHERE accId = ?") or die($mysqli->error);
    $sql->bind_param("i", $corporateBankAccount) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->bsb;
    } else {
        return null;
    }
}

function getCorporateBankAccountNumber($mysqli, $corporateBankAccount)
{
    $sql = $mysqli->prepare("SELECT accountNumber FROM corporate_bank_account WHERE accId = ?") or die($mysqli->error);
    $sql->bind_param("i", $corporateBankAccount) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->accountNumber;
    } else {
        return null;
    }
}

function getCorporateBankTradeCode($mysqli, $corporateBankAccount)
{
    $sql = $mysqli->prepare("SELECT tradeCode FROM corporate_bank_account WHERE accId = ?") or die($mysqli->error);
    $sql->bind_param("i", $corporateBankAccount) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->tradeCode;
    } else {
        return null;
    }
}

function getCorporateBankDirectEntryId($mysqli, $corporateBankAccount)
{
    $sql = $mysqli->prepare("SELECT userCode FROM corporate_bank_account WHERE accId = ?") or die($mysqli->error);
    $sql->bind_param("i", $corporateBankAccount) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->userCode;
    } else {
        return null;
    }
}

function deleteCorporateBankAccount($mysqli, $accId)
{
    $del = $mysqli->prepare("DELETE FROM corporate_bank_account WHERE accId = ?") or die($mysqli->error);
    $del->bind_param("i", $accId) or die($mysqli->error);
    $del->execute();
    $nr = $del->affected_rows;
    if ($nr > 0) {
        return getCorporateBankAccountRows($mysqli);
    } else {
        return getCorporateBankAccountRows($mysqli);
    }
}

function loadCorporateBankAccounts($mysqli)
{
    $chk = $mysqli->prepare("SELECT accId,accountName,accountNumber,bsb,userName,userCode,tradeCode FROM corporate_bank_account") or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($accId, $accountName, $accountNumber, $bsb, $userName, $userCode, $tradeCode) or die($mysqli->error);
    $chk->store_result();
    while ($chk->fetch()) {
        $opt = $opt . '<option value="' . $accId . '">' . $accountName . '</option>';
    }
    return $opt;
}

function loadPayRunIDDropDown($mysqli)
{
    $chk = $mysqli->prepare("SELECT payrunId,invoiceDate FROM payrun") or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($payrunId, $invoiceDate) or die($mysqli->error);
    $chk->store_result();
    $opt = '';
    while ($chk->fetch()) {
        $opt = $opt . '<option value="' . $payrunId . '">' . $payrunId . ' ' . $invoiceDate . '</option>';
    }
    return $opt;
}

/* App & Supervisor/Casual Functions */
function randomPassword($length)
{
    //$keyspace = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!?~@#-_+<>[]{}';
    $keyspace = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!?@#-_+';
    $str = '';
    $max = mb_strlen($keyspace, '8bit') - 1;
    if ($max < 1) {
        throw new Exception('$keyspace must be at least two characters long');
    }
    for ($i = 0; $i < $length; ++$i) {
        $str .= $keyspace[random_int(0, $max)];
    }
    return $str;
}

function getUserTypeById($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT type FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->type;
    } else {
        return null;
    }
}

function getCandidateUsername($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT username FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->username;
    } else {
        return null;
    }
}

function getCandidatePassword($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT dob FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        $dob = $obj->dob;
    } else {
        $dob = null;
    }
    if (!empty($dob)) {
        $password = trim(str_replace('/', '', $dob));
        return $password;
    } else {
        return 'No date of birth registered';
    }
}

function generateAppLogin($mysqli, $canId, $consultantEmail)
{
    $password = randomPassword(8);
    $options = [
        'cost' => 12,
    ];
    $hash = password_hash($password, PASSWORD_BCRYPT, $options);
    $email = getEmployeeEmail($mysqli, $canId);
    $userType = getUserTypeById($mysqli, $canId);
    $sql = $mysqli->prepare('UPDATE candidate SET password = ? WHERE candidateId = ?') or die($mysqli->error);
    $sql->bind_param("ss", $hash, $canId) or die($mysqli->error);
    $sql->execute();
    $nrow = $sql->affected_rows;
    if ($nrow == '1') {
        $sql->free_result();
        if ($userType == '1') {
            return generateEmailSupervisorLogin($email, $password, $consultantEmail, ' ');
        } elseif ($userType == '2') {
            //return generateEmailCasualPassword($email,$password);
        }
    } else {
        return $mysqli->error;
    }
}

function updateUsernamePassword($mysqli, $dob, $candidateId)
{
    $password = trim(str_replace('/', '', $dob));
    $options = [
        'cost' => 12,
    ];
    $hash = password_hash($password, PASSWORD_BCRYPT, $options);
    $up = $mysqli->prepare("UPDATE candidate SET username = ?, password = ? WHERE candidateId = ?") or die($mysqli->error);
    $up->bind_param("sss", $candidateId, $hash, $candidateId) or die($mysqli->error);
    $up->execute();
    $nrow = $up->affected_rows;
    if ($nrow == '1') {
        $statusCheck = $candidateId . $hash . '<br>';
    } else {
        $statusCheck = $mysqli->error;
    }
    return $statusCheck;
}

function generateMobileAppLoginEmail($mysqli, $candidateId)
{
    $password = trim(str_replace('/', '', getCandidateDOBById($mysqli, $candidateId)));
    $email = getEmployeeEmail($mysqli, $candidateId);
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . ' Mobile Application';
    $mail->AddAddress($email);
    $mail->AddBCC(ADMIN_EMAIL);
    $mail->AddAttachment('./resources/App Installation Guide-Android.pdf');
    $mail->AddAttachment('./resources/Mobile App User GuideV1.0.pdf');
    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = '<br/><br/>' . DOMAIN_NAME . ' mobile App Login Information <br/>Username: ' . $candidateId . '<br/>Password: ' . $password . '<br/><br/>Please use the attached user manuals for using mobile App<br/><br/>';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "App Login Email Sent";
    } else {
        return "Error sending App Login email";
    }
}

function generateEmailSupervisorLogin($email, $password, $consultantEmail, $clientName)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . ' Supervisor Login';
    $mail->AddAddress($email);
    $mail->AddBCC(ACCOUNTS_EMAIL);
    $mail->AddBCC($consultantEmail);
    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = '<br/><br/>Client: ' . $clientName . '<br/><br/>URL for web login: <a href="' . DOMAIN_URL . '/supervisor/" target="_blank">' . DOMAIN_URL . '/supervisor/</a> <br/>Username: ' . $email . '<br/>Password: ' . $password . '<br/><br/><br/>';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function generateEmailCasualPassword($email, $password)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . 'Casual Login';
    $mail->AddAddress($email);
    $mail->AddBCC(ADMIN_EMAIL);
    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = '<br/><br/>URL for web login: ' . DOMAIN_URL . '/casual/ <br/>Username: ' . $email . '<br/>Password: ' . $password . '<br/><br/>';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function validateTimeSheet($mysqli, $shiftId)
{
    $sqlchk = $mysqli->prepare("SELECT shiftId FROM timesheet WHERE shiftId = ?") or die($mysqli->error);
    $sqlchk->bind_param("i", $shiftId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function updateTimeSheetForMobileApp($mysqli, $candidateId, $shiftId, $shiftDate, $dayOfWeek, $clientId, $positionId, $jobCode, $checkInTime, $checkOutTime, $wrkBreak, $wkHrs, $wkEndDate, $confirmed)
{
    if (!validateTimeSheet($mysqli, $shiftId)) {
        $ins = $mysqli->prepare("INSERT INTO
                                          timesheet(
                                          shiftId,
                                          shiftDate,
                                          shiftDay,
                                          candidateId,
                                          clientId,
                                          positionId,
                                          jobCode,
                                          shiftStart,
                                          shiftEnd,
                                          workBreak,
                                          wrkHrs,
                                          weekendingDate,
                                          status,
                                          appStatus)
                                        VALUES(
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?)");
        $ins->bind_param("isssiissssssis", $shiftId, $shiftDate, $dayOfWeek, $candidateId, $clientId, $positionId, $jobCode, $checkInTime, $checkOutTime, $wrkBreak, $wkHrs, $wkEndDate, $shiftId, $confirmed) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            $ins->free_result();
            return 'Added';
        } else {
            return $mysqli->error;
        }
    }
}

function updateTimeSheetForCasuals($mysqli, $candidateId, $shiftId, $shiftDate, $shiftDay, $clientId, $positionId, $deptId, $jobCode, $supervisorCheckIn, $supervisorCheckOut, $workBreak, $wrkhrs, $supervisorCheck, $transport)
{
    if ($jobCode == null) {
        $jobCode = getJobCodeByClientPosition($mysqli, $clientId, $positionId, $deptId);
    }
    if (!validateTimeSheet($mysqli, $shiftId)) {
        $ins = $mysqli->prepare("INSERT INTO timesheet(
                                          shiftId,
                                          shiftDate,
                                          shiftDay,
                                          candidateId,
                                          clientId,
                                          positionId,
                                          deptId,
                                          jobCode,
                                          shiftStart,
                                          shiftEnd,
                                          workBreak,
                                          wrkHrs,
                                          status,
                                          appStatus,
                                          supervisorEdit,
                                          transport)
                                        VALUES(
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?,
                                          ?)");
        $ins->bind_param("isssiiissssissss", $shiftId, $shiftDate, $shiftDay, $candidateId, $clientId, $positionId, $deptId, $jobCode, $supervisorCheckIn, $supervisorCheckOut, $workBreak, $wrkhrs, $shiftId, $supervisorCheck, $supervisorCheck, $transport) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            $ins->free_result();
            return 'Added';
        } else {
            return $mysqli->error;
        }
    } else {
        $accountsEdit = 'N';
        $supEdit = 'N';
        $appStatus = 'Y';
        $up = $mysqli->prepare("UPDATE timesheet SET
                                          shiftStart = ?,
                                          shiftEnd = ?,
                                          workBreak = ?,
                                          wrkHrs = ?,
                                          supervisorEdit = ?,
                                          appStatus = ?
                                        WHERE
                                          shiftId = ? AND
                                          supervisorEdit = ? AND
                                          accountsEdit = ?") or die($mysqli->error);
        $up->bind_param("ssssssiss", $supervisorCheckIn, $supervisorCheckOut, $workBreak, $wrkhrs, $supervisorCheck, $appStatus, $shiftId, $supEdit, $accountsEdit) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow == '1') {
            $up->free_result();
            return 'updated';
        } else {
            return $mysqli->error;
        }
    }
}

function getConfirmedShiftsByCasual($mysqli, $casualId, $conStatus, $startDate, $endDate)
{
    $sql = $mysqli->prepare("SELECT 
                              shift.shiftId,
                              shift.shiftDate,
                              shift.shiftDay,
                              shift.clientId,
                              shift.stateId,
                              shift.departmentId,
                              shift.candidateId,
                              shift.shiftStart,
                              shift.shiftEnd,
                              shift.workBreak,
                              shift.positionId,
                              candidate.firstName,
                              candidate.lastName,
                              candidate.supervicerId
                    FROM
                      shift
                      INNER JOIN candidate ON (candidate.candidateId = shift.candidateId)
                    WHERE
                      candidate.candidateId = ?
                    AND shift.shiftStatus = ?
                    AND shift.shiftDate BETWEEN ? AND ?   
                    AND shift.shiftId NOT IN(SELECT shiftId FROM timeclock)                 
                    ORDER BY candidate.firstName, candidate.lastName ASC") or die($mysqli->error);
    $sql->bind_param("ssss", $casualId, $conStatus, $startDate, $endDate) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftDate, $shiftDay, $clientId, $stateId, $departmentId, $candidateId, $shiftStart, $shiftEnd, $workBreak, $positionId, $firstName, $lastName, $supervicerId) or die($mysqli->error);
    $jobArray = array();
    while ($sql->fetch()) {
        $jobArray[] = array('shiftId' => $shiftId, 'shiftDate' => $shiftDate, 'shiftDay' => $shiftDay, 'clientId' => $clientId, 'state' => getStateById($mysqli, $stateId), 'departmentId' => getDepartmentById($mysqli, $departmentId), 'candidateId' => $candidateId, 'shiftStart' => $shiftStart, 'shiftEnd' => $shiftEnd, 'workBreak' => $workBreak, 'positionId' => $positionId, 'firstName' => $firstName, 'lastName' => $lastName, 'supervicerId' => $supervicerId);
    }
    return $jobArray;
}

function validateExistingCasualAttendance($mysqli, $shiftId)
{
    $sqlchk = $mysqli->prepare("SELECT shiftId FROM timeclock WHERE shiftId = ?") or die($mysqli->error);
    $sqlchk->bind_param("i", $shiftId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function saveCasualAttendance($mysqli, $shiftId, $clientId, $positionId, $candidateId, $shiftDate, $shiftDay, $checkInTime, $checkOutTime, $workBreak, $wrkhrs, $check, $supervicerId, $comment)
{
    $deptId = getDepartmentIdByShiftId($mysqli, $shiftId);
    $jobCode = getJobCodeByClientPosition($mysqli, $clientId, $positionId, $deptId);
    $clockIn = '00:00';
    $clockOut = '00:00';
    $wrkHrs = calculateHoursWorked($shiftDate, $checkInTime, $checkOutTime, $workBreak);
    if (!validateExistingCasualAttendance($mysqli, $shiftId)) {
        $ins = $mysqli->prepare("INSERT INTO timeclock(shiftId,
                                                      candidateId,
                                                      shiftDate,
                                                      shiftDay,
                                                      clientId,
                                                      positionId,
                                                      deptId,
                                                      jobCode,
                                                      checkIn,
                                                      checkOut,
                                                      supervisorCheckIn,
                                                      supervisorCheckOut,
                                                      workBreak,
                                                      wrkhrs,
                                                      supervicerId,
                                                      supervisorCheck,
                                                      supervisor,
                                                      comment)
                                                    VALUES(?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?)") or die($mysqli->error);
        $ins->bind_param("isssiiisssssssisis", $shiftId, $candidateId, $shiftDate, $shiftDay, $clientId, $positionId, $deptId, $jobCode, $clockIn, $clockOut, $checkInTime, $checkOutTime, $workBreak, $wrkHrs, $supervicerId, $check, $supervicerId, $comment) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows > 0) {
            return 'inserted';
        } else {
            return $mysqli->error;
        }
    } else {
        return 'existing';
    }
}

function payrollSaveCasualAttendance($mysqli, $shiftId, $clientId, $positionId, $candidateId, $shiftDate, $shiftDay, $checkInTime, $payrollCheckInTime, $checkOutTime, $payrollCheckOutTime, $workBreak, $wrkhrs, $check, $supervicerId, $comment)
{

    $deptId = getDepartmentIdByShiftId($mysqli, $shiftId);
    $jobCode = getJobCodeByClientPosition($mysqli, $clientId, $positionId, $deptId);
    $clockIn = '00:00';
    $clockOut = '00:00';
    $wrkHrs = calculateHoursWorked($shiftDate, $checkInTime, $checkOutTime, $workBreak);
    if (!validateExistingCasualAttendance($mysqli, $shiftId)) {
        $ins = $mysqli->prepare("INSERT INTO timeclock(shiftId,
                                                      candidateId,
                                                      shiftDate,
                                                      shiftDay,
                                                      clientId,
                                                      positionId,
                                                      deptId,
                                                      jobCode,
                                                      checkIn,
                                                      checkOut,
                                                      supervisorCheckIn,
                                                      payrollCheckIn, 
                                                      supervisorCheckOut,
                                                      payrollCheckOut,
                                                      workBreak,
                                                      wrkhrs,
                                                      supervicerId,
                                                      supervisorCheck,
                                                      supervisor,
                                                      comment)
                                                    VALUES(?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?,
                                                          ?)") or die($mysqli->error);
        $ins->bind_param("isssiiisssssssssisis", $shiftId, $candidateId, $shiftDate, $shiftDay, $clientId, $positionId, $deptId, $jobCode, $clockIn, $clockOut, $checkInTime, $payrollCheckInTime, $checkOutTime, $payrollCheckOutTime, $workBreak, $wrkHrs, $supervicerId, $check, $supervicerId, $comment) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows > 0) {
            return 'inserted';
        } else {
            return $mysqli->error;
        }
    }
}

function getSupervisorEmail($mysqli, $supervisorId)
{
    $sql = $mysqli->prepare("SELECT email FROM candidate WHERE candidate_no = ?") or die($mysqli->error);
    $sql->bind_param("i", $supervisorId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->email;
    } else {
        return null;
    }
}

function getSupervisorNameById($mysqli, $supervisorId)
{
    $stmt = $mysqli->prepare("SELECT supervisorName FROM supervisor WHERE supervisorId = ?") or die($mysqli->error);
    $stmt->bind_param("i", $supervisorId) or die($mysqli->error);
    $stmt->execute();
    $supervisorName = $stmt->get_result()->fetch_object()->supervisorName;
    return $supervisorName;
}


function getRosterBySupervisorClient($mysqli, $empSelected, $supervisorClient)
{
    if (!empty($empSelected)) {
        $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)  
                                WHERE
                                  timeclock.supervisorCheck = ? AND 
                                  timeclock.candidateId = ? AND 
                                  timeclock.clientId = ?") or die($mysqli->error);
        $sql->bind_param("sss", $conStatus, $empSelected, $supervisorClient) or die($mysqli->error);
    } else if (empty($empSelected)) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.candidateId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  shift
                                  LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND 
                                  shift.clientId = ?") or die($mysqli->error);
        $sql->bind_param("ss", $supervisorClient) or die($mysqli->error);
    }
    $sql->execute();
    $sql->bind_result($id, $shiftId, $candidateId, $shiftDate, $shiftDay, $clientId, $positionId, $jobCode, $checkIn, $checkOut, $supervisorCheckIn, $supervisorCheckOut, $workBreak, $wrkhrs, $supervicerId, $supervisorCheck, $rosterStart, $rosterEnd) or die($mysqli->error);
    $sql->store_result();
    $jobArray = array();
    while ($sql->fetch()) {
        $jobArray[] = array('id' => $id, 'shiftId' => $shiftId, 'candidateId' => $candidateId, 'shiftDate' => $shiftDate, 'shiftDay' => $shiftDay, 'clientId' => $clientId, 'positionId' => $positionId, 'jobcode' => $jobCode, 'checkIn' => $checkIn, 'checkOut' => $checkOut, 'supervisorCheckIn' => $supervisorCheckIn, 'supervisorCheckOut' => $supervisorCheckOut, 'workBreak' => $workBreak, 'wrkhrs' => $wrkhrs, 'confirmedTime' => $confirmedTime, 'confirmCheckOutTime' => $confirmCheckOutTime, 'workBreak' => $workBreak, 'supervicerId' => $supervicerId, 'supervisorCheck' => $supervisorCheck, 'rosterStart' => $rosterStart, 'rosterEnd' => $rosterEnd);
    }
    return $jobArray;
}

function getTimeClockBySupervisor($mysqli, $conStatus, $empSelected, $supervisorClient)
{
    if (!empty($empSelected)) {
        $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)  
                                WHERE
                                  timeclock.supervisorCheck = ? AND 
                                  timeclock.candidateId = ? AND 
                                  timeclock.clientId = ?") or die($mysqli->error);
        $sql->bind_param("sss", $conStatus, $empSelected, $supervisorClient) or die($mysqli->error);
    } else if (empty($empSelected)) {
        $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)    
                                WHERE
                                  timeclock.supervisorCheck = ? AND 
                                  timeclock.clientId = ?") or die($mysqli->error);
        $sql->bind_param("ss", $conStatus, $supervisorClient) or die($mysqli->error);
    }
    $sql->execute();
    $sql->bind_result($id, $shiftId, $candidateId, $shiftDate, $shiftDay, $clientId, $positionId, $jobCode, $checkIn, $checkOut, $supervisorCheckIn, $supervisorCheckOut, $workBreak, $wrkhrs, $supervicerId, $supervisorCheck, $rosterStart, $rosterEnd) or die($mysqli->error);
    $sql->store_result();
    $jobArray = array();
    while ($sql->fetch()) {
        $jobArray[] = array('id' => $id, 'shiftId' => $shiftId, 'candidateId' => $candidateId, 'shiftDate' => $shiftDate, 'shiftDay' => $shiftDay, 'clientId' => $clientId, 'positionId' => $positionId, 'jobcode' => $jobCode, 'checkIn' => $checkIn, 'checkOut' => $checkOut, 'supervisorCheckIn' => $supervisorCheckIn, 'supervisorCheckOut' => $supervisorCheckOut, 'workBreak' => $workBreak, 'wrkhrs' => $wrkhrs, 'confirmedTime' => $confirmedTime, 'confirmCheckOutTime' => $confirmCheckOutTime, 'workBreak' => $workBreak, 'supervicerId' => $supervicerId, 'supervisorCheck' => $supervisorCheck, 'rosterStart' => $rosterStart, 'rosterEnd' => $rosterEnd);
    }
    return $jobArray;
}

function getTimeClockBySupervisorForPeriod($mysqli, $conStatus, $startDate, $endDate, $empSelected, $supervisorClient, $deptId, $posId)
{

    if (!empty($empSelected) && ($deptId != 0) && ($posId != 0)) {
        $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.comment,
                                  timeclock.checkin_latitude, 
                                  timeclock.checkin_longitude, 
                                  timeclock.checkout_latitude, 
                                  timeclock.checkout_longitude,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)  
                                WHERE
                                  timeclock.supervisorCheck = ?
                                AND  timeclock.shiftDate BETWEEN ? AND ?
                                AND timeclock.candidateId = ? AND
                                timeclock.clientId = ? AND
                                timeclock.deptId = ? AND 
                                timeclock.positionId = ?      
                                ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
        $sql->bind_param("ssssiii", $conStatus, $startDate, $endDate, $empSelected, $supervisorClient, $deptId, $posId) or die($mysqli->error);
    } elseif (!empty($empSelected) && ($deptId == 0) && ($posId == 0)) {
        $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.comment,
                                  timeclock.checkin_latitude, 
                                  timeclock.checkin_longitude, 
                                  timeclock.checkout_latitude, 
                                  timeclock.checkout_longitude,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)  
                                WHERE
                                  timeclock.supervisorCheck = ?
                                AND  timeclock.shiftDate BETWEEN ? AND ?
                                AND timeclock.candidateId = ? AND
                                timeclock.clientId = ?
                                ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
        $sql->bind_param("ssssi", $conStatus, $startDate, $endDate, $empSelected, $supervisorClient) or die($mysqli->error);
    } elseif (empty($empSelected) && ($deptId != 0) && ($posId != 0)) {
        $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.comment,
                                  timeclock.checkin_latitude, 
                                  timeclock.checkin_longitude, 
                                  timeclock.checkout_latitude, 
                                  timeclock.checkout_longitude,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)  
                                WHERE
                                  timeclock.supervisorCheck = ?
                                AND  timeclock.shiftDate BETWEEN ? AND ? AND
                                timeclock.clientId = ? AND timeclock.deptId = ? AND timeclock.positionId = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
        $sql->bind_param("sssiii", $conStatus, $startDate, $endDate, $supervisorClient, $deptId, $posId) or die($mysqli->error);
    } elseif (empty($empSelected) && ($deptId == 0) && ($posId == 0)) {
        $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.comment,
                                  timeclock.checkin_latitude, 
                                  timeclock.checkin_longitude, 
                                  timeclock.checkout_latitude, 
                                  timeclock.checkout_longitude,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)  
                                WHERE
                                  timeclock.supervisorCheck = ?
                                AND timeclock.shiftDate BETWEEN ? AND ? AND
                                timeclock.clientId = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
        $sql->bind_param("sssi", $conStatus, $startDate, $endDate, $supervisorClient) or die($mysqli->error);
    }
    $sql->execute();
    $sql->bind_result($id,
        $shiftId,
        $candidateId,
        $shiftDate,
        $shiftDay,
        $clientId,
        $positionId,
        $jobCode,
        $checkIn,
        $checkOut,
        $supervisorCheckIn,
        $payrollCheckIn,
        $supervisorCheckOut,
        $payrollCheckOut,
        $workBreak,
        $wrkhrs,
        $supervicerId,
        $supervisorCheck,
        $comment,
        $checkin_latitude,
        $checkin_longitude,
        $checkout_latitude,
        $checkout_longitude,
        $rosterStart,
        $rosterEnd) or die($mysqli->error);
    $sql->store_result();
    $jobArray = array();
    while ($sql->fetch()) {
        $jobArray[] = array(
            'id' => $id,
            'shiftId' => $shiftId,
            'candidateId' => $candidateId,
            'shiftDate' => $shiftDate,
            'shiftDay' => $shiftDay,
            'clientId' => $clientId,
            'positionId' => $positionId,
            'jobcode' => $jobCode,
            'checkIn' => $checkIn,
            'checkOut' => $checkOut,
            'workBreak' => $workBreak,
            'wrkhrs' => $wrkhrs,
            'confirmedTime' => '',
            'confirmCheckOutTime' => '',
            'supervicerId' => $supervicerId,
            'supervisorCheck' => $supervisorCheck,
            'comment' => $comment,
            'checkin_latitude' => $checkin_latitude,
            'checkin_longitude' => $checkin_longitude,
            'checkout_latitude' => $checkout_latitude,
            'checkout_longitude' => $checkout_longitude,
            'rosterStart' => $rosterStart,
            'rosterEnd' => $rosterEnd,
            'supervisorCheckIn' => $supervisorCheckIn,
            'payrollCheckIn' => $payrollCheckIn,
            'supervisorCheckOut' => $supervisorCheckOut,
            'payrollCheckOut' => $payrollCheckOut,
            'type' => 'C');
    }
    //return $jobArray;
    if ($conStatus != 'Y') {
        return getRosterTimes($mysqli, $conStatus, $jobArray, $startDate, $endDate, $supervisorClient, $empSelected, $deptId, $posId);
    } else {
        return $jobArray;
    }
}

function getRosterTimes($mysqli, $conStatus, $jobArray, $startDate, $endDate, $supervisorClient, $empSelected, $deptId, $posId)
{
    $shiftStatus = 'CONFIRMED';
    // $conStatus = 'N';
    if (!empty($empSelected) && ($deptId != 0) && ($posId != 0)) {
        $sql = $mysqli->prepare("SELECT 
                              shift.shiftId,
                              shift.candidateId,
                              shift.shiftDate,
                              shift.shiftDay,
                              shift.clientId,
                              shift.positionId,
                              shift.workBreak,
                              shift.wrkhrs,
                              shift.shiftStart,
                              shift.shiftEnd
                            FROM
                              shift
                            WHERE
                              shift.candidateId = ? AND
                              shift.shiftDate BETWEEN ? AND ? AND 
                              shift.clientId = ?
                              AND
                              shift.departmentId = ?
                              AND
                              shift.positionId = ?
                              AND
                              shift.shiftStatus = ? 
                              AND
                              shift.shiftId NOT IN (SELECT 
                                                      timeclock.shiftId
                                                    FROM
                                                      timeclock
                                                    WHERE
                                                      timeclock.shiftDate BETWEEN ? AND ? AND
                                                    timeclock.clientId = ? ORDER BY timeclock.shiftId ASC)
                              ORDER BY shift.shiftId ASC");
        $sql->bind_param("sssiiisssi", $empSelected, $startDate, $endDate, $supervisorClient, $deptId, $posId, $shiftStatus, $startDate, $endDate, $supervisorClient) or die($mysqli->error);
    } elseif (!empty($empSelected) && ($deptId == 0) && ($posId == 0)) {
        $sql = $mysqli->prepare("SELECT 
                              shift.shiftId,
                              shift.candidateId,
                              shift.shiftDate,
                              shift.shiftDay,
                              shift.clientId,
                              shift.positionId,
                              shift.workBreak,
                              shift.wrkhrs,
                              shift.shiftStart,
                              shift.shiftEnd
                            FROM
                              shift
                            WHERE
                              shift.candidateId = ? AND
                              shift.shiftDate BETWEEN ? AND ? AND 
                              shift.clientId = ?
                              AND
                              shift.shiftStatus = ? 
                              AND
                              shift.shiftId NOT IN (SELECT 
                                                      timeclock.shiftId
                                                    FROM
                                                      timeclock
                                                    WHERE
                                                      timeclock.shiftDate BETWEEN ? AND ? AND
                                                    timeclock.clientId = ? ORDER BY timeclock.shiftId ASC)
                              ORDER BY shift.shiftId ASC");
        $sql->bind_param("sssisssi", $empSelected, $startDate, $endDate, $supervisorClient, $shiftStatus, $startDate, $endDate, $supervisorClient) or die($mysqli->error);
    } elseif (empty($empSelected) && ($deptId == 0) && ($posId == 0)) {
        $sql = $mysqli->prepare("SELECT 
                              shift.shiftId,
                              shift.candidateId,
                              shift.shiftDate,
                              shift.shiftDay,
                              shift.clientId,
                              shift.positionId,
                              shift.workBreak,
                              shift.wrkhrs,
                              shift.shiftStart,
                              shift.shiftEnd
                            FROM
                              shift
                            WHERE
                              shift.shiftDate BETWEEN ? AND ? AND 
                              shift.clientId = ?
                              AND
                              shift.shiftStatus = ? 
                              AND
                              shift.shiftId NOT IN (SELECT 
                                                      timeclock.shiftId
                                                    FROM
                                                      timeclock
                                                    WHERE
                                                      timeclock.shiftDate BETWEEN ? AND ? AND
                                                    timeclock.clientId = ? ORDER BY timeclock.shiftId ASC)
                              ORDER BY shift.shiftId ASC");
        $sql->bind_param("ssisssi", $startDate, $endDate, $supervisorClient, $shiftStatus, $startDate, $endDate, $supervisorClient) or die($mysqli->error);
    } elseif (empty($empSelected) && ($deptId != 0) && ($posId != 0)) {
        $sql = $mysqli->prepare("SELECT 
                              shift.shiftId,
                              shift.candidateId,
                              shift.shiftDate,
                              shift.shiftDay,
                              shift.clientId,
                              shift.positionId,
                              shift.workBreak,
                              shift.wrkhrs,
                              shift.shiftStart,
                              shift.shiftEnd
                            FROM
                              shift
                            WHERE
                              shift.shiftDate BETWEEN ? AND ? AND 
                              shift.clientId = ?
                              AND
                              shift.departmentId = ?
                              AND
                              shift.positionId = ?
                              AND
                              shift.shiftStatus = ? 
                              AND
                              shift.shiftId NOT IN (SELECT 
                                                      timeclock.shiftId
                                                    FROM
                                                      timeclock
                                                    WHERE
                                                      timeclock.shiftDate BETWEEN ? AND ? AND
                                                    timeclock.clientId = ?
                                                    AND
                                                    timeclock.deptId = ? ORDER BY timeclock.shiftId ASC)
                              ORDER BY shift.shiftId ASC");
        $sql->bind_param("ssiiisssii", $startDate, $endDate, $supervisorClient, $deptId, $posId, $shiftStatus, $startDate, $endDate, $supervisorClient, $deptId) or die($mysqli->error);
    }
    /*else{
        $sql= $mysqli->prepare("SELECT
                              shift.shiftId,
                              shift.candidateId,
                              shift.shiftDate,
                              shift.shiftDay,
                              shift.clientId,
                              shift.positionId,
                              shift.workBreak,
                              shift.wrkhrs,
                              shift.shiftStart,
                              shift.shiftEnd
                            FROM
                              shift
                            WHERE
                              shift.shiftDate BETWEEN ? AND ? AND
                              shift.clientId = ?
                              AND
                              shift.shiftStatus = ?
                              AND
                              shift.shiftId NOT IN (SELECT
                                                      timeclock.shiftId
                                                    FROM
                                                      timeclock
                                                    WHERE
                                                      timeclock.supervisorCheck = ?
                                                    AND  timeclock.shiftDate BETWEEN ? AND ? AND
                                                    timeclock.clientId = ? ORDER BY timeclock.shiftId ASC)
                              ORDER BY shift.shiftId ASC");
        $sql->bind_param("ssissssi", $startDate, $endDate,$supervisorClient,$shiftStatus,$conStatus,$startDate,$endDate,$supervisorClient) or die($mysqli->error);
    }*/
    $sql->execute();
    $sql->bind_result($shiftId, $candidateId, $shiftDate, $shiftDay, $clientId, $positionId, $workBreak, $wrkhrs, $shiftStart, $shiftEnd) or die($mysqli->error);
    $sql->store_result();
    //$newArray = new ArrayObject($jobArray);
    while ($sql->fetch()) {
        //if(!array_value_check($jobArray,'shiftId',$shiftId)){
        //if (!array_key_exists($shiftId, $jobArray)) {
        //$row = array('shiftId' => $shiftId);
        if (!validateTimeSheet($mysqli, $shiftId)) {
            $row = array('shiftId' => $shiftId, 'candidateId' => $candidateId, 'shiftDate' => $shiftDate, 'shiftDay' => $shiftDay, 'clientId' => $clientId, 'positionId' => $positionId, 'jobcode' => getJobCodeByClientPosition($mysqli, $clientId, $positionId, $deptId), 'checkIn' => '', 'checkOut' => '', 'workBreak' => '', 'wrkhrs' => '', 'confirmedTime' => '', 'confirmCheckOutTime' => '', 'supervicerId' => '', 'supervisorCheck' => '', 'rosterStart' => $shiftStart, 'rosterEnd' => $shiftEnd, 'supervisorCheckIn' => '', 'supervisorCheckOut' => '', 'type' => 'R');
            $jobArray[] = $row;
        }
    }
    return $jobArray;
}

function array_value_check($array, $key, $val)
{
    foreach ($array as $item) {
        if (isset($item[$key]) && $item[$key] == $val) {
            return true;
        } else {
            return false;
        }
    }
}

function getCandidateIdByShiftId($mysqli, $shiftId)
{
    $sql = $mysqli->prepare("SELECT candidateId FROM shift WHERE shiftId = ?") or die($mysqli->error);
    $sql->bind_param("i", $shiftId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->candidateId;
    } else {
        return null;
    }
}

function getuid($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT uid FROM uid_container WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->uid;
    } else {
        return null;
    }
}

function getShiftDataByShiftId($mysqli, $insertId)
{
    $sql = $mysqli->prepare("SELECT 
                              shift.shiftId,
                              shift.shiftDate,
                              shift.shiftDay,
                              shift.stateId,
                              shift.departmentId,
                              shift.candidateId,
                              shift.shiftStart,
                              shift.shiftEnd,
                              shift.workBreak,
                              shift.shiftStatus,
                              shift.shiftSMSStatus,
                              shift.consultantId,
                              shift.positionId,
                              shift.addressId,
                              candidate_position.positionName,
                              shift_address.latitude,
                              shift_address.longitude,
                              client.client,
                              shift_address.address,
                              shift_address.street,
                              shift_address.city,
                              shift_address.state,
                              shift_address.sub,
                              shift_address.country,
                              shift_address.postalCode                              
                            FROM
                              shift
                              INNER JOIN shift_address ON (shift.addressId = shift_address.id)
                              INNER JOIN client ON (shift.clientId = client.clientId)
                              INNER JOIN candidate_position ON (shift.positionId = candidate_position.positionid)
                            WHERE
                              shift.shiftId = ?") or die($mysqli->error);
    $sql->bind_param("i", $insertId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId,
        $shiftDate,
        $shiftDay,
        $stateId,
        $departmentId,
        $candidateId,
        $shiftStart,
        $shiftEnd,
        $workBreak,
        $shiftStatus,
        $shiftSMSStatus,
        $consultantId,
        $positionId,
        $addressId,
        $positionName,
        $latitude,
        $longitude,
        $client,
        $address,
        $street,
        $city,
        $state,
        $sub,
        $country,
        $postalCode) or die($mysqli->error);
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray = array(
            'shiftId' => $shiftId,
            'shiftDate' => $shiftDate,
            'shiftDay' => $shiftDay,
            'stateId' => $stateId,
            'departmentId' => $departmentId,
            'candidateId' => $candidateId,
            'shiftStart' => $shiftStart,
            'shiftEnd' => $shiftEnd,
            'workBreak' => $workBreak,
            'shiftStatus' => $shiftStatus,
            'shiftSMSStatus' => $shiftSMSStatus,
            'consultantId' => $consultantId,
            'positionId' => $positionId,
            'addressId' => $addressId,
            'positionName' => $positionName,
            'latitude' => $latitude,
            'longitude' => $longitude,
            'client' => $client,
            'address' => $address,
            'street' => $street,
            'city' => $city,
            'state' => $state,
            'sub' => $sub,
            'country' => $country,
            'postalCode' => $postalCode);
    }
    return $dataArray;
}

function getShiftInfoByShiftId($mysqli, $shId)
{
    $sql = $mysqli->prepare("SELECT 
                              shift.shiftId,
                              shift.shiftDate,
                              shift.shiftDay,
                              shift.stateId,
                              shift.departmentId,
                              shift.candidateId,
                              shift.shiftStart,
                              shift.shiftEnd,
                              shift.workBreak,
                              shift.shiftStatus,
                              shift.shiftSMSStatus,
                              shift.consultantId,
                              shift.positionId,
                              shift.addressId,
                              candidate_position.positionName,
                              shift_address.latitude,
                              shift_address.longitude,
                              client.client,
                              shift_address.address,
                              shift_address.street,
                              shift_address.city,
                              shift_address.state,
                              shift_address.sub,
                              shift_address.country,
                              shift_address.postalCode                              
                            FROM
                              shift
                              INNER JOIN shift_address ON (shift.addressId = shift_address.id)
                              INNER JOIN client ON (shift.clientId = client.clientId)
                              INNER JOIN candidate_position ON (shift.positionId = candidate_position.positionid)
                            WHERE
                              shift.shiftId = ?") or die($mysqli->error);
    $sql->bind_param("i", $shId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId,
        $shiftDate,
        $shiftDay,
        $stateId,
        $departmentId,
        $candidateId,
        $shiftStart,
        $shiftEnd,
        $workBreak,
        $shiftStatus,
        $shiftSMSStatus,
        $consultantId,
        $positionId,
        $addressId,
        $positionName,
        $latitude,
        $longitude,
        $client,
        $address,
        $street,
        $city,
        $state,
        $sub,
        $country,
        $postalCode) or die($mysqli->error);
    $info = '';
    while ($sql->fetch()) {
        $info = $info . 'shiftId: ' . $shiftId .
            ' shiftDate: ' . $shiftDate .
            ' shiftDay: ' . $shiftDay .
            ' stateId: ' . $stateId .
            ' department: ' . getDepartmentById($mysqli, $departmentId) .
            ' candidateId: ' . $candidateId .
            ' shiftStart: ' . $shiftStart .
            ' shiftEnd: ' . $shiftEnd .
            ' workBreak: ' . $workBreak .
            ' shiftStatus: ' . $shiftStatus .
            ' shiftSMSStatus: ' . $shiftSMSStatus .
            ' consultant: ' . getConsultantName($mysqli, $consultantId) .
            ' position: ' . getPositionByPositionId($mysqli, $positionId) .
            ' addressId: ' . $addressId .
            ' positionName: ' . $positionName .
            ' latitude: ' . $latitude .
            ' longitude: ' . $longitude .
            ' client: ' . $client .
            ' address: ' . $address .
            ' street: ' . $street .
            ' city: ' . $city .
            ' state: ' . $state .
            ' sub: ' . $sub .
            ' country: ' . $country .
            ' postalCode: ' . $postalCode;
    }
    return $info;
}

function saveFirebaseShift($mysqli, $insertId)
{
    $ins = $mysqli->prepare("INSERT INTO firebase_shifts(shiftId) VALUES(?)") or die($mysqli->error);
    $ins->bind_param("i", $insertId) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return false;
    }
}

function getFirebaseShifts($mysqli)
{
    $sql = $mysqli->prepare("SELECT shiftId FROM firebase_shifts WHERE status = 'DEFAULT'") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId) or die($mysqli->error);
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('shiftId' => $shiftId);
    }
    return $dataArray;
}

function removeFirebaseShift($mysqli, $shiftId)
{
    $del = $mysqli->prepare("DELETE FROM firebase_shifts WHERE shiftId = ?") or die($mysqli->error);
    $del->bind_param("i", $shiftId) or die($mysqli->error);
    $del->execute();
}

/*function removeFirebaseShiftOnline($mysqli,$shiftId){
    $del = $mysqli->prepare("DELETE FROM remove_firebase_shifts WHERE shiftId = ?") or die($mysqli->error);
    $del->bind_param("i",$shiftId) or die($mysqli->error);
    $del->execute();
}*/
function getFirebaseRemovalShifts($mysqli)
{
    $sql = $mysqli->prepare("SELECT shiftId FROM remove_firebase_shifts WHERE status = 'REMOVE'") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId) or die($mysqli->error);
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('shiftId' => $shiftId);
    }
    return $dataArray;
}

function addToRemoveFirebaseShiftOnline($mysqli, $shiftId)
{
    $ins = $mysqli->prepare("INSERT INTO remove_firebase_shifts(shiftId) VALUES(?)") or die($mysqli->error);
    $ins->bind_param("i", $shiftId) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return false;
    }
}

function deleteFirebaseshiftsFromTemp($mysqli, $shiftId)
{
    $del = $mysqli->prepare("DELETE FROM remove_firebase_shifts WHERE shiftId = ?") or die($mysqli->error);
    $del->bind_param("i", $shiftId) or die($mysqli->error);
    $del->execute();
}

function removeAllFirebaseShifts($mysqli)
{
    $del1 = $mysqli->prepare("DELETE FROM firebase_shifts") or die($mysqli->error);
    $del1->execute();
    $del2 = $mysqli->prepare("DELETE FROM remove_firebase_shifts") or die($mysqli->error);
    $del2->execute();
}

function getShiftDateByShiftId($mysqli, $shiftId)
{
    $sql = $mysqli->prepare("SELECT shiftDate FROM shift WHERE shiftId = ?") or die($mysqli->error);
    $sql->bind_param("i", $shiftId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->shiftDate;
    } else {
        return null;
    }
}

function saveCancelledFirebaseShift($mysqli, $insertId, $shiftStatus)
{
    $ins = $mysqli->prepare("INSERT INTO cancelled_firebase_shifts(shiftId,shiftStatus) VALUES(?,?)") or die($mysqli->error);
    $ins->bind_param("is", $insertId, $shiftStatus) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return false;
    }
}

function getCancelledFirebaseShifts($mysqli)
{
    $sql = $mysqli->prepare("SELECT shiftId FROM cancelled_firebase_shifts") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId) or die($mysqli->error);
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('shiftId' => $shiftId);
    }
    return $dataArray;
}

function removeCancelledFirebaseShift()
{
    $del1 = $mysqli->prepare("DELETE FROM cancelled_firebase_shifts") or die($mysqli->error);
    $del1->execute();
}

function approveAttendance($mysqli, $shiftId, $shiftDate, $checkInTime, $checkOutTime, $workBreak, $wrkhrs, $check, $supervisorId, $position_id, $client_id, $comment)
{
    $wrkHrs = calculateHoursWorked($shiftDate, $checkInTime, $checkOutTime, $workBreak);
    $deptId = getDepartmentIdByShiftId($mysqli, $shiftId);
    $jobCode = getJobCodeByClientPosition($mysqli, $client_id, $position_id, $deptId);
    $up = $mysqli->prepare("UPDATE timeclock 
                              SET supervisorCheckIn = ?,
                                  supervisorCheckOut = ?,
                                  workBreak = ?, 
                                  wrkhrs = ?, 
                                  supervisorCheck = ?, 
                                  supervisor = ?, 
                                  positionId = ?,
                                  jobCode = ?,
                                  comment = ?,
                                  approvalTime = NOW() 
                              WHERE shiftId = ? ") or die($mysqli->error);
    $up->bind_param("sssssiissi", $checkInTime, $checkOutTime, $workBreak, $wrkHrs, $check, $supervisorId, $position_id, $jobCode, $comment, $shiftId) or die($mysqli->error);
    $up->execute();
    $nrow = $up->affected_rows;
    if ($nrow == '1') {
        $up->free_result();
        $statusCheck = 'updated';
    } else {
        $statusCheck = $mysqli->error;
    }
    return $statusCheck;
}

function payrollApproveAttendance($mysqli, $shiftId, $shiftDate, $checkInTime, $payrollCheckInTime, $checkOutTime, $payrollCheckOutTime, $workBreak, $wrkhrs, $check, $supervisorId, $position_id, $client_id, $comment)
{
    $wrkHrs = calculateHoursWorked($shiftDate, $checkInTime, $checkOutTime, $workBreak);
    $deptId = getDepartmentIdByShiftId($mysqli, $shiftId);
    $jobCode = getJobCodeByClientPosition($mysqli, $client_id, $position_id, $deptId);
    $up = $mysqli->prepare("UPDATE timeclock 
                              SET supervisorCheckIn = ?,
                                  payrollCheckIn = ?,
                                  supervisorCheckOut = ?,
                                  payrollCheckOut = ?,
                                  workBreak = ?, 
                                  wrkhrs = ?, 
                                  supervisorCheck = ?, 
                                  supervisor = ?, 
                                  positionId = ?,
                                  jobCode = ?,
                                  comment = ?,
                                  approvalTime = NOW() 
                              WHERE shiftId = ? ") or die($mysqli->error);
    $up->bind_param("sssssssiissi", $checkInTime, $payrollCheckInTime, $checkOutTime, $payrollCheckOutTime, $workBreak, $wrkHrs, $check, $supervisorId, $position_id, $jobCode, $comment, $shiftId) or die($mysqli->error);
    $up->execute();
    $nrow = $up->affected_rows;
    if ($nrow == '1') {
        $up->free_result();
        $statusCheck = 'updated';
    } else {
        $statusCheck = $mysqli->error;
    }
    return $statusCheck;
}

/* Supervisor Lock */
function getSuperviorStatus($mysqli, $supervisorId)
{
    $sql = $mysqli->prepare("SELECT empStatus FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $supervisorId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->empStatus;
    } else {
        return null;
    }
}

function displayGeneratedHireRates($mysqli)
{
    $sql = $mysqli->prepare("SELECT client,position,award,client_email,rates_file,sent_date,ip,signed_rate_file,submit_date
									  FROM
										hire_rates
                                      ORDER BY sent_date DESC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($client, $position, $award, $client_email, $rates_file, $sent_date, $ip, $signed_rate_file, $submit_date) or die($mysqli->error);
    $sql->store_result();
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr>
                        <td>' . $client . '</td>
                        <td>' . $position . '</td>
                        <td>' . $award . '</td>
                        <td>' . $client_email . '</td>
                        <td><a href="' . $rates_file . '" target="_blank" class="fa fa-file-pdf-o">Rates File</a></td>
                        <td>' . $sent_date . '</td>
                        <td>' . $ip . '</td>
                        <td>';
        if (!empty($signed_rate_file)) {
            $row = $row . '<a href="' . $signed_rate_file . '" target="_blank" class="fa fa-file-pdf-o">Signed Rates File</a>';
        }
        $row = $row . '</td><td>' . $submit_date . '</td></tr>';
    }
    return $row;
}

function saveGeneratedHireRates($mysqli, $client, $position, $award, $client_email, $rates_file, $sent_date)
{
    $ins = $mysqli->prepare("INSERT INTO hire_rates(client,position,award,client_email,rates_file,sent_date) VALUES(?,?,?,?,?,?)") or die($mysqli->error);
    $ins->bind_param("ssssss", $client, $position, $award, $client_email, $rates_file, $sent_date) or die($mysqli->error);
    if ($ins->execute()) {
        return $ins->insert_id;
    } else {
        return false;
    }
}

function updateGeneratedHireRates($mysqli, $id, $ip, $signed_rate_file, $submit_date)
{
    $up = $mysqli->prepare("UPDATE hire_rates SET ip = ?, signed_rate_file = ?, submit_date = ? WHERE id = ?") or die($mysqli->error);
    $up->bind_param("sssi", $ip, $signed_rate_file, $submit_date, $id) or die($mysqli->error);
    $up->execute();
    $nrow = $up->affected_rows;
    if ($nrow == '1') {
        return true;
    } else {
        return false;
    }
}

function generateHireRatesNotification($emailAddress, $cc, $bcc, $mailSubject, $from, $fromName, $mailBody, $file, $proof1, $proof2, $proof3, $client, $award, $id)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = SALES_EMAIL;
    $mail->Password = SALES_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom($from, $fromName);
    $mail->AddAddress($emailAddress);
    if (!empty($cc)) {
        $mail->AddCC($cc);
    }
    $mail->AddCC(ACCOUNTS_EMAIL);
    if (!empty($bcc)) {
        $mail->AddBCC($bcc);
    }
    $mail->Subject = $mailSubject;
    $mail->IsHTML(true);
    $sign_link = '<table cellspacing="0" cellpadding="0">
                    <tr>
                    <td style="border-radius: 2px;" bgcolor="#3377b1">
                        <a href="' . DOMAIN_URL . '/signHireRate.php?file=' . base64_encode($file) . '&client=' . base64_encode($client) . '&award=' . base64_encode($award) . '&id=' . base64_encode($id) . '" target="_blank" style="padding: 8px 12px; border: 1px solid #3377b1;border-radius: 2px;font-family: Helvetica, Arial, sans-serif;font-size: 14px; color: #ffffff;text-decoration: none;font-weight:bold;display: inline-block;">Click here to sign</a>
                    </td>
                    </tr>
                  </table>';
    $mail->Body = $mailBody . '<br>Please click below link to sign <br>' . $sign_link;
    $mail->AddAttachment($file);
    if (!empty($proof1)) {
        $mail->AddAttachment($proof1['tmp_name'], $proof1['name']);
    }
    if (!empty($proof2)) {
        $mail->AddAttachment($proof2['tmp_name'], $proof2['name']);
    }
    if (!empty($proof3)) {
        $mail->AddAttachment($proof3['tmp_name'], $proof3['name']);
    }
    $mail->send();
    if ($mail) {
        return "MAILSENT";
    } else {
        return "FAILURE";
    }
}

function generateVerificationNotification($emailAddress, $cc, $bcc, $mailSubject, $from, $fromName, $mailBody, $file, $terms)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom($from, $fromName);
    $mail->AddAddress($emailAddress);
    if (!empty($cc)) {
        $mail->AddCC($cc);
    }
    if (!empty($bcc)) {
        $mail->AddBCC($bcc);
    }
    $mail->Subject = $mailSubject;
    $mail->IsHTML(true);
    $mail->Body = $mailBody;
    $mail->AddAttachment($file);
    $mail->AddAttachment($terms);
    $mail->send();
    if ($mail) {
        return "MAILSENT";
    } else {
        return "FAILURE";
    }
}

function generateNotification($emailAddress, $cc, $bcc, $mailSubject, $from, $fromName, $mailBody, $file, $terms)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom($from, $fromName);
    $mail->AddAddress($emailAddress);

    if (!empty($cc)) {
        $mail->AddCC($cc);
    }
    if (!empty($bcc)) {
        $mail->AddBCC($bcc);
    }
    $mail->Subject = $mailSubject;
    $mail->IsHTML(true);
    $mail->Body = $mailBody;
    $mail->AddAttachment($file);
    $mail->AddAttachment($terms);
    $mail->send();
    if ($mail) {
        return "MAILSENT";
    } else {
        return "FAILURE";
    }
}

function generateClockInNotificationForCasual($employeeName, $shiftDate, $checkInTime, $checkOutTime, $workBreak, $wrkhrs, $employeeEmail, $supervisorName)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . ' - Supervisor ClockIn Confirmation';
    $mail->AddAddress($employeeEmail);
    $mail->AddBCC(DEFAULT_EMAIL);
    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = '<span style="font-family:Arial, Verdana, Geneva, sans-serif; font-size:11pt;"> ' . $employeeName . ', <br><br>' . $supervisorName . ' has confirmed work&nbsp;<br>Confirmed Shift Information<br>' . $shiftDate . '&nbsp;CheckInTime&nbsp;' . $checkInTime . '&nbsp;CheckOutTime&nbsp;' . $checkOutTime . '&nbsp;Work Break&nbsp;' . $workBreak . '&nbsp;Work Hours&nbsp;' . $wrkhrs . '<div><br>Any Issues, Please contact <br><br/></span>';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "MAILSENT";
    } else {
        return "FAILURE";
    }
}

function generateClockInNotification($accountsEmail, $supervisorName, $supervisorLoginInfo, $client)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . ' - Supervisor Timesheet Confirmations - ' . $client;
    $mail->AddAddress($accountsEmail);
    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = '';
    $body = $body . '<span style="font-family:Arial, Verdana, Geneva, sans-serif; font-size:11pt;"> To Accounts Division, <br><br>' . $supervisorName . ' supervisor has confirmed work timesheet at ' . date('d-m-Y H:i:s') . '<div>';
    $body = $body . $supervisorLoginInfo;
    $body = $body . '<br/></span>';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "MAILSENT";
    } else {
        return "FAILURE";
    }
}

function getConfirmedClockInData($mysqli, $startDate, $endDate, $empSelected, $supervisorClient, $supervisorCheck, $deptId)
{
    if (!empty($startDate) && !empty($endDate) && !empty($empSelected)) {
        if ($deptId <> 0) {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate BETWEEN ? AND ? 
                                AND  
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND 
                                  timeclock.deptId = ?    
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("sssiis", $startDate, $endDate, $empSelected, $supervisorClient, $deptId, $supervisorCheck) or die($mysqli->error);
        } else {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate BETWEEN ? AND ? 
                                AND  
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("sssis", $startDate, $endDate, $empSelected, $supervisorClient, $supervisorCheck) or die($mysqli->error);
        }
    } else if (empty($startDate) && !empty($endDate) && !empty($empSelected)) {
        if ($deptId <> 0) {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate = ? 
                                AND  
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND
                                  timeclock.deptId = ?  
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("ssiis", $endDate, $empSelected, $supervisorClient, $deptId, $supervisorCheck) or die($mysqli->error);
        } else {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate = ? 
                                AND  
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("ssis", $endDate, $empSelected, $supervisorClient, $supervisorCheck) or die($mysqli->error);
        }

    } else if (empty($startDate) && empty($endDate) && !empty($empSelected)) {
        if ($deptId <> 0) {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND
                                  timeclock.deptId = ?  
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("siis", $empSelected, $supervisorClient, $deptId, $supervisorCheck) or die($mysqli->error);
        } else {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND timeclock.supervisorCheck = ? ORDER BY  timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("sis", $empSelected, $supervisorClient, $supervisorCheck) or die($mysqli->error);
        }

    } else if (empty($startDate) && empty($endDate) && empty($empSelected)) {
        if ($deptId <> 0) {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.clientId = ?
                                AND
                                  timeclock.deptId = ?
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("iis", $supervisorClient, $deptId, $supervisorCheck) or die($mysqli->error);
        } else {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.clientId = ?
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("is", $supervisorClient, $supervisorCheck) or die($mysqli->error);
        }

    } else if (empty($startDate) && !empty($endDate) && !empty($empSelected)) {
        if ($deptId <> 0) {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate = ? 
                                AND 
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND
                                  timeclock.deptId = ?  
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("ssiis", $endDate, $empSelected, $supervisorClient, $deptId, $supervisorCheck) or die($mysqli->error);
        } else {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate = ? 
                                AND 
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("ssis", $endDate, $empSelected, $supervisorClient, $supervisorCheck) or die($mysqli->error);
        }

    } else if (!empty($startDate) && !empty($endDate) && empty($empSelected)) {
        if ($deptId <> 0) {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate BETWEEN ? AND ?
                                AND
                                  timeclock.clientId = ?
                                AND
                                  timeclock.deptId = ?  
                                AND 
                                  timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("ssiis", $startDate, $endDate, $supervisorClient, $deptId, $supervisorCheck) or die($mysqli->error);
        } else {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate BETWEEN ? AND ?
                                AND
                                  timeclock.clientId = ?
                                AND 
                                  timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("ssis", $startDate, $endDate, $supervisorClient, $supervisorCheck) or die($mysqli->error);
        }
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($id, $shiftId, $candidateId, $shiftDate, $shiftDay, $clientId, $positionId, $jobCode, $checkIn, $checkOut, $supervisorCheckIn, $payrollCheckIn, $supervisorCheckOut, $payrollCheckOut, $workBreak, $wrkhrs, $supervicerId, $supervisorCheck, $supervisor, $approvalTime, $rosterStart, $rosterEnd);
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('id' => $id, 'shiftId' => $shiftId, 'candidateId' => $candidateId, 'shiftDate' => $shiftDate, 'shiftDay' => $shiftDay, 'clientId' => $clientId, 'positionId' => $positionId, 'jobcode' => $jobCode, 'checkIn' => $checkIn, 'checkOut' => $checkOut, 'supervisorCheckIn' => $supervisorCheckIn, 'payrollCheckIn' => $payrollCheckIn, 'supervisorCheckOut' => $supervisorCheckOut, 'payrollCheckOut' => $payrollCheckOut, 'workBreak' => $workBreak, 'wrkhrs' => $wrkhrs, 'supervicerId' => $supervicerId, 'approvalTime' => $approvalTime, 'rosterStart' => $rosterStart, 'rosterEnd' => $rosterEnd);
    }
    if ($mysqli->error) {
        return $mysqli->error;
    } else {
        return $dataArray;
    }
}

function getUnConfirmedClockInData($mysqli, $startDate, $endDate, $empSelected, $supervisorClient, $supervisorCheck, $deptId, $positionId)
{
    if (!empty($startDate) && !empty($endDate) && !empty($empSelected)) {
        if ($deptId <> 0) {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate BETWEEN ? AND ? 
                                AND  
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND 
                                  timeclock.deptId = ?
                                AND 
                                  timeclock.positionId = ?  
                                AND timeclock.supervisorCheck = ?
                                ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("sssiiss", $startDate, $endDate, $empSelected, $supervisorClient, $deptId, $positionId, $supervisorCheck) or die($mysqli->error);
        } else {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate BETWEEN ? AND ? 
                                AND  
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND 
                                  timeclock.positionId = ?  
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("sssiis", $startDate, $endDate, $empSelected, $supervisorClient, $positionId, $supervisorCheck) or die($mysqli->error);
        }
    } else if (empty($startDate) && !empty($endDate) && !empty($empSelected)) {
        if ($deptId <> 0) {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate = ? 
                                AND  
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND
                                  timeclock.deptId = ?
                                AND 
                                  timeclock.positionId = ?  
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("ssiiis", $endDate, $empSelected, $supervisorClient, $deptId, $positionId, $supervisorCheck) or die($mysqli->error);
        } else {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate = ? 
                                AND  
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND 
                                  timeclock.positionId = ?  
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("ssiis", $endDate, $empSelected, $supervisorClient, $positionId, $supervisorCheck) or die($mysqli->error);
        }

    } else if (empty($startDate) && empty($endDate) && !empty($empSelected)) {
        if ($deptId <> 0) {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND
                                  timeclock.deptId = ?
                                AND 
                                  timeclock.positionId = ?  
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("siiis", $empSelected, $supervisorClient, $deptId, $positionId, $supervisorCheck) or die($mysqli->error);
        } else {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND 
                                  timeclock.positionId = ?  
                                AND timeclock.supervisorCheck = ? ORDER BY  timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("siis", $empSelected, $supervisorClient, $positionId, $supervisorCheck) or die($mysqli->error);
        }

    } else if (empty($startDate) && empty($endDate) && empty($empSelected)) {
        if ($deptId <> 0) {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.clientId = ?
                                AND
                                  timeclock.deptId = ?
                                AND 
                                  timeclock.positionId = ?  
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("iiis", $supervisorClient, $deptId, $positionId, $supervisorCheck) or die($mysqli->error);
        } else {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.clientId = ?
                                AND 
                                  timeclock.positionId = ?  
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("iis", $supervisorClient, $positionId, $supervisorCheck) or die($mysqli->error);
        }

    } else if (empty($startDate) && !empty($endDate) && !empty($empSelected)) {
        if ($deptId <> 0) {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate = ? 
                                AND 
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND
                                  timeclock.deptId = ?
                                AND 
                                  timeclock.positionId = ?  
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("ssiiis", $endDate, $empSelected, $supervisorClient, $deptId, $positionId, $supervisorCheck) or die($mysqli->error);
        } else {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate = ? 
                                AND 
                                  timeclock.candidateId = ?
                                AND
                                  timeclock.clientId = ?
                                AND 
                                  timeclock.positionId = ?  
                                AND timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("ssiis", $endDate, $empSelected, $supervisorClient, $positionId, $supervisorCheck) or die($mysqli->error);
        }

    } else if (!empty($startDate) && !empty($endDate) && empty($empSelected)) {
        if ($deptId <> 0) {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate BETWEEN ? AND ?
                                AND
                                  timeclock.clientId = ?
                                AND
                                  timeclock.deptId = ?
                                AND 
                                  timeclock.positionId = ?  
                                AND 
                                  timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("ssiiis", $startDate, $endDate, $supervisorClient, $deptId, $positionId, $supervisorCheck) or die($mysqli->error);
        } else {
            $sql = $mysqli->prepare("SELECT 
                                  timeclock.id,
                                  timeclock.shiftId,
                                  timeclock.candidateId,
                                  timeclock.shiftDate,
                                  timeclock.shiftDay,
                                  timeclock.clientId,
                                  timeclock.positionId,
                                  timeclock.jobCode,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.payrollCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.payrollCheckOut,
                                  timeclock.workBreak,
                                  timeclock.wrkhrs,
                                  timeclock.supervicerId,
                                  timeclock.supervisorCheck,
                                  timeclock.supervisor,
                                  timeclock.approvalTime,
                                  shift.shiftStart AS rosterStart,
                                  shift.shiftEnd AS rosterEnd
                                FROM
                                  timeclock
                                  LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)
                                  INNER JOIN candidate ON (timeclock.candidateId = candidate.candidateId)
                                WHERE
                                  timeclock.shiftDate BETWEEN ? AND ?
                                AND
                                  timeclock.clientId = ?
                                AND 
                                  timeclock.positionId = ?  
                                AND 
                                  timeclock.supervisorCheck = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
            $sql->bind_param("ssiis", $startDate, $endDate, $supervisorClient, $positionId, $supervisorCheck) or die($mysqli->error);
        }
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($id, $shiftId, $candidateId, $shiftDate, $shiftDay, $clientId, $positionId, $jobCode, $checkIn, $checkOut, $supervisorCheckIn, $payrollCheckIn, $supervisorCheckOut, $payrollCheckOut, $workBreak, $wrkhrs, $supervicerId, $supervisorCheck, $supervisor, $approvalTime, $rosterStart, $rosterEnd);
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('id' => $id, 'shiftId' => $shiftId, 'candidateId' => $candidateId, 'shiftDate' => $shiftDate, 'shiftDay' => $shiftDay, 'clientId' => $clientId, 'positionId' => $positionId, 'jobcode' => $jobCode, 'checkIn' => $checkIn, 'checkOut' => $checkOut, 'supervisorCheckIn' => $supervisorCheckIn, 'payrollCheckIn' => $payrollCheckIn, 'supervisorCheckOut' => $supervisorCheckOut, 'payrollCheckOut' => $payrollCheckOut, 'workBreak' => $workBreak, 'wrkhrs' => $wrkhrs, 'supervicerId' => $supervicerId, 'approvalTime' => $approvalTime, 'rosterStart' => $rosterStart, 'rosterEnd' => $rosterEnd);
    }
    if ($mysqli->error) {
        return $mysqli->error;
    } else {
        return $dataArray;
    }
}

function getCheckLogBySupervisor($mysqli, $supervisorId, $conStatus)
{
    $sql = $mysqli->prepare("SELECT 
                                  check_log.id,
                                  check_log.candidateId,
                                  check_log.shiftId,
                                  check_log.candidateNo,
                                  check_log.checkInDate,
                                  check_log.checkinAddress,
                                  check_log.checkOutDate,
                                  check_log.checkOutAddress,
                                  check_log.supeviserId,
                                  check_log.confirmed,
                                  check_log.actualWorkTime,
                                  check_log.confirmCheckInTime,
                                  check_log.confirmCheckOutTime,
                                  check_log.confirmedTime,
                                  check_log.workBreak,
                                  check_log.status,
                                  candidate.firstName, 
                                  candidate.lastName
                                FROM
                                  check_log
                                INNER JOIN candidate ON (check_log.candidateId = candidate.candidateId)  
                                WHERE check_log.supeviserId = ?
                                AND check_log.confirmed = ?
                                ORDER BY candidate.firstName, candidate.lastName ASC") or die($mysqli->error);
    $sql->bind_param("ss", $supervisorId, $conStatus) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($id, $candidateId, $shiftId, $candidateNo, $checkInDate, $checkinAddress, $checkOutDate, $checkOutAddress, $supeviserId, $confirmed, $actualWorkTime, $confirmCheckInTime, $confirmCheckOutTime, $confirmedTime, $workBreak, $status, $firstName, $lastName) or die($mysqli->error);
    $sql->store_result();
    $jobArray = array();
    while ($sql->fetch()) {
        $jobArray[] = array('id' => $id, 'candidateId' => $candidateId, 'shiftId' => $shiftId, 'candidateNo' => $candidateNo, 'checkInDate' => $checkInDate, 'checkinAddress' => $checkinAddress, 'checkOutDate' => $checkOutDate, 'checkOutAddress' => $checkOutAddress, 'supeviserId' => $supeviserId, 'confirmed' => $confirmed, 'actualWorkTime' => $actualWorkTime, 'confirmCheckInTime' => $confirmCheckInTime, 'confirmedTime' => $confirmedTime, 'confirmCheckOutTime' => $confirmCheckOutTime, 'workBreak' => $workBreak, 'status' => $status, 'firstName' => $firstName, 'lastName' => $lastName);
    }
    return $jobArray;
}

function getCheckLogBySupervisorForPeriod($mysqli, $supervisorId, $conStatus, $startDate, $endDate)
{
    $sql = $mysqli->prepare("SELECT 
                                  check_log.id,
                                  check_log.candidateId,
                                  check_log.shiftId,
                                  check_log.candidateNo,
                                  check_log.checkInDate,
                                  check_log.checkinAddress,
                                  check_log.checkOutDate,
                                  check_log.checkOutAddress,
                                  check_log.supeviserId,
                                  check_log.confirmed,
                                  check_log.actualWorkTime,
                                  check_log.confirmCheckInTime,
                                  check_log.confirmCheckOutTime,
                                  check_log.confirmedTime,
                                  check_log.workBreak,
                                  check_log.status,
                                  candidate.firstName, 
                                  candidate.lastName
                                FROM
                                  check_log
                                INNER JOIN candidate ON (check_log.candidateId = candidate.candidateId)  
                                WHERE check_log.supeviserId = ?
                                AND check_log.confirmed = ?
                                AND checkInDate BETWEEN ? AND ?
                                ORDER BY candidate.firstName, candidate.lastName ASC") or die($mysqli->error);
    $sql->bind_param("ssss", $supervisorId, $conStatus, $startDate, $endDate) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($id, $candidateId, $shiftId, $candidateNo, $checkInDate, $checkinAddress, $checkOutDate, $checkOutAddress, $supeviserId, $confirmed, $actualWorkTime, $confirmCheckInTime, $confirmCheckOutTime, $confirmedTime, $workBreak, $status, $firstName, $lastName) or die($mysqli->error);
    $sql->store_result();
    $jobArray = array();
    while ($sql->fetch()) {
        $jobArray[] = array('id' => $id, 'candidateId' => $candidateId, 'shiftId' => $shiftId, 'candidateNo' => $candidateNo, 'checkInDate' => $checkInDate, 'checkinAddress' => $checkinAddress, 'checkOutDate' => $checkOutDate, 'checkOutAddress' => $checkOutAddress, 'supeviserId' => $supeviserId, 'confirmed' => $confirmed, 'actualWorkTime' => $actualWorkTime, 'confirmCheckInTime' => $confirmCheckInTime, 'confirmedTime' => $confirmedTime, 'confirmCheckOutTime' => $confirmCheckOutTime, 'workBreak' => $workBreak, 'status' => $status, 'firstName' => $firstName, 'lastName' => $lastName);
    }
    return $jobArray;
}

function getCheckLog($mysqli, $conStatus)
{

    $sql = $mysqli->prepare("SELECT 
                                  check_log.id,
                                  check_log.candidateId,
                                  check_log.shiftId,
                                  check_log.candidateNo,
                                  check_log.checkInDate,
                                  check_log.checkinAddress,
                                  check_log.checkOutDate,
                                  check_log.checkOutAddress,
                                  check_log.supeviserId,
                                  check_log.confirmed,
                                  check_log.actualWorkTime,
                                  check_log.confirmCheckInTime,
                                  check_log.confirmCheckOutTime,
                                  check_log.confirmedTime,
                                  check_log.workBreak,
                                  check_log.status,
                                  candidate.firstName, 
                                  candidate.lastName
                                FROM
                                  check_log
                                INNER JOIN candidate ON (check_log.candidateId = candidate.candidateId)  
                                WHERE check_log.confirmed = ?
                                ORDER BY candidate.firstName, candidate.lastName ASC") or die($mysqli->error);
    $sql->bind_param("s", $conStatus) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($id, $candidateId, $shiftId, $candidateNo, $checkInDate, $checkinAddress, $checkOutDate, $checkOutAddress, $supeviserId, $confirmed, $actualWorkTime, $confirmCheckInTime, $confirmCheckOutTime, $confirmedTime, $workBreak, $status, $firstName, $lastName) or die($mysqli->error);
    $sql->store_result();
    $jobArray = array();
    while ($sql->fetch()) {
        $jobArray[] = array('id' => $id, 'candidateId' => $candidateId, 'shiftId' => $shiftId, 'candidateNo' => $candidateNo, 'checkInDate' => $checkInDate, 'checkinAddress' => $checkinAddress, 'checkOutDate' => $checkOutDate, 'checkOutAddress' => $checkOutAddress, 'supeviserId' => $supeviserId, 'confirmed' => $confirmed, 'actualWorkTime' => $actualWorkTime, 'confirmCheckInTime' => $confirmCheckInTime, 'confirmedTime' => $confirmedTime, 'confirmCheckOutTime' => $confirmCheckOutTime, 'workBreak' => $workBreak, 'status' => $status, 'firstName' => $firstName, 'lastName' => $lastName);
    }
    return $jobArray;
}

function getCheckLogForPeriod($mysqli, $conStatus, $startDate, $endDate)
{
    $sql = $mysqli->prepare("SELECT 
                                  check_log.id,
                                  check_log.candidateId,
                                  check_log.shiftId,
                                  check_log.candidateNo,
                                  check_log.checkInDate,
                                  check_log.checkinAddress,
                                  check_log.checkOutDate,
                                  check_log.checkOutAddress,
                                  check_log.supeviserId,
                                  check_log.confirmed,
                                  check_log.actualWorkTime,
                                  check_log.confirmCheckInTime,
                                  check_log.confirmCheckOutTime,
                                  check_log.confirmedTime,
                                  check_log.workBreak,
                                  check_log.status,
                                  candidate.firstName, 
                                  candidate.lastName
                                FROM
                                  check_log
                                INNER JOIN candidate ON (check_log.candidateId = candidate.candidateId)  
                                WHERE check_log.confirmed = ?
                                AND checkInDate BETWEEN ? AND ?
                                ORDER BY candidate.firstName, candidate.lastName ASC") or die($mysqli->error);
    $sql->bind_param("sss", $conStatus, $startDate, $endDate) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($id, $candidateId, $shiftId, $candidateNo, $checkInDate, $checkinAddress, $checkOutDate, $checkOutAddress, $supeviserId, $confirmed, $actualWorkTime, $confirmCheckInTime, $confirmCheckOutTime, $confirmedTime, $workBreak, $status, $firstName, $lastName) or die($mysqli->error);
    $sql->store_result();
    $jobArray = array();
    while ($sql->fetch()) {
        $jobArray[] = array('id' => $id, 'candidateId' => $candidateId, 'shiftId' => $shiftId, 'candidateNo' => $candidateNo, 'checkInDate' => $checkInDate, 'checkinAddress' => $checkinAddress, 'checkOutDate' => $checkOutDate, 'checkOutAddress' => $checkOutAddress, 'supeviserId' => $supeviserId, 'confirmed' => $confirmed, 'actualWorkTime' => $actualWorkTime, 'confirmCheckInTime' => $confirmCheckInTime, 'confirmedTime' => $confirmedTime, 'confirmCheckOutTime' => $confirmCheckOutTime, 'workBreak' => $workBreak, 'status' => $status, 'firstName' => $firstName, 'lastName' => $lastName);
    }
    return $jobArray;
}

function getClientIdByShiftId($mysqli, $shiftId)
{
    $sql = $mysqli->prepare("SELECT clientId FROM shift WHERE shiftId = ?") or die($mysqli->error);
    $sql->bind_param("i", $shiftId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->clientId;
    } else {
        return null;
    }
}

function getPositionIdByShiftId($mysqli, $shiftId)
{
    $sql = $mysqli->prepare("SELECT positionId FROM shift WHERE shiftId = ?") or die($mysqli->error);
    $sql->bind_param("i", $shiftId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->positionId;
    } else {
        return null;
    }
}

function clearStoredResults($mysqli_link)
{
#------------------------------------------
    while ($mysqli_link->next_result()) {
        if ($l_result = $mysqli_link->store_result()) {
            $l_result->free();
        }
    }
}

function saveCheckLog($mysqli, $shiftId, $candidateId, $shiftDate, $shiftStart, $shiftEnd, $workBreak, $wrkhrs, $checkTick)
{
    $supervisorEdit = 'Y';
    $appStatus = 'Y';
    $timeSheetStatus = 'UPDATED';
    $statusCheck = '';
    $clid = getClientIdByShiftId($mysqli, $shiftId);
    $posid = getPositionIdByShiftId($mysqli, $shiftId);
    $deptId = getDepartmentIdByShiftId($mysqli, $shiftId);
    $jobCode = getJobCodeByClientPosition($mysqli, $clid, $posid, $deptId);
    $weekendingDate = $shiftDate;
    $shiftDay = dayOfWeek($shiftDate);

    if ($jobCode == 'None') {
        return 'Please select a valid Job Code';
    } else {
        if (!empty($checkTick)) {
            if (!validateTimeSheetEntry($mysqli, $shiftId)) {
                $ins = $mysqli->prepare("INSERT INTO timesheet(shiftId,shiftDate,shiftDay,candidateId,clientId,positionId,jobCode,shiftStart,shiftEnd,workBreak,wrkHrs,weekendingDate,status,appStatus,supervisorEdit)VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
                $ins->bind_param("isssiisssississ", $shiftId, $shiftDate, $shiftDay, $candidateId, $clid, $posid, $jobCode, $shiftStart, $shiftEnd, $workBreak, $wrkhrs, $weekendingDate, $checkTick, $appStatus, $supervisorEdit) or die($mysqli->error);
                $ins->execute();
                $nrows = $ins->affected_rows;
                if ($nrows > 0) {
                    $ins->free_result();
                    updateShiftTimeSheetStatus($mysqli, $shiftId, $timeSheetStatus);
                    $checkInDate = $shiftDate . ' ' . $shiftStart;
                    $checkOutDate = $shiftDate . ' ' . $shiftEnd;
                    updateCheckLog($mysqli, $shiftId, $supervisorEdit, $checkInDate, $checkOutDate, $workBreak);
                    $statusCheck = 'Shifts Confirmed';
                } else {
                    $statusCheck = $mysqli->error;
                }
            } else {
                $statusCheck = 'Shifts Already Confirmed';
            }
            return $statusCheck;
        } else {
            return 'please tick at least one checkbox';
        }
    }
}

function updateCheckLog($mysqli, $shiftId, $supervisorEdit, $checkInDate, $checkOutDate, $workBreak)
{
    $up = $mysqli->prepare("UPDATE check_log SET confirmed = ?, confirmCheckInTime = ?, confirmCheckOutTime = ?, workBreak = ? WHERE shiftId = ?") or die($mysqli->error);
    $up->bind_param("sssii", $supervisorEdit, $checkInDate, $checkOutDate, $workBreak, $shiftId) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    if ($nrows > 0) {
        $up->free_result();
        $statusCheck = 'updated';
    } else {
        $statusCheck = $mysqli->error;
    }
}

/*===================================*/
function getMailComment($mysqli, $autoId)
{
    $sql = $mysqli->prepare("SELECT comment FROM mailcomment WHERE autoId = ?") or die($mysqli->error);
    $sql->bind_param("i", $autoId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->comment;
    } else {
        return null;
    }
}

function getTalentMailComment($mysqli, $autoId)
{
    $sql = $mysqli->prepare("SELECT comment FROM talent_mailcomment WHERE autoId = ?") or die($mysqli->error);
    $sql->bind_param("i", $autoId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->comment;
    } else {
        return null;
    }
}

function validateMailComment($mysqli, $autoId)
{
    $sqlchk = $mysqli->prepare("SELECT autoId FROM mailcomment WHERE autoId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("i", $autoId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateTalentMailComment($mysqli, $autoId)
{
    $sqlchk = $mysqli->prepare("SELECT autoId FROM talent_mailcomment WHERE autoId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("i", $autoId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function saveMailComment($mysqli, $autoId, $comment, $username)
{
    if (!validateMailComment($mysqli, $autoId)) {
        $ins = $mysqli->prepare("INSERT INTO mailcomment(autoId,comment,username,modifiedDate)VALUES(?,?,?,NOW())") or die($mysqli->error);
        $ins->bind_param("iss", $autoId, $comment, $username) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows > 0) {
            $ins->free_result();
            $statusCheck = 'inserted';
        } else {
            $statusCheck = $mysqli->error;
        }
        return $statusCheck;
    } else {
        $up = $mysqli->prepare("UPDATE mailcomment SET comment = ?, username = ?, modifiedDate = NOW() WHERE autoId = ?") or die($mysqli->error);
        $up->bind_param("ssi", $comment, $username, $autoId) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            $up->free_result();
            $statusCheck = 'updated';
        } else {
            $statusCheck = $mysqli->error;
        }
        return $statusCheck;
    }
}

function saveTalentMailComment($mysqli, $autoId, $comment, $username)
{
    if (!validateTalentMailComment($mysqli, $autoId)) {
        $ins = $mysqli->prepare("INSERT INTO talent_mailcomment(autoId,comment,username,modifiedDate)VALUES(?,?,?,NOW())") or die($mysqli->error);
        $ins->bind_param("iss", $autoId, $comment, $username) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows > 0) {
            $ins->free_result();
            $statusCheck = 'inserted';
        } else {
            $statusCheck = $mysqli->error;
        }
        return $statusCheck;
    } else {
        $up = $mysqli->prepare("UPDATE talent_mailcomment SET comment = ?, username = ?, modifiedDate = NOW() WHERE autoId = ?") or die($mysqli->error);
        $up->bind_param("ssi", $comment, $username, $autoId) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows > 0) {
            $up->free_result();
            $statusCheck = 'updated';
        } else {
            $statusCheck = $mysqli->error;
        }
        return $statusCheck;
    }
}

/* ---------------------------- dashboard reports ----------------------------*/
function getConsultantNotesKPI($mysqli, $startDate, $endDate, $consultants, $activities)
{
    if (!empty($consultants)) {
        $notesArray = array();
        foreach ($consultants as $value) {
            $query = "SELECT consultant.name,
                              diarynote.firstName,
                              diarynote.lastName,
                              diarynote.candidateId,
                              diarynote.diaryNoteId,
                              diarynote.todoDate,
                              diarynote.todoNote,
                              diarynote.actionDate,
                              diarynote.actionNote,
                              diarynote.loginAccount,
                              diarynote.activityId,
                              diarynote.consultantId
                            FROM
                              consultant
                              INNER JOIN diarynote ON (consultant.consultantId = diarynote.consultantId)
                            WHERE
                              consultant.consultantId = ? AND
                              diarynote.createdDate BETWEEN ? AND ?
                            ORDER BY consultant.name, diarynote.activityId";
            $stmt = $mysqli->prepare($query) or die($mysqli->error);
            $stmt->bind_param("iss", $value, $startDate, $endDate) or die($mysqli->error);
            $stmt->execute();
            $stmt->store_result();
            $stmt->bind_result($name, $firstName, $lastName, $candidateId, $diaryNoteId, $todoDate, $todoNote, $actionDate, $actionNote, $loginAccount, $activityId, $consultantId) or die($mysqli->error);
            while ($stmt->fetch()) {
                if (!empty($activities) && ($activities != null)) {
                    foreach ($activities as $act => $actValue) {
                        if ($actValue == $activityId) {
                            $notesArray[] = array('consultantName' => $name, 'empFirstName' => $firstName, 'empLastName' => $lastName, 'candidateId' => $candidateId, 'diaryNoteId' => $diaryNoteId, 'todoDate' => $todoDate, 'todoNote' => $todoNote, 'actionDate' => $actionDate, 'actionNote' => $actionNote, 'loginAccount' => $loginAccount, 'activityType' => getActivityTypeByActivityId($mysqli, $activityId), 'activityId' => $activityId, 'consultantId' => $consultantId);
                        }
                    }
                } else {
                    $notesArray[] = array('consultantName' => $name, 'empFirstName' => $firstName, 'empLastName' => $lastName, 'candidateId' => $candidateId, 'diaryNoteId' => $diaryNoteId, 'todoDate' => $todoDate, 'todoNote' => $todoNote, 'actionDate' => $actionDate, 'actionNote' => $actionNote, 'loginAccount' => $loginAccount, 'activityType' => getActivityTypeByActivityId($mysqli, $activityId), 'activityId' => $activityId, 'consultantId' => $consultantId);
                }
            }
        }
        return $notesArray;
    } else {
        $notesArray = array();
        $stmt = $mysqli->prepare("SELECT consultant.name,
                              diarynote.firstName,
                              diarynote.lastName,
                              diarynote.candidateId,
                              diarynote.diaryNoteId,
                              diarynote.todoDate,
                              diarynote.todoNote,
                              diarynote.actionDate,
                              diarynote.actionNote,
                              diarynote.loginAccount,
                              diarynote.activityId,
                              diarynote.consultantId
                            FROM
                              consultant
                              INNER JOIN diarynote ON (consultant.consultantId = diarynote.consultantId)
                            WHERE
                              diarynote.createdDate BETWEEN ? AND ? ORDER BY consultant.name,diarynote.activityId") or die($mysqli->error);
        $stmt->bind_param("ss", $startDate, $endDate) or die($mysqli->error);
        $stmt->execute();
        $stmt->store_result();
        $stmt->bind_result($name, $firstName, $lastName, $candidateId, $diaryNoteId, $todoDate, $todoNote, $actionDate, $actionNote, $loginAccount, $activityId, $consultantId) or die($mysqli->error);

        while ($stmt->fetch()) {
            if (!empty($activities) && ($activities != null)) {
                foreach ($activities as $act => $actValue) {
                    if ($actValue == $activityId) {
                        $notesArray[] = array('consultantName' => $name, 'empFirstName' => $firstName, 'empLastName' => $lastName, 'candidateId' => $candidateId, 'diaryNoteId' => $diaryNoteId, 'todoDate' => $todoDate, 'todoNote' => $todoNote, 'actionDate' => $actionDate, 'actionNote' => $actionNote, 'loginAccount' => $loginAccount, 'activityType' => getActivityTypeByActivityId($mysqli, $activityId), 'activityId' => $activityId, 'consultantId' => $consultantId);
                    }
                }
            } else {
                $notesArray[] = array('consultantName' => $name, 'empFirstName' => $firstName, 'empLastName' => $lastName, 'candidateId' => $candidateId, 'diaryNoteId' => $diaryNoteId, 'todoDate' => $todoDate, 'todoNote' => $todoNote, 'actionDate' => $actionDate, 'actionNote' => $actionNote, 'loginAccount' => $loginAccount, 'activityType' => getActivityTypeByActivityId($mysqli, $activityId), 'activityId' => $activityId, 'consultantId' => $consultantId);
            }
        }
        return $notesArray;
    }
}

/*-------------------- Dashboard VEVO Notifications ---------------------- */
function notifierLogCheck($mysqli, $diaryNoteId)
{
    $sqlchk = $mysqli->prepare("SELECT diaryNoteId FROM notifier_log WHERE diaryNoteId = ?") or die($mysqli->error);
    $sqlchk->bind_param("i", $diaryNoteId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function vevoIndicator($mysqli, $diaryNoteId)
{
    $actVevoId = 92; //AND DATE(todoDate) = CURDATE() - INTERVAL 7 DAY
    $nSQL = $mysqli->prepare("SELECT 
                                  todoDate
                                FROM
                                  diarynote
                                WHERE
                                  diarynote.diaryNoteId = ? 
                                AND
                                  diarynote.activityId = ?
                                AND
                                  diarynote.todoDate IS NOT NULL") or die($mysqli->error);
    $nSQL->bind_param("ii", $diaryNoteId, $actVevoId) or die($mysqli->error);
    $nSQL->execute();
    $nSQL->bind_result($todoDate) or die($mysqli->error);
    $nSQL->store_result();
    $nSQL->fetch();
    $num_of_rows = $nSQL->num_rows;
    if ($num_of_rows > 0) {
        //$sevenDaysBefore = date('Y-m-d H:i:s',strtotime('-7 day',strtotime($todoDate)));
        $sevenDaysBefore = new DateTime(strval($todoDate));
        $sevenDaysBefore->modify('-7 day');
        $todoChk = new DateTime();
        $todoChk->format('Y-m-d H:i:s');
        $todoChk->modify('+8 day');
        $dateToValidate = new DateTime(strval($todoDate));
        $currentDate = new DateTime();
        $currentDate->format('Y-m-d H:i:s');
        if ($dateToValidate > $todoChk) {
            return 'no';
        } else {
            if (($currentDate < $sevenDaysBefore)) {
                return 'vevo';
            } else {
                return 'no';
            }
        }
        /*
        if(strtotime($todoDate) < strtotime(date('Y-m-d H:i:s'))) {
            return 'vevo';
        }else{
            return strtotime($todoDate).'no'.strtotime(date('Y-m-d H:i:s'));
        }
        */
    } else {
        return '';
    }
}

function updateNotificationLog($mysqli, $diaryNoteId, $notifyStatus, $msg)
{
    $ins = $mysqli->prepare("INSERT INTO notifier_log(diaryNoteId,notifyStatus,logNote) VALUES(?,?,?)") or die($mysqli->error);
    $ins->bind_param("iis", $diaryNoteId, $notifyStatus, $msg) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return false;
    }
}


/* -------------------- INVOICE FUNCTIONS ------------------- */
function genNewInvoiceNo($mysqli)
{
    $stmt = $mysqli->prepare("SELECT MAX(invoice_no) AS max_invoiceId FROM invoice") or die($mysqli->error);
    $stmt->execute();
    $stmt->bind_result($max_invoiceId);
    $stmt->store_result();
    $stmt->fetch();
    if ($stmt->num_rows == 0) {
        $max_invoiceId = 1;
    } else {
        $max_invoiceId = $max_invoiceId + 1;
    }
    $invoiceId = $max_invoiceId;
    //$invoiceId = 'INV'.str_pad($max_invoiceId, 0, "-", STR_PAD_LEFT);
    return $invoiceId;
}

function saveInvoiceNo($mysqli, $invoiceNo)
{
    $sql = $mysqli->prepare("INSERT INTO invoice(invoiceId)VALUES (?)") or die($mysqli->error);
    $sql->bind_param("s", $invoiceNo) or die($mysqli->error);
    $sql->execute();
}

function getClientInvoiceType($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT invoiceType FROM client WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->invoiceType;
    } else {
        return null;
    }
}

function updateInvoiceAddition($mysqli, $id, $invoiceNo)
{
    $up = $mysqli->prepare("UPDATE invoice_addition SET invoiceNo = ? WHERE id = ?") or die($mysqli->error);
    $up->bind_param("si", $invoiceNo, $id) or die($mysqli->error);
    $up->execute();
    $nrows = $up->affected_rows;
    if ($nrows > 0) {
        $up->free_result();
        $statusCheck = 'updated';
    } else {
        $statusCheck = $mysqli->error;
    }
    return $statusCheck;
}

function getInvoiceAddition($mysqli, $client, $wkDate, $candidateId, $jobcode)
{
    $sql = $mysqli->prepare("SELECT id,clientId,weekendingDate,description,units,amount,empId,jobCode FROM invoice_addition WHERE clientId = ? AND weekendingDate = ? AND empId = ? AND jobCode = ?") or die($mysqli->error);
    $sql->bind_param("isss", $client, $wkDate, $candidateId, $jobcode) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($id, $clientId, $weekendingDate, $description, $units, $amount, $empId, $jobCode) or die($mysqli->error);
    $sql->store_result();
    $invArray = array();
    while ($sql->fetch()) {
        $invArray[] = array('id' => $id, 'clientId' => $clientId, 'weekendingDate' => $weekendingDate, 'description' => $description, 'units' => $units, 'amount' => $amount, 'empId' => $empId, 'jobCode' => $jobCode);
    }
    return $invArray;
}

function getInvoiceAdditionRows($mysqli)
{
    $sql = $mysqli->prepare("SELECT id,clientId,weekendingDate,description,units,amount,empId,jobCode FROM invoice_addition ORDER BY weekendingDate DESC") or die($mysqli->error);
    //$sql->bind_param("is",$client,$wkDate)or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($id, $clientId, $weekendingDate, $description, $units, $amount, $empId, $jobCode) or die($mysqli->error);
    $sql->store_result();
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>' . getClientNameByClientId($mysqli, $clientId) . '</td><td>' . $weekendingDate . '</td><td>' . $description . '</td><td>' . $units . '</td><td>' . $amount . '</td><td>' . $empId . '</td><td>' . getCandidateFullName($mysqli, $empId) . '</td><td>' . $jobCode . '</td><td class="addId" data-id="' . $id . '"><button type="button" id="removeBtn" class="removeBtn btn btn-danger"><i class="fa fa-trash"></i></button></td></tr>';
    }
    return $row;
}

function removeInvoiceAdditionRows($mysqli, $remove_id)
{
    $del = $mysqli->prepare("DELETE FROM invoice_addition WHERE id = ?") or die($mysqli->error);
    $del->bind_param("i", $remove_id) or die($mysqli->error);
    $del->execute();
    $nr = $del->affected_rows;
    if ($nr > 0) {
        return getInvoiceAdditionRows($mysqli);
    } else {
        return getInvoiceAdditionRows($mysqli);
    }
}

function verifyInvoiceAddition($mysqli, $clientId, $wkDate, $description)
{
    $sqlchk = $mysqli->prepare("SELECT id FROM invoice_addition WHERE clientId = ? AND weekendingDate = ? AND description = ?") or die ($mysqli->error);
    $sqlchk->bind_param("iss", $clientId, $wkDate, $description) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function saveInvoiceAddition($mysqli, $wkDate, $units, $clientId, $description, $amount, $candidateId, $jobCode)
{
    /*if(!verifyInvoiceAddition($mysqli,$clientId,$wkDate,$description)) {*/
    $sql = $mysqli->prepare("INSERT INTO invoice_addition(clientId,weekendingDate,description,units,amount,empId,jobCode) VALUES (?,?,?,?,?,?,?)") or die($mysqli->error);
    $sql->bind_param("issssss", $clientId, $wkDate, $description, $units, $amount, $candidateId, $jobCode) or die($mysqli->error);
    $sql->execute();
    $nrows = $sql->affected_rows;
    $status = '';
    if ($nrows > 0) {
        $sql->free_result();
        $status = getInvoiceAdditionRows($mysqli, $clientId, $wkDate);
    } else {
        $status = '<tr><td colspan="3">' . $mysqli->error . '</td></tr>';
    }
    return $status;
    /*}else{
        return getInvoiceAdditionRows($mysqli, $clientId, $wkDate);
    }*/
}

function getInvoiceTimeSheetTotalsByClient($mysqli, $weekendingDate, $payrollName, $jbCode, $clId)
{
    if (!empty($jbCode) || ($jbCode != '')) {
        $sql = $mysqli->prepare("SELECT 
                                      timesheet_totals.clientId,
                                      timesheet_totals.positionId,
                                      timesheet_totals.jobCode,
                                      timesheet_totals.candidateId,
                                      timesheet_totals.emgTotal,
                                      timesheet_totals.ordTotal,
                                      timesheet_totals.aftTotal,
                                      timesheet_totals.nightTotal,
                                      timesheet_totals.satTotal,
                                      timesheet_totals.sunTotal,
                                      timesheet_totals.ovtTotal,
                                      timesheet_totals.satovtTotal,
                                      timesheet_totals.sunovtTotal,
                                      timesheet_totals.povtTotal,
                                      timesheet_totals.totId,
                                      timesheet_totals.dblTotal,
                                      timesheet_totals.hldTotal,
                                      timesheet_totals.hol_total,
                                      timesheet_totals.rdoTotal,
                                      timesheet_totals.startDate,
                                      timesheet_totals.endDate,
                                      timesheet_totals.wkendDate,
                                      candidate.firstName
                                    FROM
                                      timesheet_totals
                                      INNER JOIN job_detail ON (timesheet_totals.clientId = job_detail.clientId)
                                      INNER JOIN candidate ON (candidate.candidateId = timesheet_totals.candidateId)                             
                                      AND (timesheet_totals.jobCode = job_detail.jobCode)
                                    WHERE
                                      timesheet_totals.wkendDate = ? AND 
                                      job_detail.payrollName = ? AND 
                                      timesheet_totals.jobCode = ? AND
                                      timesheet_totals.clientId = ?
                                    ORDER BY
                                      timesheet_totals.clientId,
                                      timesheet_totals.jobCode,
                                      candidate.firstName ASC") or die ($mysqli->error);
        $sql->bind_param("sisi", $weekendingDate, $payrollName, $jbCode, $clId) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT 
                          timesheet_totals.clientId,
                          timesheet_totals.positionId,
                          timesheet_totals.jobCode,
                          timesheet_totals.candidateId,
                          timesheet_totals.emgTotal,
                          timesheet_totals.ordTotal,
                          timesheet_totals.aftTotal,
                          timesheet_totals.nightTotal,
                          timesheet_totals.satTotal,
                          timesheet_totals.sunTotal,
                          timesheet_totals.ovtTotal,
                          timesheet_totals.satovtTotal,
                          timesheet_totals.sunovtTotal,
                          timesheet_totals.povtTotal,
                          timesheet_totals.totId,
                          timesheet_totals.dblTotal,
                          timesheet_totals.hldTotal,
                          timesheet_totals.hol_total,
                          timesheet_totals.rdoTotal,
                          timesheet_totals.startDate,
                          timesheet_totals.endDate,
                          timesheet_totals.wkendDate,
                          candidate.firstName
                        FROM
                          timesheet_totals
                          INNER JOIN job_detail ON (timesheet_totals.clientId = job_detail.clientId)
                         INNER JOIN candidate ON (candidate.candidateId = timesheet_totals.candidateId)                              
                          AND (timesheet_totals.jobCode = job_detail.jobCode)
                        WHERE
                          timesheet_totals.wkendDate = ? AND 
                          job_detail.payrollName = ? AND
                          timesheet_totals.clientId = ?
                        ORDER BY
                          timesheet_totals.clientId,
                          timesheet_totals.jobCode,
                          candidate.firstName ASC") or die ($mysqli->error);
        $sql->bind_param("sii", $weekendingDate, $payrollName, $clId) or die($mysqli->error);
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($clientId, $positionId, $jobCode, $candidateId, $emgTotal, $ordTotal, $aftTotal, $nightTotal, $satTotal, $sunTotal, $ovtTotal, $satovtTotal, $sunovtTotal, $povtTotal, $totId, $dblTotal, $hldTotal, $hol_total, $rdoTotal, $startDate, $endDate, $wkendDate, $firstName) or die($mysqli->error);
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('clientId' => $clientId, 'positionId' => $positionId, 'jobcode' => $jobCode, 'candidateId' => $candidateId, 'emgTotal' => $emgTotal, 'ordTotal' => $ordTotal, 'aftTotal' => $aftTotal, 'nightTotal' => $nightTotal, 'satTotal' => $satTotal, 'sunTotal' => $sunTotal, 'ovtTotal' => $ovtTotal, 'satovtTotal' => $satovtTotal, 'sunovtTotal' => $sunovtTotal, 'povtTotal' => $povtTotal, 'totId' => $totId, 'dblTotal' => $dblTotal, 'hldTotal' => $hldTotal, 'hol_total' => $hol_total, 'rdoTotal' => $rdoTotal, 'wkendDate' => $wkendDate);
    }
    $sql->free_result();
    return $dataArray;
}

function getAllInvoiceClients($mysqli, $weekendingDate, $payrollName)
{
    $sql = $mysqli->prepare("SELECT DISTINCT
                          timesheet_totals.clientId
                        FROM
                          timesheet_totals
                          INNER JOIN job_detail ON (timesheet_totals.clientId = job_detail.clientId)
                          AND (timesheet_totals.jobCode = job_detail.jobCode)
                        WHERE
                          timesheet_totals.wkendDate = ? AND 
                          job_detail.payrollName = ?
                        ORDER BY
                          timesheet_totals.clientId ASC") or die ($mysqli->error);
    $sql->bind_param("si", $weekendingDate, $payrollName) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($clientId) or die($mysqli->error);
    //$dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = $clientId;//array('clientId' => $clientId);
    }
    /*$sql->free_result();
    $sql->close();*/
    return $dataArray;
}

function getAllInvoiceClientsLength($mysqli, $weekendingDate, $payrollName)
{
    $sql = $mysqli->prepare("SELECT DISTINCT
                          timesheet_totals.clientId
                        FROM
                          timesheet_totals
                          INNER JOIN job_detail ON (timesheet_totals.clientId = job_detail.clientId)
                          AND (timesheet_totals.jobCode = job_detail.jobCode)
                        WHERE
                          timesheet_totals.wkendDate = ? AND 
                          job_detail.payrollName = ?
                        ORDER BY
                          timesheet_totals.clientId ASC") or die ($mysqli->error);
    $sql->bind_param("si", $weekendingDate, $payrollName) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->fetch();
    $num_of_rows = $sql->num_rows;
    return $num_of_rows;
}

function getInvoiceClientsList($mysqli, $weekendingDate, $payrollName)
{
    $select = $mysqli->prepare("SELECT DISTINCT
                          timesheet_totals.clientId
                        FROM
                          timesheet_totals
                          INNER JOIN job_detail ON (timesheet_totals.clientId = job_detail.clientId)
                          AND (timesheet_totals.jobCode = job_detail.jobCode)
                        WHERE
                          timesheet_totals.wkendDate = ? AND 
                          job_detail.payrollName = ?
                        ORDER BY
                          timesheet_totals.clientId ASC") or die($mysqli->error);
    $select->bind_param("si", $weekendingDate, $payrollName) or die($mysqli->error);
    $select->execute();
    $select->store_result();
    $select->bind_result($clientId) or die($mysqli->error);
    $opt = $opt . '<option value=""></option>';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $clientId . '">' . getClientNameByClientId($mysqli, $clientId) . '</option>';
    }
    return $opt;
}

function getInvoiceClientsBetween($mysqli, $weekendingDate, $payrollName, $offset, $length)
{
    $sql = $mysqli->prepare("SELECT DISTINCT
                          timesheet_totals.clientId
                        FROM
                          timesheet_totals
                          INNER JOIN job_detail ON (timesheet_totals.clientId = job_detail.clientId)
                          AND (timesheet_totals.jobCode = job_detail.jobCode)
                        WHERE
                          timesheet_totals.wkendDate = ? AND 
                          job_detail.payrollName = ?
                        ORDER BY
                          timesheet_totals.clientId ASC LIMIT ?, ?") or die ($mysqli->error);
    $sql->bind_param("siii", $weekendingDate, $payrollName, $offset, $length) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($clientId) or die($mysqli->error);
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('clientId' => $clientId);
    }
    $sql->free_result();
    $sql->close();
    return $dataArray;
}

function getInvoiceClient($mysqli, $weekendingDate, $payrollName, $clId)
{
    $sql = $mysqli->prepare("SELECT DISTINCT
                          timesheet_totals.clientId
                        FROM
                          timesheet_totals
                          INNER JOIN job_detail ON (timesheet_totals.clientId = job_detail.clientId)
                          AND (timesheet_totals.jobCode = job_detail.jobCode)
                        WHERE
                          timesheet_totals.wkendDate = ? AND 
                          job_detail.payrollName = ? AND
                          timesheet_totals.clientId = ?
                        ORDER BY
                          timesheet_totals.clientId ASC") or die ($mysqli->error);
    $sql->bind_param("sii", $weekendingDate, $payrollName, $clId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($clientId) or die($mysqli->error);
    //$dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = $clientId;
    }
    return $dataArray;
}

function getInvoiceTimeSheetTotals($mysqli, $weekendingDate, $payrollName, $jbCode)
{
    if (!empty($jbCode) || ($jbCode != '')) {
        $sql = $mysqli->prepare("SELECT 
                                      timesheet_totals.clientId,
                                      timesheet_totals.positionId,
                                      timesheet_totals.jobCode,
                                      timesheet_totals.candidateId,
                                      timesheet_totals.emgTotal,
                                      timesheet_totals.ordTotal,
                                      timesheet_totals.aftTotal,
                                      timesheet_totals.nightTotal,
                                      timesheet_totals.satTotal,
                                      timesheet_totals.sunTotal,
                                      timesheet_totals.ovtTotal,
                                      timesheet_totals.satovtTotal,
                                      timesheet_totals.sunovtTotal,
                                      timesheet_totals.povtTotal,
                                      timesheet_totals.totId,
                                      timesheet_totals.dblTotal,
                                      timesheet_totals.hldTotal,
                                      timesheet_totals.hol_total,
                                      timesheet_totals.rdoTotal,
                                      timesheet_totals.startDate,
                                      timesheet_totals.endDate,
                                      timesheet_totals.wkendDate,
                                      candidate.firstName
                                    FROM
                                      timesheet_totals
                                      INNER JOIN job_detail ON (timesheet_totals.clientId = job_detail.clientId)
                                      INNER JOIN candidate ON (candidate.candidateId = timesheet_totals.candidateId)
                                      AND (timesheet_totals.jobCode = job_detail.jobCode)
                                    WHERE
                                      timesheet_totals.wkendDate = ? AND 
                                      job_detail.payrollName = ? AND 
                                      timesheet_totals.jobCode = ?
                                    ORDER BY
                                      timesheet_totals.clientId,
                                      timesheet_totals.jobCode,
                                      candidate.firstName ASC") or die ($mysqli->error);
        $sql->bind_param("sis", $weekendingDate, $payrollName, $jbCode) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT 
                          timesheet_totals.clientId,
                          timesheet_totals.positionId,
                          timesheet_totals.jobCode,
                          timesheet_totals.candidateId,
                          timesheet_totals.emgTotal,
                          timesheet_totals.ordTotal,
                          timesheet_totals.aftTotal,
                          timesheet_totals.nightTotal,
                          timesheet_totals.satTotal,
                          timesheet_totals.sunTotal,
                          timesheet_totals.ovtTotal,
                          timesheet_totals.satovtTotal,
                          timesheet_totals.sunovtTotal,
                          timesheet_totals.povtTotal,
                          timesheet_totals.totId,
                          timesheet_totals.dblTotal,
                          timesheet_totals.hldTotal,
                          timesheet_totals.hol_total,
                          timesheet_totals.rdoTotal,
                          timesheet_totals.startDate,
                          timesheet_totals.endDate,
                          timesheet_totals.wkendDate,
                          candidate.firstName
                        FROM
                          timesheet_totals
                          INNER JOIN job_detail ON (timesheet_totals.clientId = job_detail.clientId)
                          INNER JOIN candidate ON (candidate.candidateId = timesheet_totals.candidateId)                             
                          AND (timesheet_totals.jobCode = job_detail.jobCode)
                        WHERE
                          timesheet_totals.wkendDate = ? AND 
                          job_detail.payrollName = ?
                        ORDER BY
                          timesheet_totals.clientId,
                          timesheet_totals.jobCode,
                          candidate.firstName ASC") or die ($mysqli->error);
        $sql->bind_param("si", $weekendingDate, $payrollName) or die($mysqli->error);
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($clientId, $positionId, $jobCode, $candidateId, $emgTotal, $ordTotal, $aftTotal, $nightTotal, $satTotal, $sunTotal, $ovtTotal, $satovtTotal, $sunovtTotal, $povtTotal, $totId, $dblTotal, $hldTotal, $hol_total, $rdoTotal, $startDate, $endDate, $wkendDate, $firstName) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('clientId' => $clientId, 'positionId' => $positionId, 'jobcode' => $jobCode, 'candidateId' => $candidateId, 'emgTotal' => $emgTotal, 'ordTotal' => $ordTotal, 'aftTotal' => $aftTotal, 'nightTotal' => $nightTotal, 'satTotal' => $satTotal, 'sunTotal' => $sunTotal, 'ovtTotal' => $ovtTotal, 'satovtTotal' => $satovtTotal, 'sunovtTotal' => $sunovtTotal, 'povtTotal' => $povtTotal, 'totId' => $totId, 'dblTotal' => $dblTotal, 'hldTotal' => $hldTotal, 'hol_total' => $hol_total, 'rdoTotal' => $rdoTotal, 'wkendDate' => $wkendDate);

    }
    return $dataArray;
}

function getRemittanceEmail($mysqli, $companyId)
{
    $sql = $mysqli->prepare("SELECT remittanceEmail FROM company WHERE companyId = ?") or die($mysqli->error);
    $sql->bind_param("i", $companyId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->remittanceEmail;
    } else {
        return null;
    }
}

function getCompanyIdByName($mysqli, $companyName)
{
    $sql = $mysqli->prepare("SELECT companyId FROM company WHERE companyName = ?") or die($mysqli->error);
    $sql->bind_param("s", $companyName) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->companyId;
    } else {
        return null;
    }
}

function getCompanyAddress($mysqli, $companyId)
{
    $sql = $mysqli->prepare("SELECT companyAddress FROM company WHERE companyId = ?") or die($mysqli->error);
    $sql->bind_param("i", $companyId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->companyAddress;
    } else {
        return null;
    }
}

function getCompanyAddressLine1($mysqli, $companyId)
{
    $sql = $mysqli->prepare("SELECT addressLine1 FROM company WHERE companyId = ?") or die($mysqli->error);
    $sql->bind_param("i", $companyId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->addressLine1;
    } else {
        return null;
    }
}

function getCompanyAddressLine2($mysqli, $companyId)
{
    $sql = $mysqli->prepare("SELECT addressLine2 FROM company WHERE companyId = ?") or die($mysqli->error);
    $sql->bind_param("i", $companyId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->addressLine2;
    } else {
        return null;
    }
}

function getCompanySuburb($mysqli, $companyId)
{
    $sql = $mysqli->prepare("SELECT suburb FROM company WHERE companyId = ?") or die($mysqli->error);
    $sql->bind_param("i", $companyId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->suburb;
    } else {
        return null;
    }
}

function getCompanyState($mysqli, $companyId)
{
    $sql = $mysqli->prepare("SELECT state FROM company WHERE companyId = ?") or die($mysqli->error);
    $sql->bind_param("i", $companyId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->state;
    } else {
        return null;
    }
}

function getCompanyPostCode($mysqli, $companyId)
{
    $sql = $mysqli->prepare("SELECT postCode FROM company WHERE companyId = ?") or die($mysqli->error);
    $sql->bind_param("i", $companyId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->postCode;
    } else {
        return null;
    }
}

function getCompanyPhone($mysqli, $companyId)
{
    $sql = $mysqli->prepare("SELECT telephone FROM company WHERE companyId = ?") or die($mysqli->error);
    $sql->bind_param("i", $companyId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->telephone;
    } else {
        return null;
    }
}

function getCompanyFax($mysqli, $companyId)
{
    $sql = $mysqli->prepare("SELECT fax FROM company WHERE companyId = ?") or die($mysqli->error);
    $sql->bind_param("i", $companyId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->fax;
    } else {
        return null;
    }
}

function getCompanyABN($mysqli, $companyId)
{
    $sql = $mysqli->prepare("SELECT abn FROM company WHERE companyId = ?") or die($mysqli->error);
    $sql->bind_param("i", $companyId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->abn;
    } else {
        return null;
    }
}

function getCompanyACN($mysqli, $companyId)
{
    $sql = $mysqli->prepare("SELECT acn FROM company WHERE companyId = ?") or die($mysqli->error);
    $sql->bind_param("i", $companyId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->acn;
    } else {
        return null;
    }
}

function getCompanyWebsite($mysqli, $companyId)
{
    $sql = $mysqli->prepare("SELECT website FROM company WHERE companyId = ?") or die($mysqli->error);
    $sql->bind_param("i", $companyId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->website;
    } else {
        return null;
    }
}

function getCompanyNote($mysqli, $companyId)
{
    $sql = $mysqli->prepare("SELECT companyNote FROM company WHERE companyId = ?") or die($mysqli->error);
    $sql->bind_param("i", $companyId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->companyNote;
    } else {
        return null;
    }
}

function getCompanyBankAccountInfo($mysqli, $companyId)
{
    $sql = $mysqli->prepare("SELECT bsb,accountNumber,accountName FROM companybankaccount WHERE companyId = ?") or die($mysqli->error);
    $sql->bind_param("i", $companyId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($bsb, $accountNumber, $accountName) or die($mysqli->error);
    $info = '';
    while ($sql->fetch()) {
        $info = 'Account Name: ' . $accountName . ' BSB: ' . $bsb . '  Account Number: ' . $accountNumber;
    }
    return $info;
}

function getCompanyDropdown($mysqli)
{
    $select = $mysqli->prepare("SELECT companyId, companyName FROM company ORDER BY companyName ASC ") or die($mysqli->error);
    $select->execute();
    $select->bind_result($companyId, $companyName) or die($mysqli->error);
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $companyId . '">' . $companyName . '</option>';
    }
    return $opt;
}

function getCompanyInfo($mysqli)
{
    $select = $mysqli->prepare("SELECT companyId, companyName, companyAddress, telephone, fax, companyDesc, companyLogoPath, website, remittanceEmail, abn, companyNote FROM company ORDER BY companyName ASC ") or die($mysqli->error);
    $select->execute();
    $select->bind_result($companyId, $companyName, $companyAddress, $telephone, $fax, $companyDesc, $companyLogoPath, $website, $remittanceEmail, $abn, $companyNote) or die($mysqli->error);
    $companyArray = array();
    while ($select->fetch()) {
        $companyArray[] = array('companyId' => $companyId, 'companyName' => $companyName, 'companyAddress' => $companyAddress, 'telephone' => $telephone, 'fax' => $fax, 'companyDesc' => $companyDesc, 'companyLogoPath' => $companyLogoPath, 'website' => $website, 'remittanceEmail' => $remittanceEmail, 'abn' => $abn, 'companyNote' => $companyNote);
    }
    return $companyArray;
}

function getCompanyInfoById($mysqli, $companyId)
{
    $select = $mysqli->prepare("SELECT companyId, companyName, companyAddress, telephone, fax, companyDesc, companyLogoPath, website, remittanceEmail, abn, companyNote FROM company WHERE companyId = ? ORDER BY companyName ASC ") or die($mysqli->error);
    $select->bind_param("i", $companyId) or die($mysqli->error);
    $select->execute();
    $select->bind_result($companyId, $companyName, $companyAddress, $telephone, $fax, $companyDesc, $companyLogoPath, $website, $remittanceEmail, $abn, $companyNote) or die($mysqli->error);
    $companyArray = array();
    while ($select->fetch()) {
        $companyArray[] = array('companyId' => $companyId, 'companyName' => $companyName, 'companyAddress' => $companyAddress, 'telephone' => $telephone, 'fax' => $fax, 'companyDesc' => $companyDesc, 'companyLogoPath' => $companyLogoPath, 'website' => $website, 'remittanceEmail' => $remittanceEmail, 'abn' => $abn, 'companyNote' => $companyNote);
    }
    return $companyArray;
}

function removeCompany($mysqli, $companyId, $logoPath)
{
    $delete = $mysqli->prepare("DELETE FROM company WHERE companyId = ?") or die($mysqli->error);
    $delete->bind_param("i", $companyId) or die($mysqli->error);
    $delete->execute();
    $nr = $delete->affected_rows;
    if ($nr > 0) {
        if (!empty($logoPath)) {
            unlink($logoPath);
        }
        return true;
    } else {
        return false;
    }
}

function getPaymentTermByTermId($mysqli, $termId)
{
    $sql = $mysqli->prepare("SELECT 
                                  client_terms.description
                                FROM
                                  client_terms
                                WHERE
                                  client_terms.termId = ?") or die($mysqli->error);
    $sql->bind_param("i", $termId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->description;
    } else {
        return null;
    }
}

function getPaymentTermGapByTermId($mysqli, $termId)
{
    $sql = $mysqli->prepare("SELECT 
                                  client_terms.days
                                FROM
                                  client_terms
                                WHERE
                                  client_terms.termId = ?") or die($mysqli->error);
    $sql->bind_param("i", $termId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->days;
    } else {
        return null;
    }
}

function getTermIdByClientId($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT terms FROM client WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->terms;
    } else {
        return null;
    }
}

function getClientAccountManager($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT accountManager FROM client WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->accountManager;
    } else {
        return null;
    }
}

function getClientAccountManagerFromJobDetail($mysqli, $clientId, $jobCode)
{
    $sql = $mysqli->prepare("SELECT contactFirstName,contactLastName FROM job_detail WHERE clientId = ? AND jobCode = ?") or die($mysqli->error);
    $sql->bind_param("is", $clientId, $jobCode) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($contactFirstName, $contactLastName) or die($mysqli->error);
    $accountManager = '';
    while ($sql->fetch()) {
        $accountManager = $contactFirstName . ' ' . $contactLastName;
    }
    return $accountManager;
}

/*function getClientAccountManagerFromJobDetail($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT contactFirstName,contactLastName FROM job_detail WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($contactFirstName, $contactLastName) or die($mysqli->error);
    $accountManager = '';
    while ($sql->fetch()) {
        $accountManager = $contactFirstName . ' ' . $contactLastName;
    }
    return $accountManager;
}*/

function getClientAddress($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT clientAddress FROM client WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->clientaddress;
    } else {
        return null;
    }
}

function validateInvoice($mysqli, $invoiceNo)
{
    $sqlchk = $mysqli->prepare("SELECT invoiceId  FROM invoice_detail WHERE invoiceId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $invoiceNo) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function getInvoiceReprintDates($mysqli)
{
    $select = $mysqli->prepare("SELECT DISTINCT invoiceDate FROM invoice_detail ORDER BY invoiceDate ASC ") or die($mysqli->error);
    $select->execute();
    $select->bind_result($invoiceDate) or die($mysqli->error);
    $opt = '<option value="None" disabled>None</option>';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $invoiceDate . '">' . $invoiceDate . '</option>';
    }
    return $opt;
}

function saveInvoice($mysqli, $invoiceNo, $invoiceDate, $weekendingDate, $clientId, $netAmount, $gst, $gross)
{
    if (!validateInvoice($mysqli, $invoiceNo)) {
        $sql = $mysqli->prepare("INSERT INTO invoice_detail(invoiceId,invoiceDate,weekendingDate,clientId,netAmount,gst,gross) VALUES (?,?,?,?,?,?,?)") or die($mysqli->error);
        $sql->bind_param("sssisss", $invoiceNo, $invoiceDate, $weekendingDate, $clientId, $netAmount, $gst, $gross) or die($mysqli->error);
        $sql->execute();
        $nrows = $sql->affected_rows;
        if ($nrows > 0) {
            $sql->free_result();
            $statusCheck = 'inserted';
        } else {
            $statusCheck = $mysqli->error;
        }
    } else {
        $statusCheck = 'existing';
    }
    return $statusCheck;
}

function getInvoiceReprintData($mysqli, $creationNo, $reprintDate)
{
    if (!empty($creationNo)) {
        $sql = $mysqli->prepare("SELECT 
                                  invoice_detail.creationNo,
                                  invoice_detail.invoiceId,
                                  invoice_detail.invoiceDate,
                                  invoice_detail.clientId,
                                  invoice_detail.netAmount,
                                  invoice_detail.gst,
                                  invoice_detail.gross,
                                  client.client,
                                  client.accountManager
                                FROM
                                  invoice_detail
                                INNER JOIN client ON (invoice_detail.clientId = client.clientId)                                  
                                WHERE invoice_detail.creationNo = ? AND invoice_detail.invoiceDate = ?
                                ORDER BY client.accountManager,client.client ASC") or die($mysqli->error);
        $sql->bind_param("is", $creationNo, $reprintDate) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT 
                                  invoice_detail.creationNo,
                                  invoice_detail.invoiceId,
                                  invoice_detail.invoiceDate,
                                  invoice_detail.clientId,
                                  invoice_detail.netAmount,
                                  invoice_detail.gst,
                                  invoice_detail.gross,
                                  client.client,
                                  client.accountManager
                                FROM
                                  invoice_detail
                                INNER JOIN client ON (invoice_detail.clientId = client.clientId)  
                                WHERE invoice_detail.invoiceDate = ?
                                ORDER BY client.accountManager,client.client ASC") or die($mysqli->error);
        $sql->bind_param("s", $reprintDate) or die($mysqli->error);
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($creationNo, $invoiceId, $invoiceDate, $clientId, $netAmount, $gst, $gross, $client, $accountManager);
    $invArray = array();
    while ($sql->fetch()) {
        $invArray[] = array('client' => $client, 'accountManager' => $accountManager, 'clientId' => $clientId, 'invoiceId' => $invoiceId, 'invoiceDate' => $invoiceDate, 'clientId' => $clientId, 'netAmount' => $netAmount, 'gst' => $gst, 'gross' => $gross);
    }
    return $invArray;
}

function saveInvoicePathByClient($mysqli, $weekendingDate, $clientCode, $filePath, $fileName, $invoice_date)
{
    $ins = $mysqli->prepare("INSERT INTO invoice_path(weekendingDate,clientcode,path,fileName,invoice_date) VALUES(?,?,?,?,?)") or die($mysqli->error);
    $ins->bind_param("sssss", $weekendingDate, $clientCode, $filePath, $fileName, $invoice_date) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows == '1') {
        return 'Added';
    } else {
        return $mysqli->error;
    }
}

function saveInvoicePath($mysqli, $weekendingDate, $filePath, $fileName)
{
    $ins = $mysqli->prepare("INSERT INTO invoice_path(weekendingDate,path,fileName) VALUES(?,?,?)") or die($mysqli->error);
    $ins->bind_param("sss", $weekendingDate, $filePath, $fileName) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows == '1') {
        return 'Added';
    } else {
        return $mysqli->error;
    }
}

function updateInvoiceSentStatus($mysqli, $id)
{
    $up = $mysqli->prepare("UPDATE invoice_path SET sentDate = NOW() WHERE id = ?") or die($mysqli->error);
    $up->bind_param("i", $id) or die($mysqli->error);
    if ($up->execute()) {
        return 'Updated';
    } else {
        return $mysqli->error;
    }
}

function getClientEmailAddresses($mysqli, $clientCode)
{
    $clientId = getClientIdByClientCode($mysqli, $clientCode);
    $sql = $mysqli->prepare("SELECT email FROM client_email WHERE clientId = ? ORDER BY email ASC") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($email) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<input type="checkbox" name="clEmail" class="clEmail" value="' . $email . '"/> ' . $email . '<br>';
    }
    return $row;
}

function displayClientEmailAddresses($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT id,email FROM client_email WHERE clientId = ? ORDER BY email ASC") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($id, $email) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<div class="email' . $clientId . '">' . $email . '<a class="removeEmail" style="color:red;" data-clemid="' . $id . '" href="#"><i class="glyphicon glyphicon-remove"></i></a></div><br>';
    }
    return $row;
}

function getInvoicePaths($mysqli)
{
    $sql = $mysqli->prepare("SELECT id,weekendingDate,clientcode,path,fileName,invoice_date,generatedDate,sentDate FROM invoice_path ORDER BY generatedDate DESC") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($id, $weekendingDate, $clientcode, $path, $fileName, $invoice_date, $generatedDate, $sentDate);
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<form name="frmEmailSend" id="frmEmailSend' . $id . '" class="frmEmailSend" method="post" enctype="multipart/form-data">
<tr><td>' . $weekendingDate . '</td>
<td>' . $clientcode . '</td>
<td>' . getClientNameByClientId($mysqli, getClientIdByClientCode($mysqli, $clientcode)) . '</td>
<td><a class="invPath" href="' . $path . '" target="_blank">' . substr($fileName, 0, 10) . ".." . '</a><span class="wk_date" style="display:none">' . $weekendingDate . '</span><span class="inv_date" style="display:none">' . $invoice_date . '</span></td>
<td>' . $generatedDate . '</td>
<td>' . $sentDate . '</td>
<td><input type="file" name="invTimsheet1" class="invTimesheet1"/><input type="file" name="invTimsheet2" class="invTimesheet2"/><input type="file" name="invTimsheet3" class="invTimesheet3"/></td>
<td>' . getClientEmailAddresses($mysqli, $clientcode) . '</td>
<td><input type="hidden" id="invId" value="' . $id . '"/><button class="invSend btn btn-lg btn-primary"><i class="fa fa-send"></i> Send</button></td></tr></form>';
    }
    return $row;
}

/* Email Cleanup */
function melbourneEmailCleanup($mysqli)
{
    $startDate = '2016-09-01';
    $endDate = '2021-04-30';
    $mel = $mysqli->prepare("SELECT 
                              resume.autoid,
                              resume.messageid,
                              attachmentpath.filepath,
                              attachmentpath.filename,
                              attachmentpath.krId,
                              attachment.id
                            FROM
                              resume
                              INNER JOIN attachment ON (resume.messageid = attachment.messageid)
                              INNER JOIN attachmentpath ON (resume.messageid = attachmentpath.messageid)
                            WHERE
                               resume.date BETWEEN ? AND ?
                            ORDER BY
                              resume.date DESC") or die($mysqli->error);//NOW() - INTERVAL 1 MONTH //resume.date <= (NOW() - INTERVAL - 20 DAY)
    //resume.date <= (NOW() - INTERVAL 3 MONTH)
    $mel->bind_param("ss", $startDate, $endDate) or die($mysqli->error);
    $mel->execute();
    $mel->store_result();
    $mel->bind_result($autoid, $messageid, $filepath, $filename, $krId, $id) or die($mysqli->error);
    $status = '';
    $count = 0;
    while ($mel->fetch()) {
        $status = deleteMelbourneMails($mysqli, $autoid, $krId, $id);
        if (unlink($filepath)) {

            //if($status)$count++;
        }
    }
    //melbourneMailGuardCleanup($mysqli);
    return $status . $mysqli->error;
}

function deleteMelbourneMails($mysqli, $autoid, $krId, $id)
{
    $delMail = $mysqli->prepare("DELETE FROM resume WHERE autoid = ?") or die($mysqli->error);
    $delMail->bind_param("i", $autoid) or die($mysqli->error);
    $delMail->execute();
    $mailRows = $delMail->affected_rows;

    $delPath = $mysqli->prepare("DELETE FROM attachmentpath WHERE krId = ?") or die($mysqli->error);
    $delPath->bind_param("i", $krId) or die($mysqli->error);
    $delPath->execute();
    $pathRows = $delPath->affected_rows;

    $delAttachment = $mysqli->prepare("DELETE FROM attachment WHERE id = ?") or die($mysqli->error);
    $delAttachment->bind_param("i", $id) or die($mysqli->error);
    $delAttachment->execute();
    $attachmentRows = $delAttachment->affected_rows;

    if ($mailRows && $pathRows && $attachmentRows) {
        return true;
    } else {
        return false;
    }
}

function sydneyEmailCleanup($mysqli)
{
    $syd = $mysqli->prepare("SELECT 
                              applicationsnsw.autoid,
                              applicationsnsw.messageid,
                              nswattachmentpath.filepath,
                              nswattachmentpath.filename,
                              nswattachmentpath.nswId,
                              nswattachment.id
                            FROM
                              applicationsnsw
                              INNER JOIN nswattachment ON (applicationsnsw.messageid = nswattachment.messageid)
                              INNER JOIN nswattachmentpath ON (applicationsnsw.messageid = nswattachmentpath.messageid)
                            WHERE
                              applicationsnsw.date <= (NOW() - INTERVAL 1 MONTH)
                            ORDER BY
                              applicationsnsw.date DESC") or die($mysqli->error);
    $syd->execute();
    $syd->store_result();
    $syd->bind_result($autoid, $messageid, $filepath, $filename, $nswId, $id) or die($mysqli->error);
    $status = false;
    while ($syd->fetch()) {
        if (unlink($filepath)) {
            $status = deleteSydneyMails($mysqli, $autoid, $nswId, $id);
        }
    }
    sydneyMailGuardCleanup($mysqli);
    return $status;
}

function deleteSydneyMails($mysqli, $autoid, $nswId, $id)
{
    $delMail = $mysqli->prepare("DELETE FROM applicationsnsw WHERE autoid = ?") or die($mysqli->error);
    $delMail->bind_param("i", $autoid) or die($mysqli->error);
    $delMail->execute();
    $mailRows = $delMail->affected_rows;

    $delPath = $mysqli->prepare("DELETE FROM nswattachmentpath WHERE nswId = ?") or die($mysqli->error);
    $delPath->bind_param("i", $nswId) or die($mysqli->error);
    $delPath->execute();
    $pathRows = $delPath->affected_rows;

    $delAttachment = $mysqli->prepare("DELETE FROM nswattachment WHERE id = ?") or die($mysqli->error);
    $delAttachment->bind_param("i", $id) or die($mysqli->error);
    $delAttachment->execute();
    $attachmentRows = $delAttachment->affected_rows;

    if ($mailRows && $pathRows && $attachmentRows) {
        return true;
    }
}

function queenslandEmailCleanup($mysqli)
{
    $syd = $mysqli->prepare("SELECT 
                              applicationsqld.autoid,
                              applicationsqld.messageid,
                              qldattachmentpath.filepath,
                              qldattachmentpath.filename,
                              qldattachmentpath.nswId,
                              qldattachment.id
                            FROM
                              applicationsqld
                              INNER JOIN qldattachment ON (applicationsqld.messageid = qldattachment.messageid)
                              INNER JOIN qldattachmentpath ON (applicationsqld.messageid = qldattachmentpath.messageid)
                            WHERE
                              applicationsqld.date <= (NOW() - INTERVAL - 20 DAY)
                            ORDER BY
                              applicationsqld.date DESC") or die($mysqli->error);
    $syd->execute();
    $syd->store_result();
    $syd->bind_result($autoid, $messageid, $filepath, $filename, $nswId, $id) or die($mysqli->error);
    $status = false;
    while ($syd->fetch()) {
        if (unlink($filepath)) {
            $status = deleteQueenslandMails($mysqli, $autoid, $nswId, $id);
        }
    }
    queenslandMailGuardCleanup($mysqli);
    return $status;
}

function deleteQueenslandMails($mysqli, $autoid, $qlId, $id)
{
    $delMail = $mysqli->prepare("DELETE FROM applicationsqld WHERE autoid = ?") or die($mysqli->error);
    $delMail->bind_param("i", $autoid) or die($mysqli->error);
    $delMail->execute();
    $mailRows = $delMail->affected_rows;

    $delPath = $mysqli->prepare("DELETE FROM qldattachmentpath WHERE qlId = ?") or die($mysqli->error);
    $delPath->bind_param("i", $qlId) or die($mysqli->error);
    $delPath->execute();
    $pathRows = $delPath->affected_rows;

    $delAttachment = $mysqli->prepare("DELETE FROM qldattachment WHERE id = ?") or die($mysqli->error);
    $delAttachment->bind_param("i", $id) or die($mysqli->error);
    $delAttachment->execute();
    $attachmentRows = $delAttachment->affected_rows;

    if ($mailRows && $pathRows && $attachmentRows) {
        return true;
    }
}

function melbourneMailGuardCleanup($mysqli)
{
    $fromName = 'mailguard@mailguard.com.au';
    $mel = $mysqli->prepare("SELECT 
                              resume.autoid
                            FROM
                              resume
                            WHERE
                              resume.mailfrom LIKE '%{$fromName}%'
                            ORDER BY
                              resume.date DESC") or die($mysqli->error);
    $mel->execute();
    $mel->store_result();
    $mel->bind_result($autoid) or die($mysqli->error);
    $status = false;
    while ($mel->fetch()) {
        $status = deleteMelbourneMails($mysqli, $autoid);
    }
    return $status;
}

function sydneyMailGuardCleanup($mysqli)
{
    $fromName = 'mailguard@mailguard.com.au';
    $syd = $mysqli->prepare("SELECT 
                              applicationsnsw.autoid
                            FROM
                              applicationsnsw
                            WHERE
                              applicationsnsw.mailfrom LIKE '%{$fromName}%'
                            ORDER BY
                              applicationsnsw.date DESC") or die($mysqli->error);
    $syd->execute();
    $syd->store_result();
    $syd->bind_result($autoid) or die($mysqli->error);
    $status = false;
    while ($syd->fetch()) {
        $status = deleteSydneyMails($mysqli, $autoid);
    }
    return $status;
}

function queenslandMailGuardCleanup($mysqli)
{
    $fromName = 'mailguard@mailguard.com.au';
    $syd = $mysqli->prepare("SELECT 
                              applicationsqld.autoid
                            FROM
                              applicationsqld
                            WHERE
                              applicationsqld.mailfrom LIKE '%{$fromName}%'
                            ORDER BY
                              applicationsqld.date DESC") or die($mysqli->error);
    $syd->execute();
    $syd->store_result();
    $syd->bind_result($autoid) or die($mysqli->error);
    $status = false;
    while ($syd->fetch()) {
        $status = deleteQueenslandMails($mysqli, $autoid);
    }
    return $status;
}

function healthEmailCleanup($mysqli)
{
    $hea = $mysqli->prepare("SELECT 
                              resumeshealth.autoid,
                              resumeshealth.messageid,
                              healthattachmentpath.filepath,
                              healthattachmentpath.filename,
                              healthattachmentpath.hId,
                              healthattachment.id
                            FROM
                              resumeshealth
                              INNER JOIN healthattachment ON (resumeshealth.messageid = healthattachment.messageid)
                              INNER JOIN healthattachmentpath ON (resumeshealth.messageid = healthattachmentpath.messageid)
                            WHERE
                              resumeshealth.date <= (NOW() - INTERVAL - 20 DAY)
                            ORDER BY
                              resumeshealth.date DESC") or die($mysqli->error);
    $hea->execute();
    $hea->store_result();
    $hea->bind_result($autoid, $messageid, $filepath, $filename, $hId, $id) or die($mysqli->error);
    $status = false;
    while ($hea->fetch()) {
        if (unlink($filepath)) {
            $status = deleteHealthMails($mysqli, $autoid, $hId, $id, $filepath);
        }
    }
    return $status;
}

function deleteHealthMails($mysqli, $autoid, $hId, $id, $filepath)
{
    $delMail = $mysqli->prepare("DELETE FROM resumeshealth WHERE autoid = ?") or die($mysqli->error);
    $delMail->bind_param("i", $autoid) or die($mysqli->error);
    $delMail->execute();
    $mailRows = $delMail->affected_rows;

    $delPath = $mysqli->prepare("DELETE FROM healthattachmentpath WHERE hId = ?") or die($mysqli->error);
    $delPath->bind_param("i", $hId) or die($mysqli->error);
    $delPath->execute();
    $pathRows = $delPath->affected_rows;

    $delAttachment = $mysqli->prepare("DELETE FROM healthattachment WHERE id = ?") or die($mysqli->error);
    $delAttachment->bind_param("i", $id) or die($mysqli->error);
    $delAttachment->execute();
    $attachmentRows = $delAttachment->affected_rows;

    if ($mailRows && $pathRows && $attachmentRows) {
        return true;
    }
}

// end of Email Cleanup
/* User related functions */
function checkExistingPassword($mysqli, $username, $exPassword)
{
    $sqlchk = $mysqli->prepare("SELECT password FROM ch_users WHERE username = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $username) or die($mysqli->error);
    $sqlchk->execute();
    $password = $sqlchk->get_result()->fetch_object()->password;
    $test_hash = extract_hash($password, $exPassword);
    if (hash_equals($password, $test_hash)) {
        return '1';
    } else {
        return '2';
    }
}

function changeChandlerUserPassword($mysqli, $username, $newPassword)
{
    $hash = generate_hash($newPassword);
    $sql = $mysqli->prepare("UPDATE ch_users SET password = ? WHERE username = ?") or die($mysqli->error);
    $sql->bind_param("ss", $hash, $username) or die($mysqli->error);
    $sql->execute();
    $nrows = $sql->affected_rows;
    if ($nrows > 0) {
        $sql->free_result();
        $statusCheck = 'updated';
    } else {
        $statusCheck = $mysqli->error;
    }
    return $statusCheck;
}

/* SHIFT IMPORT LOG*/
function logShiftImport($mysqli, $empId, $shiftDate, $startTime, $endTime, $impStatus, $loggedInUser, $date)
{
    $ins = $mysqli->prepare("INSERT INTO shiftimportlog(empId,shiftDate,startTime,endTime,impStatus,loggedInUser,importDate) VALUES (?,?,?,?,?,?,?)") or die($mysqli->error);
    $ins->bind_param("sssssss", $empId, $shiftDate, $startTime, $endTime, $impStatus, $loggedInUser, $date) or die($mysqli->error);
    $ins->execute();
    return true;
}

/* ADMIN functions */
function getUsers($mysqli)
{
    $sql = $mysqli->prepare("SELECT 
       ch_users.user_id,
  ch_users.username,
  ch_users.type_login,
  ch_users.status,
  consultant.name,
  consultant.email,
  consultant.mobileNo
FROM
  ch_users
  INNER JOIN consultant ON (ch_users.username = consultant.username) ORDER BY username ASC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($user_id, $username, $type_login, $status, $name, $email, $mobileNo) or die($mysqli->error);
    $sql->store_result();
    $row = '';
    while ($sql->fetch()) {
        $usrStatus = '';
        if ($status == '1') {
            $usrStatus = 'Active';
            $button = '<button class="DeActivate btn btn-default btn-sm">DeActivate</button><button class="delBtn btn btn-danger btn-sm"><i class="glyphicon fa fa-lg fa-trash"></i></button>';
        } else {
            $usrStatus = 'Inactive';
            $button = '<button class="Activate btn btn-default btn-sm">Activate</button><button class="delBtn btn btn-danger btn-sm"><i class="glyphicon fa fa-lg fa-trash"></i></button>';
        }
        $row = $row . '<tr><td>' . $user_id . '</td><td>' . $username . '</td><td>' . $type_login . '</td><td>' . $name . '</td><td>' . $email . '</td><td>' . $mobileNo . '</td><td>' . $usrStatus . '</td><td><button name="killBtn" class="killSessionBtn btn btn-warning btn-sm" data-usrid="' . $user_id . '" data-usr="' . $username . '">Kill Session</button></td><td class="btnRow" data-usr="' . $username . '">' . $button . '</td></tr>';
    }
    return $row;
}

function userActivateDeActivate($mysqli, $status, $usrName)
{
    $sql = $mysqli->prepare("UPDATE ch_users SET status = ? WHERE username = ?") or die($mysqli->error);
    $sql->bind_param("ss", $status, $usrName) or die($mysqli->error);
    $sql->execute();
    $nrow = $sql->affected_rows;
    if ($nrow == '1') {
        $sql->free_result();
        $sql = $mysqli->prepare("UPDATE consultant SET status = ? WHERE username = ?") or die($mysqli->error);
        $sql->bind_param("ss", $status, $usrName) or die($mysqli->error);
        $sql->execute();
        return true;
    } else {
        return false;
    }
}

function userDelete($mysqli, $usrName)
{
    $del = $mysqli->prepare("DELETE FROM ch_users WHERE username = ?") or die($mysqli->error);
    $del->bind_param("s", $usrName) or die($mysqli->error);
    $del->execute();
    $delRows = $del->affected_rows;

    $delC = $mysqli->prepare("DELETE FROM consultant WHERE username = ?") or die($mysqli->error);
    $delC->bind_param("s", $usrName) or die($mysqli->error);
    $delC->execute();
    $delCRows = $delC->affected_rows;
}

function deleteAttribute($mysqli, $attrId)
{
    $del = $mysqli->prepare("DELETE FROM otherlicence WHERE otherLicenceId = ?") or die($mysqli->error);
    $del->bind_param("s", $attrId) or die($mysqli->error);
    $del->execute();
    $delRows = $del->affected_rows;
}

function listAttributes($mysqli)
{
    $stmt = $mysqli->prepare("SELECT 
								  otherLicenceId,
								  code,
								  otherLicenceType
								FROM
								  otherlicence");
    $stmt->execute();
    $stmt->bind_result($otherLicenceId, $code, $otherLicenceType);
    $row = '';
    while ($stmt->fetch()) {
        $row = $row . '<tr><td>' . $otherLicenceType . '</td><td class="attr" data-attr="' . strval($otherLicenceId) . '" data-attrtype="' . $otherLicenceType . '" data-attrcode="' . $code . '"><button class="editBtn btn btn-default btn-sm">Edit</button><button class="delBtn btn btn-danger btn-sm"><i class="glyphicon fa fa-lg fa-trash"></i></button></td></tr>';
    }
    return $row;
}

function listInboxReferences($mysqli)
{
    $stmt = $mysqli->prepare("SELECT id,
								  reference
								FROM
								  inbox_reference");
    $stmt->execute();
    $stmt->bind_result($id, $reference);
    $stmt->store_result();
    $row = '';
    while ($stmt->fetch()) {
        $row = $row . '<tr><td>' . $reference . '</td>
                        <td class="refCode" data-id="' . $id . '" data-refcode="' . $reference . '">
                            <button class="editBtn btn btn-default btn-sm">Edit</button><button class="delBtn btn btn-danger btn-sm"><i class="glyphicon fa fa-lg fa-trash"></i></button>
                        </td>
                        <td>';
        if (getRefMailStatus($mysqli, $reference) == 0) {
            $row = $row . '<button class="Activate btn btn-danger">INACTIVE</button>';
        } else {
            $row = $row . '<button class="DeActivate btn btn-success">ACTIVE</button>';
        }
        $row = $row . '</td></tr>';
    }
    return $row;
}

function listJobBoardReferences($mysqli)
{
    $stmt = $mysqli->prepare("SELECT id,
								  reference
								FROM
								  job_board_reference");
    $stmt->execute();
    $stmt->bind_result($id, $reference);
    $stmt->store_result();
    $row = '';
    while ($stmt->fetch()) {
        $row = $row . '<tr><td>' . $reference . '</td>
                        <td class="refCode" data-id="' . $id . '" data-refcode="' . $reference . '">
                            <button class="editBtn btn btn-default btn-sm">Edit</button><button class="delBtn btn btn-danger btn-sm"><i class="glyphicon fa fa-lg fa-trash"></i></button>
                        </td>
                        <td>';
        if (getJobBoardRefMailStatus($mysqli, $reference) == 0) {
            $row = $row . '<button class="Activate btn btn-danger">INACTIVE</button>';
        } else {
            $row = $row . '<button class="DeActivate btn btn-success">ACTIVE</button>';
        }
        $row = $row . '</td></tr>';
    }
    return $row;
}

function validateInboxReference($mysqli, $referenceCode)
{
    $sql = $mysqli->prepare("SELECT reference FROM inbox_reference WHERE reference = ?") or die($mysqli->error);
    $sql->bind_param("s", $referenceCode) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->fetch();
    $num_of_rows = $sql->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateIndeedReference($mysqli, $referenceCode)
{
    $sql = $mysqli->prepare("SELECT reference FROM indeed_reference WHERE reference = ?") or die($mysqli->error);
    $sql->bind_param("s", $referenceCode) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->fetch();
    $num_of_rows = $sql->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateJobBoardReference($mysqli, $referenceCode)
{
    $sql = $mysqli->prepare("SELECT reference FROM job_board_reference WHERE reference = ?") or die($mysqli->error);
    $sql->bind_param("s", $referenceCode) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->fetch();
    $num_of_rows = $sql->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function updateInboxReference($mysqli, $referenceCode, $refId)
{
    if (!validateInboxReference($mysqli, $referenceCode)) {
        $up = $mysqli->prepare("UPDATE inbox_reference SET reference = ? WHERE id = ?") or die($mysqli->error);
        $up->bind_param("si", $referenceCode, $refId) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow == '1') {
            $up->free_result();
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
}

function updateJobBoardReference($mysqli, $referenceCode, $refId)
{
    if (!validateJobBoardReference($mysqli, $referenceCode)) {
        $up = $mysqli->prepare("UPDATE job_board_reference SET reference = ? WHERE id = ?") or die($mysqli->error);
        $up->bind_param("si", $referenceCode, $refId) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow == '1') {
            $up->free_result();
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
}

function addInboxReference($mysqli, $referenceCode)
{
    if (!validateInboxReference($mysqli, $referenceCode)) {
        $status = 1;
        $ins = $mysqli->prepare("INSERT INTO inbox_reference (reference,status) VALUES(?,?)") or die($mysqli->error);
        $ins->bind_param("si", $referenceCode, $status) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            return 'Added';
        } else {
            return $mysqli->error;
        }
    } else {
        return 'Reference Exists';
    }
}

function addIndeedReference($mysqli, $referenceCode)
{
    if (!validateIndeedReference($mysqli, $referenceCode)) {
        $status = 1;
        $ins = $mysqli->prepare("INSERT INTO indeed_reference (reference,status) VALUES(?,?)") or die($mysqli->error);
        $ins->bind_param("si", $referenceCode, $status) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            return 'Added';
        } else {
            return $mysqli->error;
        }
    } else {
        return 'Reference Exists';
    }
}

function addJobBoardReference($mysqli, $referenceCode)
{
    if (!validateJobBoardReference($mysqli, $referenceCode)) {
        $status = 1;
        $ins = $mysqli->prepare("INSERT INTO job_board_reference (reference,status) VALUES(?,?)") or die($mysqli->error);
        $ins->bind_param("si", $referenceCode, $status) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            return 'Added';
        } else {
            return $mysqli->error;
        }
    } else {
        return 'Reference Exists';
    }
}

function deleteInboxReference($mysqli, $refId)
{
    $del = $mysqli->prepare("DELETE FROM inbox_reference WHERE id = ?") or die($mysqli->error);
    $del->bind_param("i", $refId) or die($mysqli->error);
    $del->execute();
    $delRows = $del->affected_rows;
}

function deleteJobBoardReference($mysqli, $refId)
{
    $del = $mysqli->prepare("DELETE FROM job_board_reference WHERE id = ?") or die($mysqli->error);
    $del->bind_param("i", $refId) or die($mysqli->error);
    $del->execute();
    $delRows = $del->affected_rows;
}

function updateAttribute($mysqli, $attributeName, $attributeId, $attributeCode)
{
    if (!validateAttributeName($mysqli, $attributeName, $attributeCode)) {
        $up = $mysqli->prepare("UPDATE otherlicence SET otherLicenceType = ?, code = ? WHERE otherLicenceId = ?") or die($mysqli->error);
        $up->bind_param("ssi", $attributeName, $attributeCode, $attributeId) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow == '1') {
            $up->free_result();
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
}

function addAttribute($mysqli, $attributeName, $attributeCode)
{
    if (!validateAttributeName($mysqli, $attributeName, $attributeCode)) {
        $ins = $mysqli->prepare("INSERT INTO otherlicence (code,otherLicenceType) VALUES(?,?)") or die($mysqli->error);
        $ins->bind_param("ss", $attributeCode, $attributeName) or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            return 'Added';
        } else {
            return $mysqli->error;
        }
    } else {
        return 'Attribute Exists';
    }
}

function validateAttributeName($mysqli, $attributeName, $attributeCode)
{
    $sql = $mysqli->prepare("SELECT otherLicenceType FROM otherlicence WHERE otherLicenceType = ? AND code = ?") or die($mysqli->error);
    $sql->bind_param("ss", $attributeName, $attributeCode) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->fetch();
    $num_of_rows = $sql->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateSystemUser($mysqli, $userName, $email)
{
    $sqlChk = $mysqli->prepare("SELECT ch_users.username
                                    FROM
                                      ch_users
                                      INNER JOIN consultant ON (ch_users.username = consultant.username)
                                      AND (ch_users.email = consultant.email)
                                    WHERE
                                      ch_users.username = ? AND ch_users.email = ?") or die($mysqli->error);
    $sqlChk->bind_param("ss", $userName, $email) or die($mysqli->error);
    $sqlChk->execute();
    $sqlChk->store_result();
    $sqlChk->fetch();
    $num_of_rows = $sqlChk->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function updateVerificationCode($mysqli, $user_id, $verification_code)
{
    $up = $mysqli->prepare("UPDATE ch_users SET verification_code = ? WHERE user_id = ?") or die($mysqli->error);
    $up->bind_param("si", $verification_code, $user_id) or die($mysqli->error);
    $up->execute();
    $nrow = $up->affected_rows;
    if ($nrow == '1') {
        $up->free_result();
        return true;
    } else {
        return false;
    }
}

function validateVerificationCode($mysqli, $userId, $vCode)
{
    try {
        $sql = $mysqli->prepare("SELECT user_id FROM ch_users WHERE verification_code = ? AND user_id = ?") or die($mysqli->error);
        $sql->bind_param("si", $vCode, base64_decode($userId)) or die($mysqli->error);
        $sql->execute();
        $sql->store_result();
        $sql->fetch();
        $num_of_rows = $sql->num_rows;
        if ($num_of_rows > 0) {
            return true;
        } else {
            return false;
        }
    } catch (Exception $e) {
        return $e->getMessage();
    }

}

function addNewSystemUser($mysqli, $userName, $password, $fullName, $email, $loginType, $mobile)
{
    if (!validateSystemUser($mysqli, $userName, $email)) {
        try {
            $status = 1;
            $passwordHash = generate_hash($password);
            $verification_code = substr(number_format(time() * rand(), 0, '', ''), 0, 6);
            $ins = $mysqli->prepare("INSERT INTO ch_users(username,password,email,type_login,status,verification_code) VALUES(?,?,?,?,?,?)") or die($mysqli->error);
            $ins->bind_param("ssssss", $userName, $passwordHash, $email, $loginType, $status, $verification_code) or die($mysqli->error);
            $ins->execute();
            $ins->free_result();
        } catch (Exception $e) {
            return 'ERROR - ' . $e->getMessage();
        }
        /* $ins->store_result();
        $ins->fetch();
        $num_of_rows = $ins->affected_rows;
        $ins->free_result();
        if ($num_of_rows == '1') {*/
        try {
            $cons = $mysqli->prepare("INSERT INTO consultant(username,name,mobileNo,email,status) VALUES(?,?,?,?,?)") or die($mysqli->error);
            $cons->bind_param("sssss", $userName, $fullName, $mobile, $email, $status) or die($mysqli->error);
            $cons->execute();
            return generateNotification($email, '', ADMIN_EMAIL, DOMAIN_NAME . ' Login Information', DEFAULT_EMAIL, DOMAIN_NAME, '<br/><h3>' . DOMAIN_NAME . ' Application Login Information</h3><br><a href="' . DOMAIN_URL . '" target="_blank">' . DOMAIN_URL . '</a><br/><br/>Username: ' . $userName . '<br/>Password: ' . $password . '<br/><br/><br/><br/>', '', '');
        } catch (Exception $e2) {
            return 'ERROR - ' . $e2->getMessage();
        }
        /*} else {
            return 'ERROR - '.$mysqli->error;
        }*/
    } else {
        return 'EXISTS';
    }
}

function getClientLocationIdByClientId($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT tandaLocId FROM client WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->tandaLocId;
    } else {
        return null;
    }
}


function generatePIN($digits = 6)
{
    $i = 0; //counter
    $pin = ""; //our default pin is blank.
    while ($i < $digits) {
        //generate a random number between 0 and 9.
        $pin .= mt_rand(0, 9);
        $i++;
    }
    return $pin = mt_rand(100000, 999999);
}

function checkUserPIN($mysqli, $pin)
{
    $stmt = $mysqli->prepare("SELECT clockPin FROM candidate  WHERE clockPin = ?") or die($mysqli->error);
    $stmt->bind_param("i", $pin) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function updateUserPIN($mysqli, $pin, $candidate_no)
{
    $up = $mysqli->prepare("UPDATE candidate SET clockPin = ?  WHERE candidate_no = ? ") or die($mysqli->error);
    $up->bind_param("ii", $pin, $candidate_no) or die($mysqli->error);
    $up->execute();
}

function getCandidateIdByEmail($mysqli, $email)
{
    $stmt = $mysqli->prepare("SELECT candidateId FROM candidate WHERE email = ?") or die($mysqli->error);
    $stmt->bind_param("s", $email) or die($mysqli->error);
    $stmt->execute();
    $candidateId = $stmt->get_result()->fetch_object()->candidateId;
    return $candidateId;
}
function getCandidateIdByJobAdderId($mysqli, $jobAdderId)
{
    $stmt = $mysqli->prepare("SELECT candidateId FROM candidate WHERE jobadderId = ?") or die($mysqli->error);
    $stmt->bind_param("i", $jobAdderId) or die($mysqli->error);
    $stmt->execute();
    $candidateId = $stmt->get_result()->fetch_object()->candidateId;
    return $candidateId;
}
function getCalendarEvents($mysqli, $startDate)
{
    /*$sql = $mysqli->prepare("SELECT id,start,end,title,uid FROM events WHERE (start >= ? AND start <= ?) ORDER BY start ASC")or die($mysqli->error);*/
    $sql = $mysqli->prepare("SELECT id,start,end,title,uid,photo,consultant_id FROM events WHERE DATE(start) = ? ORDER BY start ASC") or die($mysqli->error);
    $sql->bind_param("s", $startDate) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($id, $start, $end, $title, $uid, $photo, $consultant_id) or die($mysqli->error);
    $eventsArray = array();
    while ($sql->fetch()) {
        $eventsArray[] = array('id' => $id, 'start' => $start, 'end' => date('H:i:s', strtotime($end)), 'title' => $title, 'uid' => $uid, 'photo' => $photo, 'consultant_id' => $consultant_id);
    }
    return $eventsArray;
}

function getDeleteCalendarEvents($mysqli)
{
    $sql = $mysqli->prepare("SELECT id FROM events_delete") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($id) or die($mysqli->error);
    $eventsArray = array();
    while ($sql->fetch()) {
        $eventsArray[] = array('id' => $id);
    }
    return $eventsArray;
}

function flushEvents($mysqli, $id)
{
    $del = $mysqli->prepare("DELETE FROM events_delete WHERE id = ?") or die($mysqli->error);
    $del->bind_param("i", $id) or die($mysqli->error);
    $del->execute();
}

function getInvoiceDetails($mysqli, $wkDate, $invDate)
{
    $chk = $mysqli->prepare("SELECT 
                                  invoice_detail.invoiceId,
                                  invoice_detail.invoiceDate,
                                  invoice_detail.weekendingDate,
                                  invoice_detail.clientId,
                                  invoice_detail.netAmount,
                                  invoice_detail.gst,
                                  invoice_detail.gross
                                FROM
                                  invoice_detail
                                WHERE
                                  invoice_detail.weekendingDate = ? AND 
                                  invoice_detail.invoiceDate = ?") or die($mysqli->error);
    $chk->bind_param("ss", $wkDate, $invDate) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($invoiceId, $invoiceDate, $weekendingDate, $clientId, $netAmount, $gst, $gross) or die($mysqli->error);
    $chk->store_result();
    $dataArray = array();
    while ($chk->fetch()) {
        $dataArray[] = array('invoiceId' => $invoiceId, 'invoiceDate' => $invoiceDate, 'weekendingDate' => $weekendingDate, 'clientId' => $clientId, 'netAmount' => $netAmount, 'gst' => $gst, 'gross' => $gross);
    }
    return $dataArray;
}

function getInvoiceDetailsWithGeneratedDate($mysqli, $startDate, $endDate)
{
    $chk = $mysqli->prepare("SELECT 
                                  invoice_detail.invoiceId,
                                  invoice_detail.invoiceDate,
                                  invoice_detail.weekendingDate,
                                  invoice_detail.clientId,
                                  invoice_detail.netAmount,
                                  invoice_detail.gst,
                                  invoice_detail.gross
                                FROM
                                  invoice_detail
                                WHERE
                                  invoice_detail.weekendingDate BETWEEN ? AND ?
                                ORDER BY invoice_detail.invoiceId ASC") or die($mysqli->error);
    $chk->bind_param("ss", $startDate, $endDate) or die($mysqli->error);
    $chk->execute();
    $chk->bind_result($invoiceId, $invoiceDate, $weekendingDate, $clientId, $netAmount, $gst, $gross) or die($mysqli->error);
    $chk->store_result();
    $dataArray = array();
    while ($chk->fetch()) {
        $dataArray[] = array('invoiceId' => $invoiceId, 'invoiceDate' => $invoiceDate, 'weekendingDate' => $weekendingDate, 'clientId' => $clientId, 'netAmount' => $netAmount, 'gst' => $gst, 'gross' => $gross);
    }
    return $dataArray;
}

function getPayrunIdByWeekendingDate($mysqli, $weekendingDate)
{
    $sql = $mysqli->prepare("SELECT payrunId FROM payrundetails WHERE weekendingDate = ?") or die($mysqli->error);
    $sql->bind_param("s", $weekendingDate) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payrunId;
    } else {
        return null;
    }
}

function getInvoiceGeneratedDate($mysqli, $weekendingDate)
{
    $sql = $mysqli->prepare("SELECT generatedDate FROM invoice_path WHERE weekendingDate = ?") or die($mysqli->error);
    $sql->bind_param("s", $weekendingDate) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->generatedDate;
    } else {
        return null;
    }
}

function count_array_values($my_array, $match)
{
    $count = 0;
    foreach ($my_array as $key => $value) {
        if ($value == $match) {
            $count++;
        }
    }
    return $count;
}

function bsb_validator($bsb)
{
    $bsbRegex = '/^[\d]{3}-[\d]{3}$/';
    if (!preg_match($bsbRegex, $bsb)) {
        return false;
    } else {
        return true;
    }
}

function getNewPayrunId($mysqli)
{
    $stmt = $mysqli->prepare("SELECT MAX(payrunId) AS max_payrunId FROM payrun") or die(mysqli_error());
    $stmt->execute();
    $stmt->bind_result($max_payrunId);
    $stmt->store_result();
    $stmt->fetch();
    if ($stmt->num_rows == 0) {
        $max_payrunId = 1;
    } else {
        $max_payrunId = $max_payrunId + 1;
    }
    return $max_payrunId;
}

function getCategoriesWithItemId($mysqli)
{
    $sql = $mysqli->prepare("SELECT itemType,item_desc FROM item_master ORDER BY itemType ASC") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($itemType, $item_desc) or die($mysqli->error);
    $option = '';
    while ($sql->fetch()) {
        $option = $option . '<option value="' . $itemType . '-' . $item_desc . '">' . $item_desc . '</option>';
    }
    return $option;
}

function validatePayrun($mysqli, $payId)
{
    $sqlchk = $mysqli->prepare("SELECT payrunId FROM payrun WHERE payrunId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("i", $payId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function insertManualPayroll($mysqli, $payrunId, $weekEndingDate, $candidateId, $jobCode, $clientId, $positionId, $wkending, $itemType, $item_desc, $transCode, $units, $rate, $amount, $chargeRate, $chargeAmount, $gross, $net, $tax, $deduction, $superAnnuation)
{
    $ins = $mysqli->prepare("INSERT INTO payrundetails(payrunId,weekendingDate,candidateId,clientId,positionId,category,itemType,jobCode,transCode,units,rate,amount,chargeRate,chargeAmount,gross,net,paygTax,deduction,superAnnuation) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
    $ins->bind_param("issiisissssssssssss", $payrunId, $weekEndingDate, $candidateId, $clientId, $positionId, $item_desc, $itemType, $jobCode, $transCode, $units, $rate, $amount, $chargeRate, $chargeAmount, $gross, $net, $tax, $deduction, $superAnnuation) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows == '1') {
        return 'Added';
    } else {
        return $mysqli->error;
    }
}

function saveManualPayroll($mysqli, $weekEndingDate, $payrollId, $candidateId, $jobCode, $clientId, $positionId, $wkending, $itemType, $item_desc, $transCode, $units, $rate, $amount, $chargeRate, $chargeAmount, $gross, $net, $tax, $deduction, $superAnnuation, $payrunId)
{
    $payrollName = getPayrollNameById($mysqli, $payrollId);
    /*if(validatePayrun($mysqli,$payrunId)){
        $ins = $mysqli->prepare("INSERT INTO payrun(payrollName,invoiceDate) VALUES(?,?)")or die($mysqli->error);
        $ins->bind_param("ss",$payrollName,$wkending)or die($mysqli->error);
        $ins->execute();
        $nrows = $ins->affected_rows;
        if ($nrows == '1') {
            insertManualPayroll($mysqli,$payrunId,$weekEndingDate,$candidateId,$jobCode,$clientId,$positionId,$wkending,$itemType,$item_desc,$transCode,$units,$rate,$amount,$chargeRate,$chargeAmount,$gross,$net,$tax,$deduction,$superAnnuation);
        }else{
            return $mysqli->error;
        }
    }else{*/
    insertManualPayroll($mysqli, $payrunId, $weekEndingDate, $candidateId, $jobCode, $clientId, $positionId, $wkending, $itemType, $item_desc, $transCode, $units, $rate, $amount, $chargeRate, $chargeAmount, $gross, $net, $tax, $deduction, $superAnnuation);
    /*}*/
}

function getFirstWorkedWeekendingDate($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT 
                              MIN(weekendingDate) AS wkDate,
                              payslip_info.weekendingDate
                            FROM
                              payslip_info
                            WHERE
                              payslip_info.candidateId = ?
                            GROUP BY
                              payslip_info.weekendingDate") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->wkDate;
    } else {
        return null;
    }
}

function getConsultantIdByCandidateId($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT 
                              consultantId
                            FROM
                              candidate
                            WHERE
                              candidate.candidateId = ?
                            ") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->consultantId;
    } else {
        return null;
    }
}

function getClientBasedPaysheetData($mysqli, $startWkDate, $endWkDate, $clId)
{
    $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.jobCode,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.wkendDate BETWEEN ? AND ? AND 
                                  timesheet_totals.clientId = ?    
                                ORDER BY  
                                  client.client,
                                  timesheet_totals.positionId,timesheet_totals.candidateId,
                                  timesheet_totals.wkendDate") or die($mysqli->error);
    $sql->bind_param("ssi", $startWkDate, $endWkDate, $clId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clientId,
        $positionId,
        $jobCode,
        $candidateId,
        $emgTotal,
        $ordTotal,
        $aftTotal,
        $nightTotal,
        $rdoTotal,
        $satTotal,
        $sunTotal,
        $ovtTotal,
        $dblTotal,
        $hldTotal,
        $hol_total,
        $satovtTotal,
        $sunovtTotal,
        $povtTotal,
        $startDate,
        $endDate,
        $wkendDate,
        $client) or die($mysqli->error);
    $sql->store_result();
    $paysheetAray = array();
    while ($sql->fetch()) {
        $paysheetAray[] = array('clientId' => $clientId, 'positionId' => $positionId, 'jobCode' => $jobCode, 'candidateId' => $candidateId, 'emgTotal' => $emgTotal, 'ordTotal' => $ordTotal, 'aftTotal' => $aftTotal, 'nightTotal' => $nightTotal, 'rdoTotal' => $rdoTotal, 'satTotal' => $satTotal, 'sunTotal' => $sunTotal, 'ovtTotal' => $ovtTotal, 'dblTotal' => $dblTotal, 'hldTotal' => $hldTotal, 'hol_total' => $hol_total, 'satovtTotal' => $satovtTotal, 'sunovtTotal' => $sunovtTotal, 'povtTotal' => $povtTotal, 'startDate' => $startDate, 'endDate' => $endDate, 'wkendDate' => $wkendDate, 'client' => $client, 'firstWorkDate' => getFirstWorkedWeekendingDate($mysqli, $candidateId), 'consultant' => getConsultantName($mysqli, getConsultantIdByCandidateId($mysqli, $candidateId)));
    }
    return $paysheetAray;
}

function getPaysheetData($mysqli, $startWkDate, $endWkDate)
{
    $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.jobCode,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.wkendDate BETWEEN ? AND ?
                                ORDER BY  
                                  client.client,
                                  timesheet_totals.positionId,timesheet_totals.candidateId,
                                  timesheet_totals.wkendDate") or die($mysqli->error);
    $sql->bind_param("ss", $startWkDate, $endWkDate) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clientId,
        $positionId,
        $jobCode,
        $candidateId,
        $emgTotal,
        $ordTotal,
        $aftTotal,
        $nightTotal,
        $rdoTotal,
        $satTotal,
        $sunTotal,
        $ovtTotal,
        $dblTotal,
        $hldTotal,
        $hol_total,
        $satovtTotal,
        $sunovtTotal,
        $povtTotal,
        $startDate,
        $endDate,
        $wkendDate,
        $client) or die($mysqli->error);
    $sql->store_result();
    $paysheetArray = array();
    while ($sql->fetch()) {
        $paysheetArray[] = array('clientId' => $clientId, 'positionId' => $positionId, 'jobCode' => $jobCode, 'candidateId' => $candidateId, 'emgTotal' => $emgTotal, 'ordTotal' => $ordTotal, 'aftTotal' => $aftTotal, 'nightTotal' => $nightTotal, 'rdoTotal' => $rdoTotal, 'satTotal' => $satTotal, 'sunTotal' => $sunTotal, 'ovtTotal' => $ovtTotal, 'dblTotal' => $dblTotal, 'hldTotal' => $hldTotal, 'hol_total' => $hol_total, 'satovtTotal' => $satovtTotal, 'sunovtTotal' => $sunovtTotal, 'povtTotal' => $povtTotal, 'startDate' => $startDate, 'endDate' => $endDate, 'wkendDate' => $wkendDate, 'client' => $client, 'firstWorkDate' => getFirstWorkedWeekendingDate($mysqli, $candidateId), 'consultant' => getConsultantName($mysqli, getConsultantIdByCandidateId($mysqli, $candidateId)));
    }
    return $paysheetArray;
}

function getPaysheetDataByCandidate($mysqli, $startWkDate, $endWkDate, $empId)
{
    $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.jobCode,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.wkendDate BETWEEN ? AND ?
                                AND
                                  timesheet_totals.candidateId = ?  
                                ORDER BY  
                                  client.client,
                                  timesheet_totals.positionId,timesheet_totals.candidateId,
                                  timesheet_totals.wkendDate") or die($mysqli->error);
    $sql->bind_param("sss", $startWkDate, $endWkDate, $empId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clientId,
        $positionId,
        $jobCode,
        $candidateId,
        $emgTotal,
        $ordTotal,
        $aftTotal,
        $nightTotal,
        $rdoTotal,
        $satTotal,
        $sunTotal,
        $ovtTotal,
        $dblTotal,
        $hldTotal,
        $hol_total,
        $satovtTotal,
        $sunovtTotal,
        $povtTotal,
        $startDate,
        $endDate,
        $wkendDate,
        $client) or die($mysqli->error);
    $sql->store_result();
    $paysheetArray = array();
    while ($sql->fetch()) {
        $paysheetArray[] = array('clientId' => $clientId, 'positionId' => $positionId, 'jobCode' => $jobCode, 'candidateId' => $candidateId, 'emgTotal' => $emgTotal, 'ordTotal' => $ordTotal, 'aftTotal' => $aftTotal, 'nightTotal' => $nightTotal, 'rdoTotal' => $rdoTotal, 'satTotal' => $satTotal, 'sunTotal' => $sunTotal, 'ovtTotal' => $ovtTotal, 'dblTotal' => $dblTotal, 'hldTotal' => $hldTotal, 'hol_total' => $hol_total, 'satovtTotal' => $satovtTotal, 'sunovtTotal' => $sunovtTotal, 'povtTotal' => $povtTotal, 'startDate' => $startDate, 'endDate' => $endDate, 'wkendDate' => $wkendDate, 'client' => $client, 'firstWorkDate' => getFirstWorkedWeekendingDate($mysqli, $candidateId), 'consultant' => getConsultantName($mysqli, getConsultantIdByCandidateId($mysqli, $candidateId)));
    }
    return $paysheetArray;
}

function getTimesheetWorkHoursData($mysqli, $stWkDate, $edWkDate)
{
    $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.jobCode,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                WHERE
                                  timesheet_totals.wkendDate BETWEEN ? AND ?
                                ORDER BY  
                                  client.client,
                                  timesheet_totals.positionId,timesheet_totals.candidateId,
                                  timesheet_totals.wkendDate,
                                  timesheet_totals.candidateId") or die($mysqli->error);
    $sql->bind_param("ss", $stWkDate, $edWkDate) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clientId,
        $positionId,
        $jobCode,
        $candidateId,
        $emgTotal,
        $ordTotal,
        $aftTotal,
        $nightTotal,
        $rdoTotal,
        $satTotal,
        $sunTotal,
        $ovtTotal,
        $dblTotal,
        $hldTotal,
        $hol_total,
        $satovtTotal,
        $sunovtTotal,
        $povtTotal,
        $startDate,
        $endDate,
        $wkendDate,
        $client) or die($mysqli->error);
    $sql->store_result();
    $timesheetTotalsArray = array();
    while ($sql->fetch()) {
        $firstWorkDate = getFirstWorkedWeekendingDate($mysqli, $candidateId);
        if ($firstWorkDate >= $stWkDate && $firstWorkDate <= $edWkDate) {
            $timesheetTotalsArray[] = array('clientId' => $clientId, 'positionId' => $positionId, 'jobCode' => $jobCode, 'candidateId' => $candidateId, 'emgTotal' => $emgTotal, 'ordTotal' => $ordTotal, 'aftTotal' => $aftTotal, 'nightTotal' => $nightTotal, 'rdoTotal' => $rdoTotal, 'satTotal' => $satTotal, 'sunTotal' => $sunTotal, 'ovtTotal' => $ovtTotal, 'dblTotal' => $dblTotal, 'hldTotal' => $hldTotal, 'hol_total' => $hol_total, 'satovtTotal' => $satovtTotal, 'sunovtTotal' => $sunovtTotal, 'povtTotal' => $povtTotal, 'startDate' => $startDate, 'endDate' => $endDate, 'wkendDate' => $wkendDate, 'client' => $client, 'firstWorkDate' => $firstWorkDate, 'consultant' => getConsultantName($mysqli, getConsultantIdByCandidateId($mysqli, $candidateId)));
        }
    }
    return $timesheetTotalsArray;
}

function getWageSubsidyData($mysqli, $startWkDate, $endWkDate, $attributeId)
{
    $sql = $mysqli->prepare("SELECT
                                  timesheet_totals.clientId,
                                  timesheet_totals.positionId,
                                  timesheet_totals.jobCode,
                                  timesheet_totals.candidateId,
                                  timesheet_totals.emgTotal,
                                  timesheet_totals.ordTotal,
                                  timesheet_totals.aftTotal,
                                  timesheet_totals.nightTotal,
                                  timesheet_totals.rdoTotal,
                                  timesheet_totals.satTotal,
                                  timesheet_totals.sunTotal,
                                  timesheet_totals.ovtTotal,
                                  timesheet_totals.dblTotal,
                                  timesheet_totals.hldTotal,
                                  timesheet_totals.hol_total,
                                  timesheet_totals.satovtTotal,
                                  timesheet_totals.sunovtTotal,
                                  timesheet_totals.povtTotal,
                                  timesheet_totals.startDate,
                                  timesheet_totals.endDate,
                                  timesheet_totals.wkendDate,
                                  client.client
                                FROM
                                  timesheet_totals
                                  INNER JOIN client ON (timesheet_totals.clientId = client.clientId)
                                  INNER JOIN candidate_otherlicence ON (timesheet_totals.candidateId = candidate_otherlicence.candidateId)
                                WHERE
                                  timesheet_totals.wkendDate BETWEEN ? AND ? AND
                                  candidate_otherlicence.otherLicenceId = ?  
                                ORDER BY  
                                  timesheet_totals.positionId,timesheet_totals.candidateId,
                                  timesheet_totals.wkendDate") or die($mysqli->error);
    $sql->bind_param("ssi", $startWkDate, $endWkDate, $attributeId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clientId,
        $positionId,
        $jobCode,
        $candidateId,
        $emgTotal,
        $ordTotal,
        $aftTotal,
        $nightTotal,
        $rdoTotal,
        $satTotal,
        $sunTotal,
        $ovtTotal,
        $dblTotal,
        $hldTotal,
        $hol_total,
        $satovtTotal,
        $sunovtTotal,
        $povtTotal,
        $startDate,
        $endDate,
        $wkendDate,
        $client) or die($mysqli->error);
    $sql->store_result();
    $wageSubsidyArray = array();
    while ($sql->fetch()) {
        $wageSubsidyArray[] = array('clientId' => $clientId, 'positionId' => $positionId, 'jobCode' => $jobCode, 'candidateId' => $candidateId, 'emgTotal' => $emgTotal, 'ordTotal' => $ordTotal, 'aftTotal' => $aftTotal, 'nightTotal' => $nightTotal, 'rdoTotal' => $rdoTotal, 'satTotal' => $satTotal, 'sunTotal' => $sunTotal, 'ovtTotal' => $ovtTotal, 'dblTotal' => $dblTotal, 'hldTotal' => $hldTotal, 'hol_total' => $hol_total, 'satovtTotal' => $satovtTotal, 'sunovtTotal' => $sunovtTotal, 'povtTotal' => $povtTotal, 'startDate' => $startDate, 'endDate' => $endDate, 'wkendDate' => $wkendDate, 'client' => $client, 'firstWorkDate' => getFirstWorkedWeekendingDate($mysqli, $candidateId), 'consultant' => getConsultantName($mysqli, getConsultantIdByCandidateId($mysqli, $candidateId)));
    }
    return $wageSubsidyArray;
}

function checkInvoiceGeneration($mysqli, $weekendingDate)
{
    $sqlchk = $mysqli->prepare("SELECT invoiceId FROM invoice_detail WHERE weekendingDate = ?") or die ($mysqli->error);
    $sqlchk->bind_param("s", $weekendingDate) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->bind_result($invoiceId) or die($mysqli->error);
    $num_of_rows = $sqlchk->num_rows;
    //$sqlchk->free_result();
    if ($num_of_rows > 0) {
        return 'TRUE';
    } else {
        return 'FALSE';
    }
}

function getActiveCandidateInfo($mysqli)
{
    $status = 'ACTIVE';
    $transCodeType = 5;
    $sql = $mysqli->prepare("SELECT candidate.candidateId,
                                      candidate.firstName,
                                      candidate.nickname,
                                      candidate.lastName,
                                      candidate.address,
                                      candidate.street_number,
                                      candidate.street_name,
                                      candidate.state,
                                      candidate.suburb,
                                      candidate.postcode,
                                      candidate.mobileNo,
                                      candidate.email,
                                      candidate.sex,
                                      candidate.suburb,
                                      candidate.dob,
                                      candidate.tfn,
                                      candidate.workStartDate,
                                      candidate.superMemberNo,
                                      candidate.reg_pack_status,  
                                      transactioncode.transCodeDesc,
                                      taxcode.taxcodeDesc,
                                      employee_bank_account.accountName,
                                      employee_bank_account.accountNumber,
                                      employee_bank_account.bsb
                                    FROM
                                      candidate
                                    INNER JOIN candidate_superfund ON (candidate.candidateId = candidate_superfund.candidateId)
                                    INNER JOIN transactioncode ON (candidate_superfund.transCode = transactioncode.transCode)
                                    INNER JOIN candidate_taxcode ON (candidate.candidateId = candidate_taxcode.candidateId)
                                    INNER JOIN taxcode ON (candidate_taxcode.taxcode = taxcode.taxcode)
                                    INNER JOIN employee_bank_account ON (candidate.candidateId = employee_bank_account.candidateId)
                                    WHERE
                                      candidate.empStatus = ? AND 
                                      transactioncode.transCodeType = ?") or die($mysqli->error);
    $sql->bind_param("si", $status, $transCodeType) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId,
        $firstName,
        $nickname,
        $lastName,
        $address,
        $street_number,
        $street_name,
        $state,
        $suburb,
        $postcode,
        $mobileNo,
        $email,
        $sex,
        $suburb,
        $dob,
        $tfn,
        $workStartDate,
        $superMemberNo,
        $reg_pack_status,
        $transCodeDesc,
        $taxcodeDesc,
        $accountName,
        $accountNumber,
        $bsb) or die($mysqli->error);
    $sql->store_result();
    $candidateArray = array();
    while ($sql->fetch()) {
        $candidateArray[] = array('candidateId' => $candidateId, 'firstName' => $firstName, 'nickname' => $nickname, 'lastName' => $lastName, 'address' => $address, 'street_number' => $street_number, 'street_name' => $street_name, 'state' => $state, 'suburb' => $suburb, 'postcode' => $postcode, 'mobileNo' => $mobileNo, 'email' => $email, 'sex' => $sex, 'suburb' => $suburb, 'dob' => $dob, 'tfn' => $tfn, 'workStartDate' => $workStartDate, 'superMemberNo' => $superMemberNo, 'reg_pack_status' => $reg_pack_status, 'transCodeDesc' => $transCodeDesc, 'taxcodeDesc' => $taxcodeDesc, 'accountName' => $accountName, 'accountNumber' => $accountNumber, 'bsb' => $bsb);
    }
    return $candidateArray;
}

function getEmployeePositionList($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT 
                              employee_positions.candidateId,
                              employee_positions.positionid,
                              candidate_position.positionName
                            FROM
                              employee_positions
                            INNER JOIN candidate_position ON (employee_positions.positionid = candidate_position.positionid)
                            WHERE
                              employee_positions.candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId, $positionid,$positionName) or die($mysqli->error);
    $sql->store_result();
    $positionsArray = array();
    while ($sql->fetch()) {
        $positionsArray[] = array('candidateId' => $candidateId,'positionId'=>$positionid,'positionName' => $positionName);
    }
    return $positionsArray;
}

function saveTimesheetPayruns($mysqli, $totId, $payRunId)
{
    $sql = $mysqli->prepare("INSERT INTO timesheet_payrun_log(totId,payrunId) VALUES(?,?)") or die($mysqli->error);
    $sql->bind_param("ii", $totId, $payRunId) or die($mysqli->error);
    $sql->execute();
    $nrows = $sql->affected_rows;
    if ($nrows == '1') {
        return 'Added';
    } else {
        return $mysqli->error;
    }
}

function updateTimesheetPayrun($mysqli, $payrunId, $status)
{
    $up = $mysqli->prepare("UPDATE timesheet_payrun_log SET status = ? WHERE payrunId = ?") or die($mysqli->error);
    $up->bind_param("is", $status, $payrunId) or die($mysqli->error);
    $up->execute();
    $nrow = $up->affected_rows;
    if ($nrow == '1') {
        $up->free_result();
        return true;
    } else {
        return false;
    }
}

function getPayrollReportData($mysqli, $clId, $wkendingDate)
{
    $sql = $mysqli->prepare("SELECT
            candidate_position.positionName,
            candidate.firstName,
            candidate.lastName,
            payrundetails.clientId,
            payrundetails.positionId,
            payrundetails.candidateId,
            payrundetails.weekendingDate,
            payrundetails.category,
            payrundetails.units,
            payrundetails.rate,
            payrundetails.amount,
            payrundetails.chargeRate,
            payrundetails.chargeAmount
            FROM
            payrundetails
            INNER JOIN candidate ON (payrundetails.candidateId = candidate.candidateId)
            INNER JOIN candidate_position ON (payrundetails.positionId = candidate_position.positionid)
            WHERE
            payrundetails.weekendingDate = ? AND
            payrundetails.itemType < 9 AND
            payrundetails.clientId = ?") or die($mysqli->error);
    $sql->bind_param("si", $wkendingDate, $clId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($positionName,
        $firstName,
        $lastName,
        $clientId,
        $positionId,
        $candidateId,
        $weekendingDate,
        $category,
        $units,
        $rate,
        $amount,
        $chargeRate,
        $chargeAmount) or die($mysqli->error);
    $sql->store_result();
    $payrollArray = array();
    while ($sql->fetch()) {
        $payrollArray[] = array('positionName' => $positionName, 'firstName' => $firstName, 'lastName' => $lastName, 'clientId' => $clientId, 'positionId' => $positionId, 'candidateId' => $candidateId, 'weekendingDate' => $weekendingDate, 'category' => $category, 'units' => $units, 'rate' => $rate, 'amount' => $amount, 'chargeRate' => $chargeRate, 'chargeAmount' => $chargeAmount);
    }
    return $payrollArray;
}

/*
function getDepartmentsForPayroll($mysqli,$candidateId,$clientId,$positionId,$weekendingDate){
    $sql = $mysqli->prepare("SELECT
                                  timesheet.deptId
                                FROM
                                  timesheet
                                WHERE
                                  timesheet.candidateId = ? AND
                                  timesheet.weekendingDate = ? AND
                                  timesheet.clientId = ? AND
                                  timesheet.positionId = ?")or die($mysqli->error);
    $sql->bind_param("ssii",$candidateId,$weekendingDate,$clientId,$positionId)or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($deptId)or die($mysqli->error);
    $sql->store_result();
    $deptArray = array();
    while($sql->fetch()){
        $row = array('department'=>getDepartmentById($mysqli,$deptId));
        $deptArray[] = $row;
    }
    return $deptArray;
}*/
function getDepartmentsForPayroll($mysqli, $candidateId, $clientId, $positionId, $weekendingDate)
{
    try {
        $sql = $mysqli->prepare("SELECT
                                  department.department
                                FROM
                                  timesheet_department
                                INNER JOIN department ON (timesheet_department.deptId = department.deptId)
                                WHERE
                                  timesheet_department.empId = ? AND 
                                  timesheet_department.weekendingDate = ? AND 
                                  timesheet_department.clientId = ? AND 
                                  timesheet_department.positionId = ?") or die($mysqli->error);
        $sql->bind_param("ssii", $candidateId, $weekendingDate, $clientId, $positionId) or die($mysqli->error);
        /* $sql = $mysqli->prepare("SELECT
                                       department.department
                                     FROM
                                       timesheet
                                     INNER JOIN department ON (timesheet.deptId = department.deptId)
                                     WHERE
                                       timesheet.candidateId = ? AND
                                       timesheet.weekendingDate = ? AND
                                       timesheet.clientId = ? AND
                                       timesheet.positionId = ?")or die($mysqli->error);
         $sql->bind_param("ssii",$candidateId,$weekendingDate,$clientId,$positionId)or die($mysqli->error);*/
        /*$sql = $mysqli->prepare("SELECT
                                      department.department
                                    FROM
                                      timesheet_totals
                                    INNER JOIN department ON (timesheet_totals.deptId = department.deptId)
                                    WHERE
                                      timesheet_totals.candidateId = ? AND
                                      timesheet_totals.wkendDate = ? AND
                                      timesheet_totals.clientId = ? AND
                                      timesheet_totals.positionId = ?")or die($mysqli->error);*/
        /* $sql = $mysqli->prepare("SELECT
                                       department.department
                                     FROM
                                       shift
                                     INNER JOIN department ON (shift.departmentId = department.deptId)
                                     WHERE
                                       shift.candidateId = ? AND
                                       shift.shiftDate = ? AND
                                       shift.clientId = ? AND
                                       shift.positionId = ?")or die($mysqli->error);*/
        $sql->bind_param("ssii", $candidateId, $weekendingDate, $clientId, $positionId) or die($mysqli->error);
        $sql->execute();
        $sql->bind_result($department) or die($mysqli->error);
        $sql->store_result();
        $deptArray = array();
        while ($sql->fetch()) {
            $deptArray[] = array('department' => $department);
        }
        return $deptArray;
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function getTempVisaData($mysqli, $wkendingDate)
{
    $status = 'CLOSED';
    $sql = $mysqli->prepare("SELECT 
                              payrundetails.candidateId,
                              payrundetails.units,
                              visatype.visaType,
                              employee_visatype.expiryDate,
                              payrundetails.weekendingDate
                            FROM
                              payrundetails
                              INNER JOIN employee_visatype ON (payrundetails.candidateId = employee_visatype.candidateId)
                              INNER JOIN visatype ON (employee_visatype.visaTypeId = visatype.id)
                            WHERE
                              payrundetails.weekendingDate = ? AND 
                              payrundetails.status = ?
                            ORDER BY
                              payrundetails.candidateId ASC") or die($mysqli->error);
    $sql->bind_param("ss", $wkendingDate, $status) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId, $units, $visaType, $expiryDate, $weekendingDate) or die($mysqli->error);
    $sql->store_result();
    // AND
    //                              employee_visatype.visaTypeId IN (2,3,22,24,59,63,64,65,66,67,68)
    $tempVisaArray = array();
    while ($sql->fetch()) {
        $tempVisaArray[] = array('candidateId' => $candidateId, 'units' => $units, 'visaType' => $visaType, 'expiryDate' => $expiryDate, 'weekendingDate' => $weekendingDate);
    }
    return $tempVisaArray;
}

function generateRosterSMSStatusData($mysqli, $startDate, $endDate, $shiftStatus)
{
    $sql = $mysqli->prepare("SELECT 
                                  candidate.firstName,
                                  candidate.lastName,
                                  shift.candidateId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.shiftSMSStatus,
                                  candidate_position.positionName,
                                  client.client,
                                  department.department
                                FROM
                                  shift
                                  INNER JOIN candidate ON (shift.candidateId = candidate.candidateId)
                                  INNER JOIN candidate_position ON (shift.positionId = candidate_position.positionid)
                                  INNER JOIN client ON (shift.clientId = client.clientId)
                                  INNER JOIN department ON (shift.departmentId = department.deptId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND 
                                  shift.shiftSMSStatus = ? ORDER BY shift.shiftDate ASC") or die($mysqli->error);
    $sql->bind_param("ssi", $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($firstName, $lastName, $candidateId, $shiftDate, $shiftDay, $shiftStart, $shiftEnd, $workBreak, $shiftSMSStatus, $positionName, $client, $department) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $rosterArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            //$hrsWorked = calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak);
            $rosterArray[] = array('firstName' => $firstName, 'lastName' => $lastName, 'candidateId' => $candidateId, 'shiftDate' => $shiftDate, 'shiftDay' => $shiftDay, 'shiftStart' => $shiftStart, 'shiftEnd' => $shiftEnd, 'workBreak' => $workBreak, 'shiftSMSStatus' => $shiftSMSStatus, 'positionName' => $positionName, 'client' => $client, 'department' => $department);
        }
        return $rosterArray;
    }
}

function generateWorkPermitEmail($firstName, $lastName, $conEmail, $empEmail, $file)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . ' Work permit - ' . $firstName . ' ' . $lastName;
    $mail->AddBCC($conEmail);
    $mail->AddAddress($empEmail);
    $mail->AddBCC(DEFAULT_EMAIL);
    $mail->Subject = DOMAIN_NAME . ' Work permit';
    $mail->AddAttachment($file);
    $mail->IsHTML(true);
    $body = '<br/>Hi  ' . $firstName . ' ' . $lastName . ',<br/><br> Please see attached Permitted Work Permit letter. You may show the shift on your App for further details.<br/><br/>Shift dates/times mentioned on this letter may change depending on the client requirement for the given dates/weeks.
			  <br/>
			  <br/>';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function generateInductionMail($firstName, $lastName, $conEmail, $file)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . ' Casual Induction Submission - ' . $firstName . ' ' . $lastName;
    $mail->AddAddress($conEmail);
    $mail->addCC('');
    $mail->Subject = $subject;
    $mail->AddAttachment($file);
    $mail->IsHTML(true);
    $body = '<br/>Candidate ' . $firstName . ' ' . $lastName . ', has signed induction with ' . DOMAIN_NAME . ' Online<br/>
			  <br/>
			  <br/>
			 ';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function generateJotFormMail($firstName, $lastName, $ccEmail, $file, $passportFile, $birthFile, $citizenFile, $drivingFile, $medicareFile, $studentFile, $policeFile, $txFile, $crFile, $stFile, $prFile, $whiteFile, $forkFile, $fit2wrkFile)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . ' Online Registration Pack - ' . $firstName . ' ' . $lastName;
    $mail->AddAddress($ccEmail);
    $mail->AddCC('');
    $mail->Subject = $subject;
    /*$mail->AddAttachment($file);
    $mail->AddAttachment($passportFile);
    $mail->AddAttachment($birthFile);
    $mail->AddAttachment($citizenFile);
    $mail->AddAttachment($drivingFile);
    $mail->AddAttachment($medicareFile);
    $mail->AddAttachment($studentFile);
    $mail->AddAttachment($policeFile);
    $mail->AddAttachment($txFile);
    $mail->AddAttachment($crFile);
    $mail->AddAttachment($stFile);
    $mail->AddAttachment($prFile);
    $mail->AddAttachment($whiteFile);
    $mail->AddAttachment($forkFile);
    $mail->AddAttachment($fit2wrkFile);*/
    $mail->IsHTML(true);
    $body = '<br/>Candidate ' . $firstName . ' ' . $lastName . ', has filled JOT Form with ' . DOMAIN_NAME . ' Online<br/>
			  <br/>
			  <br/>
			 ';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function generateDaviesTemperatureCheckMail($firstName, $lastName, $ccEmail, $file)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . ' temperature check';
    $mail->AddAddress($ccEmail);
    $mail->AddBCC(DEFAULT_EMAIL);
    $mail->Subject = $subject;
    $mail->AddAttachment($file);
    $mail->IsHTML(true);
    $body = '<br/>Candidate ' . $firstName . ' ' . $lastName . ', has filled ' . DOMAIN_NAME . ' temperature check with ' . DOMAIN_NAME . ' Online<br/>
			  <br/>
			  <br/>
			  ';
    $mail->Body = $body;
    $mail->send();

    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function generateEmploymentContractMail($firstName, $lastName, $ccEmail, $file)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . ' Casual Employment Contract Registration';
    $mail->AddAddress($ccEmail);
    $mail->AddCC('');
    $mail->Subject = $subject;
    $mail->AddAttachment($file);
    $mail->IsHTML(true);
    $body = '<br/>Candidate ' . $firstName . ' ' . $lastName . ', has filled Employment Contract with ' . DOMAIN_NAME . ' Online<br/>
			  <br/>
			  <br/>
			  ';
    $mail->Body = $body;
    $mail->send();

    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function generateCovidVaccinationMail($mysqli, $canId, $firstName, $lastName)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . ' Casual COVID19 Vaccination Submission';
    $mail->AddCC('');
    $mail->AddCC(DEFAULT_EMAIL);
    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = '<br/>Candidate ' . $firstName . ' ' . $lastName . '(' . $canId . '), has submitted COVID19 Vaccination with ' . DOMAIN_NAME . ' Online<br/>
			  <br/>
			  <br/>
			  ';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function generateCovidPolicyMail($firstName, $lastName, $ccEmail, $file)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . ' Casual COVID19 Policy Agreement';
    $mail->AddAddress($ccEmail);
    $mail->AddBCC(DEFAULT_EMAIL);
    $mail->Subject = $subject;
    $mail->AddAttachment($file);
    $mail->IsHTML(true);
    $body = '<br/>Candidate ' . $firstName . ' ' . $lastName . ', has filled COVID19 policy agreement with ' . DOMAIN_NAME . ' Online<br/>
			  <br/>
			  <br/>
			 ';
    $mail->Body = $body;
    $mail->send();

    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function generateTaxFormMail($toEmail, $file, $fullName, $mobileNo, $conEmail)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . ' Casual Tax Form Declaration - ' . $fullName;
    $mail->AddCC($toEmail);
    $mail->AddCC('');
    $mail->AddBCC(DEFAULT_EMAIL);
    $mail->Subject = $subject;
    $mail->AddAttachment($file);
    $mail->IsHTML(true);
    $body = '<br/>Please refer to the attached tax for declaration filled by, ' . $fullName . ' (' . $mobileNo . ') <br/>
			  <br/>
			  <br/>
			  ';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return 'SUCCESS';
    } else {
        return 'FAILURE';
    }
}

function generateSuperannuationFormMail($toEmail, $file, $fullName, $mobileNo, $conEmail)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, 'Labourbank');
    $subject = 'Labourbank Casual Super Form Declaration - ' . $fullName;
    $mail->AddCC($toEmail);
    $mail->AddCC('');
    $mail->AddCC(DEFAULT_EMAIL);
    $mail->Subject = $subject;
    $mail->AddAttachment($file);
    $mail->IsHTML(true);
    $body = '<br/>Please refer to the attached superannuation for declaration filled by, ' . $fullName . ' (' . $mobileNo . ') <br/>
			  <br/>
			  <br/>
			  ';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return 'SUCCESS';
    } else {
        return 'FAILURE';
    }
}

function generateEmploymentTermsMail($fullName, $conEmail, $file)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';

    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, 'Labourbank');
    $subject = 'Labourbank Casual Employment Terms Agreement';
    $mail->AddCC($conEmail);
    // $mail->AddBCC(DEFAULT_EMAIL);
    $mail->Subject = $subject;
    //$file = 'documents/'.$candidateId.'/'.$regFile;
    $mail->AddAttachment($file);
    $mail->IsHTML(true);
    $body = '<br/>Candidate ' . $fullName . ', has filled Employment Terms Agreement with Labourbank Online<br/>
                Please check the attachment.
			  <br/>
			  <br/>
			 ';
    $mail->Body = $body;
    $mail->send();

    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function getTimesheetReportData($mysqli, $wkendingDate, $clId)
{
    $status = '';
    if ($clId != 'All') {
        $sql = $mysqli->prepare("SELECT 
                                      timesheet.shiftId,
                                      timesheet.shiftDay,
                                      timesheet.shiftDate,
                                      timesheet.candidateId,
                                      timesheet.clientId,
                                      timesheet.positionId,
                                      timesheet.deptId,
                                      timesheet.jobCode,
                                      timesheet.shiftStart,
                                      timesheet.shiftEnd,
                                      timesheet.workBreak,
                                      timesheet.wrkHrs,
                                      timesheet.weekendingDate,
                                      timesheet.transport
                                FROM
                                  timesheet
                                WHERE
                                  timesheet.weekendingDate = ?
                                AND timesheet.clientId = ?
                                AND timesheet.status != ?  
                                ORDER BY
                                  timesheet.candidateId") or die($mysqli->error);
        $sql->bind_param("sis", $wkendingDate, $clId, $status) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT 
                                      timesheet.shiftId,
                                      timesheet.shiftDay,
                                      timesheet.shiftDate,
                                      timesheet.candidateId,
                                      timesheet.clientId,
                                      timesheet.positionId,
                                      timesheet.deptId,
                                      timesheet.jobCode,
                                      timesheet.shiftStart,
                                      timesheet.shiftEnd,
                                      timesheet.workBreak,
                                      timesheet.wrkHrs,
                                      timesheet.weekendingDate,
                                      timesheet.transport
                                FROM
                                  timesheet
                                WHERE
                                  timesheet.weekendingDate = ?
                                AND timesheet.status != ?  
                                ORDER BY
                                  timesheet.candidateId") or die($mysqli->error);
        $sql->bind_param("ss", $wkendingDate, $status) or die($mysqli->error);
    }
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftDay, $shiftDate, $candidateId, $clientId, $positionId, $deptId, $jobCode, $shiftStart, $shiftEnd, $workBreak, $wrkHrs, $weekendingDate, $transport) or die($mysqli->error);
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('shiftId' => $shiftId, 'shiftDay' => $shiftDay, 'shiftDate' => $shiftDate, 'candidateId' => $candidateId, 'clientId' => $clientId, 'positionId' => $positionId, 'deptId' => $deptId, 'jobCode' => $jobCode, 'shiftStart' => $shiftStart, 'shiftEnd' => $shiftEnd, 'workBreak' => $workBreak, 'wrkHrs' => $wrkHrs, 'weekendingDate' => $weekendingDate, 'transport' => $transport);
    }
    return $dataArray;
}

function getSupervisorClient($mysqli, $supervisorId)
{
    $sql = $mysqli->prepare("SELECT supervisorClient FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $supervisorId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->supervisorClient;
    } else {
        return null;
    }
}

function getClientDepartmentNote($mysqli, $department)
{
    $sql = $mysqli->prepare("SELECT note FROM department WHERE deptId = ?") or die($mysqli->error);
    $sql->bind_param("i", $department) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->note;
    } else {
        return null;
    }
}

function getAllCandidates($mysqli)
{
    $sql = $mysqli->prepare("SELECT
                              candidate.candidateId,
                              candidate.firstName,
                              candidate.lastName,
                              candidate.mobileNo,
                              candidate.email,
                              candidate.sex
                            FROM
                              candidate 
                            ORDER BY
                              candidate.candidateId") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($candidateId, $firstName, $lastName, $mobileNo, $email, $sex) or die($mysqli->error);
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('candidateId' => $candidateId, 'firstName' => $firstName, 'lastName' => $lastName, 'email' => $email, 'sex' => $sex);
    }
    return $dataArray;
}

function getShiftDataForCandidate($mysqli, $stDate, $enDate, $canId)
{
    $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.shiftStatus,
                                  shift.positionId
                                FROM
                                  shift
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.candidateId = ?
                                ORDER BY shift.shiftDate DESC") or die($mysqli->error);
    $sql->bind_param("sss", $stDate, $enDate, $canId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftDate, $shiftDay, $clientId, $stateId, $departmentId, $shiftStart, $shiftEnd, $shiftStatus, $positionId) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $row = '';
    while ($sql->fetch()) {
        $clockInData = getClockInOut($mysqli, $shiftId);
        $cell = '';
        $location_check = '';
        foreach ($clockInData as $clData) {
            $cell = $cell . '<td>' . $clData['checkIn'] . '</td><td>' . $clData['checkOut'] . '</td>';
            if (!empty($clData['checkin_latitude'])) {
                $location_check = $location_check . '<td><a href="https://maps.google.com/?q=' . $clData['checkin_latitude'] . ',' . $clData['checkin_longitude'] . '" target="_blank">CheckIn Location</a></td>';
            }
            if (!empty($clData['checkout_latitude'])) {
                $location_check = $location_check . '<td><a href="https://maps.google.com/?q=' . $clData['checkout_latitude'] . ',' . $clData['checkout_longitude'] . '" target="_blank">CheckOut Location</a></td>';
            }
            $cell = $cell . $location_check;
        }
        if (empty($cell)) {
            $cell = '<td></td><td></td>';
        }
        $row = $row . '<tr><td>' . $shiftDate . '</td><td>' . $shiftDay . '</td><td>' . getClientNameByClientId($mysqli, $clientId) . '</td><td>' . getStateById($mysqli, $stateId) . '</td><td>' . getDepartmentById($mysqli, $departmentId) . '</td><td>' . getPositionByPositionId($mysqli, $positionId) . '</td><td>' . $shiftStart . '</td><td>' . $shiftEnd . '</td><td>' . $shiftStatus . '</td>' . $cell . '</tr>';
    }
    if ($num_of_rows > 0) {
        return $row;
    } else {
        return '';
    }
}

function getShiftDataAlertForCandidate($mysqli, $stDate, $enDate, $canId)
{
    $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.clientId,
                                  shift.stateId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.shiftStatus,
                                  shift.positionId
                                FROM
                                  shift
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.candidateId = ?
                                ORDER BY shift.shiftDate DESC") or die($mysqli->error);
    $sql->bind_param("sss", $stDate, $enDate, $canId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftDate, $shiftDay, $clientId, $stateId, $departmentId, $shiftStart, $shiftEnd, $shiftStatus, $positionId) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $row = '';
    $statusArray = array('OPEN', 'CONFIRMED');
    while ($sql->fetch()) {
        if (in_array($shiftStatus, $statusArray)) {
            $clockInData = getClockInOut($mysqli, $shiftId);
            $cell = '';
            foreach ($clockInData as $clData) {
                $cell = $cell . '<td>' . $clData['checkIn'] . '</td><td>' . $clData['checkOut'] . '</td>';
            }
            $row = $row . '<tr><td>' . $shiftDate . '</td><td>' . $shiftDay . '</td><td>' . getClientNameByClientId($mysqli, $clientId) . '</td><td>' . getStateById($mysqli, $stateId) . '</td><td>' . getDepartmentById($mysqli, $departmentId) . '</td><td>' . getPositionByPositionId($mysqli, $positionId) . '</td><td>' . $shiftStart . '</td><td>' . $shiftEnd . '</td><td>' . $shiftStatus . '</td>' . $cell . '</tr>';
        }
    }
    if ($num_of_rows > 0) {
        return $row;
    } else {
        return '';
    }
}

function validateClientSummary($mysqli, $weekendingDate, $clientId)
{
    $sqlchk = $mysqli->prepare("SELECT id FROM client_summary WHERE weekendingDate = ? AND clientId = ?") or die ($mysqli->error);
    $sqlchk->bind_param("si", $weekendingDate, $clientId) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->bind_result($id);
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateClientSummarySave($mysqli, $weekendingDate, $clientId)
{
    $status = 1;
    $sqlchk = $mysqli->prepare("SELECT id FROM client_summary WHERE weekendingDate = ? AND clientId = ? AND status = ?") or die ($mysqli->error);
    $sqlchk->bind_param("sii", $weekendingDate, $clientId, $status) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->bind_result($id);
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function updateClientSummary($mysqli, $id, $weekendingDate)
{
    if (!validateClientSummarySave($mysqli, $weekendingDate, $id)) {
        $status = 1;
        $sql = $mysqli->prepare("UPDATE client_summary SET status = ? WHERE clientId = ? AND weekendingDate = ?") or die($mysqli->error);
        $sql->bind_param("iis", $status, $id, $weekendingDate) or die($mysqli->error);
        if ($sql->execute()) {
            return 'Client Summary updated';
        } else {
            return $mysqli->error;
        }
    } else {
        return 'Records are existing';
    }
}

function removeClientSummary($mysqli, $clientId, $weekendingDate)
{
    $status = 0;
    $sql = $mysqli->prepare("DELETE FROM client_summary WHERE clientId = ? AND weekendingDate = ? AND status = ?") or die($mysqli->error);
    $sql->bind_param("isi", $clientId, $weekendingDate, $status) or die($mysqli->error);
    $sql->execute();
    $sql->free_result();
    return true;
}

function saveClientSummary($mysqli, $clientId, $payUnits, $payAmount, $billUnits, $billAmount, $tax, $net, $gross, $superTypeCount, $superPayAmount, $weekendingDate)
{
    if (!validateClientSummary($mysqli, $weekendingDate, $clientId)) {
        $sql = $mysqli->prepare("INSERT INTO
                                  client_summary(
                                  clientId,
                                  payUnits,
                                  payAmount,
                                  billUnits,
                                  billAmount,
                                  tax,
                                  net,
                                  gross,
                                  superUnits,
                                  superAmount,
                                  weekendingDate)
                                VALUES(
                                  ?,
                                  ?,
                                  ?,
                                  ?,
                                  ?,
                                  ?,
                                  ?,
                                  ?,
                                  ?,
                                  ?,
                                  ?)") or die($mysqli->error);
        $sql->bind_param("isssssssiss", $clientId, $payUnits, $payAmount, $billUnits, $billAmount, $tax, $net, $gross, $superTypeCount, $superPayAmount, $weekendingDate) or die($mysqli->error);
        $sql->execute();
        $nrows = $sql->affected_rows;
        if ($nrows == '1') {
            return $clientId;
        } else {
            return false;
        }
    } else {
        /*$up = $mysqli->prepare("UPDATE client_summary SET payUnits = ?, payAmount = ?, billUnits = ?, billAmount = ?, tax = ?, net = ?, gross = ?, superUnits = ?, superAmount = ? WHERE clientId = ? AND weekendingDate = ?") or die($mysqli->error);
        $up->bind_param("sssssssssis", $payUnits, $payAmount, $billUnits, $billAmount, $tax, $net, $gross, $superTypeCount, $superPayAmount, $clientId, $weekendingDate) or die($mysqli->error);
        $up->execute();
        $nrows = $up->affected_rows;
        if ($nrows == '1') {
            return $clientId;
        } else {
            return false;
        }*/
    }
}

function updateFullName($mysqli, $candidateId, $firstName, $lastName)
{
    $fullName = $firstName . ' ' . $lastName;
    $up = $mysqli->prepare("UPDATE candidate SET fullName = ? WHERE candidateId = ?") or die($mysqli->error);
    $up->bind_param("ss", $fullName, $candidateId) or die($mysqli->error);
    $up->execute();
    $nrow = $up->affected_rows;
    if ($nrow == '1') {
        $statusCheck = $candidateId . '<br>';
    } else {
        $statusCheck = $mysqli->error;
    }
    return $statusCheck;
}

function validateCOVIDPolicyDocumentSigned($mysqli, $empId)
{
    $docType = 52;
    $status = 'SIGNED';
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM candidate_document WHERE candidateId = ? AND docTypeId = ? AND notes = ?") or die ($mysqli->error);
    $sqlchk->bind_param("sis", $empId, $docType, $status) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateInductionDocumentSigned($mysqli, $empId)
{
    $docType = 11;
    $status = 'SIGNED';
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM candidate_document WHERE candidateId = ? AND docTypeId = ? AND notes = ?") or die ($mysqli->error);
    $sqlchk->bind_param("sis", $empId, $docType, $status) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateDaviesInductionDocumentSigned($mysqli, $empId)
{
    $docType = 41;
    $status = 'SIGNED';
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM candidate_document WHERE candidateId = ? AND docTypeId = ? AND notes = ?") or die ($mysqli->error);
    $sqlchk->bind_param("sis", $empId, $docType, $status) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateMissionInductionDocumentSigned($mysqli, $empId)
{
    $docType = 76;
    $status = 'SIGNED';
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM candidate_document WHERE candidateId = ? AND docTypeId = ? AND notes = ?") or die ($mysqli->error);
    $sqlchk->bind_param("sis", $empId, $docType, $status) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateMelbourneChefInductionDocumentSigned($mysqli, $empId)
{
    $docType = 84;
    $status = 'SIGNED';
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM candidate_document WHERE candidateId = ? AND docTypeId = ? AND notes = ?") or die ($mysqli->error);
    $sqlchk->bind_param("sis", $empId, $docType, $status) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateDocumentTypeSigned($mysqli, $empId, $docType)
{
    $status = 'SIGNED';
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM candidate_document WHERE candidateId = ? AND docTypeId = ? AND notes = ?") or die ($mysqli->error);
    $sqlchk->bind_param("sis", $empId, $docType, $status) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateGrumaTrainingSigned($mysqli, $empId)
{
    $docType = 77;
    $status = 'SIGNED';
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM candidate_document WHERE candidateId = ? AND docTypeId = ? AND notes = ?") or die ($mysqli->error);
    $sqlchk->bind_param("sis", $empId, $docType, $status) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateMissionVisitorInductionSigned($mysqli, $empId)
{
    $docType = 78;
    $status = 'SIGNED';
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM candidate_document WHERE candidateId = ? AND docTypeId = ? AND notes = ?") or die ($mysqli->error);
    $sqlchk->bind_param("sis", $empId, $docType, $status) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateMissionConfidentialitySigned($mysqli, $empId)
{
    $docType = 79;
    $status = 'SIGNED';
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM candidate_document WHERE candidateId = ? AND docTypeId = ? AND notes = ?") or die ($mysqli->error);
    $sqlchk->bind_param("sis", $empId, $docType, $status) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateHandbookSigned($mysqli, $empId)
{
    $docType = 83;
    $status = 'SIGNED';
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM candidate_document WHERE candidateId = ? AND docTypeId = ? AND notes = ?") or die ($mysqli->error);
    $sqlchk->bind_param("sis", $empId, $docType, $status) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateEmploymentTermDocumentSigned($mysqli, $empId)
{
    $docType = 8;
    $status = 'SIGNED';
    $sqlchk = $mysqli->prepare("SELECT candidateId FROM candidate_document WHERE candidateId = ? AND docTypeId = ? AND notes = ?") or die ($mysqli->error);
    $sqlchk->bind_param("sis", $empId, $docType, $status) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $num_of_rows = $sqlchk->num_rows;
    $sqlchk->free_result();
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateOHSDocumentSigned($mysqli, $empId, $clientId, $stateId, $deptId, $positionId)
{
    $docType = 60;
    $status = 'SIGNED';
    $sql = $mysqli->prepare("SELECT validFrom FROM candidate_document WHERE candidateId = ? AND docTypeId = ? AND notes = ?") or die ($mysqli->error);
    $sql->bind_param("sis", $empId, $docType, $status) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    if ($sql->num_rows > 0) {
        $sql->bind_result($validFrom) or die($mysqli->error);
        while ($sql->fetch()) {
            $valid = explode('-', $validFrom);
            if (($clientId == $valid[1]) && ($stateId == $valid[2]) && ($deptId == $valid[3]) && ($positionId == $valid[4])) {
                return true;
            } else {
                return false;
            }
        }
    } else {
        return false;
    }
}

function validateDocumentSubmission($mysqli, $empId, $clientId, $stateId, $deptId, $positionId, $docType)
{
    $status = 'SIGNED';
    $sql = $mysqli->prepare("SELECT validFrom FROM candidate_document WHERE candidateId = ? AND docTypeId = ? AND notes = ?") or die ($mysqli->error);
    $sql->bind_param("sis", $empId, $docType, $status) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    if ($sql->num_rows > 0) {
        $sql->bind_result($validFrom) or die($mysqli->error);
        while ($sql->fetch()) {
            $valid = explode('-', $validFrom ?? '');
            if (($clientId == $valid[1]) && ($stateId == $valid[2]) && ($deptId == $valid[3]) && ($positionId == $valid[4])) {
                return true;
            } else {
                return false;
            }
        }
    } else {
        return false;
    }
}

function getMailReferences($mysqli)
{
    $sql = $mysqli->prepare("SELECT DISTINCT reference FROM resume WHERE reference IS NOT NULL ORDER BY reference") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($reference) or die($mysqli->error);
    $html = '';
    while ($sql->fetch()) {
        $html = $html . '<a class="referenceLink" href="#" data-reference="' . $reference . '">' . strtoupper($reference) . '</a><br>';
    }
    return $html;
}

function getReferenceMailList($mysqli, $reference)
{
    $sql = $mysqli->prepare("SELECT id,mailfrom,mailto,subject,date FROM resume WHERE reference = ? ORDER BY date DESC") or die($mysqli->error);
    $sql->bind_param("s", $reference) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($id, $mailfrom, $mailto, $subject, $date) or die($mysqli->error);
    $html = '<table class="table-responsive-lg" width="100%"><thead><th></th><th></th></thead><tbody>';
    while ($sql->fetch()) {
        $fromData = explode('via', $mailfrom ?? '');
        $from = trim($fromData[0]);
        $html = $html . '<tr><td><h6><span class="mailLink" data-maillink="' . $id . '">' . $mailfrom . '</span></h6><span style="font-size: 9pt">' . $subject . '</span><br></td><td>' . $date . '</td></tr>';
    }
    return $html;
}

function getMailBody($mysqli, $id)
{
    $sql = $mysqli->prepare("SELECT msgbody FROM resume WHERE id = ?") or die($mysqli->error);
    $sql->bind_param("i", $id) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->msgbody;
    } else {
        return null;
    }
}

function getStudentEmployeeWorkHours($mysqli, $canId, $startDate, $endDate)
{

    $sql = $mysqli->prepare("SELECT shiftDate,shiftStart,shiftEnd,workBreak FROM shift WHERE shiftDate BETWEEN ? AND ? AND candidateId = ? AND shiftStatus NOT IN('REJECTED','CANCELLED','CANCELLATION WITH NOTICE','CANCELLED BY AGENCY','NO SHOW','SICK','CANCELLATION WITHOUT NOTICE')") or die($mysqli->error);
    $sql->bind_param("sss", $startDate, $endDate, $canId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftDate, $shiftStart, $shiftEnd, $workBreak) or die($mysqli->error);
    $totalWrkHrs = 0;
    while ($sql->fetch()) {
        $totalWrkHrs = $totalWrkHrs + calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak);

    }
    return $totalWrkHrs;

}

function getStudentEmployeeMaxShiftCount($mysqli, $canId, $startDate, $endDate)
{
    if (getEmployeeVisaTypeId($mysqli, $canId) == '2') {
        $sql = $mysqli->prepare("SELECT shiftDate,shiftStart,shiftEnd,workBreak FROM shift WHERE shiftDate BETWEEN ? AND ? AND candidateId = ? AND shiftStatus NOT IN('REJECTED','CANCELLED','CANCELLATION WITH NOTICE','CANCELLED BY AGENCY','NO SHOW','SICK','CANCELLATION WITHOUT NOTICE')") or die($mysqli->error);
        $sql->bind_param("sss", $startDate, $endDate, $canId) or die($mysqli->error);
        $sql->execute();
        $sql->store_result();
        $sql->fetch();
        $num_of_shifts = $sql->num_rows;
        $sql->free_result();
        return $num_of_shifts;
    } else {
        return 0;
    }
}

function getEmployeeShiftCount($mysqli, $canId, $stWrkDate, $startDate)
{
    $rejected = 'REJECTED';
    $sql = $mysqli->prepare("SELECT shiftId FROM shift WHERE shiftDate BETWEEN ? AND ? AND candidateId = ?") or die($mysqli->error);
    $sql->bind_param("sss", $stWrkDate, $startDate, $canId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->fetch();
    $num_of_rows = $sql->num_rows;
    $sql->free_result();
    $allShifts = '';
    if ($num_of_rows > 0) {
        $allShifts = ' ' . $num_of_rows;
    }

    $sqlchk = $mysqli->prepare("SELECT shiftId FROM shift WHERE shiftDate BETWEEN ? AND ? AND candidateId = ? AND shiftStatus = ?") or die($mysqli->error);
    $sqlchk->bind_param("ssss", $stWrkDate, $startDate, $canId, $rejected) or die($mysqli->error);
    $sqlchk->execute();
    $sqlchk->store_result();
    $sqlchk->fetch();
    $numRows = $sqlchk->num_rows;
    $sqlchk->free_result();
    $rejectStatus = '';
    if ($numRows > 0) {
        $rejectStatus = '<span style="color: red"> Rejected : ' . $numRows . '</span>';
    }
    /**/

    return ' Shift Count: ' . $allShifts . ' ' . $rejectStatus;

}

function getNewJobOrderId($mysqli)
{
    $stmt = $mysqli->prepare("SELECT MAX(id) AS max_jobOrderId FROM joborder") or die(mysqli_error());
    $stmt->execute();
    $stmt->bind_result($max_jobOrderId);
    $stmt->store_result();
    $stmt->fetch();
    if ($stmt->num_rows == 0) {
        $max_jobOrderId = 1;
    } else {
        $max_jobOrderId = $max_jobOrderId + 1;
    }
    $jobOrderId = 'JB' . $max_jobOrderId;
    //str_pad($max_candidateId, 10, "0", STR_PAD_LEFT);
    return $jobOrderId;
}

function AddJobOrder($mysqli, $clientId, $stateId, $departmentId, $note, $numCasuals, $consultantId)
{
    $jobOrderId = getNewJobOrderId($mysqli);
    if (!empty($jobOrderId)) {
        $sql = $mysqli->prepare("INSERT INTO joborder(jobOrderId,clientId,stateId,deptId,note,numCasuals,creator,orderTime) VALUES(?,?,?,?,?,?,?,NOW())") or die($mysqli->error);
        $sql->bind_param("siiisii", $jobOrderId, $clientId, $stateId, $departmentId, $note, $numCasuals, $consultantId) or die($mysqli->error);
        $sql->execute();
        $nrows = $sql->affected_rows;
        if ($nrows == '1') {
            $sql->free_result();
            return getJobOrders($mysqli);
        } else {
            return $mysqli->error;
        }
    }
}

function updateJobOrderLog($mysqli, $jobOrderId, $consultantId, $status)
{
    $sql = $mysqli->prepare("INSERT INTO joborderlog(jobOrderId,consultantId,status,actionedTime) VALUES(?,?,?,NOW())") or die($mysqli->error);
    $sql->bind_param("sis", $jobOrderId, $consultantId, $status) or die($mysqli->error);
    $sql->execute();
    $nrows = $sql->affected_rows;
    if ($nrows == '1') {
        $sql->free_result();
        return getJobOrders($mysqli);
    } else {
        return $mysqli->error;
    }
}

function getJobOrderId($mysqli, $id)
{
    $sql = $mysqli->prepare("SELECT jobOrderId FROM joborder WHERE id = ?") or die($mysqli->error);
    $sql->bind_param("i", $id) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->jobOrderId;
    } else {
        return null;
    }
}

function updateJobOrder($mysqli, $id, $consultantId, $status)
{
    $jobOrderId = getJobOrderId($mysqli, $id);
    $sql = $mysqli->prepare("UPDATE joborder SET status = ? WHERE id = ?") or die($mysqli->error);
    $sql->bind_param("si", $status, $id) or die($mysqli->error);
    $sql->execute();
    $nrows = $sql->affected_rows;
    $sql->free_result();
    return updateJobOrderLog($mysqli, $jobOrderId, $consultantId, $status);
}

function updateJobOrderAdditionalNote($mysqli, $jobOrderId, $additionalNote, $consultantId)
{
    $sql = $mysqli->prepare("UPDATE joborder SET noteUpdater = ?,additionalNote = ? WHERE jobOrderId = ?") or die($mysqli->error);
    $sql->bind_param("iss", $consultantId, $additionalNote, $jobOrderId) or die($mysqli->error);
    $sql->execute();
    $nrows = $sql->affected_rows;
    if ($nrows == '1') {
        $sql->free_result();
        return getJobOrders($mysqli);
    } else {
        return $mysqli->error;
    }
}

function getJobOrderAttachments($mysqli, $jobOrderId)
{
    $sql = $mysqli->prepare("SELECT fileName,filePath FROM joborder_documents WHERE joborderid = ?") or die($mysqli->error);
    $sql->bind_param("s", $jobOrderId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($fileName, $filePath) or die($mysqli->error);
    $html = '';
    while ($sql->fetch()) {
        $html = $html . '<a class="docLink" href="' . $filePath . '" target="_blank">' . $fileName . '</a><br>';
    }
    return $html;
}

function getJobOrders($mysqli)
{
    $sql = $mysqli->prepare("SELECT id,jobOrderId,clientId,stateId,deptId,note,numCasuals,creator,status,orderTime,additionalNote,noteUpdater FROM joborder ORDER BY orderTime DESC") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($id, $jobOrderId, $clientId, $stateId, $deptId, $note, $numCasuals, $creator, $status, $orderTime, $additionalNote, $noteUpdater) or die($mysqli->error);
    $row = '';
    while ($sql->fetch()) {
        if ($status == 'Filled') {
            $filledStatus = '<i class="fa fa-check"></i>';
        } else {
            $filledStatus = $status;
        }
        if (!empty($noteUpdater)) {
            $updatedBy = 'Updated by <br>' . getConsultantName($mysqli, $noteUpdater);
        } else {
            $updatedBy = '';
        }
        $row = $row . '<tr id="' . $id . '"><td>' . $jobOrderId . '</td><td>' . getClientNameByClientId($mysqli, $clientId) . '</td><td>' . getStateById($mysqli, $stateId) . '</td><td>' . getDepartmentById($mysqli, $deptId) . '</td><td>' . $note . '</td><td data-joborderid="' . $jobOrderId . '"><textarea name="addionalNote" id="addionalNote" class="addionalNote">' . $additionalNote . '</textarea>' . $updatedBy . '<button class="noteBtn">Update</button></td><td>' . $numCasuals . '</td><td>' . getConsultantName($mysqli, $creator) . '</td><td>' . $orderTime . '</td><td>' . $filledStatus . '</td><td>' . getJobOrderAttachments($mysqli, $jobOrderId) . '</td><td data-joborderid="' . $jobOrderId . '"><button class="attachBtn btn btn-danger"><i class="glyphicon glyphicon-open-file"></i></button></td><td><button class="filledBtn btn btn-success">Fill</button></td><td data-joborderid="' . $jobOrderId . '"><button class="viewBtn btn btn-success"><i class="glyphicon glyphicon-eye-open"></i>&nbsp;View</button></td></tr>';
    }
    return $row;
}

function getJobOrderLog($mysqli, $id)
{
    $sql = $mysqli->prepare("SELECT id,jobOrderId,consultantId,status,actionedTime FROM joborderlog WHERE jobOrderId = ? ORDER BY actionedTime DESC") or die($mysqli->error);
    $sql->bind_param("s", $id) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($id, $jobOrderId, $consultantId, $status, $actionedTime) or die($mysqli->error);
    $html = '<table class="table">
        <thead>
          <tr>
            <th>JobOrderID</th>
            <th>Consultant</th>
            <th>Status</th>
            <th>ActionedTime</th>
          </tr>
        </thead>
        <tbody>';
    while ($sql->fetch()) {
        $html = $html . '<tr id="' . $id . '"><td>' . $jobOrderId . '</td><td>' . getConsultantName($mysqli, $consultantId) . '</td><td>' . $status . '</td><td>' . $actionedTime . '</td></tr>';
    }
    return $html . '</tbody>
      </table>';
}

function updateJobOrderAttachment($mysqli, $jobOrderId, $consultantId, $fileName, $filePath)
{
    $stmt = $mysqli->prepare("INSERT INTO joborder_documents(joborderid,consultantId,fileName,filePath,uploaded_date) VALUES(?,?,?,?,NOW())") or die($mysqli->error);
    $stmt->bind_param("siss", $jobOrderId, $consultantId, $fileName, $filePath) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    if ($nrows == '1') {
        return 'Added';
    } else {
        return $mysqli->error;
    }
}

function generateErrorNotification($subject, $mailBody)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME . ' Error Notification');
    $mail->AddAddress('');
    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = $mailBody;
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function getLastPayWeekending($mysqli, $candidateId)
{
    $status = 'CLOSED';
    $sql = $mysqli->prepare("SELECT MAX(weekendingDate) weekendingDate FROM payrundetails WHERE candidateId = ? AND status = ?") or die($mysqli->error);
    $sql->bind_param("ss", $candidateId, $status) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->weekendingDate;
    } else {
        return null;
    }
}

function getEmployeeShiftsByDate($mysqli, $canId)
{
    $shiftStatus = 'OPEN';
    $sql = $mysqli->prepare("SELECT 
                              shift.shiftId,
                              shift.candidateId,
                              shift.shiftDate,
                              shift.shiftStart,
                              shift.shiftEnd,
                              client.client
                            FROM
                              shift
                              INNER JOIN client ON (shift.clientId = client.clientId)
                            WHERE
                              shift.candidateId = ? AND 
                              shift.shiftStatus = ?
                              ORDER BY shift.shiftDate ASC") or die($mysqli->error);
    $sql->bind_param("ss", $canId, $shiftStatus) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $candidateId, $shiftDate, $shiftStart, $shiftEnd, $client) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $dataArray[] = array('shiftId' => $shiftId, 'candidateId' => $candidateId, 'shiftDate' => $shiftDate, 'shiftStart' => $shiftStart, 'shiftEnd' => $shiftEnd, 'client' => $client);
        }
        return $dataArray;
    }
}

function getEmployeeShiftHistory($mysqli, $canId)
{
    $startDate = date('Y-09-01');
    $endDate = date('Y-m-d', strtotime("-1 days"));
    $supervisorEdit = 'Y';
    $sql = $mysqli->prepare("SELECT 
                              timesheet.shiftId,
                              timesheet.shiftDate,
                              timesheet.shiftDay,
                              timesheet.candidateId,
                              client.client,
                              timesheet.shiftStart,
                              timesheet.shiftEnd,
                              timesheet.workBreak,
                              timesheet.wrkHrs
                            FROM
                              timesheet
                              INNER JOIN client ON (timesheet.clientId = client.clientId)
                            WHERE
                              timesheet.candidateId = ? AND 
                              timesheet.supervisorEdit = ? AND 
                              timesheet.shiftDate BETWEEN ? AND ?
                            ORDER BY
                              timesheet.shiftDate ASC") or die($mysqli->error);
    $sql->bind_param("ssss", $canId, $supervisorEdit, $startDate, $endDate) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftDate, $shiftDay, $candidateId, $client, $shiftStart, $shiftEnd, $workBreak, $wrkHrs) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $wkHrs = calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak);
            $dataArray[] = array('shiftId' => $shiftId, 'shiftDate' => $shiftDate, 'shiftDay' => $shiftDay, 'candidateId' => $candidateId, 'client' => $client, 'shiftStart' => $shiftStart, 'shiftEnd' => $shiftEnd, 'workBreak' => $workBreak, 'wrkHrs' => $wkHrs);
        }
        return $dataArray;
    }
}

function updateShiftQuestions($mysqli, $shiftId, $q1, $q2, $q3, $q4, $status)
{
    $ins = $mysqli->prepare("INSERT INTO shiftQuestions(shiftId,q1,q2,q3,q4,status)VALUES(?,?,?,?,?,?)") or die($mysqli->error);
    $ins->bind_param("isssss", $shiftId, $q1, $q2, $q3, $q4, $status) or die($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return false;
    }
}

function updateShiftStatus($mysqli, $canId, $shiftId, $status)
{
    $stmt = $mysqli->prepare("UPDATE shift SET shiftStatus = ? WHERE candidateId = ? AND shiftid = ?") or die($mysqli->error);
    $stmt->bind_param("ssi", $status, $canId, $shiftId) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    if ($nrows == '1') {
        $status = 'shiftUpdated';
        return $status;
    } else {
        return $status = $mysqli->error;
    }
}


function employeeImageUpdate($mysqli, $file, $empId)
{
    $up = $mysqli->prepare("UPDATE candidate SET employeeImage = ? WHERE candidateId = ?") or die($mysqli->error);
    $up->bind_param("ss", $file, $empId) or die($mysqli->error);
    $up->execute();
    if ($up->affected_rows > 0) {
        return true;
    } else {
        return $mysqli->error;
    }
}

function retrieveResumeEmail($mysqli, $messageid, $accountName)
{
    $tableEmail = getTableEmail($mysqli, $accountName);
    $stmt = $mysqli->prepare("SELECT email FROM {$tableEmail} WHERE messageid = ?") or die($mysqli->error);
    $stmt->bind_param("s", $messageid) or die($mysqli->error);
    $stmt->execute();
    return $email = $stmt->get_result()->fetch_object()->email;
}

function listAttachments($mysqli, $messageid, $accountName)
{
    $tableAttachmentPath = getTableAttachmentPath($mysqli, $accountName);
    $mailatt = $mysqli->prepare("SELECT messageid,filepath,filename FROM {$tableAttachmentPath} WHERE messageid = ?") or die($mysqli->error);
    $mailatt->bind_param("s", $messageid);
    $mailatt->execute();
    $mailatt->bind_result($messageid, $filepath, $filename) or die($mysqli->error);
    $attr = array();
    $row = '';
    while ($mailatt->fetch()) {
        $fpath = explode('/', $filepath ?? '');
        $path_parts = pathinfo($filename);
        if ($path_parts['extension'] == 'pdf') {
            $extension = 'pdf';
            $fileico = 'pdf-adobe-portable-document-format.ico';
        } else if ($path_parts['extension'] == 'doc') {
            $extension = 'doc';
            $fileico = 'doc-microsoft-word-97-to-2003-document.png';
        } else if ($path_parts['extension'] == 'docx') {
            $extension = 'docx';
            $fileico = 'docx-microsoft-word-open-xml-document.png';
        } else if ($path_parts['extension'] == 'txt') {
            $extension = 'txt';
            $fileico = 'text_document.ico';
        }
        $row = $row . '<img src="../filetypes/' . $fileico . '" />&nbsp;<a href="' . $filepath . '" target="_blank">' . $filename . '</a><br>';
    }
    return $row;
}

function displayRefMailList($mysqli)
{
    $mailList = $mysqli->prepare("SELECT 
                                            DISTINCT 
                                                reference
                                           FROM
                                             inbox_reference
                                           ORDER BY reference ASC") or die($mysqli->error);
    $mailList->execute();
    $mailList->store_result();
    $mailList->bind_result($reference) or die($mysqli->error);
    $numRows = $mailList->num_rows;
    $list = '';
    $referenceArray = array();
    while ($mailList->fetch()) {
        $list = array('reference' => $reference);
        $referenceArray[] = $list;
    }
    $mailList->free_result();
    $html = '<table class="table">
                <thead>
                  <tr>
                    <th>Mail Reference Code</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody>';
    foreach ($referenceArray as $ref) {
        $html = $html . '<tr>
                    <td class="ref" data-ref-code="' . $ref['reference'] . '">' . $ref['reference'] . '</td>
                    <td>';
        if (getRefMailStatus($mysqli, $ref['reference']) == 0) {
            $html = $html . '<button class="Activate btn btn-danger">INACTIVE</button>';
        } else {
            $html = $html . '<button class="DeActivate btn btn-success">ACTIVE</button>';
        }
        $html = $html . '</td></tr>';
    }
    return $html . '</tbody></table>';
}

function mailActivateDeActivate($mysqli, $status, $ref_code)
{
    $sql = $mysqli->prepare("UPDATE inbox_reference SET status = ? WHERE reference = ?") or die($mysqli->error);
    $sql->bind_param("is", $status, $ref_code) or die($mysqli->error);
    $sql->execute();
    $nrow = $sql->affected_rows;
    if ($nrow > 0) {
        return true;
    } else {
        return false;
    }
}

function jobBoardMailActivateDeActivate($mysqli, $status, $ref_code)
{
    $sql = $mysqli->prepare("UPDATE job_board_reference SET status = ? WHERE reference = ?") or die($mysqli->error);
    $sql->bind_param("is", $status, $ref_code) or die($mysqli->error);
    $sql->execute();
    $nrow = $sql->affected_rows;
    if ($nrow > 0) {
        return true;
    } else {
        return false;
    }
}

function getRefMailStatus($mysqli, $ref_code)
{
    // $sql = $mysqli->prepare("SELECT DISTINCT status FROM resume WHERE reference = ?")or die($mysqli->error);
    $sql = $mysqli->prepare("SELECT status FROM inbox_reference WHERE reference = ?") or die($mysqli->error);
    $sql->bind_param("s", $ref_code) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->status;
    } else {
        return null;
    }
}

function getIndeedMailStatus($mysqli, $ref_code)
{
    // $sql = $mysqli->prepare("SELECT DISTINCT status FROM resume WHERE reference = ?")or die($mysqli->error);
    $sql = $mysqli->prepare("SELECT status FROM indeed_reference WHERE reference = ?") or die($mysqli->error);
    $sql->bind_param("s", $ref_code) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->status;
    } else {
        return null;
    }
}

function getJobBoardRefMailStatus($mysqli, $ref_code)
{
    $sql = $mysqli->prepare("SELECT status FROM job_board_reference WHERE reference = ?") or die($mysqli->error);
    $sql->bind_param("s", $ref_code) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->status;
    } else {
        return null;
    }
}

function getMailCountByReferenceCode($mysqli, $ref_code)
{
    $inbox_status = 0;
    $status = 1;
    $mailList = $mysqli->prepare("SELECT 
                                      resume.autoid
                                    FROM
                                      resume
                                    WHERE
                                      resume.reference = ?
                                    AND  
                                      resume.inbox_status = ?
                                    AND  
                                      resume.status = ?") or die($mysqli->error);
    $mailList->bind_param("sii", $ref_code, $inbox_status, $status) or die($mysqli->error);
    $mailList->execute();
    $mailList->store_result();
    $numRows = $mailList->num_rows;
    return $numRows;
}

function getJobBoardMailCountByReferenceCode($mysqli, $ref_code)
{
    $mailList = $mysqli->prepare("SELECT 
                                      jobboard_resume.autoid
                                    FROM
                                      jobboard_resume
                                    WHERE
                                      jobboard_resume.reference = ?") or die($mysqli->error);
    $mailList->bind_param("s", $ref_code) or die($mysqli->error);
    $mailList->execute();
    $mailList->store_result();
    $numRows = $mailList->num_rows;
    return $numRows;
}

function getMailSuitableCount($mysqli, $ref_code)
{
    $suitable = 10;
    $inbox_status = 0;
    $status = 1;
    $mailList = $mysqli->prepare("SELECT 
                                      resume.autoid,
                                      mail_color_category.catid
                                    FROM
                                      resume
                                      INNER JOIN mail_color_category ON (resume.autoid = mail_color_category.autoid)
                                    WHERE
                                      resume.reference = ? AND 
                                      resume.status = ? AND 
                                      resume.inbox_status = ? AND 
                                      mail_color_category.catid = ?
                                      ") or die($mysqli->error);
    $mailList->bind_param("siii", $ref_code, $status, $inbox_status, $suitable) or die($mysqli->error);
    $mailList->execute();
    $mailList->store_result();
    $numRows = $mailList->num_rows;
    return $numRows;
}

function getJobBoardMailSuitableCount($mysqli, $ref_code)
{
    $suitable = 10;
    $mailList = $mysqli->prepare("SELECT 
                                      jobboard_resume.autoid,
                                      jobboard_mail_color_category.catid
                                    FROM
                                      jobboard_resume
                                      INNER JOIN jobboard_mail_color_category ON (jobboard_resume.autoid = jobboard_mail_color_category.autoid)
                                    WHERE
                                      jobboard_resume.reference = ? AND 
                                      jobboard_mail_color_category.catid = ?
                                      ") or die($mysqli->error);
    $mailList->bind_param("si", $ref_code, $suitable) or die($mysqli->error);
    $mailList->execute();
    $mailList->store_result();
    $numRows = $mailList->num_rows;
    return $numRows;
}

function getMailHiredCount($mysqli, $ref_code)
{
    $hired = 13;
    $inbox_status = 0;
    $status = 1;
    $mailList = $mysqli->prepare("SELECT 
                                      resume.autoid,
                                      mail_color_category.catid
                                    FROM
                                      resume
                                      INNER JOIN mail_color_category ON (resume.autoid = mail_color_category.autoid)
                                    WHERE
                                      resume.reference = ? AND 
                                      resume.status = ? AND 
                                      resume.inbox_status = ? AND 
                                      mail_color_category.catid = ?
                                     ") or die($mysqli->error);
    $mailList->bind_param("siii", $ref_code, $status, $inbox_status, $hired) or die($mysqli->error);
    $mailList->execute();
    $mailList->store_result();
    $numRows = $mailList->num_rows;
    return $numRows;
}

function getJobBoardMailHiredCount($mysqli, $ref_code)
{
    $hired = 13;
    $mailList = $mysqli->prepare("SELECT 
                                      jobboard_resume.autoid,
                                      jobboard_mail_color_category.catid
                                    FROM
                                      jobboard_resume
                                      INNER JOIN jobboard_mail_color_category ON (jobboard_resume.autoid = jobboard_mail_color_category.autoid)
                                    WHERE
                                      jobboard_resume.reference = ? AND 
                                      jobboard_mail_color_category.catid = ?
                                     ") or die($mysqli->error);
    $mailList->bind_param("si", $ref_code, $hired) or die($mysqli->error);
    $mailList->execute();
    $mailList->store_result();
    $numRows = $mailList->num_rows;
    return $numRows;
}

function getMailInterviewedCount($mysqli, $ref_code)
{
    $suitable = 14;
    $inbox_status = 0;
    $status = 1;
    $mailList = $mysqli->prepare("SELECT 
                                      resume.autoid,
                                      mail_color_category.catid
                                    FROM
                                      resume
                                      INNER JOIN mail_color_category ON (resume.autoid = mail_color_category.autoid)
                                    WHERE
                                      resume.reference = ? AND 
                                      resume.status = ? AND 
                                      resume.inbox_status = ? AND
                                      mail_color_category.catid = ?
                                      ") or die($mysqli->error);
    $mailList->bind_param("siii", $ref_code, $status, $inbox_status, $suitable) or die($mysqli->error);
    $mailList->execute();
    $mailList->store_result();
    $numRows = $mailList->num_rows;
    return $numRows;
}

function getJobBoardMailInterviewedCount($mysqli, $ref_code)
{
    $suitable = 14;
    $mailList = $mysqli->prepare("SELECT 
                                      jobboard_resume.autoid,
                                      jobboard_mail_color_category.catid
                                    FROM
                                      jobboard_resume
                                      INNER JOIN jobboard_mail_color_category ON (jobboard_resume.autoid = jobboard_mail_color_category.autoid)
                                    WHERE
                                      jobboard_resume.reference = ? AND 
                                      jobboard_mail_color_category.catid = ?
                                      ") or die($mysqli->error);
    $mailList->bind_param("si", $ref_code, $suitable) or die($mysqli->error);
    $mailList->execute();
    $mailList->store_result();
    $numRows = $mailList->num_rows;
    return $numRows;
}

function getMailNotSuitableCount($mysqli, $ref_code)
{
    $notSuitable = 7;
    $inbox_status = 0;
    $status = 1;
    $mailList = $mysqli->prepare("SELECT 
                                      resume.autoid,
                                      mail_color_category.catid
                                    FROM
                                      resume
                                      INNER JOIN mail_color_category ON (resume.autoid = mail_color_category.autoid)
                                    WHERE
                                      resume.reference = ? AND 
                                      resume.status = ? AND 
                                      resume.inbox_status = ? AND 
                                      mail_color_category.catid = ?
                                      ") or die($mysqli->error);
    $mailList->bind_param("siii", $ref_code, $status, $inbox_status, $notSuitable) or die($mysqli->error);
    $mailList->execute();
    $mailList->store_result();
    $numRows = $mailList->num_rows;
    return $numRows;
}

function getJobBoardMailNotSuitableCount($mysqli, $ref_code)
{
    $notSuitable = 7;
    $mailList = $mysqli->prepare("SELECT 
                                      jobboard_resume.autoid,
                                      jobboard_mail_color_category.catid
                                    FROM
                                      jobboard_resume
                                      INNER JOIN jobboard_mail_color_category ON (jobboard_resume.autoid = jobboard_mail_color_category.autoid)
                                    WHERE
                                      jobboard_resume.reference = ? AND 
                                      jobboard_mail_color_category.catid = ?
                                      ") or die($mysqli->error);
    $mailList->bind_param("si", $ref_code, $notSuitable) or die($mysqli->error);
    $mailList->execute();
    $mailList->store_result();
    $numRows = $mailList->num_rows;
    return $numRows;
}

function displayReferencedEmails($mysqli, $tableEmail, $accountName, $color_table, $reference, $status)
{
    $mailList = $mysqli->prepare("SELECT
										autoid,
										messageid,
										mailfrom,
										mailto,
										subject,
										date
									  FROM
										{$tableEmail} 
                                      WHERE
                                        reference = ?
                                      AND status = ?   
                                      ORDER BY date DESC") or die($mysqli->error);
    $mailList->bind_param("si", $reference, $status) or die($mysqli->error);
    $mailList->execute();
    $mailList->bind_result($autoid, $messageid, $mailfrom, $mailto, $subject, $date) or die($mysqli->error);
    $mailList->store_result();
    $row = '';
    while ($mailList->fetch()) {
        $row = $row . '<tr id="' . $autoid . '" class="rowId" data-acc="' . $accountName . '">
        <td class="messageid" data-messageid="' . $messageid . '"><div class="mFrom">' . $mailfrom . '</div><div class="subject"><strong>Subj:</strong>&nbsp;' . substr($subject, 0, 60) . '...' . '</div><div class="mTo"><strong>To:</strong>&nbsp;' . $mailto . '</div><div class="mailAttachments">&nbsp;' . listAttachments($mysqli, $messageid, $accountName) . '</div></td>
        <td class="mailComm"><div class="mailComment"><a href="#" class="commentLink"><i class="fa fa-lg fa-comment"></i></a></div></td>
        <td class="categoryStatus"><div id="' . $autoid . '" class="category">' . getMailColorCategories($mysqli, $autoid, $color_table) . '</div></td>
        <td align="right">' . $date . '</td>
        <td><button id="checkBtn" class="checkBtn btn btn-xs btn-warning" type="button"><i class="fa fa-eye-slash"></i> Check</button></td>
        <td><input type="hidden" name="messageid" id="messageid" value="' . $messageid . '"/><button id="callBtn" class="callBtn btn btn-xs btn-success" type="button"><i class="fa fa-phone"></i> Call</button></td></tr>';
    }
    return $row;
}

function getCOVIDDeclarationSMS($mysqli, $canId, $shDate)
{
    $smslink = 'https://labourbank.com.au/staff/index.php?action=';
    $sql = $mysqli->prepare("SELECT sentTimeStamp FROM smslog WHERE candidateId = ? AND sentTimeStamp = ? AND smslog.smsMessage LIKE '%{$smslink}%'") or die($mysqli->error);
    $sql->bind_param("ss", $canId, $shDate) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->sentTimeStamp;
    } else {
        return null;
    }
}

function getCandidateFoundHow($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT foundhow FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->foundhow;
    } else {
        return null;
    }
}

function customerSurveyDocumentStatus($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT customerSurveyStatus FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        $customerSurveyStatus = $obj->customerSurveyStatus;
    } else {
        $customerSurveyStatus = null;
    }
    if ($customerSurveyStatus == '1') {
        return 'SENT';
    } else {
        return 'NOT SENT';
    }
}

function updateCustomerSurveyStatus($mysqli, $candidateId, $status)
{
    $sql = $mysqli->prepare("UPDATE candidate SET customerSurveyStatus = ? WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("is", $status, $candidateId) or die($mysqli->error);
    if ($sql->execute()) {
        return 'Updated';
    } else {
        return $mysqli->error;
    }
}

function updateCustomerSurveySent($mysqli, $candidateId, $sentTime)
{
    $sql = $mysqli->prepare("UPDATE candidate SET customerSurveySent = ? WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("ss", $sentTime, $candidateId) or die($mysqli->error);
    if ($sql->execute()) {
        return 'Updated';
    } else {
        return $mysqli->error;
    }
}

function getCustomerSurveySentTime($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT customerSurveySent FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->customerSurveySent;
    } else {
        return null;
    }
}

function validateVaccinationDocument($mysqli, $canId, $docType)
{
    $sql = $mysqli->prepare("SELECT docTypeId FROM candidate_document WHERE candidateId = ? AND docTypeId = ?") or die($mysqli->error);
    $sql->bind_param("si", $canId, $docType) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $numRows = $sql->num_rows;
    $sql->free_result();
    if ($numRows > 0) {
        return true;
    } else {
        return false;
    }
}

function getPoliceCheckDeductedCasualsForPeriod($mysqli, $startDate, $endDate, $trCode)
{
    $sql = $mysqli->prepare("SELECT 
                                  payrundetails.candidateId,
                                  candidate.firstName,
                                  candidate.lastName,
                                  payrundetails.weekendingDate,
                                  payrundetails.category,
                                  payrundetails.jobCode,
                                  payrundetails.transCode,
                                  payrundetails.deduction,
                                  payrundetails.status
                                FROM
                                  payrundetails
                                  INNER JOIN candidate ON (payrundetails.candidateId = candidate.candidateId)
                                WHERE
                                  payrundetails.weekendingDate BETWEEN ? AND ? AND 
                                  payrundetails.transCode = ?") or die($mysqli->error);
    $sql->bind_param("ssi", $startDate, $endDate, $trCode) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($candidateId, $firstName, $lastName, $weekendingDate, $category, $jobCode, $transCode, $deduction, $status) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $dataArray[] = array('candidateId' => $candidateId, 'firstName' => $firstName, 'lastName' => $lastName, 'weekendingDate' => $weekendingDate, 'category' => $category, 'jobCode' => $jobCode, 'transCode' => $transCode, 'deduction' => $deduction, 'status' => $status);
        }
        return $dataArray;
    }
}

function getPoliceCheckDeduction($mysqli, $canId, $startDate, $endDate, $trCode)
{
    $sql = $mysqli->prepare("SELECT
                                  payrundetails.deduction
                                FROM
                                  payrundetails
                                WHERE
                                  payrundetails.candidateId = ? AND
                                  payrundetails.weekendingDate BETWEEN ? AND ? AND 
                                  payrundetails.transCode = ?") or die($mysqli->error);
    $sql->bind_param("sssi", $canId, $startDate, $endDate, $trCode) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($deduction) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $dataArray[] = array('deduction' => $deduction);
        }
        return $dataArray;
    }
}

function getPoliceCheckDeductionSinceStarted($mysqli, $canId, $trCode)
{
    $sql = $mysqli->prepare("SELECT
                                  payrundetails.deduction,
                                  payrundetails.weekendingDate
                                FROM
                                  payrundetails
                                WHERE
                                  payrundetails.candidateId = ? AND
                                  payrundetails.transCode = ?") or die($mysqli->error);
    $sql->bind_param("si", $canId, $trCode) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($deduction, $weekendingDate) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $dataArray[] = array('deduction' => $deduction, 'weekendingDate' => $weekendingDate);
        }
        return $dataArray;
    }
}

function singleTouchCalculateSuper($mysqli, $wkendDateStart, $wkendDateEnd)
{
    $transCodeType = 5;
    $status = 'CLOSED';
    $sql = $mysqli->prepare("SELECT 
                                  payrundetails.candidateId,
                                  payrundetails.itemType,
                                  payrundetails.category,
                                  payrundetails.amount,
                                  payrundetails.gross,
                                  payrundetails.superAnnuation,
                                  candidate.superMemberNo,
                                  candidate.firstName,
                                  candidate.lastName,
                                  candidate.title,
                                  candidate.dob,
                                  candidate.sex,
                                  candidate.street_number,
                                  candidate.street_name,
                                  candidate.suburb,
                                  candidate.postcode,
                                  candidate.state,
                                  candidate.tfn,
                                  candidate.mobileNo,
                                  candidate.email,
                                  transactioncode.transCodeDesc,
                                  transactioncode.superfundSPINID,
                                  transactioncode.usi,
                                  transactioncode.superfundABN
                                FROM
                                  payrundetails
                                  LEFT OUTER JOIN candidate ON (payrundetails.candidateId = candidate.candidateId)
                                  LEFT OUTER JOIN candidate_superfund ON (payrundetails.candidateId = candidate_superfund.candidateId)
                                  LEFT OUTER JOIN transactioncode ON (candidate_superfund.transCode = transactioncode.transCode)
                                WHERE
                                  transactioncode.transCodeType = ? AND 
                                  payrundetails.weekendingDate BETWEEN ? AND ? AND 
                                  payrundetails.status = ?
                                ORDER BY
                                  payrundetails.candidateId ASC") or die($mysqli->error);

    $sql->bind_param("ssss", $transCodeType, $wkendDateStart, $wkendDateEnd, $status) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId, $itemType, $category, $amount, $gross, $superAnnuation, $superMemberNo, $firstName, $lastName, $title, $dob, $sex, $street_number, $street_name, $suburb, $postcode, $state, $tfn, $mobileNo, $email, $transCodeDesc, $superfundSPINID, $usi, $superfundABN) or die($mysqli->error);
    $sql->store_result();
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        $canId = '';
        $grossTotal = 0;
        $superTotal = 0;
        while ($sql->fetch()) {
            if (empty($canId)) {
                $canId = $candidateId;
                $grossTotal = $gross;
                $superTotal = $superAnnuation;
            } else if ($canId == $candidateId) {
                $grossTotal = $grossTotal + $gross;
                $superTotal = $superTotal + $superAnnuation;
            } else if ($canId != $candidateId) {
                $canId = $candidateId;
                $grossTotal = $gross;
                $superTotal = $superAnnuation;
            }
            if ($grossTotal > $limit) {
                $dataArray[$canId] = array('candidateId' => $candidateId, 'superMemberNo' => $superMemberNo, 'firstName' => $firstName, 'lastName' => $lastName, 'dob' => $dob, 'title' => $title, 'sex' => $sex, 'street_number' => $street_number, 'street_name' => $street_name, 'suburb' => $suburb, 'postcode' => $postcode, 'state' => $state, 'tfn' => $tfn, 'mobileNo' => $mobileNo, 'email' => $email, 'transCodeDesc' => $transCodeDesc,
                    'superfundSPINID' => $superfundSPINID, 'usi' => $usi, 'superfundABN' => $superfundABN, 'grossTotal' => $grossTotal, 'superAnnuationTotal' => $superTotal);
            }
        }
    }
}

function saveSuperCalculate($mysqli, $wkStartDate, $canid, $superamt)
{
    $chk = $mysqli->prepare("SELECT candidateId FROM super_calculate WHERE candidateId = ?  AND wk_start_date = ?") or die($mysqli->error);
    $chk->bind_param("ss", $canid, $wkStartDate) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        $sql = $mysqli->prepare("UPDATE super_calculate SET super_amount = ? WHERE candidateId = ? AND wk_start_date = ?") or die($mysqli->error);
        $sql->bind_param("sss", $superamt, $canid, $wkStartDate) or die($mysqli->error);
        if ($sql->execute()) {
            return 'Updated';
        } else {
            return $mysqli->error;
        }
    } else {
        $stmt = $mysqli->prepare("INSERT INTO super_calculate(candidateId, super_amount,wk_start_date) VALUES(?,?,?)") or die($mysqli->error);
        $stmt->bind_param("sss", $canid, $superamt, $wkStartDate) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'Added';
        } else {
            return $mysqli->error;
        }
    }
}

function calculateSuperToDateRange($mysqli, $canId, $startDate, $endDate)
{
    $sql = $mysqli->prepare("SELECT super_amount FROM super_calculate WHERE candidateId = ? AND wk_start_date BETWEEN ? AND ?") or die($mysqli->error);
    $sql->bind_param("sss", $canId, $startDate, $endDate) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($super_amount) or die($mysqli->error);
    $sql->store_result();
    $subTotal = 0;
    while ($sql->fetch()) {
        $subTotal = $subTotal + $super_amount;
    }
    return $subTotal;
}

function SMSReplyMail($recipientName, $candidateId, $datetime_entry, $senderMobile, $response, $recipientNumber, $message_id)
{
    require 'includes/PHPMailer-master/src/Exception.php';
    require 'includes/PHPMailer-master/src/PHPMailer.php';
    require 'includes/PHPMailer-master/src/SMTP.php';
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom(DEFAULT_EMAIL, DOMAIN_NAME);
    $subject = DOMAIN_NAME . 'SMS REPLY';
    $mail->addCC('');
    $mail->Subject = $subject;
    $mail->IsHTML(true);
    $body = '<br/>' . $recipientName . ' (' . $candidateId . ') replied to your recent SMS at ' . $datetime_entry . '<br>Sender Mobile:' . $senderMobile . '<br>Text Message :' . $response . ' received to :' . $recipientNumber . ', MSGID:' . $message_id . ']';
    $mail->Body = $body;
    $mail->send();
    if ($mail) {
        return "SUCCESS";
    } else {
        return "FAILURE";
    }
}

function updateTalentConsultant($mysqli, $autoId, $consultant)
{
    $chk = $mysqli->prepare("SELECT autoId FROM talent_note WHERE autoId = ?") or die($mysqli->error);
    $chk->bind_param("i", $autoId) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        $sql = $mysqli->prepare("UPDATE talent_note SET consultant = ? WHERE autoId = ?") or die($mysqli->error);
        $sql->bind_param("si", $consultant, $autoId) or die($mysqli->error);
        if ($sql->execute()) {
            return 'Updated';
        } else {
            return $mysqli->error;
        }
    } else {
        $stmt = $mysqli->prepare("INSERT INTO talent_note(autoId,consultant) VALUES(?,?)") or die($mysqli->error);
        $stmt->bind_param("is", $autoId, $consultant) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'Added';
        } else {
            return $mysqli->error;
        }
    }
}

function getTalentNote($mysqli, $autoid)
{
    $sql = $mysqli->prepare("SELECT consultant FROM talent_note WHERE autoId = ?") or die($mysqli->error);
    $sql->bind_param("i", $autoid) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->consultant;
    } else {
        return null;
    }
}

function round_up($value, $precision)
{
    $pow = pow(10, $precision);
    return (ceil($pow * $value) + ceil($pow * $value - ceil($pow * $value))) / $pow;
}

function getStaffLevelCheckReportData($mysqli, $clId, $rosterStart, $rosterEnd)
{
    $status = 'CONFIRMED';
    $sql = $mysqli->prepare("SELECT 
                              shift.candidateId,
                              shift.shiftDate,
                              shift.clientId
                            FROM
                              shift
                            WHERE
                              shift.shiftDate BETWEEN ? AND ? 
                              AND
                              shift.shiftStatus = ? AND 
                              shift.clientId = ?") or die($mysqli->error);
    $sql->bind_param("sssi", $rosterStart, $rosterEnd, $status, $clId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId,
        $shiftDate,
        $clientId) or die($mysqli->error);
    $sql->store_result();
    $staffLevelArray = array();
    while ($sql->fetch()) {
        $staffLevelArray[] = array('candidateId' => $candidateId, 'shiftDate' => $shiftDate, 'clientId' => $clientId);
    }
    return $staffLevelArray;
}

function getFirstWorkedDuringPeriodByClient($mysqli, $empId, $clientId, $weekendingDate)
{
    $sql = $mysqli->prepare("SELECT 
                              MIN(weekendingDate) AS wkDate
                            FROM
                              payrundetails
                            WHERE
                               payrundetails.candidateId = ?
                            AND
                              payrundetails.clientId = ?
                            AND
                              payrundetails.weekendingDate <= ?
                            GROUP BY
                              payrundetails.weekendingDate") or die($mysqli->error);
    $sql->bind_param("sis", $empId, $clientId, $weekendingDate) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->wkDate;
    } else {
        return null;
    }
}

function getAttachedTransactionCodeInfo($mysqli, $canId, $wkDate)
{
    $sql = $mysqli->prepare("SELECT transCode,
                                    candidateId,
                                    jobCode,
                                    weekendingDate,
                                    clientId,
                                    positionId,
                                    transCodeAmount
                                FROM timesheetdetail WHERE candidateId = ? AND weekendingDate = ?") or die($mysqli->error);
    $sql->bind_param("ss", $canId, $wkDate) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($transCode, $candidateId, $jobCode, $weekendingDate, $clientId, $positionId, $transCodeAmount) or die($mysqli->error);
    $sql->store_result();
    $transCodeArray = array();
    while ($sql->fetch()) {
        $transCodeArray[] = array('transCode' => $transCode, 'candidateId' => $candidateId, 'jobCode' => $jobCode, 'weekendingDate' => $weekendingDate, 'clientId' => $clientId, 'positionId' => $positionId, 'transCodeAmount' => $transCodeAmount);
    }
    return $transCodeArray;
}

function getAttachedTransactionCodeInfoByWeekending($mysqli, $wkDate)
{
    $sql = $mysqli->prepare("SELECT transCode,
                                    candidateId,
                                    jobCode,
                                    weekendingDate,
                                    clientId,
                                    positionId,
                                    transCodeAmount
                                FROM timesheetdetail WHERE weekendingDate = ?") or die($mysqli->error);
    $sql->bind_param("s", $wkDate) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($transCode, $candidateId, $jobCode, $weekendingDate, $clientId, $positionId, $transCodeAmount) or die($mysqli->error);
    $sql->store_result();
    $transCodeArray = array();
    while ($sql->fetch()) {
        $transCodeArray[] = array('transCode' => $transCode, 'candidateId' => $candidateId, 'jobCode' => $jobCode, 'weekendingDate' => $weekendingDate, 'clientId' => $clientId, 'positionId' => $positionId, 'transCodeAmount' => $transCodeAmount);
    }
    return $transCodeArray;
}

function getTransCodeTypeByTransCode($mysqli, $transCode)
{
    $sql = $mysqli->prepare("SELECT transCodeType FROM transactioncode WHERE transCode = ?") or die($mysqli->error);
    $sql->bind_param("i", $transCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->transCodeType;
    } else {
        return null;
    }
}

function getTransCodeTypeNameByTransCode($mysqli, $trCodeTypeId)
{
    $sql = $mysqli->prepare("SELECT transCodeType FROM transactioncodetype WHERE transCodeTypeId = ?") or die($mysqli->error);
    $sql->bind_param("i", $trCodeTypeId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->transCodeType;
    } else {
        return null;
    }
}

function displayConfirmedShiftCountForCurrentWeek($mysqli)
{
    $endDate = date('Y-m-d');
    $startDate = date('Y-m-d', strtotime("-7 days"));
    $supervisorEdit = 'Y';
    $sql = $mysqli->prepare('SELECT 
                              timesheet.wrkHrs
                            FROM
                              timesheet
                            WHERE
                              timesheet.supervisorEdit = ? AND 
                              timesheet.shiftDate BETWEEN ? AND ?') or die($mysqli->error);
    $sql->bind_param("sss", $supervisorEdit, $startDate, $endDate) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($wrkHrs) or die($mysqli->error);
    $sql->store_result();
    $totalHours = 0;
    while ($sql->fetch()) {
        $totalHours = $totalHours + $wrkHrs;
    }
    return $totalHours;
}

/*addToUserTracking($mysqli,$autoid,$catid,$action,$username)*/
function dateOfBirthNotifier($mysqli)
{
    $day = date('d');
    $month = date('m');
    $null = '';
    $status = 'ACTIVE';
    /*$beforeDate = date('Y-m-d', strtotime($today . '-7 days'));*/
    $sql = $mysqli->prepare('SELECT 
                              candidate.candidateId,
                              candidate.firstName,
                              candidate.lastName,
                              candidate.dob
                            FROM
                              candidate
                            WHERE
                              candidate.dob IS NOT NULL  AND candidate.dob != ? AND candidate.empStatus = ?') or die($mysqli->error);
    $sql->bind_param("ss", $null, $status) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId, $firstName, $lastName, $dob) or die($mysqli->error);
    $sql->store_result();
    $dobArray = array();
    while ($sql->fetch()) {
        $exDob = explode('/', $dob ?? '');
        if (($exDob[0] == $day) && ($exDob[1] == $month)) {
            $dobArray[] = array('candidateId' => $candidateId, 'dob' => $dob, 'firstName' => $firstName, 'lastName' => $lastName);
        }
    }
    return $dobArray;
}

function validateJobOrderIndex($mysqli, $ordDate, $clid, $deptid, $stateid, $posid, $starttime)
{
    $sql = $mysqli->prepare("SELECT job_id FROM job_order WHERE order_date = ? AND client_id = ? AND dept_id = ? AND state_id = ? AND pos_id = ? AND start_time = ?") or die($mysqli->error);
    $sql->bind_param("siiiis", $ordDate, $clid, $deptid, $stateid, $posid, $starttime) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $numRows = $sql->num_rows;
    $sql->free_result();
    if ($numRows > 0) {
        return true;
    } else {
        return false;
    }
}

function getJobOrderQty($mysqli, $orderDate, $clientId, $positionId, $deptId, $stateId)
{
    $sql = $mysqli->prepare("SELECT job_id,order_qty,start_time,male_qty,female_qty FROM job_order WHERE order_date = ? AND client_id = ? AND dept_id = ? AND state_id = ? AND pos_id = ? ORDER BY start_time") or die($mysqli->error);
    $sql->bind_param("siiii", $orderDate, $clientId, $deptId, $stateId, $positionId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($job_id, $order_qty, $start_time, $male_qty, $female_qty) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('job_id' => $job_id, 'order_qty' => $order_qty, 'start_time' => $start_time, 'male_qty' => $male_qty, 'female_qty' => $female_qty);
    }
    return $dataArray;
}

function addJobOrderIndex($mysqli, $ordDate, $ordQty, $clid, $deptid, $stateid, $posid, $starttime, $maleqty, $femaleqty)
{
    if (!validateJobOrderIndex($mysqli, $ordDate, $clid, $deptid, $stateid, $posid, $starttime)) {
        $stmt = $mysqli->prepare("INSERT INTO job_order(client_id, dept_id,state_id,pos_id,order_date,start_time,order_qty,male_qty,female_qty) VALUES(?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
        $stmt->bind_param("iiiissiii", $clid, $deptid, $stateid, $posid, $ordDate, $starttime, $ordQty, $maleqty, $femaleqty) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'Job Order Added-' . $mysqli->insert_id;
        } else {
            return $mysqli->error;
        }
    } else {
        return 'Job Order Exists';
    }
}

function updateJobOrderIndex($mysqli, $jobId, $startTime, $ordQty, $maleQty, $femaleQty)
{
    $sql = $mysqli->prepare("UPDATE job_order SET
                         start_time = ?,
                         order_qty = ?,
                         male_qty = ?,
                         female_qty = ? 
                    WHERE 
                        job_id = ?") or die($mysqli->error);
    $sql->bind_param("siiii", $startTime, $ordQty, $maleQty, $femaleQty, $jobId) or die($mysqli->error);
    if ($sql->execute()) {
        return 'Job Order Updated';
    } else {
        return $mysqli->error;
    }
}

function removeJobOrder($mysqli, $job_id)
{
    $del = $mysqli->prepare("DELETE FROM job_order WHERE job_id = ?");
    $del->bind_param("i", $job_id) or die($mysqli->error);
    $del->execute();
    $nr = $del->affected_rows;
    if ($nr > 0) {
        return 'Deleted';
    } else {
        return 'error deleting ' . $mysqli->error;
    }
}

function logJobOrderIndex($mysqli, $job_id, $ordDate, $ordQty, $client, $department, $state, $position, $starttime, $maleqty, $femaleqty, $loggedInUser, $logAction)
{
    $stmt = $mysqli->prepare("INSERT INTO job_order_log(job_id, order_date, order_qty, client, department, state, position, start_time, male_qty, female_qty, logged_in_user, log_action,log_time) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,NOW())") or die($mysqli->error);
    $stmt->bind_param("isisssssiiss", $job_id, $ordDate, $ordQty, $client, $department, $state, $position, $starttime, $maleqty, $femaleqty, $loggedInUser, $logAction) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    if ($nrows == '1') {
        return 'Added';
    } else {
        return $mysqli->error;
    }
}

function displayJobOrderLog($mysqli, $jb_id)
{
    $sql = $mysqli->prepare("SELECT job_id, order_date, order_qty, client, department, state, position, start_time, male_qty, female_qty, logged_in_user, log_action,log_time FROM job_order_log WHERE job_id = ? ORDER BY log_time DESC") or die($mysqli->error);
    $sql->bind_param("i", $jb_id) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($job_id, $order_date, $order_qty, $client, $department, $state, $position, $start_time, $male_qty, $female_qty, $logged_in_user, $log_action, $log_time) or die($mysqli->error);
    $sql->store_result();
    $num_rows = $sql->num_rows;
    $counter = 0;
    $text = '';
    $braker = '-------------------------------------';
    while ($sql->fetch()) {
        $text = $text . '
            Job Order ID : ' . $job_id . ' 
            Order Date : ' . $order_date . '
            Order Qty : ' . $order_qty . '
            Male Qty : ' . $male_qty . '
            Female Qty : ' . $female_qty . '
            Start Time : ' . $start_time . '
            System User : ' . $logged_in_user . '
            Action : ' . $log_action . '
            Date/Time : ' . $log_time . '
            ';
        if (++$counter != $num_rows) {
            $text = $text . $braker;
        }
    }
    return $text;
    //            Client : '.$client.'
    //            Department : '.$department.'
    //            State : '.$state.'
    //            Position : '.$position.'
}

function getJobOrderMatchingShifts($mysqli, $orderDate, $clientId, $positionId, $deptId, $stateId, $starttime)
{
    $shiftStatus = 'CONFIRMED';
    $sql = $mysqli->prepare("SELECT 
                              shift.candidateId,
                              candidate.firstName,
                              candidate.lastName,
                              shift.shiftId
                            FROM
                              shift
                              INNER JOIN candidate ON (shift.candidateId = candidate.candidateId)
                            WHERE
                              shift.shiftDate = ? AND 
                              shift.clientId = ? AND 
                              shift.stateId = ? AND 
                              shift.departmentId = ? AND 
                              shift.positionId = ? AND 
                              shift.shiftStart = ? AND 
                              shift.shiftStatus = ? ORDER BY shift.candidateId") or die($mysqli->error);
    $sql->bind_param("siiiiss", $orderDate, $clientId, $stateId, $deptId, $positionId, $starttime, $shiftStatus) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId, $firstName, $lastName, $shiftId) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    $canId = '';
    $num_shifts = 0;
    while ($sql->fetch()) {
        if (empty($canId)) {
            $canId = $candidateId;
        }
        if ($canId == $candidateId) {
            $num_shifts++;
            $dataArray[] = array('shiftId' => $shiftId, 'candidateId' => $candidateId, 'firstName' => $firstName, 'lastName' => $lastName, '', 'numShifts' => $num_shifts);
        } else if ($canId != $candidateId) {
            $num_shifts = 1;
            $canId = $candidateId;
            $dataArray[] = array('shiftId' => $shiftId, 'candidateId' => $candidateId, 'firstName' => $firstName, 'lastName' => $lastName, '', 'numShifts' => $num_shifts);
        }
    }
    return $dataArray;
}

function getClientJobOrderQty($mysqli, $orderDate, $clientId)
{
    $sql = $mysqli->prepare("SELECT job_id,order_qty,start_time,male_qty,female_qty,dept_id,state_id,pos_id FROM job_order WHERE order_date = ? AND client_id = ? ORDER BY start_time") or die($mysqli->error);
    $sql->bind_param("si", $orderDate, $clientId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($job_id, $order_qty, $start_time, $male_qty, $female_qty, $dept_id, $state_id, $pos_id) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('job_id' => $job_id, 'order_qty' => $order_qty, 'start_time' => $start_time, 'male_qty' => $male_qty, 'female_qty' => $female_qty, 'dept_id' => $dept_id, 'state_id' => $state_id, 'pos_id' => $pos_id);
    }
    return $dataArray;
}

function mailNotification($from, $fromName, $to, $toName, $replyTo, $replyToName, $cc, $bcc, $subject, $body, $altbody)
{

    require 'includes/PHPMailer-master-v6/src/PHPMailer.php';
    require 'includes/PHPMailer-master-v6/src/SMTP.php';
    require 'includes/PHPMailer-master-v6/src/Exception.php';

    $mail = new PHPMailer(true);

    try {
        //Server settings
        $mail->SMTPDebug = 0;//SMTP::DEBUG_SERVER;                      //Enable verbose debug output
        $mail->isSMTP();                                            //Send using SMTP
        $mail->Host = 'email-smtp.ap-southeast-2.amazonaws.com';                     //Set the SMTP server to send through
        $mail->SMTPAuth = true;                                   //Enable SMTP authentication
        $mail->Username = DEFAULT_EMAIL_USERNAME;                     //SMTP username
        $mail->Password = DEFAULT_EMAIL_PASSWORD;                               //SMTP password
        $mail->SMTPSecure = 'tls';//PHPMailer::ENCRYPTION_SMTPS;            //Enable implicit TLS encryption
        $mail->Port = 587;                                    //TCP port to connect to; use 587 if you have set `SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS`

        //Recipients
        $mail->setFrom($from, $fromName);
        $mail->addAddress($to, $toName);     //Add a recipient
        $mail->addReplyTo($replyTo, $replyToName);

        //Attachments
        //$mail->addAttachment('');         //Add attachments
        //$mail->addAttachment('', 'new.jpg');    //Optional name

        //Content
        $mail->isHTML(true);                                  //Set email format to HTML
        $mail->Subject = $subject;
        $mail->Body = $body;
        $mail->AltBody = 'This is the body in plain text for non-HTML mail clients';

        $mail->send();
        return 'Message has been sent';
    } catch (Exception $e) {
        return "Message could not be sent. Mailer Error: {$mail->ErrorInfo}";
    }
}

function updateUserActivityLog($mysqli, $username, $ip, $page, $shiftId, $activityType, $activityDetail)
{
    $stmt = $mysqli->prepare("INSERT INTO user_activity_log(username,ip,page,shiftId,activity_type,activity_detail,log_time) VALUES(?,?,?,?,?,?,NOW())") or die($mysqli->error);
    $stmt->bind_param("sssiss", $username, $ip, $page, $shiftId, $activityType, $activityDetail) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    if ($nrows == '1') {
        return 'Added';
    } else {
        return $mysqli->error;
    }
}

function displayConfirmedHours($mysqli, $startDate, $endDate)
{
    $status = 'CONFIRMED';
    $sql = $mysqli->prepare("SELECT 
                                  shift.wrkhrs
                                FROM
                                  shift
                                WHERE
                                  shift.shiftStatus = ? AND 
                                  shift.shiftDate BETWEEN ? AND ?") or die($mysqli->error);
    $sql->bind_param("sss", $status, $startDate, $endDate) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($wrkhrs) or die($mysqli->error);
    $sql->store_result();
    $totalHrs = 0;
    while ($sql->fetch()) {
        $totalHrs = $totalHrs + $wrkhrs;
    }
    return $totalHrs;
}

function workHoursTicker($mysqli)
{
    $currentDate = date('Y-m-d');
    $currentDay = date('D', strtotime($currentDate));
    $ticker = '';
    $date = '';
    switch ($currentDay) {
        case 'Sun':
            $date = date('Y-m-d', strtotime($currentDate . '-6 days'));
            $ticker = displayConfirmedHours($mysqli, $date, $currentDate);
            break;
        case 'Mon':
            $date = $currentDate;
            /*date('Y-m-d', strtotime($currentDate . '-1 days'));*/
            $ticker = displayConfirmedHours($mysqli, $currentDate, $currentDate);
            break;
        case 'Tue':
            $date = date('Y-m-d', strtotime($currentDate . '-1 days'));
            $ticker = displayConfirmedHours($mysqli, $date, $currentDate);
            break;
        case 'Wed':
            $date = date('Y-m-d', strtotime($currentDate . '-2 days'));
            $ticker = displayConfirmedHours($mysqli, $date, $currentDate);
            break;
        case 'Thu':
            $date = date('Y-m-d', strtotime($currentDate . '-3 days'));
            $ticker = displayConfirmedHours($mysqli, $date, $currentDate);
            break;
        case 'Fri':
            $date = date('Y-m-d', strtotime($currentDate . '-4 days'));
            $ticker = displayConfirmedHours($mysqli, $date, $currentDate);
            break;
        case 'Sat':
            $date = date('Y-m-d', strtotime($currentDate . '-6 days'));
            $ticker = displayConfirmedHours($mysqli, $date, $currentDate);
            break;
        default:
            break;
    }
    /*return '<span class="tickerHours">'.$ticker.'</span><span>work hours confirmed up to now from '.$date.'</span>';*/
    return $ticker . '@' . $date;
}

function getAllTimeSheetTotals($mysqli, $startDate, $endDate)
{
    $sql = $mysqli->prepare("SELECT 
                              timesheet_totals.emgTotal,
                              timesheet_totals.ordTotal,
                              timesheet_totals.aftTotal,
                              timesheet_totals.nightTotal,
                              timesheet_totals.rdoTotal,
                              timesheet_totals.satTotal,
                              timesheet_totals.sunTotal,
                              timesheet_totals.ovtTotal,
                              timesheet_totals.dblTotal,
                              timesheet_totals.hldTotal,
                              timesheet_totals.hol_total,
                              timesheet_totals.satovtTotal,
                              timesheet_totals.sunovtTotal,
                              timesheet_totals.povtTotal
                            FROM
                              timesheet_totals
                            WHERE
                              timesheet_totals.wkendDate BETWEEN ? AND ?") or die($mysqli->error);
    $sql->bind_param("ss", $startDate, $endDate) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($emgTotal,
        $ordTotal,
        $aftTotal,
        $nightTotal,
        $rdoTotal,
        $satTotal,
        $sunTotal,
        $ovtTotal,
        $dblTotal,
        $hldTotal,
        $hol_total,
        $satovtTotal,
        $sunovtTotal,
        $povtTotal) or die($mysqli->error);
    $sql->store_result();
    $totalHrs = 0;
    $allOrdTotal = 0;
    $allAftTotal = 0;
    $allNightTotal = 0;
    $allRdoTotal = 0;
    $allSatTotal = 0;
    $allSunTotal = 0;
    $allOvtTotal = 0;
    $allDblTotal = 0;
    $allHldTotal = 0;
    $allHol_total = 0;
    $allSatovtTotal = 0;
    $allSunovtTotal = 0;
    $allPovtTotal = 0;
    while ($sql->fetch()) {
        $allOrdTotal = $allOrdTotal + $ordTotal;
        $allAftTotal = $allAftTotal + $aftTotal;
        $allNightTotal = $allNightTotal + $nightTotal;
        $allRdoTotal = $allRdoTotal + $rdoTotal;
        $allSatTotal = $allSatTotal + $satTotal;
        $allSunTotal = $allSunTotal + $sunTotal;
        $allOvtTotal = $allOvtTotal + $ovtTotal;
        $allDblTotal = $allDblTotal + $dblTotal;
        $allHldTotal = $allHldTotal + $hldTotal;
        $allHol_total = $allHol_total + $hol_total;
        $allSatovtTotal = $allSatovtTotal + $satovtTotal;
        $allSunovtTotal = $allSunovtTotal + $sunovtTotal;
        $allPovtTotal = $allPovtTotal + $povtTotal;
    }
    return $totalHrs = $allOrdTotal + $allAftTotal + $allNightTotal + $allRdoTotal + $allSatTotal + $allSunTotal + $allOvtTotal + $allDblTotal + $allHldTotal + $allHol_total + $allSatovtTotal + $allSunovtTotal + $allPovtTotal;
}

function getOHSSentTimeByCandidateId($mysqli, $canId, $clientId, $stateId, $deptId)
{
    $sql = $mysqli->prepare("SELECT ohs_sent_time FROM employee_allocation WHERE candidateId = ? AND clientId = ? AND stateId = ? AND deptId = ?") or die($mysqli->error);
    $sql->bind_param("siii", $canId, $clientId, $stateId, $deptId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->ohs_sent_time;
    } else {
        return null;
    }
}

function getAwardsList($mysqli)
{
    $select = $mysqli->prepare("SELECT award_id,award_code,award FROM award") or die($mysqli->error);
    $select->execute();
    $select->bind_result($award_id, $award_code, $award) or die($mysqli->error);
    $opt = '';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $award_id . '">' . $award . '</option>';
    }
    return $opt;
}

function displayAwardsListWithCurrentSelection($mysqli, $awId)
{
    $select = $mysqli->prepare("SELECT award_id,award_code,award FROM award") or die($mysqli->error);
    $select->execute();
    $select->bind_result($award_id, $award_code, $award) or die($mysqli->error);
    $opt = '';
    while ($select->fetch()) {
        $opt = $opt . '<option value="' . $award_id . '"';
        if (!empty($awId)) {
            if ($awId == $award_id) {
                $opt = $opt . ' selected';
            }
        }
        $opt = $opt . '>' . $award . '</option>';

    }
    return $opt;
}

function getAwardById($mysqli, $id)
{
    $sql = $mysqli->prepare("SELECT award FROM award WHERE award_id = ?") or die($mysqli->error);
    $sql->bind_param("i", $id) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->award;
    } else {
        return null;
    }
}

function getRateCardAwardInfo($mysqli, $clientId, $positionId)
{
    $sql = $mysqli->prepare("SELECT awardId FROM jobcode WHERE clientId = ? AND positionid = ?") or die($mysqli->error);
    $sql->bind_param("ii", $clientId, $positionId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->awardId;
    } else {
        return null;
    }
}

function getClientRates($mysqli, $clientId)
{
    $sql = $mysqli->prepare("SELECT payrollTax,workcover,super_percentage,mhws FROM client WHERE clientId = ?") or die($mysqli->error);
    $sql->bind_param("i", $clientId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payrollTax . '-' . $obj->workcover . '-' . $obj->super_percentage . '-' . $obj->mhws;
    } else {
        return null;
    }
}

function getWorkcoverClassifications($mysqli)
{
    try {
        $currentYear = date('Y-07-01');
        $select = $mysqli->prepare("SELECT wic_code,classification,rate FROM workcover_industry_classification WHERE rate_year = ?") or die($mysqli->error);
        $select->bind_param("s", $currentYear) or die($mysqli->error);
        $select->execute();
        $select->bind_result($wic_code, $classification, $rate) or die($mysqli->error);
        $opt = '';
        while ($select->fetch()) {
            $opt = $opt . '<option value="' . $wic_code . '" data-rate="' . $rate . '">' . $classification . '</option>';
        }
        return $opt;
    } catch (Exception $e) {
        echo $e->getMessage();
    }
}

function getWorkcoverClassificationByCode($mysqli, $wic_code)
{
    $sql = $mysqli->prepare("SELECT classification FROM workcover_industry_classification WHERE wic_code = ?") or die($mysqli->error);
    $sql->bind_param("s", $wic_code) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->classification;
    } else {
        return null;
    }
}

function getWorkCoverClassificationRateByCode($mysqli, $wic_code)
{
    $sql = $mysqli->prepare("SELECT rate FROM workcover_industry_classification WHERE wic_code = ?") or die($mysqli->error);
    $sql->bind_param("s", $wic_code) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->rate;
    } else {
        return null;
    }
}

class RateCalculator
{

    const ANNUAL_WAGE = 44388.86;
    const WEEKLY_HOURS = 38;
    const CASUAL_LOADING = 0.25;
    const AFTERNOON_LOADING = 0.15;
    const RT_AFTERNOON_LOADING = 0.25;
    const EARLY_MORNING_LOADING = 0.125;
    const NIGHT_LOADING = 0.30;
    const T15_OVERTIME = 1.50;
    const T2_OVERTIME = 2.00;
    const T25_OVERTIME = 2.50;
    const RTT2_OVERTIME = 1.75;
    const RTT25_OVERTIME = 2.25;
    const FOOD_AWD = 'Food Beverage and Tobacco Manufacturing Award';
    const STORAGE_AWD = 'Storage Services and Wholesale Award';
    const RETAIL_AWD = 'General Retail Industry Award';
    const ROAD_TRANSPORT_AWD = 'Road Transport and Distribution Award 2010';
    const MANUFACTURE_AWD = 'Manufacturing and Associated Industries and Occupations Award 2010';
    const HEALTH_AWD = 'Health Professionals and Support Services Award 2010';
    const GARDENING_AWD = 'Gardening and Landscaping Services Award 2010';
    const CLERKS_AWD = 'Clerks - Private Sector Award 2010';

    public $client;
    public $position;
    public $award;
    public $breakdown;
    public $hourly_rate;
    public $superannuation;
    public $payroll_tax;
    public $mhws;
    public $workcover;
    public $margin;
    public $margin_select;
    public $increment_percentage;

    public function __construct($client, $position, $award, $breakdown, $hourly_rate, $superannuation, $payroll_tax, $mhws, $workcover, $margin_select, $margin, $increment_percentage)
    {
        $this->client = $client;
        $this->position = $position;
        $this->award = $award;
        $this->breakdown = $breakdown;
        $this->hourly_rate = $hourly_rate;
        $this->superannuation = $superannuation / 100;
        $this->payroll_tax = $payroll_tax / 100;
        $this->mhws = $mhws / 100;
        $this->workcover = $workcover / 100;
        if (empty($increment_percentage)) {
            $this->increment_percentage = 0;
        } else {
            $this->increment_percentage = $increment_percentage / 100;
        }
        $this->margin_select = $margin_select;
        if ($margin_select == 'value') {
            $this->margin = $margin;
        } else {
            $this->margin = $margin / 100;
        }
    }

    public function calculateRate()
    {
        $hourly_rate = $this->hourly_rate;
        $increment_percentage = $this->increment_percentage;
        $fulltime_t15 = number_format(($hourly_rate * self::T15_OVERTIME), 2);
        $fulltime_t2 = number_format(($hourly_rate * self::T2_OVERTIME), 2);
        $fulltime_holiday = number_format(($hourly_rate * self::T25_OVERTIME), 2);
        $fulltime_early = number_format(($hourly_rate * (1 + self::EARLY_MORNING_LOADING)), 2);
        $fulltime_afternoon = number_format(($hourly_rate * (1 + self::AFTERNOON_LOADING)), 2);
        $fulltime_night = number_format(($hourly_rate * (1 + self::NIGHT_LOADING)), 2);
        $fulltime_saturday = number_format(($hourly_rate * (self::T15_OVERTIME)), 2);
        $fulltime_sunday = number_format(($hourly_rate * (self::T2_OVERTIME)), 2);
        switch ($this->award) {
            case self::STORAGE_AWD:
                $casual_t1 = number_format(($hourly_rate * self::CASUAL_LOADING), 2);
                $casual_t15 = $casual_t1;
                $casual_t2 = $casual_t1;
                $casual_holiday = $casual_t1;
                $casual_early = $casual_t1;
                $casual_afternoon = $casual_t1;
                $casual_night = $casual_t1;
                $casual_saturday = $casual_t1;
                $casual_sunday = $casual_t1;

                $pay_rate_t1 = number_format(($hourly_rate + $casual_t1), 2);
                $pay_rate_t15 = number_format(($fulltime_t15 + $casual_t15), 2);
                $pay_rate_t2 = number_format(($fulltime_t2 + $casual_t2), 2);
                $pay_rate_holiday = number_format(($fulltime_holiday + $casual_holiday), 2);
                $pay_rate_early = number_format(($fulltime_early + $casual_early), 2);
                $pay_rate_afternoon = number_format(($fulltime_afternoon + $casual_afternoon), 2);
                $pay_rate_night = number_format(($fulltime_night + $casual_night), 2);
                $pay_rate_saturday = number_format(($fulltime_saturday + $casual_saturday), 2);
                $pay_rate_sunday = number_format(($fulltime_sunday + $casual_sunday), 2);
                break;

            case self::FOOD_AWD:
                $casual_t1 = number_format(($hourly_rate * self::CASUAL_LOADING), 2);
                $casual_t15 = number_format((($hourly_rate * self::CASUAL_LOADING) * self::T15_OVERTIME), 2);
                $casual_t2 = number_format((($hourly_rate * self::CASUAL_LOADING) * self::T2_OVERTIME), 2);
                $casual_holiday = number_format((($hourly_rate * self::CASUAL_LOADING) * self::T25_OVERTIME), 2);
                $casual_early = number_format(($casual_t1 * (1 + self::EARLY_MORNING_LOADING) + 0.01), 2);
                $casual_afternoon = number_format((($hourly_rate * self::CASUAL_LOADING) * (self::AFTERNOON_LOADING + 1)), 2);
                $casual_night = number_format((($hourly_rate * self::CASUAL_LOADING) * (self::NIGHT_LOADING + 1)), 2);
                $casual_saturday = number_format((($hourly_rate * self::CASUAL_LOADING) * self::T15_OVERTIME), 2);
                $casual_sunday = number_format((($hourly_rate * self::CASUAL_LOADING) * self::T2_OVERTIME), 2);

                $pay_rate_t1 = number_format(($hourly_rate + $casual_t1), 2);
                $pay_rate_t15 = number_format(($fulltime_t15 + $casual_t15), 2);
                $pay_rate_t2 = number_format(($fulltime_t2 + $casual_t2), 2);
                $pay_rate_holiday = number_format(($fulltime_holiday + $casual_holiday), 2);
                $pay_rate_early = number_format(($fulltime_early + $casual_early), 2);
                $pay_rate_afternoon = number_format(($fulltime_afternoon + $casual_afternoon), 2);
                $pay_rate_night = number_format(($fulltime_night + $casual_night), 2);
                $pay_rate_saturday = number_format(($fulltime_saturday + $casual_saturday), 2);
                $pay_rate_sunday = number_format(($fulltime_sunday + $casual_sunday), 2);
                break;

            case self::RETAIL_AWD:
                $fulltime_t2 = number_format(($hourly_rate * self::RTT2_OVERTIME), 2);
                $fulltime_holiday = number_format(($hourly_rate * self::RTT25_OVERTIME), 2);
                $fulltime_afternoon = number_format(($hourly_rate * (1 + self::RT_AFTERNOON_LOADING)), 2);
                $fulltime_sunday = number_format(($hourly_rate * (self::RTT2_OVERTIME)), 2);

                $casual_t1 = number_format(($hourly_rate * self::CASUAL_LOADING), 2);
                $casual_t15 = $casual_t1;
                $casual_t2 = $casual_t1;
                $casual_holiday = $casual_t1;
                $casual_early = $casual_t1;
                $casual_afternoon = $casual_t1;
                $casual_night = $casual_t1;
                $casual_saturday = $casual_t1;
                $casual_sunday = $casual_t1;

                $pay_rate_t1 = number_format(($hourly_rate + $casual_t1), 2);
                $pay_rate_t15 = number_format(($fulltime_t15 + $casual_t15), 2);
                $pay_rate_t2 = number_format(($fulltime_t2 + $casual_t2), 2);
                $pay_rate_holiday = number_format(($fulltime_holiday + $casual_holiday), 2);
                $pay_rate_early = number_format(($hourly_rate * (1 + self::EARLY_MORNING_LOADING) + $casual_early), 2);
                $pay_rate_afternoon = number_format(($fulltime_afternoon + $casual_afternoon), 2);
                $pay_rate_night = number_format(($fulltime_night + $casual_night), 2);
                $pay_rate_saturday = number_format(($fulltime_saturday + $casual_saturday), 2);
                $pay_rate_sunday = number_format(($fulltime_sunday + $casual_sunday), 2);
                break;

            default:
                $casual_t1 = number_format(($hourly_rate * self::CASUAL_LOADING), 2);
                $casual_t15 = number_format((($hourly_rate * self::CASUAL_LOADING) * self::T15_OVERTIME), 2);
                $casual_t2 = number_format((($hourly_rate * self::CASUAL_LOADING) * self::T2_OVERTIME), 2);
                $casual_holiday = number_format((($hourly_rate * self::CASUAL_LOADING) * self::T25_OVERTIME), 2);
                $casual_early = number_format(($hourly_rate * self::CASUAL_LOADING), 2);
                $casual_afternoon = number_format((($hourly_rate * self::CASUAL_LOADING) * (self::AFTERNOON_LOADING + 1)), 2);
                $casual_night = number_format((($hourly_rate * self::CASUAL_LOADING) * (self::NIGHT_LOADING + 1)), 2);
                $casual_saturday = number_format((($hourly_rate * self::CASUAL_LOADING) * self::T15_OVERTIME), 2);
                $casual_sunday = number_format((($hourly_rate * self::CASUAL_LOADING) * self::T2_OVERTIME), 2);

                $pay_rate_t1 = number_format(($hourly_rate + ($hourly_rate * self::CASUAL_LOADING)), 2);
                $pay_rate_t15 = number_format((($hourly_rate * self::T15_OVERTIME) + (($hourly_rate * self::CASUAL_LOADING) * self::T15_OVERTIME)), 2);
                $pay_rate_t2 = number_format((($hourly_rate * self::T2_OVERTIME) + (($hourly_rate * self::CASUAL_LOADING) * self::T2_OVERTIME)), 2);
                $pay_rate_holiday = number_format((($hourly_rate * self::T25_OVERTIME) + (($hourly_rate * self::CASUAL_LOADING) * self::T25_OVERTIME)), 2);
                $pay_rate_early = number_format(($hourly_rate * (1 + self::EARLY_MORNING_LOADING) + $casual_early), 2);
                $pay_rate_afternoon = number_format((($hourly_rate * (1 + self::AFTERNOON_LOADING)) + (($hourly_rate * self::CASUAL_LOADING) * (self::AFTERNOON_LOADING + 1))), 2);
                $pay_rate_night = number_format((($hourly_rate * (1 + self::NIGHT_LOADING)) + (($hourly_rate * self::CASUAL_LOADING) * (self::NIGHT_LOADING + 1))), 2);
                $pay_rate_saturday = number_format((($hourly_rate * (self::T15_OVERTIME)) + (($hourly_rate * self::CASUAL_LOADING) * self::T15_OVERTIME)), 2);
                $pay_rate_sunday = number_format((($hourly_rate * (self::T2_OVERTIME)) + (($hourly_rate * self::CASUAL_LOADING) * self::T2_OVERTIME)), 2);
                break;
        }

        $super_t1 = number_format((($pay_rate_t1) * ($this->superannuation)), 2);
        $super_t15 = number_format((0), 2);
        $super_t2 = number_format((0), 2);
        $super_holiday = number_format((($pay_rate_holiday) * ($this->superannuation)), 2);
        $super_early = number_format((($pay_rate_early) * ($this->superannuation)), 2);
        $super_afternoon = number_format((($pay_rate_afternoon) * ($this->superannuation)), 2);
        $super_night = number_format((($pay_rate_night) * ($this->superannuation)), 2);
        $super_saturday = number_format((($pay_rate_saturday) * ($this->superannuation)), 2);
        $super_sunday = number_format((($pay_rate_sunday) * ($this->superannuation)), 2);

        $payrollTax_t1 = number_format((($pay_rate_t1 + $super_t1) * $this->payroll_tax), 2);
        $payrollTax_t15 = number_format((($pay_rate_t15 + $super_t15) * $this->payroll_tax), 2);
        $payrollTax_t2 = number_format((($pay_rate_t2 + $super_t2) * $this->payroll_tax), 2);
        $payrollTax_holiday = number_format((($pay_rate_holiday + $super_holiday) * $this->payroll_tax), 2);
        $payrollTax_early = number_format((($pay_rate_early + $super_early) * $this->payroll_tax), 2);
        $payrollTax_afternoon = number_format((($pay_rate_afternoon + $super_afternoon) * $this->payroll_tax), 2);
        $payrollTax_night = number_format((($pay_rate_night + $super_night) * $this->payroll_tax), 2);
        $payrollTax_saturday = number_format((($pay_rate_saturday + $super_saturday) * $this->payroll_tax), 2);
        $payrollTax_sunday = number_format((($pay_rate_sunday + $super_sunday) * $this->payroll_tax), 2);

        $mhws_t1 = number_format((($pay_rate_t1 + $super_t1) * $this->mhws), 2);
        $mhws_t15 = number_format((($pay_rate_t15 + $super_t15) * $this->mhws), 2);
        $mhws_t2 = number_format((($pay_rate_t2 + $super_t2) * $this->mhws), 2);
        $mhws_holiday = number_format((($pay_rate_holiday + $super_holiday) * $this->mhws), 2);
        $mhws_early = number_format((($pay_rate_early + $super_early) * $this->mhws), 2);
        $mhws_afternoon = number_format((($pay_rate_afternoon + $super_afternoon) * $this->mhws), 2);
        $mhws_night = number_format((($pay_rate_night + $super_night) * $this->mhws), 2);
        $mhws_saturday = number_format((($pay_rate_saturday + $super_saturday) * $this->mhws), 2);
        $mhws_sunday = number_format((($pay_rate_sunday + $super_sunday) * $this->mhws), 2);

        $workcover_t1 = number_format((($pay_rate_t1 + $super_t1) * $this->workcover), 2);
        $workcover_t15 = number_format((($pay_rate_t15 + $super_t15) * $this->workcover), 2);
        $workcover_t2 = number_format((($pay_rate_t2 + $super_t2) * $this->workcover), 2);
        $workcover_holiday = number_format((($pay_rate_holiday + $super_holiday) * $this->workcover), 2);
        $workcover_early = number_format((($pay_rate_early + $super_early) * $this->workcover), 2);
        $workcover_afternoon = number_format((($pay_rate_afternoon + $super_afternoon) * $this->workcover), 2);
        $workcover_night = number_format((($pay_rate_night + $super_night) * $this->workcover), 2);
        $workcover_saturday = number_format((($pay_rate_saturday + $super_saturday) * $this->workcover), 2);
        $workcover_sunday = number_format((($pay_rate_sunday + $super_sunday) * $this->workcover), 2);

        $loadedcost_t1 = number_format(($pay_rate_t1 + $super_t1 + $payrollTax_t1 + $mhws_t1 + $workcover_t1), 2);
        $loadedcost_t15 = number_format(($pay_rate_t15 + $super_t15 + $payrollTax_t15 + $mhws_t15 + $workcover_t15), 2);
        $loadedcost_t2 = number_format(($pay_rate_t2 + $super_t2 + $payrollTax_t2 + $mhws_t2 + $workcover_t2), 2);
        $loadedcost_holiday = number_format(($pay_rate_holiday + $super_holiday + $payrollTax_holiday + $mhws_holiday + $workcover_holiday), 2);
        $loadedcost_early = number_format(($pay_rate_early + $super_early + $payrollTax_early + $mhws_early + $workcover_early), 2);
        $loadedcost_afternoon = number_format(($pay_rate_afternoon + $super_afternoon + $payrollTax_afternoon + $mhws_afternoon + $workcover_afternoon), 2);
        $loadedcost_night = number_format(($pay_rate_night + $super_night + $payrollTax_night + $mhws_night + $workcover_night), 2);
        $loadedcost_saturday = number_format(($pay_rate_saturday + $super_saturday + $payrollTax_saturday + $mhws_saturday + $workcover_saturday), 2);
        $loadedcost_sunday = number_format(($pay_rate_sunday + $super_sunday + $payrollTax_sunday + $mhws_sunday + $workcover_sunday), 2);

        //if($this->margin_select == 'value') {
        $placement_fee = number_format($this->margin, 2);
        /*}else{
            $placement_fee = number_format(($this->margin/100), 2);
        }*/

        $chargeRate_t1 = number_format(($placement_fee + $loadedcost_t1), 2);
        $chargeRate_t15 = number_format(($placement_fee + $loadedcost_t15), 2);
        $chargeRate_t2 = number_format(($placement_fee + $loadedcost_t2), 2);
        $chargeRate_holiday = number_format(($placement_fee + $loadedcost_holiday), 2);
        $chargeRate_early = number_format(($placement_fee + $loadedcost_early), 2);
        $chargeRate_afternoon = number_format(($placement_fee + $loadedcost_afternoon), 2);
        $chargeRate_night = number_format(($placement_fee + $loadedcost_night), 2);
        $chargeRate_saturday = number_format(($placement_fee + $loadedcost_saturday), 2);
        $chargeRate_sunday = number_format(($placement_fee + $loadedcost_sunday), 2);

        $gst_t1 = number_format(($chargeRate_t1 * 0.1), 2);
        $gst_t15 = number_format(($chargeRate_t15 * 0.1), 2);
        $gst_t2 = number_format(($chargeRate_t2 * 0.1), 2);
        $gst_holiday = number_format(($chargeRate_holiday * 0.1), 2);
        $gst_early = number_format(($chargeRate_early * 0.1), 2);
        $gst_afternoon = number_format(($chargeRate_afternoon * 0.1), 2);
        $gst_night = number_format(($chargeRate_night * 0.1), 2);
        $gst_saturday = number_format(($chargeRate_saturday * 0.1), 2);
        $gst_sunday = number_format(($chargeRate_sunday * 0.1), 2);

        $chg_gst_t1 = number_format(($chargeRate_t1), 2);
        $chg_gst_t15 = number_format(($chargeRate_t15), 2);
        $chg_gst_t2 = number_format(($chargeRate_t2), 2);
        $chg_gst_holiday = number_format(($chargeRate_holiday), 2);
        $chg_gst_early = number_format(($chargeRate_early), 2);
        $chg_gst_afternoon = number_format(($chargeRate_afternoon), 2);
        $chg_gst_night = number_format(($chargeRate_night), 2);
        $chg_gst_saturday = number_format(($chargeRate_saturday), 2);
        $chg_gst_sunday = number_format(($chargeRate_sunday), 2);

        //echo $chg_gst_t1.'-'.$chg_gst_t15.'-'.$chg_gst_t2.'-'.$chg_gst_holiday.'-'.$chg_gst_early.'-'.$chg_gst_afternoon.'-'.$chg_gst_night.'-'.$chg_gst_saturday.'-'.$chg_gst_sunday.'-'.$hourly_rate;
        if (empty($increment_percentage)) {
            echo number_format($pay_rate_t1, 2)
                . '-' .
                number_format($chargeRate_t1, 2)
                . '-' .
                number_format($pay_rate_t15, 2)
                . '-' .
                number_format($chargeRate_t15, 2)
                . '-' .
                number_format($pay_rate_t2, 2)
                . '-' .
                number_format($chargeRate_t2, 2)
                . '-' .
                number_format($pay_rate_holiday, 2)
                . '-' .
                number_format($chargeRate_holiday, 2)
                . '-' .
                number_format($pay_rate_early, 2)
                . '-' .
                number_format($chargeRate_early, 2)
                . '-' .
                number_format($pay_rate_afternoon, 2)
                . '-' .
                number_format($chargeRate_afternoon, 2)
                . '-' .
                number_format($pay_rate_night, 2)
                . '-' .
                number_format($chargeRate_night, 2)
                . '-' .
                number_format($pay_rate_saturday, 2)
                . '-' .
                number_format($chargeRate_saturday, 2)
                . '-' .
                number_format($pay_rate_sunday, 2)
                . '-' .
                number_format($chargeRate_sunday, 2);
        } else {
            echo number_format($pay_rate_t1 + ($pay_rate_t1 * ($increment_percentage)), 2)
                . '-' .
                number_format($chargeRate_t1 + ($chargeRate_t1 * ($increment_percentage)), 2)
                . '-' .
                number_format($pay_rate_t15 + ($pay_rate_t15 * ($increment_percentage)), 2)
                . '-' .
                number_format($chargeRate_t15 + ($chargeRate_t15 * ($increment_percentage)), 2)
                . '-' .
                number_format($pay_rate_t2 + ($pay_rate_t2 * ($increment_percentage)), 2)
                . '-' .
                number_format($chargeRate_t2 + ($chargeRate_t2 * ($increment_percentage)), 2)
                . '-' .
                number_format($pay_rate_holiday + ($pay_rate_holiday * ($increment_percentage)), 2)
                . '-' .
                number_format($chargeRate_holiday + ($chargeRate_holiday * ($increment_percentage)), 2)
                . '-' .
                number_format($pay_rate_early + ($pay_rate_early * ($increment_percentage)), 2)
                . '-' .
                number_format($chargeRate_early + ($chargeRate_early * ($increment_percentage)), 2)
                . '-' .
                number_format($pay_rate_afternoon + ($pay_rate_afternoon * ($increment_percentage)), 2)
                . '-' .
                number_format($chargeRate_afternoon + ($chargeRate_afternoon * ($increment_percentage)), 2)
                . '-' .
                number_format($pay_rate_night + ($pay_rate_night * ($increment_percentage)), 2)
                . '-' .
                number_format($chargeRate_night + ($chargeRate_night * ($increment_percentage)), 2)
                . '-' .
                number_format($pay_rate_saturday + ($pay_rate_saturday * ($increment_percentage)), 2)
                . '-' .
                number_format($chargeRate_saturday + ($chargeRate_saturday * ($increment_percentage)), 2)
                . '-' .
                number_format($pay_rate_sunday + ($pay_rate_sunday * ($increment_percentage)), 2)
                . '-' .
                number_format($chargeRate_sunday + ($chargeRate_sunday * ($increment_percentage)), 2);
        }
    }


}

function ratingStar($value)
{
    switch ($value) {
        case 1:
            return '<img src="img/star.png" width="15" height="15" alt="">';
        case 2:
            return '<img src="img/star.png" width="15" height="15" alt=""><img src="img/star.png" width="15" height="15" alt="">';
        case 3:
            return '<img src="img/star.png" width="15" height="15" alt=""><img src="img/star.png" width="15" height="15" alt=""><img src="img/star.png" width="15" height="15" alt="">';
        case 4:
            return '<img src="img/star.png" width="15" height="15" alt=""><img src="img/star.png" width="15" height="15" alt=""><img src="img/star.png" width="15" height="15" alt=""><img src="img/star.png" width="15" height="15" alt="">';
        case 5:
            return '<img src="img/star.png" width="15" height="15" alt=""><img src="img/star.png" width="15" height="15" alt=""><img src="img/star.png" width="15" height="15" alt=""><img src="img/star.png" width="15" height="15" alt=""><img src="img/star.png" width="15" height="15" alt="">';
        default:
            return '';
    }
}

function saveWorkcoverIndustryClassification($mysqli, $year, $wicCode, $classification, $rate)
{
    $stmt = $mysqli->prepare("INSERT INTO workcover_industry_classification(wic_code,classification,rate,rate_year) VALUES(?,?,?,?)") or die($mysqli->error);
    $stmt->bind_param("ssss", $wicCode, $classification, $rate, $year) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    if ($nrows == '1') {
        return 'Added';
    } else {
        return $mysqli->error;
    }
}

function displayWorkcoverIndustryClassifications($mysqli)
{
    $sql = $mysqli->prepare("SELECT wic_id,wic_code,classification,rate,rate_year FROM workcover_industry_classification") or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($wic_id, $wic_code, $classification, $rate, $rate_year) or die($mysqli->error);
    $html = '';
    while ($sql->fetch()) {
        $html = $html . '<tr id="' . $wic_id . '"><td>' . $wic_code . '</td><td>' . $classification . '</td><td>' . $rate . '</td><td>' . $rate_year . '<button class="removeBtn btn btn-sm btn-danger"><i class="fa fa-trash"></i></button></td></tr>';
    }
    return $html;
}

function deleteWorkcoverIndustryClassification($mysqli, $wic_id)
{
    $del = $mysqli->prepare("DELETE FROM workcover_industry_classification WHERE wic_id = ?") or die($mysqli->error);
    $del->bind_param("i", $wic_id) or die($mysqli->error);
    $del->execute();
    $del->free_result();
    return true;
}

function getSurveyDocumentsList($mysqli, $cons_id, $docTypeId, $sciclunaDocTypeId)
{
    $sql = $mysqli->prepare("SELECT 
                                  document_type.typeCode,
                                  document_type.typeLabel,
                                  candidate_document.candidateId,
                                  candidate_document.fileName,
                                  candidate_document.filePath,
                                   candidate_document.createdDate,
                                  candidate.firstName,
                                  candidate.lastName
                                FROM
                                  candidate_document
                                  INNER JOIN candidate ON (candidate_document.candidateId = candidate.candidateId)
                                  INNER JOIN document_type ON (candidate_document.docTypeId = document_type.typeId)
                                WHERE
                                  candidate_document.docTypeId IN (?,?) AND 
                                  candidate.consultantId = ?") or die($mysqli->error);
    $sql->bind_param("iii", $docTypeId, $sciclunaDocTypeId, $cons_id) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($typeCode, $typeLabel, $candidateId, $fileName, $filePath, $createdDate, $firstName, $lastName) or die($mysqli->error);
    $html = '<table class="table table-striped">
        <thead>
          <tr>
            <th>EmployeeID</th>
            <th>Firstname</th>
            <th>Lastname</th>
            <th>Document Type</th>
            <th>View Document</th>
            <th>Document Date</th>
          </tr>
        </thead>
        <tbody>';
    while ($sql->fetch()) {
        $html = $html . '<tr>
                        <td>' . $candidateId . '</td>
                        <td>' . $firstName . '</td>
                        <td>' . $lastName . '</td>
                        <td>' . $typeLabel . '</td>
                        <td><a href="' . $filePath . '" class="fa fa-" target="_blank">' . $fileName . '</a></td>
                        <td>' . $createdDate . '</td>
                       </tr>';
    }
    $html = $html . '</tbody></table>';
    return $html;
}

function updateRegPackSentTime($mysqli, $canId)
{
    $stmt = $mysqli->prepare("UPDATE candidate SET reg_pack_sent_time = NOW() WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $canId) or die($mysqli->error);
    $stmt->execute();
}

function getRegPackSentTime($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT reg_pack_sent_time FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->reg_pack_sent_time;
    } else {
        return null;
    }
}

function getUserActivityShiftInfo($mysqli, $shiftId)
{
    $param = "%" . $shiftId . "%";
    $sql = $mysqli->prepare("SELECT activity_type, activity_detail FROM user_activity_log WHERE shiftId = ?") or die($mysqli->error);
    $sql->bind_param("s", $param) or die($mysqli->error);

}

function getLastShiftInfoByCandidateId($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT DISTINCT shiftDate, departmentId FROM shift WHERE candidateId = ? ORDER BY shiftDate DESC LIMIT 0,1") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($shiftDate, $departmentId) or die($mysqli->error);
    $sql->store_result();
    $shDate = '';
    $shDepartment = '';
    while ($sql->fetch()) {
        $shDate = $shiftDate;
        $shDepartment = getDepartmentById($mysqli, $departmentId);
    }
    $sql->free_result();
    return $shDate . ':' . $shDepartment;
}

function getLastConfirmedShiftInfoByCandidateId($mysqli, $candidateId)
{
    $shStatus = 'CONFIRMED';
    $sql = $mysqli->prepare("SELECT DISTINCT shiftDate, departmentId FROM shift WHERE candidateId = ? AND 
  shift.shiftStatus = ?  ORDER BY shiftDate DESC LIMIT 0,1") or die($mysqli->error);
    $sql->bind_param("ss", $candidateId, $shStatus) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($shiftDate, $departmentId) or die($mysqli->error);
    $sql->store_result();
    $shDate = '';
    $shDepartment = '';
    while ($sql->fetch()) {
        $shDate = $shiftDate;
        $shDepartment = getDepartmentById($mysqli, $departmentId);
    }
    $sql->free_result();
    return $shDate . ':' . $shDepartment;
}

function validateJobBoardResume($mysqli, $email)
{
    $stmt = $mysqli->prepare("SELECT email FROM jb_resume WHERE email = ?") or die($mysqli->error);
    $stmt->bind_param("s", $email) or die($mysqli->error);
    $stmt->execute();
    $stmt->bind_result($email);
    $stmt->store_result();
    $stmt->fetch();
    $num_of_rows = $stmt->num_rows;
    if ($num_of_rows > 0) {
        return true;
    } else {
        return false;
    }
}

function addJobBoardResume($mysqli, $position, $firstName, $lastName, $gender, $email, $phone, $suburb, $experience, $drivers_licence, $own_car, $work_with_children, $police_check, $forklift_licence, $white_card_holder, $mr_licence, $work_rights, $resume_path, $photo_path)
{
    $current_date = date('Y-m-d H:i:s');
    $sql = $mysqli->prepare("INSERT INTO jb_resume(applied_position,
                                                  first_name,
                                                  last_name,
                                                  gender,
                                                  email,
                                                  phone,
                                                  suburb,
                                                  experience,
                                                  drivers_licence,
                                                  own_car,
                                                  work_with_children,
                                                  police_check,
                                                  forklift_licence,
                                                  white_card,
                                                  mr_licence,
                                                  work_rights,
                                                  resume_path,
                                                  photo_path,
                                                  created_at) 
                                                VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
    $sql->bind_param("sssssssssssssssssss", $position, $firstName, $lastName, $gender, $email, $phone, $suburb, $experience, $drivers_licence, $own_car, $work_with_children, $police_check, $forklift_licence, $white_card_holder, $mr_licence, $work_rights, $resume_path, $photo_path,$current_date) or die($mysqli->error);
    $sql->execute();
    $nrows = $sql->affected_rows;
    if ($nrows == '1') {
        return 'Added';
    } else {
        return $mysqli->error;
    }
}

function getJobBoardResumes($mysqli, $status)
{
    $stmt = $mysqli->prepare("SELECT 
                                  jb_resume.id,
                                  jb_resume.applied_position,
                                  jb_resume.first_name,
                                  jb_resume.last_name,
                                  jb_resume.gender,
                                  jb_resume.email,
                                  jb_resume.phone,
                                  jb_resume.suburb,
                                  jb_resume.experience,
                                  jb_resume.drivers_licence,
                                  jb_resume.own_car,
                                  jb_resume.work_with_children,
                                  jb_resume.police_check,
                                  jb_resume.forklift_licence,
                                  jb_resume.white_card,
                                  jb_resume.mr_licence,
                                  jb_resume.work_rights,
                                  jb_resume.resume_path,
                                  jb_resume.photo_path,
                                  jb_resume.created_at                                  
                                FROM
                                  jb_resume
                                WHERE
                                  jb_resume.status = ?  
                                ORDER BY jb_resume.created_at DESC");
    $stmt->bind_param("i", $status) or die($mysqli->error);
    $stmt->execute();
    $stmt->bind_result($id,
        $applied_position,
        $first_name,
        $last_name,
        $gender,
        $email,
        $phone,
        $suburb,
        $experience,
        $drivers_licence,
        $own_car,
        $work_with_children,
        $police_check,
        $forklift_licence,
        $white_card,
        $mr_licence,
        $work_rights,
        $resume_path,
        $photo_path,
        $created_at) or die($mysqli->error);
    $dataArray = array();
    while ($stmt->fetch()) {
        $dataArray[] = array('id' => $id,
            'applied_position' => $applied_position,
            'first_name' => $first_name,
            'last_name' => $last_name,
            'gender' => $gender,
            'email' => $email,
            'phone' => $phone,
            'suburb' => $suburb,
            'experience' => $experience,
            'drivers_licence' => $drivers_licence,
            'own_car' => $own_car,
            'work_with_children' => $work_with_children,
            'police_check' => $police_check,
            'forklift_licence' => $forklift_licence,
            'white_card' => $white_card,
            'mr_licence' => $mr_licence,
            'work_rights' => $work_rights,
            'resume_path' => $resume_path,
            'photo_path' => $photo_path,
            'created_at' => $created_at
        );
    }
    return $dataArray;
}

function getJobBoardResumeInfoById($mysqli, $id)
{
    $stmt = $mysqli->prepare("SELECT 
                                  jb_resume.applied_position,
                                  jb_resume.first_name,
                                  jb_resume.last_name,
                                  jb_resume.gender,
                                  jb_resume.email,
                                  jb_resume.phone,
                                  jb_resume.suburb,
                                  jb_resume.experience,
                                  jb_resume.drivers_licence,
                                  jb_resume.own_car,
                                  jb_resume.work_with_children,
                                  jb_resume.police_check,
                                  jb_resume.forklift_licence,
                                  jb_resume.white_card,
                                  jb_resume.mr_licence,
                                  jb_resume.work_rights,
                                  jb_resume.resume_path,
                                  jb_resume.photo_path,
                                  jb_resume.created_at                                  
                                FROM
                                  jb_resume
                                WHERE
                                  jb_resume.id = ?  
                                ORDER BY created_at DESC");
    $stmt->bind_param("i", $id) or die($mysqli->error);
    $stmt->execute();
    $stmt->bind_result($applied_position,
        $first_name,
        $last_name,
        $gender,
        $email,
        $phone,
        $suburb,
        $experience,
        $drivers_licence,
        $own_car,
        $work_with_children,
        $police_check,
        $forklift_licence,
        $white_card,
        $mr_licence,
        $work_rights,
        $resume_path,
        $photo_path,
        $created_at);
    $dataArray = array();
    while ($stmt->fetch()) {
        $dataArray[] = array(
            'applied_position' => $applied_position,
            'first_name' => $first_name,
            'last_name' => $last_name,
            'gender' => $gender,
            'email' => $email,
            'phone' => $phone,
            'suburb' => $suburb,
            'experience' => $experience,
            'drivers_licence' => $drivers_licence,
            'own_car' => $own_car,
            'work_with_children' => $work_with_children,
            'police_check' => $police_check,
            'forklift_licence' => $forklift_licence,
            'white_card' => $white_card,
            'mr_licence' => $mr_licence,
            'work_rights' => $work_rights,
            'resume_path' => $resume_path,
            'photo_path' => $photo_path,
            'created_at' => $created_at
        );
    }
    return $dataArray;
}

function updateJobBoardResumeStatus($mysqli, $id, $status)
{
    $stmt = $mysqli->prepare("UPDATE jb_resume SET status = ? WHERE id = ?") or die($mysqli->error);
    $stmt->bind_param("ii", $status, $id) or die($mysqli->error);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function updateInboxResumeStatus($mysqli, $autoId, $status)
{
    $stmt = $mysqli->prepare("UPDATE resume SET inbox_status = ? WHERE autoid = ?") or die($mysqli->error);
    $stmt->bind_param("ii", $status, $autoid) or die($mysqli->error);
    if ($stmt->execute()) {
        return true;
    } else {
        return false;
    }
}

function getCasualStatus($mysqli, $candidateId)
{
    $sql = $mysqli->prepare("SELECT casual_status FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $candidateId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->casual_status;
    } else {
        return null;
    }
}

function updateCasualStatus($mysqli, $candidateId, $casualStatus, $loggedInUser)
{
    $currentDateTime = date('Y-m-d H:i:s');
    if (!empty($casualStatus)) {
        $stmt = $mysqli->prepare("UPDATE candidate SET casual_status = ?, casual_status_update = ?, casual_status_updated_by = ? WHERE candidateId = ?") or die($mysqli->error);
        $stmt->bind_param("ssss", $casualStatus, $currentDateTime, $loggedInUser, $candidateId) or die($mysqli->error);
        if ($stmt->execute()) {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
}

function getMailColorCategoryById($mysqli, $catid)
{
    $sql = $mysqli->prepare("SELECT category FROM color_category WHERE catid = ?") or die($mysqli->error);
    $sql->bind_param("i", $catid) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->category;
    } else {
        return null;
    }
}

function getScreenReportData($mysqli)
{
    $stmt = $mysqli->prepare("SELECT 
                                  mail_color_category.username,
                                  mail_color_category.modifiedDate,
                                  mail_color_category.catid,
                                  mail_color_category.autoid,
                                  resume.subject,
                                  resume.mailfrom
                                FROM
                                  mail_color_category
                                INNER JOIN 
                                  resume 
                                ON (mail_color_category.autoid = resume.autoid)
                                ORDER BY
                                   mail_color_category.modifiedDate ASC");
    $stmt->execute();
    $stmt->bind_result($username, $modifiedDate, $catid, $autoid, $subject, $mailfrom) or die($mysqli->error);
    $stmt->store_result();
    $dataArray = array();
    $mfrom = '';
    while ($stmt->fetch()) {
        $subj = explode('ref:', $subject ?? '');
        /* $dataArray[] = array(
            'mailfrom' => $mailfrom,
            'position' => strtoupper($subj[1]),
            'modifiedDate' => $modifiedDate,
            'username' => $username,
        );*/
        if (empty($mailfrom)) {
            $mfrom = $mailfrom;
            $dataArray[] = array(
                'mailfrom' => $mailfrom,
                'position' => strtoupper($subj[1]),
                'modifiedDate' => $modifiedDate,
                'category' => getMailColorCategoryById($mysqli, $catid),
                'username' => $username,
                'autoid' => $autoid
            );
        }
        if ($mailfrom != $mfrom) {
            $mfrom = $mailfrom;
            $dataArray[] = array(
                'mailfrom' => $mailfrom,
                'position' => strtoupper($subj[1]),
                'modifiedDate' => $modifiedDate,
                'category' => getMailColorCategoryById($mysqli, $catid),
                'username' => $username,
                'autoid' => $autoid
            );
        }
    }
    usort($dataArray, function ($a, $b) {
        return strtotime($b['modifiedDate']) - strtotime($a['modifiedDate']);
    });
    $stmt->free_result();
    return $dataArray;
}

function getDONOTUSEAttribute($mysqli, $candidateId)
{
    $doNotUseId = 180;
    $sql = $mysqli->prepare("SELECT otherLicenceId FROM candidate_otherlicence WHERE candidateId = ? AND otherLicenceId = ?") or die($mysqli->error);
    $sql->bind_param("si", $candidateId, $doNotUseId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->otherLicenceId;
    } else {
        return null;
    }
}

function getAttributeCodeById($mysqli, $otherLicenceId)
{
    $sql = $mysqli->prepare("SELECT otherLicenceType FROM otherlicence WHERE otherLicenceId = ?") or die($mysqli->error);
    $sql->bind_param("i", $otherLicenceId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->otherLicenceType;
    } else {
        return null;
    }
}

function getCandidateDocumentByDocTypeId($mysqli, $canId, $docTypeId)
{
    $sql = $mysqli->prepare("SELECT filePath FROM candidate_document WHERE candidateId = ? AND docTypeId = ?") or die($mysqli->error);
    $sql->bind_param("si", $canId, $docTypeId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->filePath;
    } else {
        return null;
    }
}

function validateMissionFoodsDocuments($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT filePath FROM candidate_document WHERE candidateId = ? AND docTypeId IN (76,77,78,79,80)") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return true;
    } else {
        return false;
    }
}

function validateCandidateDocumentByDocTypeId($mysqli, $canId, $docTypeId)
{
    $sql = $mysqli->prepare("SELECT filePath FROM candidate_document WHERE candidateId = ? AND docTypeId = ?") or die($mysqli->error);
    $sql->bind_param("si", $canId, $docTypeId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return true;
    } else {
        return false;
    }
}

function getCandidateDocumentDateByDocTypeId($mysqli, $canId, $docTypeId)
{
    $sql = $mysqli->prepare("SELECT createdDate FROM candidate_document WHERE candidateId = ? AND docTypeId = ?") or die($mysqli->error);
    $sql->bind_param("si", $canId, $docTypeId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->createdDate;
    } else {
        return null;
    }
}

function getCandidateDocumentTypeByDocTypeId($mysqli, $docTypeId)
{
    $sql = $mysqli->prepare("SELECT typeCode FROM document_type WHERE typeId = ?") or die($mysqli->error);
    $sql->bind_param("i", $docTypeId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->typeCode;
    } else {
        return null;
    }
}

function getShiftDataForDateRange()
{
    /*$sql = $mysqli->prepare("SELECT
                              shift.candidateId
                            FROM
                              shift
                              INNER JOIN candidate ON (shift.candidateId = candidate.candidateId)
                              INNER JOIN client ON (shift.clientId = client.clientId)
                            WHERE
                              shift.shiftDate BETWEEN ? AND ? AND
                              shift.clientId = 1
                            ORDER BY
                              shift.shiftDate ASC, candidate.candidateId
                                                        ")*/
}

function updateClientVisit($mysqli, $consultantId, $client_visit_date, $client_id, $notes, $issues, $follow_up_date, $id)
{
    $chk = $mysqli->prepare("SELECT * FROM client_visits WHERE id = ?") or die($mysqli->error);
    $chk->bind_param("i", $id) or die($mysqli->error);
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        $up = $mysqli->prepare("UPDATE client_visits SET consultant_id = ?, client_visit_date = ?, client_id = ?, notes = ?, issues = ?, follow_up_date = ?, updated_at = NOW() WHERE id = ?") or die($mysqli->error);
        $up->bind_param("isisssi", $consultantId, $client_visit_date, $client_id, $notes, $issues, $follow_up_date, $id) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'Client Visit Information Updated';
        } else {
            return $mysqli->error;
        }
    } else {
        $stmt = $mysqli->prepare("INSERT INTO client_visits(consultant_id,client_visit_date,client_id,notes,issues,follow_up_date,created_at) VALUES(?,?,?,?,?,?,NOW())") or die($mysqli->error);
        $stmt->bind_param("isisss", $consultantId, $client_visit_date, $client_id, $notes, $issues, $follow_up_date) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'Client Visit Information Added';
        } else {
            return $mysqli->error;
        }
    }
}

function displayClientVisits($mysqli)
{
    $sql = $mysqli->prepare("SELECT id,consultant_id,client_visit_date,client_id,notes,issues,follow_up_date,created_at,updated_at FROM client_visits") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($id, $consultant_id, $client_visit_date, $client_id, $notes, $issues, $follow_up_date, $created_at, $updated_at) or die($mysqli->error);
    $sql->store_result();
    $html = '';
    while ($sql->fetch()) {
        $html = $html . '<tr id="' . $id . '" data-cons-id="' . $consultant_id . '" data-visit-date="' . $client_visit_date . '" data-client-id="' . $client_id . '" data-notes="' . $notes . '" data-issues="' . $issues . '" data-followup="' . $follow_up_date . '"><td>' . getClientNameByClientId($mysqli, $client_id) . '</td><td>' . $client_visit_date . '</td><td>' . getConsultantName($mysqli, $consultant_id) . '</td><td>' . $notes . '</td><td>' . $issues . '</td><td>' . $follow_up_date . '</td><td>' . $created_at . '</td><td>' . $updated_at . '</td><td><button class="editClientVisitBtn btn btn-sm btn-info"><i class="fa fa-pencil"></i></button></td></tr>';
    }
    $sql->free_result();
    return $html;
}

function getClientVisitInformation($mysqli)
{
    $sql = $mysqli->prepare("SELECT consultant_id,client_visit_date,client_id,notes,issues,follow_up_date,created_at,updated_at FROM client_visits") or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($consultant_id, $client_visit_date, $client_id, $notes, $issues, $follow_up_date, $created_at, $updated_at) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('consultant_id' => $consultant_id, 'client_visit_date' => $client_visit_date, 'client_id' => $client_id, 'notes' => $notes, 'issues' => $issues, 'follow_up_date' => $follow_up_date, 'created_at' => $created_at, 'updated_at' => $updated_at);

    }
    return $dataArray;
}

function updateResumeShortList($mysqli, $auto_id, $jb_id, $msg_id, $account_name, $state_id, $region, $gender, $applied_date, $ref_code, $cons_id, $positions, $inbox_type)
{
    $current_date = date('Y-m-d H:i:s');
    if ($inbox_type == 'JOBBOARD') {
        $chk = $mysqli->prepare("SELECT * FROM resume_short_list WHERE jb_id = ?") or die($mysqli->error);
        $chk->bind_param("i", $jb_id) or die($mysqli->error);
    } else {
        $chk = $mysqli->prepare("SELECT * FROM resume_short_list WHERE auto_id = ?") or die($mysqli->error);
        $chk->bind_param("i", $auto_id) or die($mysqli->error);
    }
    $chk->execute();
    $chk->store_result();
    $chk->fetch();
    $num_of_rows = $chk->num_rows;
    $chk->free_result();
    if ($num_of_rows > 0) {
        if ($inbox_type == 'JOBBOARD') {
            $up = $mysqli->prepare("UPDATE resume_short_list SET  state_id = ?,region = ?, gender = ?, positions = ?, updated_at = ? WHERE jb_id = ?") or die($mysqli->error);
            $up->bind_param("iisssi", $state_id, $region, $gender, $positions,$current_date, $jb_id) or die($mysqli->error);
            updateJobBoardResumeStatus($mysqli, $jb_id, 1);
        } else {
            $up = $mysqli->prepare("UPDATE resume_short_list SET  state_id = ?,region = ?, gender = ?, positions = ?, updated_at = ? WHERE auto_id = ?") or die($mysqli->error);
            $up->bind_param("iisssi", $state_id, $region, $gender, $positions, $current_date,$auto_id) or die($mysqli->error);
            updateInboxResumeStatus($mysqli, $auto_id, 1);
        }
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'Resume short list updated';
        } else {
            return $mysqli->error;
        }
    } else {
        if ($inbox_type == 'JOBBOARD') {
            $stmt = $mysqli->prepare("INSERT INTO resume_short_list(jb_id,
                                                              msg_id,
                                                              account_name,
                                                              state_id,
                                                              region,
                                                              gender,
                                                              applied_date,
                                                              ref_code,
                                                              consultant_id,
                                                              positions,
                                                              created_at) 
                                                    VALUES(?,?,?,?,?,?,?,?,?,?,NOW())") or die($mysqli->error);
            $stmt->bind_param("issiisssis", $jb_id, $msg_id, $account_name, $state_id, $region, $gender, $applied_date, $ref_code, $cons_id, $positions) or die($mysqli->error);
            updateJobBoardResumeStatus($mysqli, $jb_id, 1);
        } else {
            $stmt = $mysqli->prepare("INSERT INTO resume_short_list(auto_id,
                                                              msg_id,
                                                              account_name,
                                                              state_id,
                                                              region,
                                                              gender,
                                                              applied_date,
                                                              ref_code,
                                                              consultant_id,
                                                              positions,
                                                              created_at) 
                                                    VALUES(?,?,?,?,?,?,?,?,?,?,NOW())") or die($mysqli->error);
            $stmt->bind_param("issiisssis", $auto_id, $msg_id, $account_name, $state_id, $region, $gender, $applied_date, $ref_code, $cons_id, $positions) or die($mysqli->error);
            updateInboxResumeStatus($mysqli, $auto_id, 1);
        }
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'resume added to short list';
        } else {
            return $mysqli->error;
        }
    }
}

function addAppointment($mysqli, $title, $startTime, $endTime, $consultantId)
{
    $ins = $mysqli->prepare("INSERT INTO events (title,start,end,consultant_id) VALUES(?,?,?,?)") or die($mysqli->error);
    $ins->bind_param("sssi", $title, $startTime, $endTime, $consultantId) or die ($mysqli->error);
    $ins->execute();
    $nrows = $ins->affected_rows;
    if ($nrows > 0) {
        return true;
    } else {
        return false;
    }
}

function candidateProfileCreationOnScreening($mysqli, $canId, $msgId, $fN, $lN, $fullName, $ph, $em, $rc, $consultantId, $autoId, $jbId, $reason_for_suitability, $ph_screen_time, $accountName, $loggedInUser)
{
    try {
        $sql = $mysqli->prepare("SELECT candidateId FROM candidate WHERE email = ?") or die($mysqli->error);
        $sql->bind_param("s", $em) or die($mysqli->error);
        $sql->execute();
        $sql->bind_result($candidateId);
        $sql->store_result();
        $sql->fetch();
        $num_of_rows = $sql->num_rows;
        $foundhow = '';
        if ($num_of_rows > 0) {
            $msg = base64_encode('Existing Candidate Cannot update');
            $canId = '';
        } else {
            $canId = getNewCandidateId($mysqli);
            if (!validateCandidateId($mysqli, $canId)) {
                $pin = null;
                try {
                    $pin = generateOnePIN($mysqli, getCandidateNoById($mysqli, $canId));
                } catch (Exception $e) {
                    $msg = 'PIN generateion Error ' . $e->getMessage();
                }
                try {
                    if ($autoId > 0) {
                        if (!empty($msgId)) {
                            insertResumeDocuments($mysqli, $canId, $msgId, $_SESSION['accountName']);
                            $foundhow = 'Seek';
                        }
                    } elseif ($jbId > 0) {
                        $foundhow = 'Jobboard';
                        $jbInfo = getJobBoardResumeInfoById($mysqli, $jbId);
                        $email = '';
                        foreach ($jbInfo as $info) {
                            $email = $info['email'];
                            $firstName = $info['first_name'];
                            $lastName = $info['last_name'];
                            $gender = $info['gender'];
                            $phone = $info['phone'];
                            $suburb = $info['suburb'];
                            $car = $info['own_car'];
                            $photo_path = $info['photo_path'];
                            $resume_path = $info['resume_path'];
                        }
                        if (!file_exists('./documents/' . $canId)) {
                            mkdir('./documents/' . $canId, 0777);

                        }
                        if (!empty($dob)) {
                            updateUsernamePassword($mysqli, $canId, $dob);
                        }
                        if (!empty($resume_path)) {
                            $newResumePath = str_replace('./jbresume/', './documents/' . $canId . '/', $resume_path);
                            $resumeFile = explode('./jbresume/', $resume_path ?? '');
                            copy($resume_path, $newResumePath);
                            updateCandidateDocs($mysqli, $canId, 24, $resumeFile[1], $newResumePath, '', '', '', '');
                        }
                        if (!empty($photo_path)) {
                            $newPhotoPath = str_replace('./jbresume/', './documents/' . $canId . '/', $photo_path);
                            $photoFile = explode('./jbresume/', $photo_path ?? '');
                            copy($photo_path, $newPhotoPath);
                            updateCandidateDocs($mysqli, $canId, 17, $photoFile[1], $newPhotoPath, '', '', '', '');
                        }
                    }
                } catch (Exception $e1) {
                    $msg = 'Caught exception ' . $e1->getMessage();
                }
                $phStartTime = $ph_screen_time . ':00';
                $time = strtotime($ph_screen_time);
                $endTime = date("Y-m-d H:i", strtotime('+30 minutes', $time));
                $phEndTime = $endTime . ':00';
                $currentDateTime = date('Y-m-d H:i:s');
                $stmt = $mysqli->prepare("INSERT INTO candidate(clockPin,candidateId, messageid, firstName, lastName,fullName, mobileNo, email,ref_code_applied, screenDate, consultantId,autoId,jb_id,reason_for_suitability,ph_screen_time,foundhow,updated_at,sex) VALUES(?,?,?,?,?,?,?,?,?,NOW(),?,?,?,?,?,?,?,?)") or die($mysqli->error);
                $stmt->bind_param("issssssssiiisssss", $pin, $canId, htmlentities($mysqli->real_escape_string($msgId)), $fN, $lN, $fullName, $ph, $em, $rc, $consultantId, $autoId, $jbId, $reason_for_suitability, $phStartTime, $foundhow, $currentDateTime,$gender) or die($mysqli->error);
                $stmt->execute();
                $nrows = $stmt->affected_rows;
                if ($nrows == '1') {
                    addDiaryNote($mysqli, 'diary', $fN, $lN, $canId, 104, 4, $consultantId, 'Candidate Profile Creation', date('Y-m-d H:i:s'), '', '', $reason_for_suitability, date('Y-m-d H:i:s'), '', '', '', $accountName);
                    addAppointment($mysqli, 'Phone Screening Appointment for candidate ' . getCandidateFullName($mysqli, $canId) . ' with ' . getConsultantName($mysqli, $consultantId), $phStartTime, $phEndTime, $consultantId);
                    $msg = 'Added';
                    if ($autoId > 0) {
                        updateInboxResumeStatus($mysqli, $autoId, 1);
                        addQuestionnaire($mysqli, $canId);
                        addSignature($mysqli, $canId);
                        updateUserActivityLog($mysqli, $loggedInUser, $_SERVER['REMOTE_ADDR'], 'CANDIDATE PROFILE', '', 'INBOX CANDIDATE CREATION', '');
                    } elseif ($jbId > 0) {
                        addQuestionnaire($mysqli, $canId);
                        addSignature($mysqli, $canId);
                        updateJobBoardResumeStatus($mysqli, $jbId, 1);
                        updateUserActivityLog($mysqli, $loggedInUser, $_SERVER['REMOTE_ADDR'], 'CANDIDATE PROFILE', '', 'JOB BOARD CANDIDATE CREATION', '');
                    }
                } else {
                    $msg = $mysqli->error;
                }
            }
        }
    } catch (Exception $e) {
        $msg = 'Caught exception : ' . $e->getMessage() . "\n";
    }
    if ($msg == 'Added') {
        return $canId;
    } else {
        return $msg;
    }
}

function getCandidateReasonForSuitability($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT reason_for_suitability FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->reason_for_suitability;
    } else {
        return null;
    }
}

function getRecruitmentJobDescription($mysqli)
{
    try {
        $sql = $mysqli->prepare("SELECT rec_job_id,client_id,position_id,job_description FROM recruitment_job_detail ORDER BY client_id ASC") or die($mysqli->error);
        $sql->execute();
        $sql->bind_result($rec_job_id, $client_id, $position_id, $job_description) or die($mysqli->error);
        $sql->store_result();
        $row = '';
        while ($sql->fetch()) {
            $row = $row . '<tr id="' . $rec_job_id . '" data-client-id="' . $client_id . '" data-pos-id="' . $position_id . '" data-jb-desc="' . strip_tags($job_description) . '"><td>' . getClientNameByClientId($mysqli, $client_id) . '</td><td>' . getCandidatePositionNameById($mysqli, $position_id) . '</td><td>' . $job_description . '</td><td><button name="editBtn" id="editBtn" class="editJBBtn btn btn-sm btn-info"><i class="fa fa-pencil"></i></button></td></tr>';
        }
        return $row;
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function getRecruitmentJobDescriptionByClientPosition($mysqli, $clientId, $positionId)
{
    try {
        $sql = $mysqli->prepare("SELECT job_description FROM recruitment_job_detail WHERE client_id = ? AND position_id = ?") or die($mysqli->error);
        $sql->bind_param("ii", $clientId, $positionId) or die($mysqli->error);
        $sql->execute();
        $obj = $sql->get_result()->fetch_object();
        if ($obj) {
            return $obj->job_description;
        } else {
            return null;
        }
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function addRecruitmentJobDescription($mysqli, $client_id, $position_id, $job_description)
{
    try {
        $sql = $mysqli->prepare("SELECT rec_job_id FROM recruitment_job_detail WHERE client_id = ? AND position_id = ?") or die($mysqli->error);
        $sql->bind_param("ii", $client_id, $position_id) or die($mysqli->error);
        $sql->execute();
        $sql->bind_result($rec_job_id);
        $sql->store_result();
        $sql->fetch();
        $num_of_rows = $sql->num_rows;
        if ($num_of_rows > 0) {
        } else {
            $ins = $mysqli->prepare("INSERT INTO recruitment_job_detail(client_id,position_id,job_description) VALUES(?,?,?)") or die($mysqli->error);
            $ins->bind_param("iis", $client_id, $position_id, $job_description) or die($mysqli->error);
            $ins->execute();
            $nrows = $ins->affected_rows;
            if ($nrows > 0) {
                return true;
            } else {
                return false;
            }
        }
    } catch (Exception $e) {
        echo $e->getMessage();
    }
}

function updateRecruitmentJobDescription($mysqli, $client_id, $position_id, $job_description)
{
    try {
        $up = $mysqli->prepare("UPDATE recruitment_job_detail SET job_description = ? WHERE client_id = ? AND position_id = ?") or die($mysqli->error);
        $up->bind_param("sii", $job_description, $client_id, $position_id) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'Job Description Updated';
        } else {
            return $mysqli->error;
        }
    } catch (Exception $e) {
        $e->getMessage();
    }
}

function getRecruitmentStatuses($mysqli)
{
    try {
        $sql = $mysqli->prepare("SELECT rec_status_id,rec_status FROM recruitment_status") or die($mysqli->error);
        $sql->execute();
        $sql->bind_result($rec_status_id, $rec_status) or die($mysqli->error);
        $sql->store_result();
        $dataArray = array();
        while ($sql->fetch()) {
            $dataArray[] = array('rec_status_id' => $rec_status_id, 'rec_status' => $rec_status);

        }
        return $dataArray;
    } catch (Exception $e) {
        $e->getMessage();
    }
}

function getRecruitmentStatusByCandidateId($mysqli, $canId)
{
    try {
        $sql = $mysqli->prepare("SELECT rec_status FROM candidate WHERE candidateId = ?") or die($mysqli->error);
        $sql->bind_param("s", $canId) or die($mysqli->error);
        $sql->execute();
        $obj = $sql->get_result()->fetch_object();
        if ($obj) {
            return $obj->rec_status;
        } else {
            return null;
        }
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function getRecruitmentStatusNameByCandidateId($mysqli, $rec_status_id)
{
    try {
        $sql = $mysqli->prepare("SELECT rec_status FROM recruitment_status WHERE rec_status_id = ?") or die($mysqli->error);
        $sql->bind_param("i", $rec_status_id) or die($mysqli->error);
        $sql->execute();
        $obj = $sql->get_result()->fetch_object();
        if ($obj) {
            return $obj->rec_status;
        } else {
            return null;
        }
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function updateRecruitmentStatusByCandidateId($mysqli, $recStatus, $canId)
{
    try {
        $up = $mysqli->prepare("UPDATE candidate SET rec_status = ? WHERE candidateId = ?") or die($mysqli->error);
        $up->bind_param("is", $recStatus, $canId) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'Recruitment Status Updated';
        } else {
            return $mysqli->error;
        }
    } catch (Exception $e) {
        $e->getMessage();
    }
}

function validateMissionQuizAnswer($mysqli, $question, $answer)
{
    try {
        $sql = $mysqli->prepare("SELECT answer FROM mission_food_induction_quiz WHERE question = ? AND answer = ?") or die($mysqli->error);
        $sql->bind_param("ss", $question, $answer) or die($mysqli->error);
        $sql->execute();
        $obj = $sql->get_result()->fetch_object();
        if ($obj) {
            return $obj->answer;
        } else {
            return null;
        }
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function validateMissionTrainingAnswer($mysqli, $question, $answer)
{
    try {
        $sql = $mysqli->prepare("SELECT answer FROM mission_training_verification WHERE question = ? AND answer = ?") or die($mysqli->error);
        $sql->bind_param("ss", $question, $answer) or die($mysqli->error);
        $sql->execute();
        $obj = $sql->get_result()->fetch_object();
        if ($obj) {
            return $obj->answer;
        } else {
            return null;
        }
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function checkEmployeeAllocationByClient($mysqli, $candidateId, $clientId)
{
    try {
        $sql = $mysqli->prepare("SELECT candidateId FROM employee_allocation WHERE candidateId = ? AND clientId = ?") or die($mysqli->error);
        $sql->bind_param("si", $candidateId, $clientId) or die($mysqli->error);
        $sql->execute();
        $obj = $sql->get_result()->fetch_object();
        if ($obj) {
            return $obj->candidateId;
        } else {
            return null;
        }
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function getTimeClockByClientForPeriod($mysqli, $conStatus, $startDate, $endDate, $clId)
{
    if ($clId == 'All') {
        $sql = $mysqli->prepare("SELECT 
                              timeclock.id,
                              timeclock.shiftId,
                              timeclock.candidateId,
                              timeclock.shiftDate,
                              timeclock.shiftDay,
                              timeclock.clientId,
                              timeclock.positionId,
                              timeclock.jobCode,
                              timeclock.checkIn,
                              timeclock.checkOut,
                              timeclock.supervisorCheckIn,
                              timeclock.payrollCheckIn,
                              timeclock.supervisorCheckOut,
                              timeclock.payrollCheckOut,
                              timeclock.workBreak,
                              timeclock.wrkhrs,
                              timeclock.supervicerId,
                              timeclock.supervisorCheck,
                              timeclock.comment,
                              shift.shiftStart AS rosterStart,
                              shift.shiftEnd AS rosterEnd
                            FROM
                              timeclock
                            LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)  
                            WHERE
                              timeclock.supervisorCheck = ?
                            AND  timeclock.shiftDate BETWEEN ? AND ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
        $sql->bind_param("sss", $conStatus, $startDate, $endDate) or die($mysqli->error);
    } else {
        $sql = $mysqli->prepare("SELECT 
                              timeclock.id,
                              timeclock.shiftId,
                              timeclock.candidateId,
                              timeclock.shiftDate,
                              timeclock.shiftDay,
                              timeclock.clientId,
                              timeclock.positionId,
                              timeclock.jobCode,
                              timeclock.checkIn,
                              timeclock.checkOut,
                              timeclock.supervisorCheckIn,
                              timeclock.payrollCheckIn,
                              timeclock.supervisorCheckOut,
                              timeclock.payrollCheckOut,
                              timeclock.workBreak,
                              timeclock.wrkhrs,
                              timeclock.supervicerId,
                              timeclock.supervisorCheck,
                              timeclock.comment,
                              shift.shiftStart AS rosterStart,
                              shift.shiftEnd AS rosterEnd
                            FROM
                              timeclock
                            LEFT OUTER JOIN shift ON (timeclock.shiftId = shift.shiftId)  
                            WHERE
                              timeclock.supervisorCheck = ?
                            AND  timeclock.shiftDate BETWEEN ? AND ? AND
                            timeclock.clientId = ? ORDER BY timeclock.candidateId,timeclock.shiftDate") or die($mysqli->error);
        $sql->bind_param("sssi", $conStatus, $startDate, $endDate, $clId) or die($mysqli->error);
    }
    $sql->execute();
    $sql->bind_result($id, $shiftId, $candidateId, $shiftDate, $shiftDay, $clientId, $positionId, $jobCode, $checkIn, $checkOut, $supervisorCheckIn, $payrollCheckIn, $supervisorCheckOut, $payrollCheckOut, $workBreak, $wrkhrs, $supervicerId, $supervisorCheck, $comment, $rosterStart, $rosterEnd) or die($mysqli->error);
    $sql->store_result();
    $jobArray = array();
    while ($sql->fetch()) {
        $jobArray[] = array('id' => $id, 'shiftId' => $shiftId, 'candidateId' => $candidateId, 'shiftDate' => $shiftDate, 'shiftDay' => $shiftDay, 'clientId' => $clientId, 'positionId' => $positionId, 'jobcode' => $jobCode, 'checkIn' => $checkIn, 'payrollCheckIn' => $payrollCheckIn, 'checkOut' => $checkOut, 'payrollCheckOut' => $payrollCheckOut, 'workBreak' => $workBreak, 'wrkhrs' => $wrkhrs, 'confirmedTime' => '', 'confirmCheckOutTime' => '', 'supervicerId' => $supervicerId, 'supervisorCheck' => $supervisorCheck, 'rosterStart' => $rosterStart, 'rosterEnd' => $rosterEnd, 'comment' => $comment, 'supervisorCheckIn' => $supervisorCheckIn, 'supervisorCheckOut' => $supervisorCheckOut, 'type' => 'C');
    }
    if ($conStatus != 'Y') {
        return getRosterTimesByClient($mysqli, $conStatus, $jobArray, $startDate, $endDate, $clId);
    } else {
        return $jobArray;
    }
}

function getRosterTimesByClient($mysqli, $conStatus, $jobArray, $startDate, $endDate, $clId)
{
    $shiftStatus = 'CONFIRMED';
    $sql = $mysqli->prepare("SELECT 
                          shift.shiftId,
                          shift.candidateId,
                          shift.shiftDate,
                          shift.shiftDay,
                          shift.clientId,
                          shift.positionId,
                          shift.departmentId,
                          shift.workBreak,
                          shift.wrkhrs,
                          shift.shiftStart,
                          shift.shiftEnd
                        FROM
                          shift
                        WHERE
                          shift.shiftDate BETWEEN ? AND ? AND 
                          shift.clientId = ?
                          AND
                          shift.shiftStatus = ? 
                          AND
                          shift.shiftId NOT IN (SELECT 
                                                  timeclock.shiftId
                                                FROM
                                                  timeclock
                                                WHERE
                                                  timeclock.supervisorCheck = ?
                                                AND  timeclock.shiftDate BETWEEN ? AND ? AND
                                                timeclock.clientId = ? ORDER BY timeclock.shiftId ASC)
                          ORDER BY shift.shiftId ASC");
    $sql->bind_param("ssissssi", $startDate, $endDate, $clId, $shiftStatus, $conStatus, $startDate, $endDate, $clId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($shiftId, $candidateId, $shiftDate, $shiftDay, $clientId, $positionId, $departmentId, $workBreak, $wrkhrs, $shiftStart, $shiftEnd) or die($mysqli->error);
    $sql->store_result();
    while ($sql->fetch()) {
        if (!validateTimeSheet($mysqli, $shiftId)) {
            $row = array('shiftId' => $shiftId, 'candidateId' => $candidateId, 'shiftDate' => $shiftDate, 'shiftDay' => $shiftDay, 'clientId' => $clientId, 'positionId' => $positionId, 'jobcode' => getJobCodeByClientPosition($mysqli, $clientId, $positionId, $departmentId), 'checkIn' => '', 'checkOut' => '', 'workBreak' => '', 'wrkhrs' => '', 'confirmedTime' => '', 'confirmCheckOutTime' => '', 'supervicerId' => '', 'supervisorCheck' => '', 'rosterStart' => $shiftStart, 'rosterEnd' => $shiftEnd, 'supervisorCheckIn' => '', 'supervisorCheckOut' => '', 'type' => 'R');
            $jobArray[] = $row;
        }
    }
    return $jobArray;
}

function getShiftCountByConsultant($mysqli, $conId, $startDate, $endDate, $shiftStatus)
{

    $stmt = $mysqli->prepare("SELECT shiftId FROM shift WHERE consultantId = ? AND CAST(shift.created_at AS DATE) BETWEEN ? AND ? AND shiftStatus = ?") or die($mysqli->error);
    $stmt->bind_param("isss", $conId, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    $stmt->execute();
    $stmt->store_result();
    $stmt->fetch();
    $shiftCount = $stmt->num_rows;
    $stmt->free_result();
    return $shiftCount;
}

function getShiftCount($mysqli, $startDate, $endDate)
{
    $stmt = $mysqli->prepare("SELECT DISTINCT
                              shift.consultantId
                            FROM
                              shift
                            WHERE
                            CAST(shift.created_at AS DATE)
                            BETWEEN ? AND ?");
    $stmt->bind_param("ss", $startDate, $endDate) or die($mysqli->error);
    $stmt->execute();
    $stmt->bind_result($consultantId);
    $stmt->store_result();
    while ($stmt->fetch()) {
        if ($consultantId > 0) {
            $dataArray[] = array('consultantName' => getConsultantName($mysqli, $consultantId), 'confirmedShiftCount' => getShiftCountByConsultant($mysqli, $consultantId, $startDate, $endDate, 'CONFIRMED'));
        }
    }
    return $dataArray;
}

function workHoursForWeekending($mysqli, $wkendDate)
{
    try {
        $workCoverAll = 131;
        $sql = $mysqli->prepare("SELECT 
                              timesheet_totals.emgTotal,
                              timesheet_totals.ordTotal,
                              timesheet_totals.aftTotal,
                              timesheet_totals.nightTotal,
                              timesheet_totals.rdoTotal,
                              timesheet_totals.satTotal,
                              timesheet_totals.sunTotal,
                              timesheet_totals.ovtTotal,
                              timesheet_totals.dblTotal,
                              timesheet_totals.hldTotal,
                              timesheet_totals.satovtTotal,
                              timesheet_totals.hol_total,
                              timesheet_totals.sunovtTotal,
                              timesheet_totals.povtTotal
                            FROM
                              timesheet_totals
                            WHERE
                              timesheet_totals.wkendDate = ?
                            AND 
                              timesheet_totals.clientId != ?") or die($mysqli->error);
        $sql->bind_param("si", $wkendDate, $workCoverAll) or die($mysqli->error);
        $sql->execute();
        $sql->store_result();
        $sql->bind_result($emgTotal,
            $ordTotal,
            $aftTotal,
            $nightTotal,
            $rdoTotal,
            $satTotal,
            $sunTotal,
            $ovtTotal,
            $dblTotal,
            $hldTotal,
            $satovtTotal,
            $hol_total,
            $sunovtTotal,
            $povtTotal) or die($mysqli->error);
        while ($sql->fetch()) {
            $emgSubTotal = $emgSubTotal + $emgTotal;
            $ordSubTotal = $ordSubTotal + $ordTotal;
            $aftSubTotal = $aftSubTotal + $aftTotal;
            $nightSubTotal = $nightSubTotal + $nightTotal;
            $rdoSubTotal = $rdoSubTotal + $rdoTotal;
            $satSubTotal = $satSubTotal + $satTotal;
            $sunSubTotal = $sunSubTotal + $sunTotal;
            $ovtSubTotal = $ovtSubTotal + $ovtTotal;
            $dblSubTotal = $dblSubTotal + $dblTotal;
            $hldSubTotal = $hldSubTotal + $hldTotal;
            $satovtSubTotal = $satovtSubTotal + $satovtTotal;
            $holSubTotal = $holSubTotal + $hol_total;
            $sunovtSubTotal = $sunovtSubTotal + $sunovtTotal;
            $povtSubTotal = $povtSubTotal + $povtTotal;
        }
        return $emgSubTotal + $ordSubTotal + $aftSubTotal + $nightSubTotal + $rdoSubTotal + $satSubTotal + $sunSubTotal + $ovtSubTotal + $dblSubTotal + $hldSubTotal + $satovtSubTotal + $holSubTotal + $holSubTotal + $sunovtSubTotal + $povtSubTotal;
    } catch (Exception $e) {
        $e->getMessage();
        return '';
    }
}

function updateJobCodeAward($mysqli, $awId, $jbCode)
{
    try {
        $up = $mysqli->prepare("UPDATE jobcode SET awardId = ? WHERE jobCode = ?") or die($mysqli->error);
        $up->bind_param("is", $awId, $jbCode) or die($mysqli->error);
        $up->execute();
        $nrow = $up->affected_rows;
        if ($nrow > 0) {
            return 'Job Award Updated';
        } else {
            return $mysqli->error;
        }
    } catch (Exception $e) {
        $e->getMessage();
    }
}

/*function validateMissionFoodsDocumentsCount($mysqli,$canId){
    try {
        if (in_array($jobCode, array(76,77,78,79,80)) {
        $sql = $mysqli->prepare("SELECT docTypeId FROM candidate_document WHERE candidateId = ?") or die($mysqli->error);
        $sql->bind_param("s",$canId) or die($mysqli->error);
        $sql->execute();

    }catch (Exception $e){
        return $e->getMessage();
    }
}*/
function getConfirmedShiftsNotCheckedInForReminder($mysqli)
{
    $confirmedStatus = 'CONFIRMED';
    $currentDate = date('Y-m-d');
    $sql = $mysqli->prepare('SELECT 
                              shift.shiftId,
                              shift.shiftStart,
                              shift.shiftDate
                            FROM
                              shift
                            WHERE
                              shift.shiftStatus = ? AND 
                              shift.shiftDate = ?');
    $sql->bind_param("ss", $confirmedStatus, $currentDate) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftStart, $shiftDate) or die($mysqli->error);
    $todaysShifts = array();
    while ($sql->fetch()) {
        if (!validateCheckIn($mysqli, $shiftId)) {
            $todaysShifts[] = array('shift_id' => $shiftId, 'shift_start' => $shiftStart, 'shift_date' => $shiftDate);
        }
    }
    $sql->free_result();
    return $todaysShifts;
}

function getConfirmedShiftsNotCheckedOutForReminder($mysqli)
{
    $confirmedStatus = 'CONFIRMED';
    $currentDate = date('Y-m-d');
    $sql = $mysqli->prepare('SELECT 
                              shift.shiftId,
                              shift.shiftEnd,
                              shift.shiftDate
                            FROM
                              shift
                            WHERE
                              shift.shiftStatus = ? AND 
                              shift.shiftDate = ?');
    $sql->bind_param("ss", $confirmedStatus, $currentDate) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftEnd, $shiftDate) or die($mysqli->error);
    $todaysShifts = array();
    while ($sql->fetch()) {
        if (!validateCheckOut($mysqli, $shiftId)) {
            $todaysShifts[] = array('shift_id' => $shiftId, 'shift_end' => $shiftEnd, 'shift_date' => $shiftDate);
        }
    }
    $sql->free_result();
    return $todaysShifts;
}

function getShiftInfoForReminderNotification($mysqli, $shId)
{
    $sql = $mysqli->prepare('SELECT 
                              shift.shiftId,
                              client.client,
                              shift.shiftDate,
                              shift.shiftStart,
                              shift.shiftEnd
                            FROM
                              shift
                              INNER JOIN client ON (shift.clientId = client.clientId)
                            WHERE
                              shift.shiftId = ?') or die($mysqli->error);
    $sql->bind_param("i", $shId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $client, $shiftDate, $shiftStart, $shiftEnd) or die($mysqli->error);
    $shiftInfo = array();
    while ($sql->fetch()) {
        $shiftInfo = array('shiftId' => $shiftId, 'client' => $client, 'shiftDate' => $shiftDate, 'shiftStart' => $shiftStart, 'shiftEnd' => $shiftEnd);
    }
    $sql->free_result();
    return $shiftInfo;
}

function getShiftDataByShiftIdForPushNotification($mysqli, $insertId)
{
    $sql = $mysqli->prepare("SELECT 
                              shift.shiftId,
                              shift.shiftDate,
                              candidate_position.positionName,
                              client.client,
                              shift.shiftStart,
                              shift.shiftEnd
                            FROM
                              shift
                              INNER JOIN client ON (shift.clientId = client.clientId)
                              INNER JOIN candidate_position ON (shift.positionId = candidate_position.positionid)
                            WHERE
                              shift.shiftId = ?") or die($mysqli->error);
    $sql->bind_param("i", $insertId) or die($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId,
        $shiftDate,
        $positionName,
        $client,
        $shiftStart,
        $shiftEnd) or die($mysqli->error);
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray = array(
            'shiftId' => $shiftId,
            'shiftDate' => $shiftDate,
            'positionName' => $positionName,
            'client' => $client,
            'shiftStart' => $shiftStart,
            'shiftEnd' => $shiftEnd);
    }
    return $dataArray;
}

function validateCheckIn($mysqli, $shiftId)
{
    $midnightTime = '00:00';
    $sql = $mysqli->prepare("SELECT timeclock.checkIn FROM timeclock WHERE timeclock.shiftId = ? AND timeclock.checkIn != ?") or die($mysqli->error);
    $sql->bind_param("is", $shiftId, $midnightTime) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($checkIn) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    $sql->free_result();
    if ($numRows > 0) {
        return true;
    } else {
        return false;
    }
}

function validateCheckOut($mysqli, $shiftId)
{
    $checkInTime = '00:00';
    $checkOutTime = '00:00';
    $sql = $mysqli->prepare("SELECT timeclock.checkIn FROM timeclock WHERE timeclock.shiftId = ? AND timeclock.checkIn != ? AND timeclock.checkOut != ?") or die($mysqli->error);
    $sql->bind_param("iss", $shiftId, $checkInTime, $checkOutTime) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($checkIn) or die($mysqli->error);
    $sql->store_result();
    $numRows = $sql->num_rows;
    $sql->free_result();
    if ($numRows > 0) {
        return true;
    } else {
        return false;
    }
}

function getAppVersionInfoByCandidateId($mysqli, $canId)
{
    $sql = $mysqli->prepare("SELECT candidate_id,mobile_os,os_version FROM app_version WHERE candidate_id = ?") or die($mysqli->error);
    $sql->bind_param("s", $canId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidate_id, $mobile_os, $os_version) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array(
            'can_id' => $candidate_id,
            'mobile_os' => $mobile_os,
            'os_version' => $os_version);
    }
    return $dataArray;
}

function openShiftsNotifer($mysqli)
{
    $shift_status = 'OPEN';
    $start_date = date('Y-m-d');
    $end_date = date('Y-m-d', strtotime($start_date . ' + 14 day'));
    $sql = $mysqli->prepare("SELECT 
                              client.client,
                              department.department,
                              candidate.firstName,
                              candidate.lastName,
                              candidate.mobileNo,
                              candidate.sex,
                              shift.candidateId,
                              shift.shiftDate,
                              shift.shiftDay,
                              shift.shiftStart,
                              shift.shiftEnd,
                              shift.shiftStatus
                            FROM
                              shift
                              INNER JOIN client ON (shift.clientId = client.clientId)
                              INNER JOIN employee_allocation ON (shift.candidateId = employee_allocation.candidateId)
                              INNER JOIN department ON (shift.departmentId = department.deptId)     
                              INNER JOIN candidate ON (shift.candidateId = candidate.candidateId)
                              AND (shift.clientId = employee_allocation.clientId)
                              AND (shift.stateId = employee_allocation.stateId)
                              AND (shift.departmentId = employee_allocation.deptId)
                            WHERE
                              shift.shiftStatus = ? AND 
                              shift.shiftDate BETWEEN ? AND ?
                            ORDER BY
                              client.client,
                              shift.shiftDate") or die($mysqli->error);
    $sql->bind_param("sss", $shift_status, $start_date, $end_date) or die ($mysqli->error);
    $sql->execute();
    $sql->store_result();
    $sql->bind_result($client,
        $department,
        $firstName,
        $lastName,
        $mobileNo,
        $sex,
        $candidateId,
        $shiftDate,
        $shiftDay,
        $shiftStart,
        $shiftEnd,
        $shiftStatus) or die($mysqli->error);
    $num_of_rows = $sql->num_rows;
    $dataArray = array();
    if ($num_of_rows > 0) {
        while ($sql->fetch()) {
            $dataArray[] = array(
                'client' => $client,
                'department' => $department,
                'first_name' => $firstName,
                'last_name' => $lastName,
                'mobile' => $mobileNo,
                'gender' => $sex,
                'candidate_id' => $candidateId,
                'shift_date' => $shiftDate,
                'shift_day' => $shiftDay,
                'shift_start' => $shiftStart,
                'shift_end' => $shiftEnd,
                'shift_status' => $shiftStatus
            );
        }
        return $dataArray;
    } else {
        return $dataArray;
    }
}

function saveAndDisplayReleaseShift($mysqli, $shDate, $shDay, $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $note, $shiftCopy, $startDate, $endDate, $dateRange, $positionId, $shStatus, $addressId, $consultantId, $user)
{
    try {
        if (getCandidateFirstNameByCandidateId($mysqli, $canid) == 'UNFILLED') {
            $shStatus = 'UNFILLED';
        } elseif ($shStatus == 'N/A') {
            $shStatus == 'N/A';
        } elseif ($shStatus == 'OPEN') {
            $shStatus = 'OPEN';
        } else {
            $shStatus = $shStatus;
        }

        if (getJobCodeByClientPosition($mysqli, $clid, $positionId, $did) == '') {
            createJobCode($mysqli, $clid, $positionId, $did, 0);
        }

        if ($shiftCopy == 'on') {
            $dateArray = explode(',', $dateRange ?? '');
            $insert = null;
            $cancelStatus = 'CANCELLED';
            foreach ($dateArray as $value) {
                $shiftChk = $mysqli->prepare("SELECT 
                                              shift.shiftDate,
                                              shift.shiftDay,
                                              shift.shiftStart,
                                              shift.shiftEnd
                                            FROM
                                              shift
                                            WHERE
                                              shift.shiftDate = ? AND 
                                              shift.candidateId = ? AND shift.shiftStatus != ?") or die($mysqli->error);
                $shiftChk->bind_param("sss", $value, $canid, $cancelStatus) or die($mysqli->error);
                $shiftChk->execute();
                $shiftChk->store_result();
                $shiftChk->bind_result($shiftDate, $shiftDay, $shiftStart, $shiftEnd) or die ($mysqli->error);
                $num_of_rows = $shiftChk->num_rows;
                $msgArray = array();
                if ($num_of_rows > 0) {
                    while ($shiftChk->fetch()) {
                        if (checkOverlap($value, $shiftStart, $shiftEnd, $StartTime, $EndTime)) {
                            $overlap = true;
                            break;
                        } else {
                            $overlap = false;
                            break;
                        }
                        if (checkUnavailability($mysqli, $canid, $value)) {
                            $unavailable = true;
                        } else {
                            $unavailable = false;
                        }
                    }
                    $wrkhrs = calculateHoursWorked($value, $StartTime, $EndTime, $workBreak);
                    if (!$overlap && !$unavailable) {
                        $insert = insertShift($mysqli, $value, dayOfWeek($value), $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $wrkhrs, $note, $positionId, $shStatus, $addressId, $consultantId, $user);
                    } else {
                        $status = 'shiftOverlap';
                        $msgArray[] = array('status' => $status);
                        $insert = json_encode($msgArray);
                    }
                } else {
                    if (!checkUnavailability($mysqli, $canid, $value)) {
                        $wrkhrs = calculateHoursWorked($value, $StartTime, $EndTime, $workBreak);
                        $insert = insertShift($mysqli, $value, dayOfWeek($value), $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $wrkhrs, $note, $positionId, $shStatus, $addressId, $consultantId, $user);
                    }
                }
            }
        } else {
            $cancelStatus = 'CANCELLED';
            $shiftChk = $mysqli->prepare("SELECT 
                                          shift.shiftDate,
                                          shift.shiftDay,
                                          shift.shiftStart,
                                          shift.shiftEnd
                                        FROM
                                          shift
                                        WHERE
                                          shift.shiftDate = ? AND 
                                          shift.candidateId = ? AND shift.shiftStatus != ?") or die($mysqli->error);
            $shiftChk->bind_param("sss", $shDate, $canid, $cancelStatus) or die($mysqli->error);
            $shiftChk->execute();
            $shiftChk->store_result();
            $shiftChk->bind_result($shiftDate, $shiftDay, $shiftStart, $shiftEnd) or die ($mysqli->error);
            $num_of_rows = $shiftChk->num_rows;
            $msgArray = array();
            if ($num_of_rows > 0) {
                while ($shiftChk->fetch()) {
                    if (checkOverlap($shDate, $shiftStart, $shiftEnd, $StartTime, $EndTime)) {
                        $overlap = true;
                        break;
                    } else {
                        $overlap = false;
                        break;
                    }
                }
                $wrkhrs = calculateHoursWorked($shDate, $StartTime, $EndTime, $workBreak);
                if (!$overlap) {
                    $insert = insertShift($mysqli, $shDate, $shDay, $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $wrkhrs, $note, $positionId, $shStatus, $addressId, $consultantId, $user);
                } else {
                    $status = 'shiftOverlap';
                    $msgArray[] = array('status' => $status);
                    $insert = json_encode($msgArray);
                }
            } else {
                if (!$overlap) {
                    $wrkhrs = calculateHoursWorked($shDate, $StartTime, $EndTime, $workBreak);
                    $insert = insertShift($mysqli, $shDate, $shDay, $clid, $stid, $did, $canid, $StartTime, $EndTime, $workBreak, $wrkhrs, $note, $positionId, $shStatus, $addressId, $consultantId, $user);
                } else {
                    $status = 'shiftOverlap';
                    $msgArray[] = array('status' => $status);
                    $insert = json_encode($msgArray);
                }
            }
        }
        return $insert;
    } catch (Exception $e) {
        echo 'Error save and diplay release shift ' . $e->getMessage();
    }
}

function validateReleasedShift($mysqli, $client_id, $state_id, $dept_id, $rel_date, $rel_start, $rel_end, $address_id)
{
    try {
        $sql_chk = $mysqli->prepare("SELECT rel_client_id 
                                    FROM 
                                        release_shift 
                                    WHERE rel_client_id = ? 
                                      AND rel_state_id = ? 
                                      AND rel_dept_id = ? 
                                      AND rel_shift_date = ? 
                                      AND rel_shift_start = ? 
                                      AND rel_shift_end = ?
                                      AND rel_address_id = ?") or die($mysqli->error);
        $sql_chk->bind_param("iiisssi", $client_id, $state_id, $dept_id, $rel_date, $rel_start, $rel_end, $address_id) or die($mysqli->error);
        $sql_chk->execute();
        $sql_chk->bind_result($client_id);
        $sql_chk->store_result();
        $sql_chk->fetch();
        $num_of_rows = $sql_chk->num_rows;
        if ($num_of_rows > 0) {
            return true;
        } else {
            return false;
        }
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function saveReleasedShift($mysqli, $client_id, $state_id, $dept_id, $position_id, $rel_date, $rel_start, $rel_end, $address_id, $candidates)
{
    try {
        $rel_status = 'RELEASED';
        $rel_shift_break = 30;
        $rel_shift_day = dayOfWeek($rel_date);
        $sql_ins = $mysqli->prepare("INSERT INTO 
                                      release_shift
                                    (rel_shift_date,
                                     rel_shift_day,
                                     rel_client_id,
                                     rel_state_id,
                                     rel_dept_id,
                                     rel_position_id,
                                     rel_shift_start,
                                     rel_shift_end,
                                     rel_shift_break,
                                     rel_shift_status,
                                     rel_address_id,
                                     candidates)
                                     VALUES(?,?,?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
        $sql_ins->bind_param("ssiiiissssis", $rel_date, $rel_shift_day, $client_id, $state_id, $dept_id, $position_id, $rel_start, $rel_end, $rel_shift_break, $rel_status, $address_id, $candidates) or die($mysqli->error);
        $sql_ins->execute();
        $nrows = $sql_ins->affected_rows;
        if ($nrows == '1') {
            return $sql_ins->insert_id;
        } else {
            return 0;
        }
    } catch (Exception $e) {
        $e->getmessage();
    }
}

function getReleasedShifts($mysqli)
{
    try {
        $relStatus = 'RELEASED';
        $sql = $mysqli->prepare("SELECT 
                                  release_shift.rel_shift_id,
                                  release_shift.release_time,
                                  release_shift.rel_shift_date,
                                  release_shift.rel_shift_day,
                                  release_shift.rel_client_id,
                                  release_shift.rel_state_id,
                                  release_shift.rel_dept_id,
                                  release_shift.rel_position_id,
                                  release_shift.rel_shift_start,
                                  release_shift.rel_shift_end,
                                  release_shift.rel_shift_break,
                                  release_shift.rel_shift_status,
                                  client.client,
                                  states.state,
                                  department.department,
                                  candidate_position.positionName
                                FROM
                                  release_shift
                                  INNER JOIN client ON (release_shift.rel_client_id = client.clientId)
                                  INNER JOIN states ON (release_shift.rel_state_id = states.stateId)
                                  INNER JOIN department ON (release_shift.rel_dept_id = department.deptId)
                                  INNER JOIN candidate_position ON (release_shift.rel_position_id = candidate_position.positionid)
                                WHERE
                                  release_shift.rel_shift_status = ?   
                                ORDER BY client.client") or die($mysqli->error);
        $sql->bind_param("s", $relStatus) or die($mysqli->error);
        $sql->execute();
        $sql->bind_result($rel_shift_id,
            $release_time,
            $rel_shift_date,
            $rel_shift_day,
            $rel_client_id,
            $rel_state_id,
            $rel_dept_id,
            $rel_position_id,
            $rel_shift_start,
            $rel_shift_end,
            $rel_shift_break,
            $rel_shift_status,
            $client,
            $state,
            $department,
            $positionName);
        $sql->store_result();
        $shiftArray = array();
        while ($sql->fetch()) {
            $shiftArray[] = array('rel_shift_id' => $rel_shift_id,
                'release_time' => $release_time,
                'rel_shift_date' => $rel_shift_date,
                'rel_shift_day' => $rel_shift_day,
                'rel_client_id' => $rel_client_id,
                'rel_state_id' => $rel_state_id,
                'rel_dept_id' => $rel_dept_id,
                'rel_position_id' => $rel_position_id,
                'rel_shift_start' => $rel_shift_start,
                'rel_shift_end' => $rel_shift_end,
                'rel_shift_break' => $rel_shift_break,
                'rel_shift_status' => $rel_shift_status,
                'client' => $client,
                'state' => $state,
                'department' => $department,
                'positionName' => $positionName);
        }
        return $shiftArray;
    } catch (Exception $e) {
        $e->getMessage();
    }
}

function displayShiftReleasedAcceptance($mysqli, $rel_shift_id)
{
    $acceptStatus = 'PENDING APPROVAL';
    try {
        $sql = $mysqli->prepare("SELECT 
                                  release_shift_log.rel_shift_status,
                                  release_shift_log.candidate_id,
                                  candidate.firstName,
                                  candidate.lastName,
                                  candidate.mobileNo
                                FROM
                                  release_shift_log
                                  INNER JOIN candidate ON (release_shift_log.candidate_id = candidate.candidateId)
                                  AND (release_shift_log.candidate_id = candidate.candidateId)
                                WHERE
                                  release_shift_log.rel_shift_id = ? AND 
                                  release_shift_log.rel_shift_status = ?") or die($mysqli->error);
        $sql->bind_param("is", $rel_shift_id, $acceptStatus) or die($mysqli->error);
        $sql->execute();
        $sql->bind_result($rel_shift_status, $candidate_id, $firstName, $lastName, $mobileNo) or die($mysqli->error);
        $sql->store_result();
        $html = '';
        while ($sql->fetch()) {
            $html = $html . $rel_shift_status . '(<a href="https://labourbank.com.au/candidateMain.php?canId=' . base64_encode($candidate_id) . '" target="_blank">' . $candidate_id . '</a> ' . $firstName . ' ' . $lastName . ' ' . $mobileNo . ')' . '<span class="relCanId" data-candidateid="' . $candidate_id . '"></span>';
        }
        return $html;
    } catch (Exception $e) {
        $e->getMessage();
    }
}

function validateReleaseAcceptance($mysqli, $rel_shift_id)
{
    try {
        $sql = $mysqli->prepare("SELECT 
                                  release_shift.rel_shift_status
                                FROM
                                  release_shift
                                WHERE
                                  release_shift.rel_shift_id = ?") or die($mysqli->error);
        $sql->bind_param("i", $rel_shift_id) or die($mysqli->error);
        $sql->execute();
        $sql->bind_result($rel_shift_status) or die($mysqli->error);
        $sql->store_result();
        $status = '';
        while ($sql->fetch()) {
            $status = $status . $rel_shift_status;
        }
        if ($status == 'CONFIRMED') {
            return true;
        } else {
            return false;
        }
    } catch (Exception $e) {
        $e->getMessage();
    }
}

function createReleasedShiftOnRoster($mysqli, $rel_shift_id, $candidate_id, $action, $user)
{
    try {
        $sql = $mysqli->prepare("SELECT 
                                  release_shift.rel_shift_id,
                                  release_shift.rel_shift_date,
                                  release_shift.rel_shift_day,
                                  release_shift.rel_client_id,
                                  release_shift.rel_state_id,
                                  release_shift.rel_dept_id,
                                  release_shift.rel_position_id,
                                  release_shift.rel_shift_start,
                                  release_shift.rel_shift_end,
                                  release_shift.rel_shift_break,
                                  release_shift.rel_shift_status,
                                  release_shift.rel_address_id
                                FROM
                                  release_shift
                                WHERE
                                  release_shift.rel_shift_id = ?") or die($mysqli->error);
        $sql->bind_param("i", $rel_shift_id) or die($mysqli->error);
        $sql->execute();
        $sql->store_result();
        $sql->bind_result($rel_shift_id,
            $rel_shift_date,
            $rel_shift_day,
            $rel_client_id,
            $rel_state_id,
            $rel_dept_id,
            $rel_position_id,
            $rel_shift_start,
            $rel_shift_end,
            $rel_shift_break,
            $rel_shift_status,
            $rel_address_id) or die($mysqli->error);
        $sql->fetch();
        $result = saveAndDisplayShift($mysqli, $rel_shift_date, $rel_shift_day, $rel_client_id, $rel_state_id, $rel_dept_id, $candidate_id, $rel_shift_start, $rel_shift_end, $rel_shift_break, 'RELEASE-' . $rel_shift_id, '', '', '', '', $rel_position_id, $action, $rel_address_id, getConsultantId($mysqli, $user), $user);
        $jsonDecode = json_decode($result, true);
        if ($jsonDecode[0]['status'] == 'shiftAdded') {
            $sql->free_result();
            $rel_status = 'CONFIRMED';
            $update = $mysqli->prepare("UPDATE release_shift SET rel_shift_status = ? WHERE rel_shift_id = ?") or die($mysqli->error);
            $update->bind_param("si", $rel_status, $rel_shift_id) or die($mysqli->error);
            if ($update->execute()) {
                /*$del_rel_shift = $mysqli->prepare("DELETE FROM release_shift WHERE rel_shift_id = ?")or die($mysqli->error);
                    $del_rel_shift->bind_param("i",$rel_shift_id)or die($mysqli->error);


                    $del_rel_shift_log = $mysqli->prepare("DELETE FROM release_shift_log WHERE rel_shift_id = ?")or die($mysqli->error);
                    $del_rel_shift_log->bind_param("i",$rel_shift_id)or die($mysqli->error);


                    if($del_rel_shift->execute() && $del_rel_shift_log->execute()){
                        $msgArray[] = array('status' => 'shiftRemoved');
                    }else {
                        $msgArray[] = array('status' => $mysqli->error);
                    }*/
                $nrows = $update->affected_rows;
                $status = 'updated';
                $msgArray[] = array('status' => $status);
            } else {
                $status = $mysqli->error;
                $msgArray[] = array('status' => $status);
            }
        }
        return $result;
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function getAssignedEmployeesList($mysqli, $clientId, $stateId, $deptId, $positionId)
{
    $status = 1;
    $sql = $mysqli->prepare("SELECT 
                                  employee_allocation.candidateId,
                                  candidate.sex,
                                  candidate.firstName,
                                  candidate.lastName,
                                  candidate.mobileNo
                                FROM
                                  employee_allocation
                                  INNER JOIN candidate ON (employee_allocation.candidateId = candidate.candidateId)
                                  INNER JOIN employee_positions ON (employee_allocation.candidateId = employee_positions.candidateId)
                                WHERE
                                  employee_allocation.clientId = ? AND
                                  employee_allocation.stateId = ? AND
                                  employee_allocation.deptId = ? AND
                                  employee_positions.positionid = ? AND 
                                  employee_allocation.status = ?
                                  ORDER BY candidate.firstName ASC") or die($mysqli->error);
    $sql->bind_param("iiiii", $clientId, $stateId, $deptId, $positionId, $status) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId, $sex, $firstName, $lastName, $mobileNo) or die($mysqli->error);
    $sql->store_result();
    $nrows = $sql->num_rows;
    $employeesList = array();
    if ($nrows > 0) {
        while ($sql->fetch()) {
            $employeesList[] = array('candidate_id' => $candidateId, 'gender' => $sex, 'name' => $firstName . ' ' . $lastName, 'mobileNo' => $mobileNo);
        }
    }
    return $employeesList;
}

function validateShiftOverlap($mysqli, $canId, $rel_date, $rel_start, $rel_end)
{
    $cancelStatus = 'CANCELLED';
    $sql = $mysqli->prepare("SELECT shiftStart, shiftEnd FROM shift WHERE candidateId = ? AND shiftDate = ? AND shiftStatus != ?") or die($mysqli->error);
    $sql->bind_param("sss", $canId, $rel_date, $cancelStatus) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($shiftStart, $shiftEnd) or die($mysqli->error);
    $sql->store_result();
    $nrows = $sql->num_rows;
    if ($nrows > 0) {
        return true;
    } else {
        while ($sql->fetch()) {
            if (checkOverlap($rel_date, $shiftStart, $shiftEnd, $rel_start, $rel_end)) {
                $overlap = true;
                break;
            } else {
                $overlap = false;
                break;
            }
        }
        if ($overlap) {
            return true;
        } else {
            return false;
        }
    }
}

function removeReleasedShift($mysqli, $rel_shift_id)
{
    try {
        $msgArray = array();
        $rel_shift_status = 'REMOVED';
        $update = $mysqli->prepare("UPDATE release_shift SET rel_shift_status = ? WHERE rel_shift_id = ?") or die($mysqli->error);
        $update->bind_param("si", $rel_shift_status, $rel_shift_id) or die($mysqli->error);
        $update->execute();
        $nrow = $update->affected_rows;
        if ($nrow > 0) {
            $msgArray[] = array('status' => 'shiftRemoved');
        } else {
            $msgArray[] = array('status' => $mysqli->error);
        }
        return json_encode($msgArray);
    } catch (Exception $e) {
        return json_encode($e->getMessage());
    }
}

function inputValidation($data)
{
    $data = trim($data);
    $data = stripslashes($data);
    $data = htmlspecialchars($data);
    return $data;
}

function saveReferenceCheck($mysqli, $candidateId, $consultantId, $referenceName, $referenceEmail, $companyName, $positionHeld, $phoneNumber, $q1, $q2, $q3, $q4, $q5, $q6, $q7, $q8, $q9, $q10, $q11, $q12)
{
    $stmt = $mysqli->prepare("INSERT INTO reference_check(
                            candidateId,
                            consultantId,
                            referenceName,
                            referenceEmail,
                            companyName,
                            positionHeld,
                            phoneNumber,
                            q1,
                            q2,
                            q3,
                            q4,
                            q5,
                            q6,
                            q7,
                            q8,
                            q9,
                            q10,
                            q11,
                            q12) 
                            VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
    $stmt->bind_param("sisssssssssssssssss", $candidateId, $consultantId, $referenceName, $referenceEmail, $companyName, $positionHeld, $phoneNumber, $q1, $q2, $q3, $q4, $q5, $q6, $q7, $q8, $q9, $q10, $q11, $q12) or die($mysqli->error);
    $stmt->execute();
    $nrows = $stmt->affected_rows;
    if ($nrows == '1') {
        return 'added';
    } else {
        return 'error inserting' . $mysqli->error;
    }
}

function getPayruleAwardByJobCode($mysqli, $jobCode)
{
    $sql = $mysqli->prepare("SELECT payAwrdDesc FROM payrule WHERE jobCode = ?") or die($mysqli->error);
    $sql->bind_param("s", $jobCode) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        return $obj->payAwrdDesc;
    } else {
        return null;
    }
}

function getReleasedConfirmedShiftReportData($mysqli)
{
    $noteStatus = "RELEASE";
    $shiftStatus = "CONFIRMED";
    $sql = $mysqli->prepare("SELECT 
                              candidate.candidateId,
                              candidate.firstName,
                              candidate.lastName,
                              client.client,
                              states.state,
                              department.department,
                              shift.shiftDate,
                              shift.shiftDay,
                              shift.shiftStart,
                              shift.shiftEnd,
                              shift.workBreak,
                              shift.wrkhrs,
                              shift.shiftStatus,
                              consultant.name
                            FROM
                              shift
                              LEFT OUTER JOIN candidate ON (shift.candidateId = candidate.candidateId)
                              LEFT OUTER JOIN client ON (shift.clientId = client.clientId)
                              LEFT OUTER JOIN states ON (shift.stateId = states.stateId)
                              LEFT OUTER JOIN department ON (shift.departmentId = department.deptId)
                              LEFT OUTER JOIN consultant ON (shift.consultantId = consultant.consultantId)
                            WHERE
                              shift.shiftNote LIKE '%{$noteStatus}%' AND 
                              shift.shiftStatus = ?") or die($mysqli->error);
    $sql->bind_param("s", $shiftStatus) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($candidateId, $firstName, $lastName, $client, $state, $department, $shiftDate, $shiftDay, $shiftStart, $shiftEnd, $workBreak, $wrkhrs, $shiftStatus, $name) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('candidateId' => $candidateId,
            'candidateName' => $firstName . ' ' . $lastName,
            'client' => $client,
            'state' => $state,
            'department' => $department,
            'shiftDate' => $shiftDate,
            'shiftDay' => $shiftDay,
            'shiftStart' => $shiftStart,
            'shiftEnd' => $shiftEnd,
            'workBreak' => $workBreak,
            'wrkhrs' => $wrkhrs,
            'shiftStatus' => $shiftStatus,
            'consultantName' => $name);
    }
    return $dataArray;
}

function update_payroll_clock_in_out_log($mysqli, $shift_id, $log_desc)
{
    try {
        $stmt = $mysqli->prepare("INSERT INTO payroll_clock_in_out_log(
                            shift_id,
                            log_desc) 
                            VALUES(?,?)") or die($mysqli->error);
        $stmt->bind_param("is", $shift_id, $log_desc) or die($mysqli->error);
        $stmt->execute();
        $nrows = $stmt->affected_rows;
        if ($nrows == '1') {
            return 'added';
        } else {
            return 'error inserting' . $mysqli->error;
        }
    } catch (Exception $e) {
        $e->getMessage();
    }
}


function updateTimesheetComments($mysqli, $shift_id, $comments)
{
    try {
        if (empty($comments) || $comments == '') {
            $comments = '';
        }
        $update = $mysqli->prepare("UPDATE timesheet SET comments = ? WHERE shiftId = ?") or die($mysqli->error);
        $update->bind_param("si", $comments, $shift_id) or die($mysqli->error);
        $update->execute();
        $nrow = $update->affected_rows;
        if ($nrow > 0) {
            return 'added';
        } else {
            return 'error' . $nrow . $mysqli->error;
        }
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function updatePayrollCheckComments($mysqli, $shift_id, $comments)
{
    try {
        if (empty($comments) || $comments == '') {
            $comments = '';
        }
        $update = $mysqli->prepare("UPDATE shift SET comments = ? WHERE shiftId = ?") or die($mysqli->error);
        $update->bind_param("si", $comments, $shift_id) or die($mysqli->error);
        $update->execute();
        $nrow = $update->affected_rows;
        if ($nrow > 0) {
            return 'added';
        } else {
            return 'error' . $nrow . $mysqli->error;
        }
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function getPayrollCheckData($mysqli, $clientid, $positionid, $deptid, $startDate, $endDate, $canId, $loggedInUserType, $timesheetStatus)
{
    $shiftStatus = 'CONFIRMED';
    $accountsEdit = 'Y';
    if (empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                      shift.shiftId,
                                      shift.shiftDate,
                                      shift.shiftDay,
                                      shift.candidateId,
                                      shift.clientId,
                                      shift.positionId,
                                      shift.departmentId,
                                      shift.shiftStart,
                                      shift.shiftEnd,
                                      shift.workBreak,
                                      shift.wrkhrs,
                                      shift.comments,
                                      timeclock.checkIn,
                                      timeclock.checkOut,
                                      timeclock.supervisorCheckIn,
                                      timeclock.supervisorCheckOut,
                                      timeclock.workBreak AS supervisorBreak,
                                      timeclock.comment AS timeclockComments,
                                      timesheet.wrkHrs AS timesheetWorkHours
                                    FROM
                                      shift
                                    LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                    LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                    WHERE
                                      shift.clientId = ? AND 
                                      shift.positionId = ? AND
                                      shift.departmentId = ? AND
                                      shift.shiftDate BETWEEN ? AND ? AND
                                      shift.shiftStatus = ?  
                                    ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iiisss", $clientid, $positionid, $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                      shift.shiftId,
                                      shift.shiftDate,
                                      shift.shiftDay,
                                      shift.candidateId,
                                      shift.clientId,
                                      shift.positionId,
                                      shift.departmentId,
                                      shift.shiftStart,
                                      shift.shiftEnd,
                                      shift.workBreak,
                                      shift.wrkhrs,
                                      shift.comments,
                                      timeclock.checkIn,
                                      timeclock.checkOut,
                                      timeclock.supervisorCheckIn,
                                      timeclock.supervisorCheckOut,
                                      timeclock.workBreak AS supervisorBreak,
                                      timeclock.comment AS timeclockComments,
                                      timesheet.wrkHrs AS timesheetWorkHours
                                    FROM
                                      shift
                                    INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                    INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                    WHERE
                                      shift.clientId = ? AND 
                                      shift.positionId = ? AND
                                      shift.departmentId = ? AND
                                      shift.shiftDate BETWEEN ? AND ? AND
                                      shift.shiftStatus = ? AND
                                      timesheet.accountsEdit = ?  
                                    ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iiissss", $clientid, $positionid, $deptid, $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                      shift.shiftId,
                                      shift.shiftDate,
                                      shift.shiftDay,
                                      shift.candidateId,
                                      shift.clientId,
                                      shift.positionId,
                                      shift.departmentId,
                                      shift.shiftStart,
                                      shift.shiftEnd,
                                      shift.workBreak,
                                      shift.wrkhrs,
                                      shift.comments,
                                      timeclock.checkIn,
                                      timeclock.checkOut,
                                      timeclock.supervisorCheckIn,
                                      timeclock.supervisorCheckOut,
                                      timeclock.workBreak AS supervisorBreak,
                                      timeclock.comment AS timeclockComments,
                                      '' AS timesheetWorkHours
                                    FROM
                                      shift
                                    LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                    WHERE
                                      shift.clientId = ? AND 
                                      shift.positionId = ? AND
                                      shift.departmentId = ? AND
                                      shift.shiftDate BETWEEN ? AND ? AND
                                      shift.shiftStatus = ? AND
                                    NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                    ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iiisss", $clientid, $positionid, $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isss", $clientid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  timesheet.accountsEdit = ?   
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("issss", $clientid, $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isss", $clientid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisss", $positionid, $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $positionid, $deptid, $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisss", $positionid, $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isss", $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("issss", $deptid, $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isss", $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("sss", $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("ssss", $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("sss", $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisss", $clientid, $positionid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $clientid, $positionid, $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisss", $clientid, $positionid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisss", $clientid, $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $clientid, $deptid, $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisss", $clientid, $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("sss", $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("ssss", $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("sss", $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                  shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iiissss", $clientid, $positionid, $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                  shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iiisssss", $clientid, $positionid, $deptid, $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                  shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iiissss", $clientid, $positionid, $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("issss", $clientid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isssss", $clientid, $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("issss", $clientid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $positionid, $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisssss", $positionid, $deptid, $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $positionid, $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND 
                                  shift.candidateId = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("issss", $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND 
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isssss", $deptid, $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND 
                                  shift.candidateId = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("issss", $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("ssss", $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("sssss", $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                 NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("ssss", $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $clientid, $positionid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisssss", $clientid, $positionid, $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $clientid, $positionid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND 
                                  shift.candidateId = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $clientid, $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND 
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisssss", $clientid, $deptid, $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND 
                                  shift.candidateId = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $clientid, $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("ssss", $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("sssss", $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("ssss", $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    }

    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftDate, $shiftDay, $candidateId, $clientId, $positionId, $departmentId, $shiftStart, $shiftEnd, $workBreak, $wrkhrs, $comments, $checkIn, $checkOut, $supervisorCheckIn,
        $supervisorCheckOut, $supervisorBreak, $timeclockComments, $timesheetWorkHours) or die($mysqli->error);
    $count = 0;
    $row = '';
    while ($sql->fetch()) {
        $row = $row . '<tr><td>
                                <input type="hidden" name="shiftId[]" value="' . $shiftId . '" class="shid"/>
                                <input type="hidden" name="shiftDay[]" value="' . $shiftDay . '" class="shday"/>
                                <input type="hidden" name="shiftDate[]" value="' . $shiftDate . '" class="shdate"/>' . $shiftDay . ' ' . $shiftDate . '
                           </td>
                           <td>
                           <input type="hidden" name="candidateId[]" value="' . $candidateId . '" class="canid">' . $candidateId . ' <a href="candidateMain.php?canId=' . base64_encode($candidateId) . '" target="_blank">' . getCandidateFirstNameByCandidateId($mysqli, $candidateId) . ' ' . getCandidateLastNameByCandidateId($mysqli, $candidateId) . '</a>(' . getNickNameById($mysqli, $candidateId) . ')';
        if (displayNoPhoneIndicator($mysqli, $candidateId)) {
            $row = $row . '<i style="color:red" class="glyphicon glyphicon-phone"></i><i style="color:red" class="fa fa-ban"></i>';
        }
        $row = $row . '</td>';
        if ($loggedInUserType == 'ACCOUNTS') {
            $row = $row . '<td><label class="select"><select name="clid[]" class="clid">' . getClientListForDropDown($mysqli, $clientId) . '</select></label></td>';
            $row = $row . '<td><label class="select"><select name="posid[]" id="posid' . $count . '" class="posid">' . getClientPositionsListForTimesheetCheck($mysqli, $clientId, $positionId) . '</select></label></td>';
            $row = $row . '<td><label class="select"><select name="deptId[]" id="deptId' . $count . '" class="deptId">' . getClientDepartmentsListDropdown($mysqli, $clientId, $departmentId) . '</select></label></td>';
        } elseif ($loggedInUserType == 'CONSULTANT') {
            $row = $row . '<td><label class="select"><select name="clid[]" class="clid" style="width: 100px;">' . getClientListForDropDown($mysqli, $clientId) . '</select></label></td>';
            $row = $row . '<td><label class="select"><select name="posid[]" id="posid' . $count . '" class="posid" style="width: 100px;">' . getClientPositionsListForTimesheetCheck($mysqli, $clientId, $positionId) . '</select></label></td>';
            $row = $row . '<td><label class="select"><select name="deptId[]" id="deptId' . $count . '" class="deptId" style="width: 100px;">' . getClientDepartmentsListDropdown($mysqli, $clientId, $departmentId) . '</select></label></td>';
        }
        $row = $row . '<td class="jbd"><input type="hidden" name="jobCode[]" class="jbcode" value="' . getJobCodeByClientPosition($mysqli, $clientId, $positionId, $departmentId) . '"/><span class="jbc">' . getJobCodeByClientPosition($mysqli, $clientId, $positionId, $departmentId) . '</span></td>';
        $row = $row . '<td><input type="hidden" name="rosterStart[]" class="rosterStart" value="' . $shiftStart . '" size="5"/>' . $shiftStart . '</td>';
        $row = $row . '<td><input type="hidden" name="rosterEnd[]" class="rosterEnd" value="' . $shiftEnd . '" size="5"/>' . $shiftEnd . '</td>';
        if (empty($workBreak)) {
            $workBreak = 0;
        }
        $row = $row . '<td style="color: blue; font-weight:bold; text-align:center">' . calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, $workBreak) . '</td>';
        if ($loggedInUserType == 'ACCOUNTS') {
            $row = $row . '<td><input type="checkbox" name="pick_roster_time[]" class="pick_roster_time"/></td>';
        } elseif ($loggedInUserType == 'CONSULTANT') {
            $row = $row . '<td></td>';
        }
        $row = $row . '<td><input type="hidden" name="checkIn[]" class="checkIn" value="' . $checkIn . '" size="5"/>' . $checkIn . '</td>';
        $row = $row . '<td><input type="hidden" name="checkOut[]" class="checkOut" value="' . $checkOut . '" size="5"/>' . $checkOut . '</td>';
        if (empty($supervisorBreak)) {
            $supervisorBreak = 0;
        }
        $row = $row . '<td style="color: red; font-weight:bold; text-align:center">' . calculateHoursWorked($shiftDate, $checkIn, $checkOut, $supervisorBreak) . '</td>';
        if ($loggedInUserType == 'ACCOUNTS') {
            $row = $row . '<td><input type="checkbox" name="pick_check_in_out_time[]" class="pick_check_in_out_time"/></td>';
        } else {
            $row = $row . '<td></td>';
        }
        $row = $row . '<td><input type="hidden" name="supervisorCheckIn[]" class="supervisorCheckIn" value="' . $supervisorCheckIn . '" size="5"/>' . $supervisorCheckIn . '</td>';
        $row = $row . '<td><input type="hidden" name="supervisorCheckOut[]" class="supervisorCheckOut" value="' . $supervisorCheckOut . '" size="5"/>' . $supervisorCheckOut . '</td>';
        $row = $row . '<td><input type="hidden" name="supervisorBreakTime[]" class="supervisorBreakTime" value="' . $supervisorBreak . '" size="5"/>' . $supervisorBreak . '</td>';
        if (empty($supervisorBreak)) {
            $supervisorBreak = 0;
        }
        $row = $row . '<td class="sup_wrk_hrs" style="color: black; font-weight:bold; text-align:center">' . calculateHoursWorked($shiftDate, $supervisorCheckIn, $supervisorCheckOut, $supervisorBreak) . '</td>';
        if ($loggedInUserType == 'ACCOUNTS') {
            $row = $row . '<td><input type="checkbox" name="pick_supervisor_time[]" class="pick_supervisor_time"/></td>';
            $row = $row . '<td><input type="text" name="shiftStart[]" class="shStart" value="" size="5"/></td>';
            $row = $row . '<td><input type="text" name="shiftEnd[]" class="shEnd" value="" size="5"/></td>';
            $row = $row . '<td><input type="text" name="workBreak[]" class="break" value="" size="3"/></td>';
            $row = $row . '<td><span class="totalHrs"></span><input type="hidden" name="wrkhrs[]" class="hrs" value="" size="5"/></td>';
        }
        $row = $row . '<td>';
        if ($clientId == 1) {
            $row = $row . '<span style="color: red; font-weight:bold; text-align:center">*</span>';
        } else {
            if (!empty($timesheetWorkHours)) {
                $row = $row . '<span style="color: #1c7430; font-weight:bold; text-align:center">' . $timesheetWorkHours . '</span>';
            } else {
                $row = $row . '<span style="color: #1B1F27; font-weight:bold; text-align:center">' . $timesheetWorkHours . '</span>';
            }
        }
        $row = $row . '</td>';
        $row = $row . '<td>' . $timeclockComments . '<br>';
        $row = $row . '<textarea type="text" name="comments[]" class="comments" cols="10" rows="2">' . $comments . '</textarea><button class="commentEdit btn btn-sm btn-info reverse" data-shift-id="' . $shiftId . '"><i class="fa fa-pencil"></i></button>';
        $row = $row . '</td>';
        $row = $row . '<td style="text-align:left">';
        if ($loggedInUserType == 'ACCOUNTS') {
            $row = $row . '<input type="checkbox" name="timeSheetTick[' . $count . ']" class="timeSheetTick" value="' . $shiftId . '"/>';
        }
        $row = $row . '</td></tr>';
        $count++;
    }
    return $row;
}

function genPayrollCheckExcel($mysqli, $clientid, $positionid, $deptid, $startDate, $endDate, $canId, $timesheetStatus)
{
    $shiftStatus = 'CONFIRMED';
    $accountsEdit = 'Y';
    if (empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                      shift.shiftId,
                                      shift.shiftDate,
                                      shift.shiftDay,
                                      shift.candidateId,
                                      shift.clientId,
                                      shift.positionId,
                                      shift.departmentId,
                                      shift.shiftStart,
                                      shift.shiftEnd,
                                      shift.workBreak,
                                      shift.wrkhrs,
                                      shift.comments,
                                      timeclock.checkIn,
                                      timeclock.checkOut,
                                      timeclock.supervisorCheckIn,
                                      timeclock.supervisorCheckOut,
                                      timeclock.workBreak AS supervisorBreak,
                                      timeclock.comment AS timeclockComments,
                                      timesheet.wrkHrs AS timesheetWorkHours
                                    FROM
                                      shift
                                    LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                    LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                    WHERE
                                      shift.clientId = ? AND 
                                      shift.positionId = ? AND
                                      shift.departmentId = ? AND
                                      shift.shiftDate BETWEEN ? AND ? AND
                                      shift.shiftStatus = ?  
                                    ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iiisss", $clientid, $positionid, $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                      shift.shiftId,
                                      shift.shiftDate,
                                      shift.shiftDay,
                                      shift.candidateId,
                                      shift.clientId,
                                      shift.positionId,
                                      shift.departmentId,
                                      shift.shiftStart,
                                      shift.shiftEnd,
                                      shift.workBreak,
                                      shift.wrkhrs,
                                      shift.comments,
                                      timeclock.checkIn,
                                      timeclock.checkOut,
                                      timeclock.supervisorCheckIn,
                                      timeclock.supervisorCheckOut,
                                      timeclock.workBreak AS supervisorBreak,
                                      timeclock.comment AS timeclockComments,
                                      timesheet.wrkHrs AS timesheetWorkHours
                                    FROM
                                      shift
                                    INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                    INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                    WHERE
                                      shift.clientId = ? AND 
                                      shift.positionId = ? AND
                                      shift.departmentId = ? AND
                                      shift.shiftDate BETWEEN ? AND ? AND
                                      shift.shiftStatus = ? AND
                                      timesheet.accountsEdit = ?  
                                    ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iiissss", $clientid, $positionid, $deptid, $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                      shift.shiftId,
                                      shift.shiftDate,
                                      shift.shiftDay,
                                      shift.candidateId,
                                      shift.clientId,
                                      shift.positionId,
                                      shift.departmentId,
                                      shift.shiftStart,
                                      shift.shiftEnd,
                                      shift.workBreak,
                                      shift.wrkhrs,
                                      shift.comments,
                                      timeclock.checkIn,
                                      timeclock.checkOut,
                                      timeclock.supervisorCheckIn,
                                      timeclock.supervisorCheckOut,
                                      timeclock.workBreak AS supervisorBreak,
                                      timeclock.comment AS timeclockComments,
                                      '' AS timesheetWorkHours
                                    FROM
                                      shift
                                    LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                    WHERE
                                      shift.clientId = ? AND 
                                      shift.positionId = ? AND
                                      shift.departmentId = ? AND
                                      shift.shiftDate BETWEEN ? AND ? AND
                                      shift.shiftStatus = ? AND
                                    NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                    ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iiisss", $clientid, $positionid, $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isss", $clientid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  timesheet.accountsEdit = ?   
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("issss", $clientid, $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isss", $clientid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisss", $positionid, $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $positionid, $deptid, $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisss", $positionid, $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isss", $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("issss", $deptid, $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isss", $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("sss", $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("ssss", $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("sss", $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisss", $clientid, $positionid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $clientid, $positionid, $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisss", $clientid, $positionid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisss", $clientid, $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $clientid, $deptid, $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisss", $clientid, $deptid, $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("sss", $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("ssss", $startDate, $endDate, $shiftStatus, $accountsEdit) or die($mysqli->error);
    } elseif (empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("sss", $startDate, $endDate, $shiftStatus) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                  shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iiissss", $clientid, $positionid, $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                  shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iiisssss", $clientid, $positionid, $deptid, $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                  shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iiissss", $clientid, $positionid, $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("issss", $clientid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isssss", $clientid, $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("issss", $clientid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $positionid, $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisssss", $positionid, $deptid, $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid <> 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.positionId = ? AND
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $positionid, $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND 
                                  shift.candidateId = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("issss", $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND 
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("isssss", $deptid, $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND 
                                  shift.candidateId = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("issss", $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("ssss", $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("sssss", $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                 NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("ssss", $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $clientid, $positionid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisssss", $clientid, $positionid, $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid <> 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.positionId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $clientid, $positionid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND 
                                  shift.candidateId = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $clientid, $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND 
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iisssss", $clientid, $deptid, $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid <> 'All') && ($positionid == 'All') && ($deptid <> 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.clientId = ? AND 
                                  shift.departmentId = ? AND
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND 
                                  shift.candidateId = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("iissss", $clientid, $deptid, $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'All')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                LEFT OUTER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? 
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("ssss", $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'Saved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  timesheet.wrkHrs AS timesheetWorkHours
                                FROM
                                 shift
                                INNER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                INNER JOIN timesheet ON (shift.shiftId = timesheet.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  timesheet.accountsEdit = ?
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("sssss", $startDate, $endDate, $shiftStatus, $canId, $accountsEdit) or die($mysqli->error);
    } elseif (!empty($canId) && ($clientid == 'All') && ($positionid == 'All') && ($deptid == 'All') && ($timesheetStatus == 'UnSaved')) {
        $sql = $mysqli->prepare("SELECT 
                                  shift.shiftId,
                                  shift.shiftDate,
                                  shift.shiftDay,
                                  shift.candidateId,
                                  shift.clientId,
                                  shift.positionId,
                                  shift.departmentId,
                                  shift.shiftStart,
                                  shift.shiftEnd,
                                  shift.workBreak,
                                  shift.wrkhrs,
                                  shift.comments,
                                  timeclock.checkIn,
                                  timeclock.checkOut,
                                  timeclock.supervisorCheckIn,
                                  timeclock.supervisorCheckOut,
                                  timeclock.workBreak AS supervisorBreak,
                                  timeclock.comment AS timeclockComments,
                                  '' AS timesheetWorkHours
                                FROM
                                 shift
                                LEFT OUTER JOIN timeclock ON (shift.shiftId = timeclock.shiftId)
                                WHERE
                                  shift.shiftDate BETWEEN ? AND ? AND
                                  shift.shiftStatus = ? AND
                                  shift.candidateId = ? AND
                                  NOT EXISTS(SELECT timesheet.wrkHrs FROM timesheet WHERE timesheet.shiftId=shift.shiftId)
                                ORDER BY shift.candidateId,shift.shiftDate ASC") or die($mysqli->error);
        $sql->bind_param("ssss", $startDate, $endDate, $shiftStatus, $canId) or die($mysqli->error);
    }

    $sql->execute();
    $sql->store_result();
    $sql->bind_result($shiftId, $shiftDate, $shiftDay, $candidateId, $clientId, $positionId, $departmentId, $shiftStart, $shiftEnd, $workBreak, $wrkhrs, $comments, $checkIn, $checkOut, $supervisorCheckIn,
        $supervisorCheckOut, $supervisorBreak, $timeclockComments, $timesheetWorkHours) or die($mysqli->error);
    $noPhone = '';
    $dataArray = array();
    while ($sql->fetch()) {
        if (displayNoPhoneIndicator($mysqli, $candidateId)) {
            $noPhone = 'NO PHONE';
        }
        if ($clientId == 1) {
            $timesheetWorkHours = '*';
        }
        if (empty($supervisorBreak)) {
            $supervisorBreak = 0;
        }
        $dataArray[] = array(
            'shiftId' => $shiftId,
            'shiftDay' => $shiftDay,
            'shiftDate' => $shiftDate,
            'candidateId' => $candidateId,
            'candidateName' => getCandidateFirstNameByCandidateId($mysqli, $candidateId) . ' ' . getCandidateLastNameByCandidateId($mysqli, $candidateId),
            'noPhone' => $noPhone,
            'client' => getClientNameByClientId($mysqli, $clientId),
            'position' => getPositionByPositionId($mysqli, $positionId),
            'department' => getDepartmentById($mysqli, $departmentId),
            'jobCode' => getJobCodeByClientPosition($mysqli, $clientId, $positionId, $departmentId),
            'shiftStart' => $shiftStart,
            'shiftEnd' => $shiftEnd,
            'rosterWorkHours' => calculateHoursWorked($shiftDate, $shiftStart, $shiftEnd, 30),
            'checkIn' => $checkIn,
            'checkOut' => $checkOut,
            'clockInWorkHours' => calculateHoursWorked($shiftDate, $checkIn, $checkOut, 30),
            'supervisorCheckIn' => $supervisorCheckIn,
            'supervisorCheckOut' => $supervisorCheckOut,
            'supervisorBreak' => $supervisorBreak,
            'supervisorWorkHours' => calculateHoursWorked($shiftDate, $supervisorCheckIn, $supervisorCheckOut, $supervisorBreak),
            'timesheetWrk' => $timesheetWorkHours,
            'timeclockComments' => $timeclockComments
        );
    }
    return $dataArray;
}

function savePayrollCheck($mysqli, $shiftId, $shiftDay, $shiftDate, $candidateId, $clid, $posid, $deptid, $jobCode, $shiftStart, $shiftEnd, $workBreak, $wrkhrs, $weekendingDate, $timeSheetTick)
{
    $statusCheck = '';
    $accountsEdit = 'Y';
    if ($jobCode == 'None') {
        $statusCheck = 'Please select a valid Job Code';
    } else {
        if (!empty($timeSheetTick) && ($clid != 'None' || $clid != NULL) && ($posid != 'None' || $posid != NULL)) {
            if (!validateTimeSheetEntry($mysqli, $shiftId)) {
                $ins = $mysqli->prepare("INSERT INTO timesheet(shiftId,shiftDate,shiftDay,candidateId,clientId,positionId,deptId,jobCode,shiftStart,shiftEnd,workBreak,wrkHrs,weekendingDate,status,accountsEdit)VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
                $ins->bind_param("isssiiissssssis", $shiftId, $shiftDate, $shiftDay, $candidateId, $clid, $posid, $deptid, $jobCode, $shiftStart, $shiftEnd, $workBreak, $wrkhrs, $weekendingDate, $timeSheetTick, $accountsEdit) or die($mysqli->error);
                $ins->execute();
                $nrows = $ins->affected_rows;
                if ($nrows > 0) {
                    $ins->free_result();
                    $timeSheetStatus = 'UPDATED';
                    $stat = updateShiftTimeSheetStatus($mysqli, $shiftId, $timeSheetStatus);
                    if ($stat) {
                        $statusCheck = 'inserted';
                    } else {
                        $statusCheck = 'error adding payroll check to timesheet';
                    }
                } else {
                    $statusCheck = $mysqli->error;
                }
            } else {
                $up = $mysqli->prepare("UPDATE timesheet SET shiftDate = ?,shiftDay = ?,candidateId = ?,clientId = ?,positionId = ?, deptId = ?, jobCode = ?,shiftStart = ?,shiftEnd = ?,workBreak = ?,wrkHrs = ?, weekendingDate = ?, status = ?, accountsEdit = ? WHERE shiftId = ?") or die($mysqli->error);
                $up->bind_param("sssiiissssssisi", $shiftDate, $shiftDay, $candidateId, $clid, $posid, $deptid, $jobCode, $shiftStart, $shiftEnd, $workBreak, $wrkhrs, $weekendingDate, $timeSheetTick, $accountsEdit, $shiftId) or die($mysqli->error);
                $up->execute();
                $nrows = $up->affected_rows;
                if ($nrows > 0) {
                    $statusCheck = 'updated';
                } else {
                    $statusCheck = 'error updating payroll check timesheet shifts' . $mysqli->error;
                }
            }
        } else {
            $statusCheck = 'please tick at least one checkbox';
        }
    }
    return $statusCheck;
}

function getNoAnswerShiftLogInfoByShiftId($mysqli, $shiftId, $status)
{

    $sql = $mysqli->prepare("SELECT consultantId,status,updatedTime FROM shiftLog WHERE shiftId = ? AND status = ?") or die($mysqli->error);
    $sql->bind_param("is", $shiftId, $status) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($consultantId, $status, $updatedTime) or die($mysqli->error);
    $sql->store_result();
    $output = '';
    while ($sql->fetch()) {
        $output = $output . getConsultantName($mysqli, $consultantId) . ' ' . $status . ' ' . $updatedTime;
    }
    return $output;
}

function calculateSMSCost($no_of_characters, $maxLengthPerMessage)
{
    $check_value = $no_of_characters / $maxLengthPerMessage;
    $sms_cost = 0;
    $one_sms_cost = 1.3;
    $dollar_value = 0.0290036;
    $no_of_recipients = 1;
    if ($check_value >= 0 && $check_value <= 1) {
        $sms_cost = $one_sms_cost * $dollar_value * $no_of_recipients;
    } else if ($check_value >= 1 && $check_value <= 2) {
        $sms_cost = $one_sms_cost * 2 * $dollar_value * $no_of_recipients;
    } else if ($check_value >= 2 && $check_value <= 3) {
        $sms_cost = $one_sms_cost * 3 * $dollar_value * $no_of_recipients;
    } else if ($check_value >= 3 && $check_value <= 4) {
        $sms_cost = $one_sms_cost * 4 * $dollar_value * $no_of_recipients;
    } else if ($check_value >= 4 && $check_value <= 5) {
        $sms_cost = $one_sms_cost * 5 * $dollar_value * $no_of_recipients;
    } else if ($check_value >= 5 && $check_value <= 6) {
        $sms_cost = $one_sms_cost * 6 * $dollar_value * $no_of_recipients;
    } else if ($check_value >= 6 && $check_value <= 7) {
        $sms_cost = $one_sms_cost * 7 * $dollar_value * $no_of_recipients;
    } else if ($check_value >= 7 && $check_value <= 8) {
        $sms_cost = $one_sms_cost * 8 * $dollar_value * $no_of_recipients;
    } else if ($check_value >= 8 && $check_value <= 9) {
        $sms_cost = $one_sms_cost * 9 * $dollar_value * $no_of_recipients;
    } else if ($check_value >= 9 && $check_value <= 10) {
        $sms_cost = $one_sms_cost * 10 * $dollar_value * $no_of_recipients;
    } else if ($check_value >= 10 && $check_value <= 11) {
        $sms_cost = $one_sms_cost * 11 * $dollar_value * $no_of_recipients;
    }
    return number_format($sms_cost, 2);
}

function getSMSLogByPeriod($mysqli, $startDate, $endDate)
{
    $direction = 'Outgoing';
    $sql = $mysqli->prepare("SELECT consultantId,sentTimeStamp,recipientName,recipientNumber,candidateId,smsMessage,smsSender,direction FROM smslog WHERE sentTimeStamp BETWEEN ? AND ? AND direction = ?") or die($mysqli->error);
    $sql->bind_param("sss", $startDate, $endDate, $direction) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($consultantId, $sentTimeStamp, $recipientName, $recipientNumber, $candidateId, $smsMessage, $smsSender, $direction) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('consultantId' => $consultantId,
            'sentTimeStamp' => $sentTimeStamp,
            'recipientName' => $recipientName,
            'recipientNumber' => $recipientNumber,
            'candidateId' => $candidateId,
            'smsMessage' => $smsMessage,
            'smsSender' => $smsSender,
            'direction' => $direction);
    }
    return $dataArray;
}

function updateCandidateFairWorkInfo($mysqli, $canId)
{
    $current_date_time = date('Y-m-d H:i:s');
    $update = $mysqli->prepare("UPDATE candidate SET fairwork_info_sent_time = ? WHERE candidateId = ?") or die($mysqli->error);
    $update->bind_param("ss", $current_date_time, $canId) or die($mysqli->error);
    $update->execute();
    $nrow = $update->affected_rows;
    if ($nrow > 0) {
        return 'added';
    } else {
        return 'error' . $mysqli->error;
    }
}

function addClientSurveyLog($mysqli, $clientId, $clientName, $clientPosition, $clientEmail)
{
    try {
        $sentTime = date('Y-m-d H:i:s');
        $sql = $mysqli->prepare("INSERT INTO client_survey_log(client_id,client_name,client_email,client_position,sent_time) VALUES(?,?,?,?,?)") or die($mysqli->error);
        $sql->bind_param("issss", $clientId, $clientName, $clientEmail, $clientPosition, $sentTime) or die($mysqli->error);
        $sql->execute();
        return $sql->insert_id;
    } catch (Exception $e) {
        $e->getMessage();
    }
}

function updateClientSurveyLog($mysqli, $logId, $fileName, $filePath)
{
    try {
        $receivedTime = date('Y-m-d H:i:s');
        $update = $mysqli->prepare("UPDATE client_survey_log SET received_time = ?, fileName = ?, filePath = ? WHERE id = ?") or die($mysqli->error);
        $update->bind_param("ssss", $receivedTime, $fileName, $filePath, $logId) or die($mysqli->error);
        $update->execute();
        $nrow = $update->affected_rows;
        if ($nrow > 0) {
            return 'updated';
        } else {
            return 'error updating' . $mysqli->error;
        }
    } catch (Exception $e) {
        return $e->getMessage();
    }
}

function getClientSurveyLog($mysqli)
{
    try {
        $sql = $mysqli->prepare("SELECT id,client_id,client_name,client_email,client_position,sent_time,received_time,fileName,filePath FROM client_survey_log ORDER BY id DESC") or die($mysqli->error);
        $sql->execute();
        $sql->bind_result($id, $client_id, $client_name, $client_email, $client_position, $sent_time, $received_time, $fileName, $filePath) or die($mysqli->error);
        $sql->store_result();
        $dataArray = array();
        while ($sql->fetch()) {
            $dataArray[] = array('id' => $id,
                'client' => getClientNameByClientId($mysqli, $client_id),
                'client_name' => $client_name,
                'client_email' => $client_email,
                'client_position' => $client_position,
                'sent_time' => $sent_time,
                'received_time' => $received_time,
                'fileName' => $fileName,
                'filePath' => $filePath);
        }
        return $dataArray;
    } catch (Exception $e) {
        $e->getMessage();
    }
}
function jobAdderAuth(){
    // build endpoint
    $base_url = 'https://id.jobadder.com/connect/authorize';
    $version = 'v1/';
    $auth_endpoint = 'oauth2/authorize';
    $auth_url = $base_url;
    try {
        $bytes = random_bytes(10);
        $state = bin2hex($bytes);
    } catch (Exception $e) {
        echo 'Error: ' . $e->getMessage();
    }
    $url = $auth_url."?"
        ."state=".$state
        ."&response_type=code"
        ."&client_id=". CLIENT_ID
        ."&scope=offline_access read_candidate read_contact read_placement read_company"
        ."&redirect_uri=". CALLBACK_URL;
    return $url;
}
function jobAdderConnect($access_token,$base_url,$query_url){
    try {
        $curl = curl_init();
        curl_setopt_array($curl, [
            CURLOPT_HTTPHEADER => [
                "Authorization: Bearer " . $access_token
            ],
            CURLOPT_URL => $base_url . $query_url,
            CURLOPT_RETURNTRANSFER => true
        ]);
        $curl_response = curl_exec($curl);
        if ($curl_response === false) {
            $info = curl_getinfo($curl);
            curl_close($curl);
            die('Error occurred during curl exec. Additional info: ' . var_export($info));
        }
        curl_close($curl);
        return json_decode($curl_response);
    }catch(\Exception $e){
        $e->getMessage();
    }
}
function getAuditStatusByEmail($mysqli, $email)
{
    $sql = $mysqli->prepare("SELECT auditStatus FROM candidate WHERE email = ?") or die($mysqli->error);
    $sql->bind_param("s", $email) or die($mysqli->error);
    $sql->execute();
    $obj = $sql->get_result()->fetch_object();
    if ($obj) {
        $auditStatus = $obj->auditStatus;
    } else {
        $auditStatus = null;
    }
    if ($auditStatus == '1') {
        return 'AUDIT COMPLETE';
    } else {
        return 'AUDIT INCOMPLETE';
    }
}

function updateStaffVerificationCode($mysqli,$user_name,$verification_code){
    $up = $mysqli->prepare("UPDATE candidate SET verification_code = ? WHERE email = ?") or die($mysqli->error);
    $up->bind_param("ss", $verification_code, $user_name) or die($mysqli->error);
    $up->execute();
    $nrow = $up->affected_rows;
    if ($nrow == '1') {
        $up->free_result();
        return true;
    } else {
        return false;
    }
}
function validateStaffVerificationCode($mysqli, $user_name, $vCode)
{
    try {
        $sql = $mysqli->prepare("SELECT candidateId FROM candidate WHERE verification_code = ? AND email = ?") or die($mysqli->error);
        $sql->bind_param("ss", $vCode, base64_decode($user_name)) or die($mysqli->error);
        $sql->execute();
        $sql->store_result();
        $sql->fetch();
        $num_of_rows = $sql->num_rows;
        if ($num_of_rows > 0) {
            return true;
        } else {
            return false;
        }
    } catch (Exception $e) {
        return $e->getMessage();
    }
}
function generateStaffVerificationNotification($emailAddress, $cc, $bcc, $mailSubject, $from, $fromName, $mailBody, $file, $terms)
{
    require '../includes/PHPMailer-master/src/Exception.php';
    require '../includes/PHPMailer-master/src/PHPMailer.php';
    require '../includes/PHPMailer-master/src/SMTP.php';
    $mail = new PHPMailer();
    $mail->CharSet = "utf-8";
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Username = DEFAULT_EMAIL_USERNAME;
    $mail->Password = DEFAULT_EMAIL_PASSWORD;
    $mail->SMTPSecure = "tls";
    $mail->SMTPOptions = array(
        'ssl' => array(
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        )
    );
    $mail->Host = "email-smtp.ap-southeast-2.amazonaws.com";
    $mail->Port = 587;
    $mail->setFrom($from, $fromName);
    $mail->AddAddress($emailAddress);
    if (!empty($cc)) {
        $mail->AddCC($cc);
    }
    if (!empty($bcc)) {
        $mail->AddBCC($bcc);
    }
    $mail->Subject = $mailSubject;
    $mail->IsHTML(true);
    $mail->Body = $mailBody;
    $mail->AddAttachment($file);
    $mail->AddAttachment($terms);
    $mail->send();
    if ($mail) {
        return "MAILSENT";
    } else {
        return "FAILURE";
    }
}
function validateStaffPlacementInfo($mysqli, $placement_id)
{
    try {
        $sql = $mysqli->prepare("SELECT placement_id FROM placement_info WHERE placement_id = ?") or die($mysqli->error);
        $sql->bind_param("i", $placement_id) or die($mysqli->error);
        $sql->execute();
        $sql->store_result();
        $sql->fetch();
        $num_of_rows = $sql->num_rows;
        if ($num_of_rows > 0) {
            return true;
        } else {
            return false;
        }
    } catch (Exception $e) {
        return $e->getMessage();
    }
}
function addPlacementInfo($mysqli,
                    $placement_id,
                    $candidate_id,
                    $candidate_name,
                    $candidate_mobile,
                    $candidate_email,
                    $candidate_dob,
                    $job_detail_name,
                    $job_title,
                    $work_place_address,
                    $approver_name,
                    $approver_email,
                    $placement_period_type,
                    $placement_period_start_date,
                    $placement_period_end_date,
                    $billing_name,
                    $billing_email,
                    $billing_address,
                    $billing_terms,
                    $pay_rate,
                    $charge_rate,
                    $net_margin,
                    $award){
    try{

            $sql = $mysqli->prepare("INSERT INTO placement_info (placement_id,
                    jobadder_id,        
                    candidate_name,
                    candidate_mobile,
                    candidate_email,
                    candidate_dob,
                    job_detail_name,
                    job_title,
                    work_place_address,
                    approver_name,
                    approver_email,
                    placement_period_type,
                    placement_period_start_date,
                    placement_period_end_date,
                    billing_name,
                    billing_email,
                    billing_address,
                    billing_terms,
                    pay_rate,
                    charge_rate,
                    net_margin,
                    award) VALUES(?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?,
                    ?)") or die($mysqli->error);
            $sql->bind_param("iissssssssssssssssssss", $placement_id,
                $candidate_id,
                $candidate_name,
                $candidate_mobile,
                $candidate_email,
                $candidate_dob,
                $job_detail_name,
                $job_title,
                $work_place_address,
                $approver_name,
                $approver_email,
                $placement_period_type,
                $placement_period_start_date,
                $placement_period_end_date,
                $billing_name,
                $billing_email,
                $billing_address,
                $billing_terms,
                $pay_rate,
                $charge_rate,
                $net_margin,
                $award) or die($mysqli->error);
            $sql->execute();
            $nrow = $sql->affected_rows;
            if ($nrow > 0) {
                return true;
            } else {
                return $mysqli->error;
            }

    }catch(\Exception $e){
        return $e->getMessage();
    }
}
function getPlacementInfoByJobAdderId($mysqli,$jobAdderId){
    $sql = $mysqli->prepare("SELECT placement_id,
                    jobadder_id,        
                    candidate_name,
                    candidate_mobile,
                    candidate_email,
                    candidate_dob,
                    job_detail_name,
                    job_title,
                    work_place_address,
                    approver_name,
                    approver_email,
                    placement_period_type,
                    placement_period_start_date,
                    placement_period_end_date,
                    billing_name,
                    billing_email,
                    billing_address,
                    billing_terms,
                    pay_rate,
                    charge_rate,
                    net_margin,
                    award FROM placement_info WHERE jobadder_id = ?") or die($mysqli->error);
    $sql->bind_param("i", $jobAdderId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($placement_id,
        $jobadder_id,
        $candidate_name,
        $candidate_mobile,
        $candidate_email,
        $candidate_dob,
        $job_detail_name,
        $job_title,
        $work_place_address,
        $approver_name,
        $approver_email,
        $placement_period_type,
        $placement_period_start_date,
        $placement_period_end_date,
        $billing_name,
        $billing_email,
        $billing_address,
        $billing_terms,
        $pay_rate,
        $charge_rate,
        $net_margin,
        $award) or die($mysqli->error);
    $sql->store_result();
    $dataArray = array();
    while ($sql->fetch()) {
        $dataArray[] = array('placement_id' => $placement_id,
            'jobadder_id' => $jobadderId,
            'candidate_name' => $candidate_name,
            'candidate_mobile' => $candidate_mobile,
            'candidate_email' => $candidate_email,
            'candidate_dob' => $candidate_dob,
            'job_detail_name' => $job_detail_name,
            'job_title' => $job_title,
            'work_place_address' => $work_place_address,
            'approver_name' => $approver_name,
            'approver_email' => $approver_email,
            'placement_period_type' => $placement_period_type,
            'placement_period_start_date' => $placement_period_start_date,
            'placement_period_end_date' => $placement_period_end_date,
            'billing_name' => $billing_name,
            'billing_email' => $billing_name,
            'billing_address' => $billing_address,
            'billing_terms' => $billing_terms,
            'pay_rate' => $pay_rate,
            'charge_rate' => $charge_rate,
            'net_margin' => $net_margin,
            'award' => $award);
    }
    return $dataArray;
}
function getJobAdderIdByCandidateId($mysqli, $canId){
    $stmt = $mysqli->prepare("SELECT jobadderId FROM candidate WHERE candidateId = ?") or die($mysqli->error);
    $stmt->bind_param("s", $canId) or die($mysqli->error);
    $stmt->execute();
    $obj = $stmt->get_result()->fetch_object();
    if ($obj) {
        return $obj->jobadderId;
    } else {
        return null;
    }
}
function getAssignedClientsForJobAdder($mysqli,$canId)
{
    $clientStatus = 'ACTIVE';
    $sql = $mysqli->prepare("SELECT employee_allocation.clientId,client.client 
                    FROM employee_allocation
                       INNER JOIN client ON (client.clientId = employee_allocation.clientId)
                       WHERE client.clientStatus = ? 
                       AND employee_allocation.candidateId = ?
                       ORDER BY client ASC") or die($mysqli->error);
    $sql->bind_param("ss", $clientStatus,$canId) or die($mysqli->error);
    $sql->execute();
    $sql->bind_result($clientId, $client) or die($mysqli->error);
    $option = '';
    while ($sql->fetch()) {
        $option = $option . '<option value="' . $clientId . '">' . $client . '</option>';
    }
    return $option;
}
function updateTimeClock($mysqli,$candidateId,$start_date,$end_date,$clientId,$stateId,$deptId,$positionId){
    try {
        $sql = $mysqli->prepare("SELECT 
                                    shiftId,shiftDate,shiftDay,clientId,stateId,departmentId,positionId,candidateId,shiftStart,shiftEnd,workBreak,wrkhrs 
                             FROM 
                                 shift 
                             WHERE candidateId = ? AND 
                                   shiftDate BETWEEN ? AND ? AND
                                   clientId = ? AND
                                   stateId = ? AND 
                                   departmentId = ? AND
                                   positionId = ?") or die($mysqli->error);
        $sql->bind_param("sssiiii", $candidateId, $start_date, $end_date, $clientId, $stateId, $deptId, $positionId) or die($mysqli->error);
        $sql->execute();
        $sql->bind_result($shiftId, $shiftDate, $shiftDay, $clientId, $stateId, $departmentId,$positionId, $candidateId, $shiftStart, $shiftEnd, $workBreak, $wrkhrs) or die($mysqli->error);
        $sql->store_result();
        while ($sql->fetch()) {
            if (!validateTimeClock($mysqli, $shiftId)) {
                addToTimeclock($mysqli, $shiftId, $shiftDate, $shiftDay, $clientId, $departmentId,$positionId, $candidateId, $shiftStart, $shiftEnd, $workBreak, $wrkhrs);
            }
        }
        return 'Saved Timesheet information finalised';
    }catch(Exception $e){
        $e->getMessage();
        return 'Error updating timesheet information';
    }
}
function validateTimeClock($mysqli, $shiftId){
    try {
        $sql = $mysqli->prepare("SELECT id FROM timeclock WHERE shiftId = ?") or die($mysqli->error);
        $sql->bind_param("i", $shiftId) or die($mysqli->error);
        $sql->execute();
        $sql->store_result();
        $sql->fetch();
        $num_of_rows = $sql->num_rows;
        if ($num_of_rows > 0) {
            return true;
        } else {
            return false;
        }
    } catch (Exception $e) {
        return $e->getMessage();
    }
}
function addToTimeclock($mysqli, $shiftId, $shiftDate, $shiftDay, $clientId, $departmentId,$positionId, $candidateId, $shiftStart, $shiftEnd, $workBreak, $wrkhrs){
    $sql = $mysqli->prepare("INSERT INTO timeclock(shiftId,candidateId,shiftDate,shiftDay,clientId,positionId,deptId,checkIn,checkOut,workBreak,wrkhrs) 
                                    VALUES(?,?,?,?,?,?,?,?,?,?,?)") or die($mysqli->error);
    $sql->bind_param("isssiiissss", $shiftId,$candidateId,$shiftDate,$shiftDay,$clientId,$positionId,$departmentId,$shiftStart,$shiftEnd,$workBreak,$wrkhrs) or die($mysqli->error);
    $sql->execute();
    $nrows = $sql->affected_rows;
    if ($nrows == '1') {
        return true;
    } else {
        return false;
    }
}
?>